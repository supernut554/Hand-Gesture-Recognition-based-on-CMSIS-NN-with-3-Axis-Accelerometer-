/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 02.06.2021 14:06:30

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 288;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[20] = { 0.58399802446365356, -0.14983896911144257, -0.32004052400588989, 0.15338188409805298, 0.084632977843284607, -0.14307738840579987, 0.10409927368164062, 0.21774968504905701, -0.033132985234260559, 0.32721787691116333, -0.30940172076225281, -0.012501975521445274, 0.11606326699256897, 0.31066995859146118, 0.24001151323318481, 0.13278156518936157, -0.092626824975013733, -0.19616055488586426, 0.13964399695396423, -0.45230615139007568, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const ALIGN(8) float tensor_data2[10] = { 0.26422274112701416, -0.12727297842502594, -0.28303688764572144, -0.37144166231155396, 0.41393551230430603, 0.40306606888771057, 0.4897969663143158, -0.44911873340606689, -0.1405700147151947, -0.34545803070068359, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(8) float tensor_data3[7] = { -0.20380599796772003, -0.1175466850399971, 0.34520149230957031, -0.33819997310638428, 0.089510977268218994, 0.037557076662778854, 0.28132385015487671, };
const TfArray<1, int> tensor_dimension3 = { 1, { 7 } };
const ALIGN(8) float tensor_data4[20*33] = { 
  -0.094615526497364044, -0.018523853272199631, -0.028151525184512138, 0.56529766321182251, 0.090278439223766327, 0.59111392498016357, -0.18585756421089172, 0.026783287525177002, -0.078582175076007843, -0.013910830952227116, 0.12754745781421661, -0.12369941174983978, -0.018982037901878357, 0.32934185862541199, 0.74804121255874634, 0.38848197460174561, 0.74030506610870361, -0.016144705936312675, 0.33793413639068604, -0.27859842777252197, 0.18151456117630005, -0.20744742453098297, 0.34011554718017578, 0.26948565244674683, -0.18682660162448883, 0.28277435898780823, -0.18686643242835999, 0.6175915002822876, -0.053922601044178009, 0.08681170642375946, -0.20125545561313629, -0.39289373159408569, -0.12874455749988556, 
  -0.078427128493785858, -0.13667377829551697, -0.24047133326530457, -0.084886163473129272, 0.11518906801939011, 0.37101081013679504, 0.16344632208347321, 0.13802984356880188, -0.26705741882324219, 0.07373327761888504, 0.187186598777771, -0.30534812808036804, -0.41837048530578613, -0.42550522089004517, -0.21065798401832581, -0.21635541319847107, -0.049242511391639709, -0.45807024836540222, 0.20178098976612091, 0.058612145483493805, -0.028775442391633987, -0.29988551139831543, -0.40871813893318176, -0.43879130482673645, -0.095119833946228027, -0.27910697460174561, 0.2004503458738327, 0.22606991231441498, -0.26431304216384888, 0.051846358925104141, 0.25606793165206909, 0.33222562074661255, -0.14577646553516388, 
  -0.015320325270295143, -0.58386385440826416, -0.23653264343738556, -0.19688047468662262, -0.11093668639659882, -0.19359850883483887, -0.34119138121604919, 0.12572354078292847, -0.035939346998929977, 0.10846719890832901, -0.03009711392223835, -0.16150318086147308, -0.42101055383682251, -0.17277318239212036, -0.10732840746641159, -0.33073210716247559, -0.50694715976715088, -0.068627141416072845, 0.2759672999382019, -0.16085763275623322, 0.19763225317001343, 0.035429760813713074, -0.25850144028663635, -0.16211813688278198, -0.22292229533195496, -0.14996035397052765, -0.034089349210262299, -0.48138463497161865, -0.14119772613048553, -0.0099178198724985123, -0.23253417015075684, 0.21106471121311188, -0.18632461130619049, 
  -0.2280297726392746, 0.089991919696331024, -0.090254552662372589, 0.21878233551979065, 0.064814984798431396, 0.037541728466749191, -0.092340461909770966, 0.11935773491859436, -0.015469037927687168, 0.2072751373052597, 0.17340487241744995, -0.17977920174598694, 0.32783615589141846, 0.24024377763271332, 0.16059960424900055, -0.073546953499317169, 0.057542316615581512, -2.8510346965049393e-05, 0.1906295120716095, 0.17935745418071747, -0.23941455781459808, -0.15389019250869751, 0.40064436197280884, 0.14150848984718323, 0.0707273930311203, 0.43964239954948425, -0.031646586954593658, -0.090938694775104523, 0.32817038893699646, -0.01511914748698473, -0.028542542830109596, 0.20674557983875275, -0.017844084650278091, 
  -0.054770216345787048, 0.17952370643615723, -0.24681054055690765, 0.22942769527435303, 0.086764693260192871, 0.26001283526420593, -0.22877398133277893, -0.22842556238174438, -0.087896980345249176, -0.022105030715465546, -0.13786883652210236, 0.075318597257137299, 0.13136489689350128, 0.005014343187212944, -0.20504739880561829, 0.11849156767129898, -0.11981825530529022, -0.0094820978119969368, 0.07139868289232254, 0.14409427344799042, 0.038782238960266113, -0.20107559859752655, -0.078547164797782898, 0.14865389466285706, 0.02462979219853878, -0.098561778664588928, 0.38382366299629211, 0.12760061025619507, 0.44082739949226379, -0.027646420523524284, 0.0021750892046838999, -0.092820852994918823, -0.071817338466644287, 
  0.12480322271585464, -0.20078130066394806, -0.01161311287432909, -0.41247409582138062, -0.12941505014896393, -0.17151707410812378, -0.02429812029004097, 0.23906022310256958, -0.032079476863145828, -0.076858624815940857, -0.25143775343894958, -0.10271715372800827, 0.52659422159194946, -0.060245148837566376, -0.050030086189508438, 0.071261487901210785, -0.5601540207862854, 0.28914952278137207, 0.30542385578155518, 0.21854478120803833, -0.061308134347200394, -0.20301224291324615, 0.014991809614002705, -0.043833810836076736, -0.1164732500910759, -0.00092795846285298467, -0.13751529157161713, -0.43770697712898254, 0.18696042895317078, 0.085791915655136108, 0.079532042145729065, 0.33602288365364075, -0.080878958106040955, 
  -0.17725841701030731, 0.46312379837036133, 0.13766215741634369, 0.048290636390447617, -0.17677523195743561, -0.06348862498998642, 0.22499629855155945, -0.19612438976764679, -0.29219314455986023, 0.084109604358673096, -0.055474430322647095, -0.18702666461467743, -0.14607438445091248, -0.16079562902450562, 0.34358799457550049, 0.12279275059700012, -0.079251706600189209, 0.1769707202911377, 0.088489226996898651, -0.18103925883769989, 0.0607747882604599, -0.014560346491634846, 0.33679705858230591, -0.14652812480926514, 0.17030578851699829, 0.082491546869277954, -0.24175769090652466, 0.10284428298473358, 0.082296110689640045, -0.10655107349157333, 0.1239863857626915, -0.1424901932477951, -0.41759374737739563, 
  -0.0071186390705406666, 0.59360909461975098, -0.052244417369365692, -0.17411801218986511, -0.24105797708034515, 0.41738998889923096, 0.091703027486801147, -0.2107042670249939, 0.32770851254463196, -0.19444270431995392, 0.046713516116142273, -0.10073400288820267, 0.013868782669305801, -0.065569229423999786, -0.22634449601173401, -0.029110383242368698, 0.13404823839664459, -0.13514801859855652, 0.18112155795097351, 0.046965345740318298, -0.082980245351791382, -0.34925863146781921, -0.23069779574871063, 0.21275089681148529, 0.039587203413248062, -0.16408438980579376, 0.12814714014530182, 0.17300905287265778, 0.10863226652145386, 0.20053091645240784, -0.37251919507980347, 0.29084613919258118, -0.42594334483146667, 
  0.048156723380088806, -0.046888425946235657, 0.013768029399216175, -0.073593884706497192, 0.20191624760627747, 0.1745169460773468, -0.15112185478210449, -0.29848504066467285, -0.049254108220338821, -0.22246971726417542, -0.17438352108001709, 0.26615798473358154, -0.20455664396286011, -0.16721831262111664, -0.074744835495948792, -0.22575205564498901, 0.15132260322570801, -0.17792950570583344, 0.036852229386568069, -0.11535950005054474, -0.0258896853774786, -0.15230771899223328, -0.10032683610916138, -0.38856974244117737, -0.18105897307395935, 0.33483606576919556, -0.15802198648452759, 0.2383677214384079, 0.27241486310958862, -0.061821114271879196, -0.087036095559597015, 0.12704534828662872, -0.008389301598072052, 
  -0.022692535072565079, 0.38540580868721008, 0.081130661070346832, 0.21916945278644562, -0.37062972784042358, 0.18230190873146057, -0.093400418758392334, -0.13262130320072174, 0.085661143064498901, -0.20034205913543701, -0.26705813407897949, -0.015616326592862606, 0.12922120094299316, 0.080529794096946716, 0.17510201036930084, -0.079302042722702026, 0.33928599953651428, 0.38704138994216919, 0.27017956972122192, -0.19276614487171173, 0.16922803223133087, -0.1242448091506958, 0.0096502378582954407, 0.69995182752609253, 0.2902618944644928, -0.098846063017845154, -0.20821741223335266, 0.048344720155000687, 0.28067898750305176, 0.22386434674263, -0.38877514004707336, 0.046774458140134811, -0.14186994731426239, 
  -0.47319316864013672, -0.61560142040252686, -0.61396998167037964, -0.60318499803543091, 0.1980266273021698, -0.13276407122612, -0.13528847694396973, -0.037489980459213257, -0.025396188721060753, 0.26351055502891541, -0.23718962073326111, 0.030282886698842049, -0.31560873985290527, 0.0015948399668559432, -0.29974132776260376, -0.430926114320755, -0.34685772657394409, 0.047046400606632233, -0.20097255706787109, -0.098983809351921082, -0.34496986865997314, -0.19998970627784729, 0.040902372449636459, -0.61151134967803955, -0.37995994091033936, -0.17501266300678253, -0.26301446557044983, 0.00682841707020998, -0.023391678929328918, -0.32790893316268921, 0.28404501080513, -0.10740009695291519, -0.2130836546421051, 
  0.23603305220603943, 0.13516226410865784, -0.1178121417760849, 0.20135833323001862, 0.066063784062862396, 0.41597947478294373, 0.10319507122039795, 0.014477563090622425, 0.13767282664775848, 0.098450526595115662, 0.040430519729852676, 0.17682904005050659, -0.16039958596229553, -0.31275767087936401, -0.0045843245461583138, 0.10501524806022644, 0.22875672578811646, 0.022970709949731827, 0.060829918831586838, 0.12856455147266388, 0.10036230087280273, -0.29271784424781799, -0.080215074121952057, -0.10107471793889999, 0.16684336960315704, -0.17827565968036652, 0.069510556757450104, 0.41775879263877869, -0.23013909161090851, 0.18173359334468842, -0.19692593812942505, 0.11185032874345779, -0.17772956192493439, 
  0.26208144426345825, 0.59426343441009521, 0.22653238475322723, -0.016810154542326927, 0.36416745185852051, -0.23961016535758972, 0.30246248841285706, -0.16370721161365509, -0.11366705596446991, 0.15729644894599915, 0.2348095178604126, -0.001758381025865674, 0.081270739436149597, 0.45816957950592041, 0.37427252531051636, -0.20896084606647491, 0.15460765361785889, 0.096017293632030487, -0.36507847905158997, -0.13968424499034882, -0.28062611818313599, 0.073421351611614227, 0.43057426810264587, 0.04370606318116188, -0.073163643479347229, 0.068908996880054474, -0.28168514370918274, 0.11635669320821762, 0.35516712069511414, -0.098678313195705414, 0.22603270411491394, -0.11567498743534088, -0.30510413646697998, 
  0.20796534419059753, 0.43261086940765381, 0.026096617802977562, 0.56086856126785278, 0.28709357976913452, 0.2101815938949585, 0.39688065648078918, -0.040256250649690628, 0.18372409045696259, 0.19882994890213013, 0.42216229438781738, 0.33965262770652771, 0.39923644065856934, -0.068007111549377441, 0.0742606520652771, 0.15772020816802979, 0.12494971603155136, -0.1469152569770813, 0.17999811470508575, 0.18173107504844666, -0.42919313907623291, -0.29071280360221863, 0.16756699979305267, 0.10473326593637466, -0.32522419095039368, 0.50663131475448608, 0.27184233069419861, 0.28976026177406311, 0.33610901236534119, -0.038176842033863068, -0.19283394515514374, 0.25346642732620239, 0.066873274743556976, 
  -0.25652608275413513, -0.1472775787115097, 0.21155838668346405, 0.044168610125780106, 0.25880414247512817, -0.012662862427532673, 0.23883461952209473, 0.24092836678028107, 0.10869941115379333, 0.02473946288228035, -0.70041155815124512, 0.13609039783477783, 0.060312099754810333, 0.12495879083871841, 0.062043797224760056, 0.067919038236141205, -0.26117751002311707, 0.073870792984962463, 0.023109210655093193, -0.060179635882377625, -0.00038680504076182842, 0.072296395897865295, -0.042000807821750641, 0.39164447784423828, 0.36304736137390137, 0.18908795714378357, -0.30252236127853394, 0.22213847935199738, -0.11735041439533234, 0.041523464024066925, 0.051787540316581726, -0.036752909421920776, 0.23852734267711639, 
  0.0067546744830906391, 0.55036258697509766, 0.099454902112483978, 0.20195813477039337, 0.098879620432853699, 0.5311245322227478, -0.020322287455201149, 0.023480195552110672, 0.25574696063995361, 0.34440878033638, -0.13506416976451874, 0.19082744419574738, 0.046068906784057617, -0.083601929247379303, 0.44822841882705688, -0.22314026951789856, 0.09468977153301239, 0.25647780299186707, 0.19586579501628876, 0.15805806219577789, 0.14038288593292236, 0.080296501517295837, 0.13122758269309998, -0.12984338402748108, -0.11300051212310791, 0.090829387307167053, 0.13997295498847961, 0.23678791522979736, -0.057871446013450623, 0.091092996299266815, -0.24843384325504303, -0.23641195893287659, -0.2549268901348114, 
  -0.3481738269329071, 0.20151875913143158, 0.10300455987453461, -0.040789376944303513, -0.10637231916189194, -0.093989722430706024, -0.12941749393939972, -0.28228291869163513, -0.13029469549655914, 0.0029495768249034882, -0.093770839273929596, -0.37484991550445557, -0.26154640316963196, -0.40479731559753418, -0.30871650576591492, 0.046822052448987961, 0.14179243147373199, 0.053577624261379242, -0.3864608108997345, -0.13859644532203674, -0.27463990449905396, -0.39816826581954956, -0.25983378291130066, 0.17511411011219025, 0.096008963882923126, 0.037077698856592178, -0.19477598369121552, -0.053524017333984375, 0.21963904798030853, 0.1884787529706955, -0.084053538739681244, -0.19462138414382935, -0.1238996833562851, 
  -0.19875042140483856, -0.16543029248714447, -0.43562674522399902, -0.53326213359832764, 0.31452003121376038, -0.17843052744865417, 0.072965405881404877, 0.2545798122882843, -0.22609817981719971, 0.029289765283465385, 0.11990060657262802, -0.020500633865594864, -0.052845824509859085, -0.35866057872772217, -0.24574409425258636, -0.085907980799674988, 0.10388360917568207, -0.10538965463638306, -0.25056099891662598, 0.15259233117103577, -0.29481258988380432, -0.13505461812019348, 0.084509000182151794, -0.38444256782531738, 0.15201051533222198, -0.21222773194313049, -0.21443642675876617, 0.16014325618743896, 0.18785135447978973, 0.062656544148921967, 0.097778886556625366, -0.023242805153131485, 0.035275325179100037, 
  -0.28441369533538818, 0.16310903429985046, 0.30302178859710693, 0.1945519745349884, 0.062438152730464935, 0.091180913150310516, -0.079242907464504242, -0.10577405989170074, -0.18608585000038147, -0.20911593735218048, -0.51607835292816162, -0.23659618198871613, 0.50995445251464844, -0.037951081991195679, -0.27407655119895935, 0.14353792369365692, -0.2450021505355835, -0.016540959477424622, -0.17628565430641174, -0.10606046766042709, 0.12895806133747101, -0.33982130885124207, -0.058313522487878799, 0.55762392282485962, -0.12087809294462204, -0.19363674521446228, 0.0074801635928452015, -0.1507241427898407, -0.0056840428151190281, -0.046879548579454422, 0.1866130530834198, 0.065019719302654266, 0.19034329056739807, 
  -0.090943984687328339, -0.17150105535984039, 0.27900314331054688, -0.33004468679428101, -0.037244141101837158, -0.37988746166229248, -0.061845563352108002, -0.098569557070732117, 0.37712934613227844, 0.37396404147148132, 0.075731724500656128, 0.07849748432636261, -0.25836330652236938, -0.33734121918678284, -0.040470574051141739, 0.010712995193898678, -0.19492487609386444, -0.3593040406703949, 0.043703619390726089, -0.071007825434207916, -0.06024535745382309, 0.22115033864974976, 0.32481834292411804, -0.68434876203536987, 0.2529982328414917, -0.024441961199045181, 0.093919232487678528, -0.1357233077287674, -0.18473410606384277, -0.11255072057247162, -0.078584581613540649, -0.0017856443300843239, 0.33912885189056396, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(8) float tensor_data5[10*20] = { 
  -0.185710608959198, 0.0099082030355930328, 0.15550993382930756, 0.080207392573356628, 0.52330780029296875, -0.31523889303207397, 0.073686286807060242, -0.17098250985145569, 0.05587826669216156, -0.071546867489814758, -0.12632136046886444, -0.22146347165107727, 0.33971208333969116, 0.23099792003631592, -0.14051756262779236, 0.028213204815983772, -0.37702995538711548, -0.14109629392623901, -0.39630600810050964, 0.0051551028154790401, 
  -0.28059786558151245, 0.044609900563955307, -0.39849859476089478, 0.18052507936954498, 0.031521864235401154, -0.002745988080278039, 0.27714607119560242, -0.4824652373790741, -0.24860699474811554, -0.31314638257026672, 0.027431445196270943, -0.36858779191970825, -0.1447988897562027, -0.098069638013839722, -0.41332092881202698, -0.43998816609382629, -0.30829796195030212, 0.22551403939723969, 0.15187075734138489, -0.33309245109558105, 
  -0.36939552426338196, 0.274586021900177, -0.074773833155632019, -0.19199207425117493, 0.43212416768074036, -0.027144992724061012, 0.030699245631694794, -0.23854252696037292, 0.1460452675819397, 0.18117654323577881, -0.27880626916885376, -0.25519236922264099, 0.050720524042844772, -0.36185446381568909, 0.068715207278728485, -0.097432196140289307, -0.061899229884147644, 0.41582843661308289, -0.43334746360778809, -0.1871875524520874, 
  -0.34072005748748779, -0.056757543236017227, -0.43596702814102173, -0.29686376452445984, -0.25895640254020691, 0.18945670127868652, 0.159086674451828, 0.41899225115776062, 0.17601817846298218, -0.29482975602149963, 0.36595621705055237, 0.017010737210512161, -0.014183379709720612, -0.18245375156402588, -0.052751142531633377, 0.26496955752372742, 0.16262835264205933, 0.17297124862670898, 0.10195300728082657, -0.28467461466789246, 
  0.024497997015714645, 0.079632796347141266, -0.23079976439476013, -0.30475544929504395, -0.667022705078125, 0.41170585155487061, 0.043385524302721024, -0.0022919694893062115, -0.2310369610786438, 0.49104791879653931, 0.12130384892225266, -0.38945996761322021, -0.24210384488105774, 0.20240786671638489, -0.029998684301972389, -0.013530581258237362, 0.14801293611526489, -0.2745736837387085, 0.38285413384437561, 0.11029089242219925, 
  0.32102444767951965, 0.37163233757019043, -0.27147233486175537, 0.061517093330621719, -0.36392197012901306, -0.052255090326070786, 0.14741720259189606, -0.10711617767810822, 0.44940876960754395, -0.36037006974220276, -0.38722565770149231, 0.36444079875946045, -0.27958479523658752, 0.18619628250598907, -0.27085605263710022, 0.32740104198455811, -0.29758751392364502, 0.059715364128351212, -0.34028762578964233, 0.15466365218162537, 
  0.29408913850784302, -0.21080905199050903, -0.084682591259479523, 0.35645017027854919, 0.33734816312789917, -0.12076839059591293, -0.11950662732124329, 0.14228324592113495, 0.066454239189624786, 0.25457325577735901, -0.213703453540802, 0.17139294743537903, -0.16847468912601471, 0.0090025654062628746, 0.022445423528552055, -0.016309600323438644, 0.20847617089748383, -0.22377167642116547, 0.037600550800561905, -0.34907636046409607, 
  -0.15917795896530151, 0.40239346027374268, -0.2273399829864502, -0.33508908748626709, -0.13783596456050873, -0.053892731666564941, -0.26496908068656921, -0.33206912875175476, 0.34191149473190308, 0.25116738677024841, 0.25584745407104492, 0.30092048645019531, -0.13634715974330902, 0.046322859823703766, -0.11954030394554138, -0.21884515881538391, -0.21590770781040192, 0.079615086317062378, -0.12914155423641205, 0.09440651535987854, 
  -0.36042815446853638, 0.21918269991874695, 0.010302301496267319, 0.13535819947719574, 0.20476551353931427, -0.069543488323688507, 0.29181522130966187, -0.37046864628791809, -0.10981521755456924, -0.27653467655181885, 0.13784016668796539, 0.313346266746521, 0.38409468531608582, 0.34725913405418396, -0.10490451753139496, 0.087917380034923553, -0.41190728545188904, 0.3247169554233551, -0.090414941310882568, 0.042667105793952942, 
  -0.041352260857820511, 0.083604589104652405, 0.13581961393356323, 0.29826259613037109, -0.060526978224515915, 0.24044746160507202, 0.38695031404495239, -0.27756583690643311, 0.31540420651435852, -0.15639366209506989, -0.21760125458240509, 0.21118099987506866, -0.51144319772720337, -0.14565792679786682, -0.37163424491882324, 0.19136606156826019, 0.32280263304710388, 0.30549532175064087, -0.14027297496795654, 0.44055125117301941, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(8) float tensor_data6[7*10] = { 
  -0.57634425163269043, 0.44752773642539978, 0.29443684220314026, 0.27128151059150696, -0.19707868993282318, -0.58796954154968262, 0.48388603329658508, -0.52918010950088501, 0.39122548699378967, 0.10474602878093719, 
  0.34642747044563293, 0.034978687763214111, 0.038039717823266983, 0.32416725158691406, -0.41685184836387634, 0.21246415376663208, -0.2282184362411499, -0.360068678855896, -0.40045252442359924, 0.40898838639259338, 
  -0.54038113355636597, 0.40896123647689819, -0.064775101840496063, 0.034334003925323486, -0.085190810263156891, 0.55493730306625366, -0.38453710079193115, 0.07064385712146759, 0.37199530005455017, -0.38368496298789978, 
  -0.37983733415603638, -0.33949175477027893, 0.038519948720932007, -0.18709535896778107, -0.28160062432289124, -0.36546239256858826, -0.20968639850616455, 0.4238797128200531, 0.22476565837860107, 0.48406150937080383, 
  0.031288404017686844, 0.3133571445941925, 0.21772670745849609, 0.37266835570335388, 0.097543627023696899, 0.41669061779975891, 0.13264833390712738, 0.52413517236709595, -0.021182172000408173, -0.31564432382583618, 
  -0.63285613059997559, 0.357696533203125, 0.14306242763996124, 0.21032953262329102, 0.4192790687084198, 0.25479921698570251, -0.47498336434364319, -0.315980464220047, 0.2805652916431427, -0.29402819275856018, 
  -0.66116237640380859, 0.14617608487606049, -0.14873902499675751, -0.17485040426254272, -0.0097330864518880844, -0.47448340058326721, -0.27336272597312927, 0.075906626880168915, 0.34285160899162292, 0.42512324452400208, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 7,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,7 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,7 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 28, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 280, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 28, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 28, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
