
0603_Microp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a1d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00020094  0801a3a8  0801a3a8  0002a3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803a43c  0803a43c  00050348  2**0
                  CONTENTS
  4 .ARM          00000008  0803a43c  0803a43c  0004a43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803a444  0803a444  00050348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803a444  0803a444  0004a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0803a44c  0803a44c  0004a44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  0803a454  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000348  0803a79c  00050348  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  0803a79c  00050938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00104252  00000000  00000000  00050378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f31e  00000000  00000000  001545ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004eb0  00000000  00000000  001638e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004d48  00000000  00000000  00168798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003100e  00000000  00000000  0016d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004759e  00000000  00000000  0019e4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019194c  00000000  00000000  001e5a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003773d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000185d0  00000000  00000000  0037742c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000348 	.word	0x20000348
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a390 	.word	0x0801a390

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000034c 	.word	0x2000034c
 800020c:	0801a390 	.word	0x0801a390

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	ed87 0a01 	vstr	s0, [r7, #4]
 8001056:	edd7 7a01 	vldr	s15, [r7, #4]
 800105a:	eef0 7ae7 	vabs.f32	s15, s15
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	ed87 0a01 	vstr	s0, [r7, #4]
 8001076:	ed97 0a01 	vldr	s0, [r7, #4]
 800107a:	f012 f911 	bl	80132a0 <expf>
 800107e:	eef0 7a40 	vmov.f32	s15, s0
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a01 	vstr	s0, [r7, #4]
 8001096:	ed97 0a01 	vldr	s0, [r7, #4]
 800109a:	f012 f975 	bl	8013388 <sqrtf>
 800109e:	eef0 7a40 	vmov.f32	s15, s0
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80010ba:	f011 ffe9 	bl	8013090 <roundf>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d21f      	bcs.n	8001126 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x5a>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	ed93 7a00 	vldr	s14, [r3]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e7db      	b.n	80010de <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x12>
    }
}
 8001126:	bf00      	nop
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 8001132:	b5b0      	push	{r4, r5, r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	429a      	cmp	r2, r3
 800114e:	d229      	bcs.n	80011a4 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x72>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116c:	2002      	movs	r0, #2
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	f003 fb78 	bl	8004866 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001176:	ec55 4b10 	vmov	r4, r5, d0
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff fa14 	bl	80005a8 <__aeabi_f2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4620      	mov	r0, r4
 8001186:	4629      	mov	r1, r5
 8001188:	f7ff f8b0 	bl	80002ec <__adddf3>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd58 	bl	8000c48 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	3301      	adds	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	e7d1      	b.n	8001148 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x16>
    }
    return sqrt(dist) - cluster->max_error;
 80011a4:	ed97 0a05 	vldr	s0, [r7, #20]
 80011a8:	f7ff ff70 	bl	800108c <_ZSt4sqrtf>
 80011ac:	eeb0 7a40 	vmov.f32	s14, s0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80011ba:	eeb0 0a67 	vmov.f32	s0, s15
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}

080011c4 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 80011d4:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d219      	bcs.n	8001216 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x52>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff ff9f 	bl	8001132 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 80011f4:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 80011f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80011fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d501      	bpl.n	800120e <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
            min = dist;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	3301      	adds	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e7e1      	b.n	80011da <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x16>
        }
    }
    return min;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	ee07 3a90 	vmov	s15, r3
}
 800121c:	eeb0 0a67 	vmov.f32	s0, s15
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	447a0000 	.word	0x447a0000

0800122c <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	f1c3 031f 	rsb	r3, r3, #31
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	ffff8000 	.word	0xffff8000

08001278 <_ZNSt14numeric_limitsIsE3maxEv>:

      static _GLIBCXX_CONSTEXPR short
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
 800127c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2203      	movs	r2, #3
 80012ec:	4798      	blx	r3
    }
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	731a      	strb	r2, [r3, #12]
 800133a:	e00e      	b.n	800135a <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f00c f889 	bl	800d460 <_Z9ei_callocjj>
 800134e:	4602      	mov	r2, r0
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f00c f875 	bl	800d47c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
 80013a0:	e7fe      	b.n	80013a0 <_ZSt25__throw_bad_function_callv+0x4>

080013a2 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	4619      	mov	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	461a      	mov	r2, r3
 80013ba:	f000 f817 	bl	80013ec <_ZN2ei5numpy9transposeEPfii>
 80013be:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	e00c      	b.n	80013e4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 80013d6:	893a      	ldrh	r2, [r7, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 80013dc:	897a      	ldrh	r2, [r7, #10]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80013e2:	2300      	movs	r3, #0
    }
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b08f      	sub	sp, #60	; 0x3c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001400:	2300      	movs	r3, #0
 8001402:	f7ff ff8a 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <_ZN2ei5numpy9transposeEPfii+0x24>
 800140c:	4c23      	ldr	r4, [pc, #140]	; (800149c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 800140e:	e03b      	b.n	8001488 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001416:	4c21      	ldr	r4, [pc, #132]	; (800149c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001418:	e036      	b.n	8001488 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	da03      	bge.n	800142a <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	db01      	blt.n	800142e <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 800142a:	4c1d      	ldr	r4, [pc, #116]	; (80014a0 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 800142c:	e02c      	b.n	8001488 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	b29b      	uxth	r3, r3
 8001432:	83bb      	strh	r3, [r7, #28]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	b29b      	uxth	r3, r3
 8001442:	82bb      	strh	r3, [r7, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	b29b      	uxth	r3, r3
 8001448:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 800144c:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800144e:	f107 0214 	add.w	r2, r7, #20
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f007 fc6f 	bl	8008d3c <arm_mat_trans_f32>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001464:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 800146c:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001470:	e00a      	b.n	8001488 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	461a      	mov	r2, r3
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f014 fa8f 	bl	80159a4 <memcpy>

        return EIDSP_OK;
 8001486:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff6f 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8001492:	4623      	mov	r3, r4
    }
 8001494:	4618      	mov	r0, r3
 8001496:	373c      	adds	r7, #60	; 0x3c
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	fffffc16 	.word	0xfffffc16
 80014a0:	fffffc0c 	.word	0xfffffc0c

080014a4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 80014b0:	edd7 7a00 	vldr	s15, [r7]
 80014b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014b8:	eef4 7a47 	vcmp.f32	s15, s14
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	d101      	bne.n	80014c6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 80014c2:	2300      	movs	r3, #0
 80014c4:	e033      	b.n	800152e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d204      	bcs.n	80014da <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d301      	bcc.n	80014de <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 80014dc:	e027      	b.n	800152e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	82bb      	strh	r3, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	82fb      	strh	r3, [r7, #22]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	81bb      	strh	r3, [r7, #12]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	b29b      	uxth	r3, r3
 8001502:	81fb      	strh	r3, [r7, #14]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 800150a:	f107 020c 	add.w	r2, r7, #12
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4611      	mov	r1, r2
 8001514:	ed97 0a00 	vldr	s0, [r7]
 8001518:	4618      	mov	r0, r3
 800151a:	f007 fbd9 	bl	8008cd0 <arm_mat_scale_f32>
 800151e:	4603      	mov	r3, r0
 8001520:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	e000      	b.n	800152e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 800152c:	2300      	movs	r3, #0
    }
 800152e:	4618      	mov	r0, r3
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	fffffc0c 	.word	0xfffffc0c

0800153c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6892      	ldr	r2, [r2, #8]
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	429a      	cmp	r2, r3
 800155c:	d215      	bcs.n	800158a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	edd7 7a00 	vldr	s15, [r7]
 800157a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e7e0      	b.n	800154c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 800158a:	2300      	movs	r3, #0
    }
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d001      	beq.n	80015b2 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015ae:	4c26      	ldr	r4, [pc, #152]	; (8001648 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 80015b0:	e045      	b.n	800163e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015ba:	4c23      	ldr	r4, [pc, #140]	; (8001648 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 80015bc:	e03f      	b.n	800163e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d237      	bcs.n	800163c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689d      	ldr	r5, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	69f9      	ldr	r1, [r7, #28]
 80015da:	fb01 f303 	mul.w	r3, r1, r3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	f107 0008 	add.w	r0, r7, #8
 80015e6:	462a      	mov	r2, r5
 80015e8:	2101      	movs	r1, #1
 80015ea:	f7ff fe96 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 80015f4:	4c15      	ldr	r4, [pc, #84]	; (800164c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 80015f6:	2500      	movs	r5, #0
 80015f8:	e015      	b.n	8001626 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff93 	bl	800153c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001616:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 800161e:	69bc      	ldr	r4, [r7, #24]
 8001620:	2500      	movs	r5, #0
 8001622:	e000      	b.n	8001626 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001624:	2501      	movs	r5, #1
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fea0 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8001630:	2d01      	cmp	r5, #1
 8001632:	d104      	bne.n	800163e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e7c2      	b.n	80015c2 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 800163c:	2400      	movs	r4, #0
 800163e:	4623      	mov	r3, r4
    }
 8001640:	4618      	mov	r0, r3
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bdb0      	pop	{r4, r5, r7, pc}
 8001648:	fffffc14 	.word	0xfffffc14
 800164c:	fffffc16 	.word	0xfffffc16

08001650 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001668:	e028      	b.n	80016bc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001674:	e022      	b.n	80016bc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d21a      	bcs.n	80016ba <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	18d0      	adds	r0, r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f107 0208 	add.w	r2, r7, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	f007 fbbc 	bl	8008e1c <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e7df      	b.n	800167a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 80016ba:	2300      	movs	r3, #0
    }
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	fffffc14 	.word	0xfffffc14

080016c8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80016e0:	e028      	b.n	8001734 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80016ec:	e022      	b.n	8001734 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d21a      	bcs.n	8001732 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	68f9      	ldr	r1, [r7, #12]
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	18d0      	adds	r0, r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f107 0208 	add.w	r2, r7, #8
 8001716:	4619      	mov	r1, r3
 8001718:	f007 fb51 	bl	8008dbe <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e7df      	b.n	80016f2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001732:	2300      	movs	r3, #0
    }
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	fffffc14 	.word	0xfffffc14

08001740 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001744:	b098      	sub	sp, #96	; 0x60
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	3301      	adds	r3, #1
 8001756:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001760:	4c6d      	ldr	r4, [pc, #436]	; (8001918 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d8>)
 8001762:	e0d3      	b.n	800190c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1cc>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001768:	429a      	cmp	r2, r3
 800176a:	d901      	bls.n	8001770 <_ZN2ei5numpy4rfftEPKfjPfjj+0x30>
            src_size = n_fft;
 800176c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800176e:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001770:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001774:	2300      	movs	r3, #0
 8001776:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001778:	2101      	movs	r1, #1
 800177a:	f7ff fdce 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 800177e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <_ZN2ei5numpy4rfftEPKfjPfjj+0x48>
 8001784:	4c65      	ldr	r4, [pc, #404]	; (800191c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001786:	e0bc      	b.n	8001902 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
        if (!fft_input.buffer) {
 8001788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <_ZN2ei5numpy4rfftEPKfjPfjj+0x52>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800178e:	4c63      	ldr	r4, [pc, #396]	; (800191c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001790:	e0b7      	b.n	8001902 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001792:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	f014 f902 	bl	80159a4 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 80017a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	18d0      	adds	r0, r2, r3
 80017a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	461a      	mov	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	f014 f91e 	bl	80159f4 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80017b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d025      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80017be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	d022      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80017c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c6:	2b80      	cmp	r3, #128	; 0x80
 80017c8:	d01f      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80017ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d0:	d01b      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80017d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d8:	d017      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80017da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e0:	d013      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80017e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e8:	d00f      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80017ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f0:	d00b      	beq.n	800180a <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80017f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	f000 f9e3 	bl	8001bc4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 80017fe:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001802:	2b00      	cmp	r3, #0
 8001804:	d079      	beq.n	80018fa <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ba>
                EIDSP_ERR(ret);
 8001806:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001808:	e07b      	b.n	8001902 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 800180a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800180c:	b29a      	uxth	r2, r3
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f00a f861 	bl	800b8dc <arm_rfft_fast_init_f32>
 800181a:	4603      	mov	r3, r0
 800181c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (status != ARM_MATH_SUCCESS) {
 8001820:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <_ZN2ei5numpy4rfftEPKfjPfjj+0xee>
                return status;
 8001828:	f997 404f 	ldrsb.w	r4, [r7, #79]	; 0x4f
 800182c:	e068      	b.n	8001900 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800182e:	f107 0014 	add.w	r0, r7, #20
 8001832:	2300      	movs	r3, #0
 8001834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001836:	2101      	movs	r1, #1
 8001838:	f7ff fd6f 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <_ZN2ei5numpy4rfftEPKfjPfjj+0x108>
 8001842:	4c36      	ldr	r4, [pc, #216]	; (800191c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001844:	2500      	movs	r5, #0
 8001846:	e050      	b.n	80018ea <_ZN2ei5numpy4rfftEPKfjPfjj+0x1aa>
            if (!fft_output.buffer) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <_ZN2ei5numpy4rfftEPKfjPfjj+0x114>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800184e:	4c33      	ldr	r4, [pc, #204]	; (800191c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001850:	2500      	movs	r5, #0
 8001852:	e04a      	b.n	80018ea <_ZN2ei5numpy4rfftEPKfjPfjj+0x1aa>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800185c:	2300      	movs	r3, #0
 800185e:	f009 fedd 	bl	800b61c <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001872:	3b01      	subs	r3, #1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	440b      	add	r3, r1
 800187a:	6852      	ldr	r2, [r2, #4]
 800187c:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 800187e:	2302      	movs	r3, #2
 8001880:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001882:	2301      	movs	r3, #1
 8001884:	65bb      	str	r3, [r7, #88]	; 0x58
 8001886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001888:	3b01      	subs	r3, #1
 800188a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800188c:	429a      	cmp	r2, r3
 800188e:	d22b      	bcs.n	80018e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	f107 0210 	add.w	r2, r7, #16
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f007 fabc 	bl	8008e1c <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe7e 	bl	80005a8 <__aeabi_f2d>
 80018ac:	4680      	mov	r8, r0
 80018ae:	4689      	mov	r9, r1
 80018b0:	2002      	movs	r0, #2
 80018b2:	f002 fff9 	bl	80048a8 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80018b6:	ec53 2b10 	vmov	r2, r3, d0
 80018ba:	4640      	mov	r0, r8
 80018bc:	4649      	mov	r1, r9
 80018be:	f7fe fecb 	bl	8000658 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	18d5      	adds	r5, r2, r3
 80018d2:	f7ff f9b9 	bl	8000c48 <__aeabi_d2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	602b      	str	r3, [r5, #0]

                fft_output_buffer_ix += 2;
 80018da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018dc:	3302      	adds	r3, #2
 80018de:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80018e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018e2:	3301      	adds	r3, #1
 80018e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80018e6:	e7ce      	b.n	8001886 <_ZN2ei5numpy4rfftEPKfjPfjj+0x146>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80018e8:	2501      	movs	r5, #1
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fd3e 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 80018f4:	2d01      	cmp	r5, #1
 80018f6:	d103      	bne.n	8001900 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
 80018f8:	e000      	b.n	80018fc <_ZN2ei5numpy4rfftEPKfjPfjj+0x1bc>
            }
 80018fa:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80018fc:	2400      	movs	r4, #0
 80018fe:	e000      	b.n	8001902 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
                return status;
 8001900:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001902:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fd32 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 800190c:	4623      	mov	r3, r4
    }
 800190e:	4618      	mov	r0, r3
 8001910:	3760      	adds	r7, #96	; 0x60
 8001912:	46bd      	mov	sp, r7
 8001914:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001918:	fffffc11 	.word	0xfffffc11
 800191c:	fffffc16 	.word	0xfffffc16

08001920 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b098      	sub	sp, #96	; 0x60
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 800192e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3301      	adds	r3, #1
 8001934:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 800193e:	4c72      	ldr	r4, [pc, #456]	; (8001b08 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e8>)
 8001940:	e0dc      	b.n	8001afc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001946:	429a      	cmp	r2, r3
 8001948:	d901      	bls.n	800194e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 800194a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800194c:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001956:	429a      	cmp	r2, r3
 8001958:	d101      	bne.n	800195e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800195e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001964:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001966:	2101      	movs	r1, #1
 8001968:	f7ff fcd7 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 800196c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001972:	4c66      	ldr	r4, [pc, #408]	; (8001b0c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 8001974:	e0bd      	b.n	8001af2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
        if (!fft_input.buffer) {
 8001976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800197c:	4c63      	ldr	r4, [pc, #396]	; (8001b0c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 800197e:	e0b8      	b.n	8001af2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
        }

        if (!fft_input_buffer) {
 8001980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001982:	2b00      	cmp	r3, #0
 8001984:	d112      	bne.n	80019ac <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001986:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	461a      	mov	r2, r3
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	f014 f808 	bl	80159a4 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	18d0      	adds	r0, r2, r3
 800199c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f014 f824 	bl	80159f4 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80019ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d025      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80019b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d022      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80019b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ba:	2b80      	cmp	r3, #128	; 0x80
 80019bc:	d01f      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80019be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c4:	d01b      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80019c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019cc:	d017      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80019ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d4:	d013      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80019d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019dc:	d00f      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80019de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e4:	d00b      	beq.n	80019fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80019e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	f000 f95b 	bl	8001ca8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 80019f2:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 80019f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d077      	beq.n	8001aea <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ca>
                EIDSP_ERR(ret);
 80019fa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80019fc:	e079      	b.n	8001af2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 80019fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f009 ff67 	bl	800b8dc <arm_rfft_fast_init_f32>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if (status != ARM_MATH_SUCCESS) {
 8001a14:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x102>
                return status;
 8001a1c:	f997 404b 	ldrsb.w	r4, [r7, #75]	; 0x4b
 8001a20:	e066      	b.n	8001af0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001a22:	f107 0010 	add.w	r0, r7, #16
 8001a26:	2300      	movs	r3, #0
 8001a28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	f7ff fc75 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
 8001a36:	4c35      	ldr	r4, [pc, #212]	; (8001b0c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 8001a38:	2500      	movs	r5, #0
 8001a3a:	e04e      	b.n	8001ada <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ba>
            if (!fft_output.buffer) {
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x128>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001a42:	4c32      	ldr	r4, [pc, #200]	; (8001b0c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 8001a44:	2500      	movs	r5, #0
 8001a46:	e048      	b.n	8001ada <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ba>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001a48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	f107 0020 	add.w	r0, r7, #32
 8001a50:	2300      	movs	r3, #0
 8001a52:	f009 fde3 	bl	800b61c <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	440b      	add	r3, r1
 8001a76:	6852      	ldr	r2, [r2, #4]
 8001a78:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8001a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a7c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001a80:	3b01      	subs	r3, #1
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001a92:	2301      	movs	r3, #1
 8001a94:	657b      	str	r3, [r7, #84]	; 0x54
 8001a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d21b      	bcs.n	8001ad8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1b8>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	441a      	add	r2, r3
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	440b      	add	r3, r1
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ab8:	3301      	adds	r3, #1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	441a      	add	r2, r3
 8001abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	440b      	add	r3, r1
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8001aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001acc:	3302      	adds	r3, #2
 8001ace:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	657b      	str	r3, [r7, #84]	; 0x54
 8001ad6:	e7de      	b.n	8001a96 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x176>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001ad8:	2501      	movs	r5, #1
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fc46 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8001ae4:	2d01      	cmp	r5, #1
 8001ae6:	d103      	bne.n	8001af0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
 8001ae8:	e000      	b.n	8001aec <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1cc>
            }
 8001aea:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001aec:	2400      	movs	r4, #0
 8001aee:	e000      	b.n	8001af2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
                return status;
 8001af0:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001af2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc3a 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8001afc:	4623      	mov	r3, r4
    }
 8001afe:	4618      	mov	r0, r3
 8001b00:	3760      	adds	r7, #96	; 0x60
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bdb0      	pop	{r4, r5, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	fffffc11 	.word	0xfffffc11
 8001b0c:	fffffc16 	.word	0xfffffc16

08001b10 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8001b30:	e03f      	b.n	8001bb2 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d104      	bne.n	8001b42 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e037      	b.n	8001bb2 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8001b42:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b5e:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d216      	bcs.n	8001b9e <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b92:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e7e3      	b.n	8001b66 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8001bb0:	2300      	movs	r3, #0
    }
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	fffffc10 	.word	0xfffffc10

08001bc4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00b fc36 	bl	800d448 <_Z9ei_mallocj>
 8001bdc:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001be4:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001be6:	e059      	b.n	8001c9c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f00b f87b 	bl	800ccf0 <kiss_fftr_alloc>
 8001bfa:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d104      	bne.n	8001c0c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001c02:	69b8      	ldr	r0, [r7, #24]
 8001c04:	f00b fc3a 	bl	800d47c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001c0a:	e047      	b.n	8001c9c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	68f9      	ldr	r1, [r7, #12]
 8001c10:	6978      	ldr	r0, [r7, #20]
 8001c12:	f00b f993 	bl	800cf3c <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d235      	bcs.n	8001c8e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xca>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4413      	add	r3, r2
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	2002      	movs	r0, #2
 8001c30:	eeb0 0a67 	vmov.f32	s0, s15
 8001c34:	f002 fe17 	bl	8004866 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c38:	ec55 4b10 	vmov	r4, r5, d0
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4413      	add	r3, r2
 8001c44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c48:	2002      	movs	r0, #2
 8001c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4e:	f002 fe0a 	bl	8004866 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c52:	ec53 2b10 	vmov	r2, r3, d0
 8001c56:	4620      	mov	r0, r4
 8001c58:	4629      	mov	r1, r5
 8001c5a:	f7fe fb47 	bl	80002ec <__adddf3>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	ec43 2b17 	vmov	d7, r2, r3
 8001c66:	eeb0 0a47 	vmov.f32	s0, s14
 8001c6a:	eef0 0a67 	vmov.f32	s1, s15
 8001c6e:	f011 fae3 	bl	8013238 <sqrt>
 8001c72:	ec51 0b10 	vmov	r0, r1, d0
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	18d4      	adds	r4, r2, r3
 8001c7e:	f7fe ffe3 	bl	8000c48 <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	e7c5      	b.n	8001c1a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f00b fbf4 	bl	800d47c <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001c94:	69b8      	ldr	r0, [r7, #24]
 8001c96:	f00b fbf1 	bl	800d47c <_Z7ei_freePv>

        return EIDSP_OK;
 8001c9a:	2300      	movs	r3, #0
    }
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	fffffc16 	.word	0xfffffc16

08001ca8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f00b f814 	bl	800ccf0 <kiss_fftr_alloc>
 8001cc8:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8001cd2:	e008      	b.n	8001ce6 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f00b f92f 	bl	800cf3c <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f00b fbcc 	bl	800d47c <_Z7ei_freePv>

        return EIDSP_OK;
 8001ce4:	2300      	movs	r3, #0
    }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	fffffc16 	.word	0xfffffc16
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8001cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cfc:	b095      	sub	sp, #84	; 0x54
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6178      	str	r0, [r7, #20]
 8001d02:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d06:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	0fda      	lsrs	r2, r3, #31
 8001d14:	4413      	add	r3, r2
 8001d16:	105b      	asrs	r3, r3, #1
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7fe fc44 	bl	80005a8 <__aeabi_f2d>
 8001d20:	a3f5      	add	r3, pc, #980	; (adr r3, 80020f8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc97 	bl	8000658 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4690      	mov	r8, r2
 8001d30:	4699      	mov	r9, r3
 8001d32:	6938      	ldr	r0, [r7, #16]
 8001d34:	f7fe fc38 	bl	80005a8 <__aeabi_f2d>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4640      	mov	r0, r8
 8001d3e:	4649      	mov	r1, r9
 8001d40:	f7fe fdb4 	bl	80008ac <__aeabi_ddiv>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	ec43 2b17 	vmov	d7, r2, r3
 8001d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d50:	eef0 0a67 	vmov.f32	s1, s15
 8001d54:	f011 f96c 	bl	8013030 <tan>
 8001d58:	ec53 2b10 	vmov	r2, r3, d0
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff72 	bl	8000c48 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8001d68:	2002      	movs	r0, #2
 8001d6a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001d6e:	f002 fd7a 	bl	8004866 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe ff65 	bl	8000c48 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8001d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d84:	2104      	movs	r1, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00b fb6a 	bl	800d460 <_Z9ei_callocjj>
 8001d8c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d90:	2104      	movs	r1, #4
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00b fb64 	bl	800d460 <_Z9ei_callocjj>
 8001d98:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00b fb5e 	bl	800d460 <_Z9ei_callocjj>
 8001da4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8001da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da8:	2104      	movs	r1, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00b fb58 	bl	800d460 <_Z9ei_callocjj>
 8001db0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db4:	2104      	movs	r1, #4
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00b fb52 	bl	800d460 <_Z9ei_callocjj>
 8001dbc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f00b fb4c 	bl	800d460 <_Z9ei_callocjj>
 8001dc8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8001dca:	2300      	movs	r3, #0
 8001dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	f280 80e5 	bge.w	8001fa2 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8001dd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001dda:	f7fe fbd3 	bl	8000584 <__aeabi_i2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	f7fe fa83 	bl	80002ec <__adddf3>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4bc3      	ldr	r3, [pc, #780]	; (8002100 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001df4:	f7fe fa7a 	bl	80002ec <__adddf3>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	a3bd      	add	r3, pc, #756	; (adr r3, 80020f8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fc27 	bl	8000658 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7fe fbb6 	bl	8000584 <__aeabi_i2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	f7fe fa66 	bl	80002ec <__adddf3>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4640      	mov	r0, r8
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe fd40 	bl	80008ac <__aeabi_ddiv>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	ec43 2b17 	vmov	d7, r2, r3
 8001e34:	eeb0 0a47 	vmov.f32	s0, s14
 8001e38:	eef0 0a67 	vmov.f32	s1, s15
 8001e3c:	f011 f8a4 	bl	8012f88 <sin>
 8001e40:	ec53 2b10 	vmov	r2, r3, d0
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fefe 	bl	8000c48 <__aeabi_d2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8001e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e52:	f7fe fba9 	bl	80005a8 <__aeabi_f2d>
 8001e56:	4680      	mov	r8, r0
 8001e58:	4689      	mov	r9, r1
 8001e5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e5c:	f7fe fba4 	bl	80005a8 <__aeabi_f2d>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	f7fe fa42 	bl	80002ec <__adddf3>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4692      	mov	sl, r2
 8001e6e:	469b      	mov	fp, r3
 8001e70:	69f8      	ldr	r0, [r7, #28]
 8001e72:	f7fe fb99 	bl	80005a8 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4650      	mov	r0, sl
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	f7fe fbeb 	bl	8000658 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4640      	mov	r0, r8
 8001e88:	4649      	mov	r1, r9
 8001e8a:	f7fe fa2f 	bl	80002ec <__adddf3>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4b99      	ldr	r3, [pc, #612]	; (8002100 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001e9c:	f7fe fa26 	bl	80002ec <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fece 	bl	8000c48 <__aeabi_d2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8001eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb6:	4413      	add	r3, r2
 8001eb8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001ebc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8001ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ecc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f7fe fb66 	bl	80005a8 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	f7fe fa04 	bl	80002ec <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4690      	mov	r8, r2
 8001eea:	4699      	mov	r9, r3
 8001eec:	6938      	ldr	r0, [r7, #16]
 8001eee:	f7fe fb5b 	bl	80005a8 <__aeabi_f2d>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	4649      	mov	r1, r9
 8001efa:	f7fe fcd7 	bl	80008ac <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f0c:	18d6      	adds	r6, r2, r3
 8001f0e:	f7fe fe9b 	bl	8000c48 <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8001f16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f18:	f7fe fb46 	bl	80005a8 <__aeabi_f2d>
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	4689      	mov	r9, r1
 8001f20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f22:	f7fe fb41 	bl	80005a8 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	f7fe f9df 	bl	80002ec <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4692      	mov	sl, r2
 8001f34:	469b      	mov	fp, r3
 8001f36:	69f8      	ldr	r0, [r7, #28]
 8001f38:	f7fe fb36 	bl	80005a8 <__aeabi_f2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4650      	mov	r0, sl
 8001f42:	4659      	mov	r1, fp
 8001f44:	f7fe fb88 	bl	8000658 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4640      	mov	r0, r8
 8001f4e:	4649      	mov	r1, r9
 8001f50:	f7fe f9ca 	bl	80002e8 <__aeabi_dsub>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b67      	ldr	r3, [pc, #412]	; (8002100 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001f62:	f7fe f9c3 	bl	80002ec <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f70:	6938      	ldr	r0, [r7, #16]
 8001f72:	f7fe fb19 	bl	80005a8 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe fc95 	bl	80008ac <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f90:	18d6      	adds	r6, r2, r3
 8001f92:	f7fe fe59 	bl	8000c48 <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8001f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fa0:	e715      	b.n	8001dce <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	f080 80aa 	bcs.w	8002104 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8001fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	441a      	add	r2, r3
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	440b      	add	r3, r1
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f280 808e 	bge.w	80020ee <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd8:	4413      	add	r3, r2
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff4:	4413      	add	r3, r2
 8001ff6:	edd3 6a00 	vldr	s13, [r3]
 8001ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	6a3a      	ldr	r2, [r7, #32]
 8002000:	4413      	add	r3, r2
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800200e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002020:	4413      	add	r3, r2
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 800202a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002030:	4413      	add	r3, r2
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fab7 	bl	80005a8 <__aeabi_f2d>
 800203a:	4604      	mov	r4, r0
 800203c:	460d      	mov	r5, r1
 800203e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe faad 	bl	80005a8 <__aeabi_f2d>
 800204e:	4680      	mov	r8, r0
 8002050:	4689      	mov	r9, r1
 8002052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe faa3 	bl	80005a8 <__aeabi_f2d>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	f7fe f941 	bl	80002ec <__adddf3>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4640      	mov	r0, r8
 8002070:	4649      	mov	r1, r9
 8002072:	f7fe f93b 	bl	80002ec <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	6a3a      	ldr	r2, [r7, #32]
 8002084:	4413      	add	r3, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa8d 	bl	80005a8 <__aeabi_f2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4640      	mov	r0, r8
 8002094:	4649      	mov	r1, r9
 8002096:	f7fe f929 	bl	80002ec <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe fad9 	bl	8000658 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	18d4      	adds	r4, r2, r3
 80020b6:	f7fe fdc7 	bl	8000c48 <__aeabi_d2f>
 80020ba:	4603      	mov	r3, r0
 80020bc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80020be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	441a      	add	r2, r3
 80020c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	6a39      	ldr	r1, [r7, #32]
 80020cc:	440b      	add	r3, r1
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d8:	441a      	add	r2, r3
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e0:	440b      	add	r3, r1
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80020e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e8:	3301      	adds	r3, #1
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
 80020ec:	e76c      	b.n	8001fc8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	3301      	adds	r3, #1
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80020f4:	e757      	b.n	8001fa6 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 80020f6:	bf00      	nop
 80020f8:	54442d18 	.word	0x54442d18
 80020fc:	400921fb 	.word	0x400921fb
 8002100:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002104:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002106:	f00b f9b9 	bl	800d47c <_Z7ei_freePv>
        ei_free(d1);
 800210a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800210c:	f00b f9b6 	bl	800d47c <_Z7ei_freePv>
        ei_free(d2);
 8002110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002112:	f00b f9b3 	bl	800d47c <_Z7ei_freePv>
        ei_free(w0);
 8002116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002118:	f00b f9b0 	bl	800d47c <_Z7ei_freePv>
        ei_free(w1);
 800211c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800211e:	f00b f9ad 	bl	800d47c <_Z7ei_freePv>
        ei_free(w2);
 8002122:	6a38      	ldr	r0, [r7, #32]
 8002124:	f00b f9aa 	bl	800d47c <_Z7ei_freePv>
    }
 8002128:	bf00      	nop
 800212a:	3754      	adds	r7, #84	; 0x54
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002132:	bf00      	nop
 8002134:	0000      	movs	r0, r0
	...

08002138 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800213c:	b095      	sub	sp, #84	; 0x54
 800213e:	af00      	add	r7, sp, #0
 8002140:	6178      	str	r0, [r7, #20]
 8002142:	ed87 0a04 	vstr	s0, [r7, #16]
 8002146:	edc7 0a03 	vstr	s1, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	0fda      	lsrs	r2, r3, #31
 8002154:	4413      	add	r3, r2
 8002156:	105b      	asrs	r3, r3, #1
 8002158:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7fe fa24 	bl	80005a8 <__aeabi_f2d>
 8002160:	a3f5      	add	r3, pc, #980	; (adr r3, 8002538 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fa77 	bl	8000658 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4690      	mov	r8, r2
 8002170:	4699      	mov	r9, r3
 8002172:	6938      	ldr	r0, [r7, #16]
 8002174:	f7fe fa18 	bl	80005a8 <__aeabi_f2d>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4640      	mov	r0, r8
 800217e:	4649      	mov	r1, r9
 8002180:	f7fe fb94 	bl	80008ac <__aeabi_ddiv>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	ec43 2b17 	vmov	d7, r2, r3
 800218c:	eeb0 0a47 	vmov.f32	s0, s14
 8002190:	eef0 0a67 	vmov.f32	s1, s15
 8002194:	f010 ff4c 	bl	8013030 <tan>
 8002198:	ec53 2b10 	vmov	r2, r3, d0
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fd52 	bl	8000c48 <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 80021a8:	2002      	movs	r0, #2
 80021aa:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80021ae:	f002 fb5a 	bl	8004866 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80021b2:	ec53 2b10 	vmov	r2, r3, d0
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fd45 	bl	8000c48 <__aeabi_d2f>
 80021be:	4603      	mov	r3, r0
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 80021c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c4:	2104      	movs	r1, #4
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00b f94a 	bl	800d460 <_Z9ei_callocjj>
 80021cc:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80021ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d0:	2104      	movs	r1, #4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00b f944 	bl	800d460 <_Z9ei_callocjj>
 80021d8:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80021da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021dc:	2104      	movs	r1, #4
 80021de:	4618      	mov	r0, r3
 80021e0:	f00b f93e 	bl	800d460 <_Z9ei_callocjj>
 80021e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80021e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e8:	2104      	movs	r1, #4
 80021ea:	4618      	mov	r0, r3
 80021ec:	f00b f938 	bl	800d460 <_Z9ei_callocjj>
 80021f0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80021f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f4:	2104      	movs	r1, #4
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00b f932 	bl	800d460 <_Z9ei_callocjj>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80021fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002200:	2104      	movs	r1, #4
 8002202:	4618      	mov	r0, r3
 8002204:	f00b f92c 	bl	800d460 <_Z9ei_callocjj>
 8002208:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 800220a:	2300      	movs	r3, #0
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800220e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002212:	429a      	cmp	r2, r3
 8002214:	f280 80e5 	bge.w	80023e2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002218:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800221a:	f7fe f9b3 	bl	8000584 <__aeabi_i2d>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	f7fe f863 	bl	80002ec <__adddf3>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4bc3      	ldr	r3, [pc, #780]	; (8002540 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002234:	f7fe f85a 	bl	80002ec <__adddf3>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	a3bd      	add	r3, pc, #756	; (adr r3, 8002538 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe fa07 	bl	8000658 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4690      	mov	r8, r2
 8002250:	4699      	mov	r9, r3
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7fe f996 	bl	8000584 <__aeabi_i2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	f7fe f846 	bl	80002ec <__adddf3>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4640      	mov	r0, r8
 8002266:	4649      	mov	r1, r9
 8002268:	f7fe fb20 	bl	80008ac <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	ec43 2b17 	vmov	d7, r2, r3
 8002274:	eeb0 0a47 	vmov.f32	s0, s14
 8002278:	eef0 0a67 	vmov.f32	s1, s15
 800227c:	f010 fe84 	bl	8012f88 <sin>
 8002280:	ec53 2b10 	vmov	r2, r3, d0
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fcde 	bl	8000c48 <__aeabi_d2f>
 800228c:	4603      	mov	r3, r0
 800228e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002290:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002292:	f7fe f989 	bl	80005a8 <__aeabi_f2d>
 8002296:	4680      	mov	r8, r0
 8002298:	4689      	mov	r9, r1
 800229a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800229c:	f7fe f984 	bl	80005a8 <__aeabi_f2d>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	f7fe f822 	bl	80002ec <__adddf3>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4692      	mov	sl, r2
 80022ae:	469b      	mov	fp, r3
 80022b0:	69f8      	ldr	r0, [r7, #28]
 80022b2:	f7fe f979 	bl	80005a8 <__aeabi_f2d>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4650      	mov	r0, sl
 80022bc:	4659      	mov	r1, fp
 80022be:	f7fe f9cb 	bl	8000658 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4640      	mov	r0, r8
 80022c8:	4649      	mov	r1, r9
 80022ca:	f7fe f80f 	bl	80002ec <__adddf3>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b99      	ldr	r3, [pc, #612]	; (8002540 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 80022dc:	f7fe f806 	bl	80002ec <__adddf3>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fcae 	bl	8000c48 <__aeabi_d2f>
 80022ec:	4603      	mov	r3, r0
 80022ee:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022f6:	4413      	add	r3, r2
 80022f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002304:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800230c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002314:	ee17 0a90 	vmov	r0, s15
 8002318:	f7fe f946 	bl	80005a8 <__aeabi_f2d>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	f7fd ffe4 	bl	80002ec <__adddf3>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4690      	mov	r8, r2
 800232a:	4699      	mov	r9, r3
 800232c:	6938      	ldr	r0, [r7, #16]
 800232e:	f7fe f93b 	bl	80005a8 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4640      	mov	r0, r8
 8002338:	4649      	mov	r1, r9
 800233a:	f7fe fab7 	bl	80008ac <__aeabi_ddiv>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234c:	18d6      	adds	r6, r2, r3
 800234e:	f7fe fc7b 	bl	8000c48 <__aeabi_d2f>
 8002352:	4603      	mov	r3, r0
 8002354:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002356:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002358:	f7fe f926 	bl	80005a8 <__aeabi_f2d>
 800235c:	4680      	mov	r8, r0
 800235e:	4689      	mov	r9, r1
 8002360:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002362:	f7fe f921 	bl	80005a8 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	f7fd ffbf 	bl	80002ec <__adddf3>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4692      	mov	sl, r2
 8002374:	469b      	mov	fp, r3
 8002376:	69f8      	ldr	r0, [r7, #28]
 8002378:	f7fe f916 	bl	80005a8 <__aeabi_f2d>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4650      	mov	r0, sl
 8002382:	4659      	mov	r1, fp
 8002384:	f7fe f968 	bl	8000658 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4640      	mov	r0, r8
 800238e:	4649      	mov	r1, r9
 8002390:	f7fd ffaa 	bl	80002e8 <__aeabi_dsub>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	4b67      	ldr	r3, [pc, #412]	; (8002540 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 80023a2:	f7fd ffa3 	bl	80002ec <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4614      	mov	r4, r2
 80023ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80023b0:	6938      	ldr	r0, [r7, #16]
 80023b2:	f7fe f8f9 	bl	80005a8 <__aeabi_f2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4620      	mov	r0, r4
 80023bc:	4629      	mov	r1, r5
 80023be:	f7fe fa75 	bl	80008ac <__aeabi_ddiv>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d0:	18d6      	adds	r6, r2, r3
 80023d2:	f7fe fc39 	bl	8000c48 <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	3301      	adds	r3, #1
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e0:	e715      	b.n	800220e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80023e2:	2300      	movs	r3, #0
 80023e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	f080 80aa 	bcs.w	8002544 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 80023f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	441a      	add	r2, r3
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	440b      	add	r3, r1
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002404:	2300      	movs	r3, #0
 8002406:	647b      	str	r3, [r7, #68]	; 0x44
 8002408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800240a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800240c:	429a      	cmp	r2, r3
 800240e:	f280 808e 	bge.w	800252e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002418:	4413      	add	r3, r2
 800241a:	ed93 7a00 	vldr	s14, [r3]
 800241e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	4413      	add	r3, r2
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002434:	4413      	add	r3, r2
 8002436:	edd3 6a00 	vldr	s13, [r3]
 800243a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	4413      	add	r3, r2
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002460:	4413      	add	r3, r2
 8002462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002466:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800246a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f897 	bl	80005a8 <__aeabi_f2d>
 800247a:	4604      	mov	r4, r0
 800247c:	460d      	mov	r5, r1
 800247e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002484:	4413      	add	r3, r2
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f88d 	bl	80005a8 <__aeabi_f2d>
 800248e:	4680      	mov	r8, r0
 8002490:	4689      	mov	r9, r1
 8002492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	4413      	add	r3, r2
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f883 	bl	80005a8 <__aeabi_f2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	f7fd ff21 	bl	80002ec <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4640      	mov	r0, r8
 80024b0:	4649      	mov	r1, r9
 80024b2:	f7fd ff19 	bl	80002e8 <__aeabi_dsub>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4690      	mov	r8, r2
 80024bc:	4699      	mov	r9, r3
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	6a3a      	ldr	r2, [r7, #32]
 80024c4:	4413      	add	r3, r2
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f86d 	bl	80005a8 <__aeabi_f2d>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4640      	mov	r0, r8
 80024d4:	4649      	mov	r1, r9
 80024d6:	f7fd ff09 	bl	80002ec <__adddf3>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4620      	mov	r0, r4
 80024e0:	4629      	mov	r1, r5
 80024e2:	f7fe f8b9 	bl	8000658 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	18d4      	adds	r4, r2, r3
 80024f6:	f7fe fba7 	bl	8000c48 <__aeabi_d2f>
 80024fa:	4603      	mov	r3, r0
 80024fc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80024fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002504:	441a      	add	r2, r3
 8002506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	6a39      	ldr	r1, [r7, #32]
 800250c:	440b      	add	r3, r1
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002518:	441a      	add	r2, r3
 800251a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	440b      	add	r3, r1
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002528:	3301      	adds	r3, #1
 800252a:	647b      	str	r3, [r7, #68]	; 0x44
 800252c:	e76c      	b.n	8002408 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 800252e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002530:	3301      	adds	r3, #1
 8002532:	64bb      	str	r3, [r7, #72]	; 0x48
 8002534:	e757      	b.n	80023e6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8002536:	bf00      	nop
 8002538:	54442d18 	.word	0x54442d18
 800253c:	400921fb 	.word	0x400921fb
 8002540:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002544:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002546:	f00a ff99 	bl	800d47c <_Z7ei_freePv>
        ei_free(d1);
 800254a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254c:	f00a ff96 	bl	800d47c <_Z7ei_freePv>
        ei_free(d2);
 8002550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002552:	f00a ff93 	bl	800d47c <_Z7ei_freePv>
        ei_free(w0);
 8002556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002558:	f00a ff90 	bl	800d47c <_Z7ei_freePv>
        ei_free(w1);
 800255c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800255e:	f00a ff8d 	bl	800d47c <_Z7ei_freePv>
        ei_free(w2);
 8002562:	6a38      	ldr	r0, [r7, #32]
 8002564:	f00a ff8a 	bl	800d47c <_Z7ei_freePv>
    }
 8002568:	bf00      	nop
 800256a:	3754      	adds	r7, #84	; 0x54
 800256c:	46bd      	mov	sp, r7
 800256e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002572:	bf00      	nop

08002574 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002580:	edc7 0a01 	vstr	s1, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	429a      	cmp	r2, r3
 8002594:	d21f      	bcs.n	80025d6 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8002596:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	6979      	ldr	r1, [r7, #20]
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 80025ba:	441a      	add	r2, r3
                matrix->cols);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80025c0:	4621      	mov	r1, r4
 80025c2:	edd7 0a01 	vldr	s1, [r7, #4]
 80025c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80025ca:	f7ff fb95 	bl	8001cf8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e7da      	b.n	800258c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 80025d6:	2300      	movs	r3, #0
    }
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}

080025e0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80025ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d21f      	bcs.n	8002642 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 8002602:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	6979      	ldr	r1, [r7, #20]
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	6979      	ldr	r1, [r7, #20]
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8002626:	441a      	add	r2, r3
                matrix->cols);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 800262c:	4621      	mov	r1, r4
 800262e:	edd7 0a01 	vldr	s1, [r7, #4]
 8002632:	ed97 0a02 	vldr	s0, [r7, #8]
 8002636:	f7ff fd7f 	bl	8002138 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e7da      	b.n	80025f8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002642:	2300      	movs	r3, #0
    }
 8002644:	4618      	mov	r0, r3
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd90      	pop	{r4, r7, pc}

0800264c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 800264c:	b480      	push	{r7}
 800264e:	b091      	sub	sp, #68	; 0x44
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	ed87 0a01 	vstr	s0, [r7, #4]
 800265a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d001      	beq.n	8002668 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002664:	4b60      	ldr	r3, [pc, #384]	; (80027e8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002666:	e0b9      	b.n	80027dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d001      	beq.n	8002674 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002670:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002672:	e0b3      	b.n	80027dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8002690:	4b56      	ldr	r3, [pc, #344]	; (80027ec <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800269a:	2300      	movs	r3, #0
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	3b01      	subs	r3, #1
 80026a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d229      	bcs.n	80026fc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	6a3a      	ldr	r2, [r7, #32]
 80026ae:	4413      	add	r3, r2
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80026b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	dd05      	ble.n	80026ce <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	6a3a      	ldr	r2, [r7, #32]
 80026d4:	4413      	add	r3, r2
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	d505      	bpl.n	80026f4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	4413      	add	r3, r2
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	3301      	adds	r3, #1
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	e7d0      	b.n	800269e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 8002702:	2301      	movs	r3, #1
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	3b01      	subs	r3, #1
 800270a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800270c:	429a      	cmp	r2, r3
 800270e:	d261      	bcs.n	80027d4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	4413      	add	r3, r2
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	d549      	bpl.n	80027be <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	6a3a      	ldr	r2, [r7, #32]
 8002730:	4413      	add	r3, r2
 8002732:	ed93 7a00 	vldr	s14, [r3]
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	3301      	adds	r3, #1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	6a3a      	ldr	r2, [r7, #32]
 800273e:	4413      	add	r3, r2
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	dd37      	ble.n	80027be <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	6a3a      	ldr	r2, [r7, #32]
 8002754:	4413      	add	r3, r2
 8002756:	ed93 7a00 	vldr	s14, [r3]
 800275a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	6a3a      	ldr	r2, [r7, #32]
 8002768:	4413      	add	r3, r2
 800276a:	edd3 6a00 	vldr	s13, [r3]
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	3301      	adds	r3, #1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	4413      	add	r3, r2
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002784:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8002788:	ed97 7a05 	vldr	s14, [r7, #20]
 800278c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002798:	dd11      	ble.n	80027be <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800279a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a4:	ee07 2a90 	vmov	s15, r2
 80027a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ac:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 80027b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80027b2:	3301      	adds	r3, #1
 80027b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 80027b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d009      	beq.n	80027d2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	4413      	add	r3, r2
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	3301      	adds	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d0:	e799      	b.n	8002706 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80027d2:	bf00      	nop
        }

        *peaks_found = out_ix;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80027d8:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80027da:	2300      	movs	r3, #0
    }
 80027dc:	4618      	mov	r0, r3
 80027de:	3744      	adds	r7, #68	; 0x44
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	fffffc14 	.word	0xfffffc14
 80027ec:	7f7fffff 	.word	0x7f7fffff

080027f0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f002 f8bd 	bl	8004978 <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 f8a0 	bl	8004958 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ffeb 	bl	8002808 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	ed93 7a01 	vldr	s14, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	edd3 7a01 	vldr	s15, [r3, #4]
 8002854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285c:	bfcc      	ite	gt
 800285e:	2301      	movgt	r3, #1
 8002860:	2300      	movle	r3, #0
 8002862:	b2db      	uxtb	r3, r3
        });
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	ed2d 8b02 	vpush	{d8}
 8002876:	b09e      	sub	sp, #120	; 0x78
 8002878:	af00      	add	r7, sp, #0
 800287a:	6178      	str	r0, [r7, #20]
 800287c:	6139      	str	r1, [r7, #16]
 800287e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002882:	edc7 0a02 	vstr	s1, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d001      	beq.n	8002896 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002892:	4c92      	ldr	r4, [pc, #584]	; (8002adc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26c>)
 8002894:	e11a      	b.n	8002acc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25c>
        if (output_matrix->cols != 2) {
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d001      	beq.n	80028a2 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800289e:	4c8f      	ldr	r4, [pc, #572]	; (8002adc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26c>)
 80028a0:	e114      	b.n	8002acc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25c>
        int N = static_cast<int>(fft_length);
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	66bb      	str	r3, [r7, #104]	; 0x68
        float T = 1.0f / sampling_freq;
 80028a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80028ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80028be:	2300      	movs	r3, #0
 80028c0:	2101      	movs	r1, #1
 80028c2:	f7fe fd2a 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 80028c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x60>
 80028cc:	4c84      	ldr	r4, [pc, #528]	; (8002ae0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x270>)
 80028ce:	e0f8      	b.n	8002ac2 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x252>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 80028d0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028dc:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80028e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e2:	0fda      	lsrs	r2, r3, #31
 80028e4:	4413      	add	r3, r2
 80028e6:	105b      	asrs	r3, r3, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f002 f823 	bl	8004934 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80028ee:	ec53 2b10 	vmov	r2, r3, d0
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f7fe f987 	bl	8000c08 <__aeabi_d2uiz>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	eef0 0a48 	vmov.f32	s1, s16
 8002906:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8002ae4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x274>
 800290a:	f7ff f901 	bl	8001b10 <_ZN2ei5numpy8linspaceEffmPf>
 800290e:	6638      	str	r0, [r7, #96]	; 0x60
        if (ret != EIDSP_OK) {
 8002910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xaa>
            EIDSP_ERR(ret);
 8002916:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8002918:	e0d3      	b.n	8002ac2 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x252>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4619      	mov	r1, r3
 8002928:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800292c:	2300      	movs	r3, #0
 800292e:	2201      	movs	r2, #1
 8002930:	f7fe fcf3 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8002934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xce>
 800293a:	4c69      	ldr	r4, [pc, #420]	; (8002ae0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x270>)
 800293c:	e0bc      	b.n	8002ab8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 800293e:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002ae4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x274>
 800294a:	4619      	mov	r1, r3
 800294c:	6978      	ldr	r0, [r7, #20]
 800294e:	f7ff fe7d 	bl	800264c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8002952:	6638      	str	r0, [r7, #96]	; 0x60
        if (ret != EIDSP_OK) {
 8002954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xee>
            EIDSP_ERR(ret);
 800295a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800295c:	e0ac      	b.n	8002ab8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
        std::vector<freq_peak_t> peaks;
 800295e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff5d 	bl	8002822 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800296e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002972:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002974:	4293      	cmp	r3, r2
 8002976:	da3d      	bge.n	80029f4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x184>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800297a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800297c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800298c:	ee17 3a90 	vmov	r3, s15
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800299e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ae:	ee17 3a90 	vmov	r3, s15
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
            if (d.amplitude < threshold) {
 80029ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029be:	ed97 7a02 	vldr	s14, [r7, #8]
 80029c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	dd05      	ble.n	80029d8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x168>
                d.freq = 0.0f;
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
                d.amplitude = 0.0f;
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
            peaks.push_back(d);
 80029d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80029dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 f808 	bl	80049f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 80029e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80029ec:	3301      	adds	r3, #1
 80029ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029f2:	e7bc      	b.n	800296e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfe>
        sort(peaks.begin(), peaks.end(),
 80029f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 f823 	bl	8004a44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 80029fe:	4604      	mov	r4, r0
 8002a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 f82d 	bl	8004a64 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4620      	mov	r0, r4
 8002a12:	f002 f838 	bl	8004a86 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8002a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 f845 	bl	8004aaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8002a20:	6738      	str	r0, [r7, #112]	; 0x70
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d211      	bcs.n	8002a50 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e0>
            freq_peak_t d;
            d.freq = 0;
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
            d.amplitude = 0;
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
            peaks.push_back(d);
 8002a38:	f107 021c 	add.w	r2, r7, #28
 8002a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 ffd8 	bl	80049f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8002a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a4e:	e7e8      	b.n	8002a22 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1b2>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d226      	bcs.n	8002aac <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x23c>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8002a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a62:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a64:	4618      	mov	r0, r3
 8002a66:	f002 f830 	bl	8004aca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	6802      	ldr	r2, [r0, #0]
 8002a7e:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8002a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 f81f 	bl	8004aca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	6842      	ldr	r2, [r0, #4]
 8002aa2:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aaa:	e7d3      	b.n	8002a54 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e4>
        }

        return EIDSP_OK;
 8002aac:	2400      	movs	r4, #0
        std::vector<freq_peak_t> peaks;
 8002aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 ff85 	bl	80049c2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8002ab8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe fc57 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8002ac2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fc52 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8002acc:	4623      	mov	r3, r4
    }
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3778      	adds	r7, #120	; 0x78
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	ecbd 8b02 	vpop	{d8}
 8002ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	fffffc14 	.word	0xfffffc14
 8002ae0:	fffffc16 	.word	0xfffffc16
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b093      	sub	sp, #76	; 0x4c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6178      	str	r0, [r7, #20]
 8002af0:	6139      	str	r1, [r7, #16]
 8002af2:	60fa      	str	r2, [r7, #12]
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d103      	bne.n	8002b0a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002b0a:	4c7b      	ldr	r4, [pc, #492]	; (8002cf8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002b0c:	e0ef      	b.n	8002cee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002b16:	4c78      	ldr	r4, [pc, #480]	; (8002cf8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002b18:	e0e9      	b.n	8002cee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d105      	bne.n	8002b34 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002b34:	4c70      	ldr	r4, [pc, #448]	; (8002cf8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002b36:	e0da      	b.n	8002cee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002b44:	4c6c      	ldr	r4, [pc, #432]	; (8002cf8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002b46:	e0d2      	b.n	8002cee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002b52:	2300      	movs	r3, #0
 8002b54:	2101      	movs	r1, #1
 8002b56:	f7fe fbe0 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8002b60:	4c66      	ldr	r4, [pc, #408]	; (8002cfc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8002b62:	e0bf      	b.n	8002ce4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	1e5a      	subs	r2, r3, #1
 8002b6a:	f107 0018 	add.w	r0, r7, #24
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	f7fe fbd2 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8002b7c:	4c5f      	ldr	r4, [pc, #380]	; (8002cfc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8002b7e:	e0ac      	b.n	8002cda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002b86:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d264      	bcs.n	8002c5c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002bb8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d244      	bcs.n	8002c50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be2:	db2f      	blt.n	8002c44 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002bec:	3301      	adds	r3, #1
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	d51f      	bpl.n	8002c44 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 8002c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	ed93 7a00 	vldr	s14, [r3]
 8002c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c3e:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8002c42:	e005      	b.n	8002c50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002c44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002c4e:	e7b3      	b.n	8002bb8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002c50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c54:	3301      	adds	r3, #1
 8002c56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c5a:	e794      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002c62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d233      	bcs.n	8002cd8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	d109      	bne.n	8002c9c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e017      	b.n	8002ccc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8002c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	edd3 6a00 	vldr	s13, [r3]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc8:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002ccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002cd6:	e7c4      	b.n	8002c62 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 8002cd8:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8002cda:	f107 0318 	add.w	r3, r7, #24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fb46 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8002ce4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fb41 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8002cee:	4623      	mov	r3, r4
    }
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	374c      	adds	r7, #76	; 0x4c
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}
 8002cf8:	fffffc14 	.word	0xfffffc14
 8002cfc:	fffffc16 	.word	0xfffffc16

08002d00 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	ed2d 8b02 	vpush	{d8}
 8002d06:	b09b      	sub	sp, #108	; 0x6c
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6178      	str	r0, [r7, #20]
 8002d0c:	6139      	str	r1, [r7, #16]
 8002d0e:	60fa      	str	r2, [r7, #12]
 8002d10:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d14:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002d1e:	4c80      	ldr	r4, [pc, #512]	; (8002f20 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8002d20:	e192      	b.n	8003048 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	88fa      	ldrh	r2, [r7, #6]
 8002d30:	0852      	lsrs	r2, r2, #1
 8002d32:	b292      	uxth	r2, r2
 8002d34:	3201      	adds	r2, #1
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d001      	beq.n	8002d3e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002d3a:	4c79      	ldr	r4, [pc, #484]	; (8002f20 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8002d3c:	e184      	b.n	8003048 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	0852      	lsrs	r2, r2, #1
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	3201      	adds	r2, #1
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d001      	beq.n	8002d5a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002d56:	4c72      	ldr	r4, [pc, #456]	; (8002f20 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8002d58:	e176      	b.n	8003048 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002d62:	4c70      	ldr	r4, [pc, #448]	; (8002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002d64:	e170      	b.n	8003048 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002d6e:	4c6d      	ldr	r4, [pc, #436]	; (8002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002d70:	e16a      	b.n	8003048 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002d7a:	4c6a      	ldr	r4, [pc, #424]	; (8002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002d7c:	e164      	b.n	8003048 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002d8e:	f7fe fac4 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8002d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8002d98:	4c62      	ldr	r4, [pc, #392]	; (8002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002d9a:	e150      	b.n	800303e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d904      	bls.n	8002db6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002db4:	e006      	b.n	8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d201      	bcs.n	8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8002dc4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002dc8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f7fe faa3 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8002dda:	4c52      	ldr	r4, [pc, #328]	; (8002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002ddc:	e12a      	b.n	8003034 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002de4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002de8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d20d      	bcs.n	8002e0c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dfe:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8002e00:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002e04:	3301      	adds	r3, #1
 8002e06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002e0a:	e7eb      	b.n	8002de4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8002e0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e28:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d826      	bhi.n	8002e8e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8002e40:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e56:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e5e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002e62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002e6a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7e:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002e82:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002e86:	3301      	adds	r3, #1
 8002e88:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002e8c:	e7d1      	b.n	8002e32 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8002e8e:	f107 001c 	add.w	r0, r7, #28
 8002e92:	2300      	movs	r3, #0
 8002e94:	2201      	movs	r2, #1
 8002e96:	2101      	movs	r1, #1
 8002e98:	f7fe fa3f 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 8002ea2:	4c20      	ldr	r4, [pc, #128]	; (8002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002ea4:	e0c1      	b.n	800302a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8002ea6:	f107 021c 	add.w	r2, r7, #28
 8002eaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fc09 	bl	80016c8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8002eb6:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 8002ebe:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002ec0:	e0b3      	b.n	800302a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 8002ec2:	f107 021c 	add.w	r2, r7, #28
 8002ec6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fb63 	bl	8001598 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8002ed2:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8002ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 8002eda:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002edc:	e0a5      	b.n	800302a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f00a fab8 	bl	800d460 <_Z9ei_callocjj>
 8002ef0:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 8002ef2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ef4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	461a      	mov	r2, r3
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f08:	f7fe fd0a 	bl	8001920 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8002f0c:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8002f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8002f14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f16:	f00a fab1 	bl	800d47c <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8002f1a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002f1c:	e085      	b.n	800302a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 8002f1e:	bf00      	nop
 8002f20:	fffffc14 	.word	0xfffffc14
 8002f24:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d872      	bhi.n	8003022 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8002f3c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f44:	4413      	add	r3, r2
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f52:	4413      	add	r3, r2
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8002f5c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f64:	4413      	add	r3, r2
 8002f66:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f6a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f72:	4413      	add	r3, r2
 8002f74:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f80:	f7fe f864 	bl	800104c <_ZSt3absf>
 8002f84:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8002f88:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f90:	4413      	add	r3, r2
 8002f92:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002f96:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 8002f9a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 8002faa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb2:	4413      	add	r3, r2
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc0:	4413      	add	r3, r2
 8002fc2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d00f      	beq.n	8002ffc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 8002fdc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 8002ffc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003004:	441a      	add	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003016:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800301a:	3301      	adds	r3, #1
 800301c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003020:	e785      	b.n	8002f2e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003022:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003024:	f00a fa2a 	bl	800d47c <_Z7ei_freePv>

        return EIDSP_OK;
 8003028:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f99e 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe f999 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 800303e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f994 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8003048:	4623      	mov	r3, r4
    }
 800304a:	4618      	mov	r0, r3
 800304c:	3764      	adds	r7, #100	; 0x64
 800304e:	46bd      	mov	sp, r7
 8003050:	ecbd 8b02 	vpop	{d8}
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	bf00      	nop

08003058 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8003058:	b5b0      	push	{r4, r5, r7, lr}
 800305a:	b0b4      	sub	sp, #208	; 0xd0
 800305c:	af02      	add	r7, sp, #8
 800305e:	6178      	str	r0, [r7, #20]
 8003060:	6139      	str	r1, [r7, #16]
 8003062:	ed87 0a03 	vstr	s0, [r7, #12]
 8003066:	4611      	mov	r1, r2
 8003068:	edc7 0a01 	vstr	s1, [r7, #4]
 800306c:	461a      	mov	r2, r3
 800306e:	ed87 1a00 	vstr	s2, [r7]
 8003072:	460b      	mov	r3, r1
 8003074:	72fb      	strb	r3, [r7, #11]
 8003076:	4613      	mov	r3, r2
 8003078:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003086:	4cbe      	ldr	r4, [pc, #760]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003088:	e24a      	b.n	8003520 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c8>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	689d      	ldr	r5, [r3, #8]
 800308e:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	461a      	mov	r2, r3
 800309a:	2001      	movs	r0, #1
 800309c:	f000 fa46 	bl	800352c <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80030a0:	4603      	mov	r3, r0
 80030a2:	429d      	cmp	r5, r3
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80030b0:	4cb3      	ldr	r4, [pc, #716]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80030b2:	e235      	b.n	8003520 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c8>
        }

        if (edges_matrix_in->cols != 1) {
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80030be:	4cb0      	ldr	r4, [pc, #704]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80030c0:	e22e      	b.n	8003520 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c8>
        }

        int ret;

        size_t axes = input_matrix->rows;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 80030ca:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80030ce:	2300      	movs	r3, #0
 80030d0:	2201      	movs	r2, #1
 80030d2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80030d6:	f7fe f920 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 80030da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8e>
 80030e2:	4ca8      	ldr	r4, [pc, #672]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80030e4:	e217      	b.n	8003516 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
        ret = numpy::mean(input_matrix, &mean_matrix);
 80030e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030ea:	4619      	mov	r1, r3
 80030ec:	6938      	ldr	r0, [r7, #16]
 80030ee:	f7fe faeb 	bl	80016c8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 80030f2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        if (ret != EIDSP_OK) {
 80030f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xaa>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80030fe:	4ca0      	ldr	r4, [pc, #640]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003100:	e209      	b.n	8003516 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003102:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003106:	4619      	mov	r1, r3
 8003108:	6938      	ldr	r0, [r7, #16]
 800310a:	f7fe fa45 	bl	8001598 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800310e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        if (ret != EIDSP_OK) {
 8003112:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xc6>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800311a:	4c99      	ldr	r4, [pc, #612]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800311c:	e1fb      	b.n	8003516 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
        }

        // apply filter
        if (filter_type == filter_lowpass) {
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d110      	bne.n	8003146 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xee>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003124:	7abb      	ldrb	r3, [r7, #10]
 8003126:	4619      	mov	r1, r3
 8003128:	edd7 0a01 	vldr	s1, [r7, #4]
 800312c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003130:	6938      	ldr	r0, [r7, #16]
 8003132:	f7ff fa1f 	bl	8002574 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8003136:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800313a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d015      	beq.n	800316e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x116>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003142:	4c8f      	ldr	r4, [pc, #572]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003144:	e1e7      	b.n	8003516 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
            }
        }
        else if (filter_type == filter_highpass) {
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d110      	bne.n	800316e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x116>
            ret = spectral::processing::butterworth_highpass_filter(
 800314c:	7abb      	ldrb	r3, [r7, #10]
 800314e:	4619      	mov	r1, r3
 8003150:	edd7 0a01 	vldr	s1, [r7, #4]
 8003154:	ed97 0a03 	vldr	s0, [r7, #12]
 8003158:	6938      	ldr	r0, [r7, #16]
 800315a:	f7ff fa41 	bl	80025e0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 800315e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003162:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x116>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800316a:	4c85      	ldr	r4, [pc, #532]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800316c:	e1d3      	b.n	8003516 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 800316e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003172:	2300      	movs	r3, #0
 8003174:	2201      	movs	r2, #1
 8003176:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800317a:	f7fe f8ce 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 800317e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8003186:	4c7f      	ldr	r4, [pc, #508]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8003188:	e1c0      	b.n	800350c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4b4>
        ret = numpy::rms(input_matrix, &rms_matrix);
 800318a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800318e:	4619      	mov	r1, r3
 8003190:	6938      	ldr	r0, [r7, #16]
 8003192:	f7fe fa5d 	bl	8001650 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8003196:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        if (ret != EIDSP_OK) {
 800319a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x14e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80031a2:	4c77      	ldr	r4, [pc, #476]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80031a4:	e1b2      	b.n	800350c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4b4>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 80031a6:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	461a      	mov	r2, r3
 80031ae:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80031b8:	f7fe f8af 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 80031bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16e>
 80031c2:	4c70      	ldr	r4, [pc, #448]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80031c4:	e19d      	b.n	8003502 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4aa>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f080 8193 	bcs.w	8003500 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a8>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	689d      	ldr	r5, [r3, #8]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80031f6:	462a      	mov	r2, r5
 80031f8:	2101      	movs	r1, #1
 80031fa:	f7fe f88e 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1b2>
 8003204:	4c5f      	ldr	r4, [pc, #380]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8003206:	2500      	movs	r5, #0
 8003208:	e16d      	b.n	80034e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48e>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 800320a:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	3301      	adds	r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800321a:	2300      	movs	r3, #0
 800321c:	2101      	movs	r1, #1
 800321e:	f7fe f87c 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1d6>
 8003228:	4c56      	ldr	r4, [pc, #344]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800322a:	2500      	movs	r5, #0
 800322c:	e151      	b.n	80034d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47a>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 800322e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003230:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003232:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003234:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 8003236:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	462b      	mov	r3, r5
 800323e:	f7fe fa7f 	bl	8001740 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003242:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (ret != EIDSP_OK) {
 8003246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fc>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800324e:	4c4c      	ldr	r4, [pc, #304]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003250:	2500      	movs	r5, #0
 8003252:	e13e      	b.n	80034d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47a>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003254:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003260:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003268:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800326c:	eeb0 0a47 	vmov.f32	s0, s14
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe f917 	bl	80014a4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003276:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 800327a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800327e:	2300      	movs	r3, #0
 8003280:	2202      	movs	r2, #2
 8003282:	f7fe f84a 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8003286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23a>
 800328c:	4c3d      	ldr	r4, [pc, #244]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800328e:	2500      	movs	r5, #0
 8003290:	e115      	b.n	80034be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 8003292:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8003296:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800329a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800329e:	edd7 0a00 	vldr	s1, [r7]
 80032a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fae2 	bl	8002870 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 80032ac:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 80032b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x266>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80032b8:	4c31      	ldr	r4, [pc, #196]	; (8003380 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80032ba:	2500      	movs	r5, #0
 80032bc:	e0ff      	b.n	80034be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 80032be:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	461a      	mov	r2, r3
 80032ca:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80032ce:	2300      	movs	r3, #0
 80032d0:	2101      	movs	r1, #1
 80032d2:	f7fe f822 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x28a>
 80032dc:	4c29      	ldr	r4, [pc, #164]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80032de:	2500      	movs	r5, #0
 80032e0:	e0e3      	b.n	80034aa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 80032e2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	461a      	mov	r2, r3
 80032ee:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80032f2:	2300      	movs	r3, #0
 80032f4:	2101      	movs	r1, #1
 80032f6:	f7fe f810 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ae>
 8003300:	4c20      	ldr	r4, [pc, #128]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8003302:	2500      	movs	r5, #0
 8003304:	e0c7      	b.n	8003496 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = spectral::processing::periodogram(&axis_matrix,
 8003306:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800330a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800330e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003312:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003316:	ed97 0a03 	vldr	s0, [r7, #12]
 800331a:	f7ff fcf1 	bl	8002d00 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 800331e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003322:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2da>
                EIDSP_ERR(ret);
 800332a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800332e:	2500      	movs	r5, #0
 8003330:	e0b1      	b.n	8003496 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	1e59      	subs	r1, r3, #1
 800333a:	f107 001c 	add.w	r0, r7, #28
 800333e:	2300      	movs	r3, #0
 8003340:	2201      	movs	r2, #1
 8003342:	f7fd ffea 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2fa>
 800334c:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800334e:	2500      	movs	r5, #0
 8003350:	e097      	b.n	8003482 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::spectral_power_edges(
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800335a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800335e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003366:	f7ff fbbf 	bl	8002ae8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 800336a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 800336e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x330>
                EIDSP_ERR(ret);
 8003376:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800337a:	2500      	movs	r5, #0
 800337c:	e081      	b.n	8003482 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 800337e:	bf00      	nop
 8003380:	fffffc14 	.word	0xfffffc14
 8003384:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

            size_t fx = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            features_row[fx++] = rms_matrix.buffer[row];
 80033a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80033aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80033c2:	440b      	add	r3, r1
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d22c      	bcs.n	8003432 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3da>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 80033d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80033f8:	440b      	add	r3, r1
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 80033fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003402:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	3301      	adds	r3, #1
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003414:	1c59      	adds	r1, r3, #1
 8003416:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003420:	440b      	add	r3, r1
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800342a:	3301      	adds	r3, #1
 800342c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003430:	e7cd      	b.n	80033ce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x376>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800343e:	429a      	cmp	r2, r3
 8003440:	d21e      	bcs.n	8003480 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	ed93 7a00 	vldr	s14, [r3]
 8003456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003466:	4413      	add	r3, r2
 8003468:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800346c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003470:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003478:	3301      	adds	r3, #1
 800347a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800347e:	e7db      	b.n	8003438 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e0>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003480:	2501      	movs	r5, #1
 8003482:	f107 031c 	add.w	r3, r7, #28
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd ff72 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 800348c:	2d01      	cmp	r5, #1
 800348e:	d001      	beq.n	8003494 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 8003490:	2500      	movs	r5, #0
 8003492:	e000      	b.n	8003496 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003494:	2501      	movs	r5, #1
 8003496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd ff68 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 80034a0:	2d01      	cmp	r5, #1
 80034a2:	d001      	beq.n	80034a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 80034a4:	2500      	movs	r5, #0
 80034a6:	e000      	b.n	80034aa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 80034a8:	2501      	movs	r5, #1
 80034aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd ff5e 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 80034b4:	2d01      	cmp	r5, #1
 80034b6:	d001      	beq.n	80034bc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x464>
 80034b8:	2500      	movs	r5, #0
 80034ba:	e000      	b.n	80034be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 80034bc:	2501      	movs	r5, #1
 80034be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd ff54 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 80034c8:	2d01      	cmp	r5, #1
 80034ca:	d001      	beq.n	80034d0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
 80034cc:	2500      	movs	r5, #0
 80034ce:	e000      	b.n	80034d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47a>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80034d0:	2501      	movs	r5, #1
 80034d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd ff4a 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 80034dc:	2d01      	cmp	r5, #1
 80034de:	d001      	beq.n	80034e4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48c>
 80034e0:	2500      	movs	r5, #0
 80034e2:	e000      	b.n	80034e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48e>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80034e4:	2501      	movs	r5, #1
 80034e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd ff40 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 80034f0:	2d01      	cmp	r5, #1
 80034f2:	d106      	bne.n	8003502 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4aa>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80034f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f8:	3301      	adds	r3, #1
 80034fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034fe:	e665      	b.n	80031cc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x174>
            }
        }

        return EIDSP_OK;
 8003500:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003502:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd ff32 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 800350c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd ff2d 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 8003516:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd ff28 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8003520:	4623      	mov	r3, r4
    }
 8003522:	4618      	mov	r0, r3
 8003524:	37c8      	adds	r7, #200	; 0xc8
 8003526:	46bd      	mov	sp, r7
 8003528:	bdb0      	pop	{r4, r5, r7, pc}
 800352a:	bf00      	nop

0800352c <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4413      	add	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	4413      	add	r3, r2
 8003560:	3b01      	subs	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
        }
        return count;
 8003564:	697b      	ldr	r3, [r7, #20]
    }
 8003566:	4618      	mov	r0, r3
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
float ei_dsp_image_buffer[EI_DSP_IMAGE_BUFFER_STATIC_SIZE];
#endif

__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8003574:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003578:	b0c0      	sub	sp, #256	; 0x100
 800357a:	af04      	add	r7, sp, #16
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800358c:	461d      	mov	r5, r3
 800358e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800359a:	e884 0003 	stmia.w	r4, {r0, r1}

    int ret;

    const float sampling_freq = frequency;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80035b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035b4:	461a      	mov	r2, r3
 80035b6:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80035ba:	2300      	movs	r3, #0
 80035bc:	f7fd fead 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 80035c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x58>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80035c8:	4c97      	ldr	r4, [pc, #604]	; (8003828 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b4>)
 80035ca:	e121      	b.n	8003810 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x29c>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035d6:	2100      	movs	r1, #0
 80035d8:	f001 f97e 	bl	80048d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 80035dc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035e4:	eeb0 0a67 	vmov.f32	s0, s15
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd ff5b 	bl	80014a4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80035ee:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (ret != EIDSP_OK) {
 80035f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 80035fa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80035fe:	488b      	ldr	r0, [pc, #556]	; (800382c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b8>)
 8003600:	f000 fd7e 	bl	8004100 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8003604:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8003608:	e102      	b.n	8003810 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x29c>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 800360a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fec7 	bl	80013a2 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8003614:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (ret != EIDSP_OK) {
 8003618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xbc>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8003620:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003624:	4882      	ldr	r0, [pc, #520]	; (8003830 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2bc>)
 8003626:	f000 fd6b 	bl	8004100 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800362a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800362e:	e0ef      	b.n	8003810 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x29c>
    }

    // the spectral edges that we want to calculate
    matrix_t edges_matrix_in(64, 1);
 8003630:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8003634:	2300      	movs	r3, #0
 8003636:	2201      	movs	r2, #1
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	f7fd fe6e 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
    size_t edge_matrix_ix = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    char spectral_str[128] = { 0 };
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	227c      	movs	r2, #124	; 0x7c
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f012 f9cf 	bl	80159f4 <memset>
    if (strlen(config.spectral_power_edges) > sizeof(spectral_str) - 1) {
 8003656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc fde2 	bl	8000224 <strlen>
 8003660:	4603      	mov	r3, r0
 8003662:	2b7f      	cmp	r3, #127	; 0x7f
 8003664:	d901      	bls.n	800366a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf6>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8003666:	4c73      	ldr	r4, [pc, #460]	; (8003834 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c0>)
 8003668:	e0cd      	b.n	8003806 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x292>
    }
    memcpy(spectral_str, config.spectral_power_edges, strlen(config.spectral_power_edges));
 800366a:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800366e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc fdd6 	bl	8000224 <strlen>
 8003678:	4602      	mov	r2, r0
 800367a:	f107 0310 	add.w	r3, r7, #16
 800367e:	4621      	mov	r1, r4
 8003680:	4618      	mov	r0, r3
 8003682:	f012 f98f 	bl	80159a4 <memcpy>

    // convert spectral_power_edges (string) into float array
    char *spectral_ptr = spectral_str;
 8003686:	f107 0310 	add.w	r3, r7, #16
 800368a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 800368e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d034      	beq.n	8003700 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
        edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8003696:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800369a:	f012 f8a5 	bl	80157e8 <atof>
 800369e:	ec59 8b10 	vmov	r8, r9, d0
 80036a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80036a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	18d4      	adds	r4, r2, r3
 80036b4:	4640      	mov	r0, r8
 80036b6:	4649      	mov	r1, r9
 80036b8:	f7fd fac6 	bl	8000c48 <__aeabi_d2f>
 80036bc:	4603      	mov	r3, r0
 80036be:	6023      	str	r3, [r4, #0]

        // find next (spectral) delimiter (or '\0' character)
        while((*spectral_ptr != ',')) {
 80036c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b2c      	cmp	r3, #44	; 0x2c
 80036c8:	d00b      	beq.n	80036e2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16e>
            spectral_ptr++;
 80036ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036ce:	3301      	adds	r3, #1
 80036d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            if (*spectral_ptr == '\0') break;
 80036d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d000      	beq.n	80036e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16c>
        while((*spectral_ptr != ',')) {
 80036de:	e7ef      	b.n	80036c0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14c>
            if (*spectral_ptr == '\0') break;
 80036e0:	bf00      	nop
        }

        if (*spectral_ptr == '\0') {
 80036e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x180>
            spectral_ptr = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036f2:	e7cc      	b.n	800368e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11a>
        }
        else  {
            spectral_ptr++;
 80036f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036f8:	3301      	adds	r3, #1
 80036fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 80036fe:	e7c6      	b.n	800368e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11a>
        }
    }
    edges_matrix_in.rows = edge_matrix_ix;
 8003700:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // calculate how much room we need for the output matrix
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
        true, config.spectral_peaks_count, edges_matrix_in.rows
 8003708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 800370c:	4619      	mov	r1, r3
        true, config.spectral_peaks_count, edges_matrix_in.rows
 800370e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8003712:	461a      	mov	r2, r3
 8003714:	2001      	movs	r0, #1
 8003716:	f7ff ff09 	bl	800352c <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 800371a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    );
    // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
    if (output_matrix->cols * output_matrix->rows != static_cast<uint32_t>(output_matrix_cols * config.axes)) {
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	6852      	ldr	r2, [r2, #4]
 8003726:	fb02 f203 	mul.w	r2, r2, r3
 800372a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800372e:	4619      	mov	r1, r3
 8003730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003734:	fb03 f301 	mul.w	r3, r3, r1
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800373c:	4c3e      	ldr	r4, [pc, #248]	; (8003838 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c4>)
 800373e:	e062      	b.n	8003806 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x292>
    }

    output_matrix->cols = output_matrix_cols;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003746:	609a      	str	r2, [r3, #8]
    output_matrix->rows = config.axes;
 8003748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	605a      	str	r2, [r3, #4]

    spectral::filter_t filter_type;
    if (strcmp(config.filter_type, "low") == 0) {
 8003752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003756:	4939      	ldr	r1, [pc, #228]	; (800383c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c8>)
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fd59 	bl	8000210 <strcmp>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>
        filter_type = spectral::filter_lowpass;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800376a:	e00f      	b.n	800378c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x218>
    }
    else if (strcmp(config.filter_type, "high") == 0) {
 800376c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003770:	4933      	ldr	r1, [pc, #204]	; (8003840 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2cc>)
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc fd4c 	bl	8000210 <strcmp>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x212>
        filter_type = spectral::filter_highpass;
 800377e:	2302      	movs	r3, #2
 8003780:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003784:	e002      	b.n	800378c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x218>
    }
    else {
        filter_type = spectral::filter_none;
 8003786:	2300      	movs	r3, #0
 8003788:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    }

    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 800378c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
        sampling_freq, filter_type, config.filter_cutoff, config.filter_order,
 8003790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003794:	b2dd      	uxtb	r5, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 8003796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 800379a:	b29b      	uxth	r3, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 800379c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 80037a6:	f897 40e7 	ldrb.w	r4, [r7, #231]	; 0xe7
 80037aa:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80037ae:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80037b2:	9102      	str	r1, [sp, #8]
 80037b4:	9201      	str	r2, [sp, #4]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	eeb0 1a47 	vmov.f32	s2, s14
 80037bc:	462b      	mov	r3, r5
 80037be:	eef0 0a67 	vmov.f32	s1, s15
 80037c2:	4622      	mov	r2, r4
 80037c4:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 80037c8:	4601      	mov	r1, r0
 80037ca:	68b8      	ldr	r0, [r7, #8]
 80037cc:	f7ff fc44 	bl	8003058 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 80037d0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (ret != EIDSP_OK) {
 80037d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x278>
        ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 80037dc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80037e0:	4818      	ldr	r0, [pc, #96]	; (8003844 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d0>)
 80037e2:	f000 fc8d 	bl	8004100 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80037e6:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 80037ea:	e00c      	b.n	8003806 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x292>
    }

    // flatten again
    output_matrix->cols = config.axes * output_matrix_cols;
 80037ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037f0:	461a      	mov	r2, r3
 80037f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037f6:	fb03 f202 	mul.w	r2, r3, r2
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2201      	movs	r2, #1
 8003802:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 8003804:	2400      	movs	r4, #0
    matrix_t edges_matrix_in(64, 1);
 8003806:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fdb0 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 8003810:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fdab 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 800381a:	4623      	mov	r3, r4
}
 800381c:	4618      	mov	r0, r3
 800381e:	37f0      	adds	r7, #240	; 0xf0
 8003820:	46bd      	mov	sp, r7
 8003822:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003826:	bf00      	nop
 8003828:	fffffc16 	.word	0xfffffc16
 800382c:	0801a40c 	.word	0x0801a40c
 8003830:	0801a430 	.word	0x0801a430
 8003834:	fffffc10 	.word	0xfffffc10
 8003838:	fffffc14 	.word	0xfffffc14
 800383c:	0801a3f0 	.word	0x0801a3f0
 8003840:	0801a458 	.word	0x0801a458
 8003844:	0801a460 	.word	0x0801a460

08003848 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fd3d 	bl	80012d2 <_ZNSt14_Function_baseD1Ev>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f93c 	bl	8004aea <_ZNSt8functionIFijjPfEEC1Ev>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZN2ei11ei_signal_tD1Ev>:
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ffde 	bl	8003848 <_ZNSt8functionIFijjPfEED1Ev>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	330c      	adds	r3, #12
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ffd1 	bl	8003862 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	f000 f831 	bl	8003948 <_ZN14SignalWithAxes8get_dataEjjPf>
 80038e6:	4603      	mov	r3, r0
        };
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d102      	bne.n	8003906 <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	e019      	b.n	800393a <_ZN14SignalWithAxes10get_signalEv+0x4a>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <_ZN14SignalWithAxes10get_signalEv+0x54>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	fb02 f203 	mul.w	r2, r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	61da      	str	r2, [r3, #28]
        };
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f103 020c 	add.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f001 f907 	bl	8004b44 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	330c      	adds	r3, #12
    }
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	aaaaaaab 	.word	0xaaaaaaab

08003948 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]

        size_t out_ptr_ix = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = 0; ix < length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 800396c:	2300      	movs	r3, #0
 800396e:	623b      	str	r3, [r7, #32]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	429a      	cmp	r2, r3
 8003976:	d228      	bcs.n	80039ca <_ZN14SignalWithAxes8get_dataEjjPf+0x82>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d21d      	bcs.n	80039c2 <_ZN14SignalWithAxes8get_dataEjjPf+0x7a>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	18d1      	adds	r1, r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	627a      	str	r2, [r7, #36]	; 0x24
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	2201      	movs	r2, #1
 80039aa:	f000 ff95 	bl	80048d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80039ae:	6178      	str	r0, [r7, #20]
                if (r != 0) {
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <_ZN14SignalWithAxes8get_dataEjjPf+0x72>
                    return r;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	e008      	b.n	80039cc <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e7dc      	b.n	800397c <_ZN14SignalWithAxes8get_dataEjjPf+0x34>
        for (size_t ix = 0; ix < length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	3303      	adds	r3, #3
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	e7d2      	b.n	8003970 <_ZN14SignalWithAxes8get_dataEjjPf+0x28>
                }
            }
        }

        return 0;
 80039ca:	2300      	movs	r3, #0
    }
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_malloc(size_t align, size_t size)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x26>
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x74>)
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x78>)
 80039f2:	213c      	movs	r1, #60	; 0x3c
 80039f4:	4816      	ldr	r0, [pc, #88]	; (8003a50 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x7c>)
 80039f6:	f011 fed9 	bl	80157ac <__assert_func>

	if(align && size)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01e      	beq.n	8003a3e <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01b      	beq.n	8003a3e <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
		void * p = ei_malloc(size + hdr_size);
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f009 fd18 	bl	800d448 <_Z9ei_mallocj>
 8003a18:	60f8      	str	r0, [r7, #12]

		if(p)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	425b      	negs	r3, r3
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad2      	subs	r2, r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3b02      	subs	r3, #2
 8003a3a:	b292      	uxth	r2, r2
 8003a3c:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8003a3e:	697b      	ldr	r3, [r7, #20]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	0801a588 	.word	0x0801a588
 8003a4c:	0801a5a4 	.word	0x0801a5a4
 8003a50:	0801a5dc 	.word	0x0801a5dc

08003a54 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8003a64:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8003a66:	215f      	movs	r1, #95	; 0x5f
 8003a68:	480b      	ldr	r0, [pc, #44]	; (8003a98 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8003a6a:	f011 fe9f 	bl	80157ac <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8003a74:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	425b      	negs	r3, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8003a80:	68b8      	ldr	r0, [r7, #8]
 8003a82:	f009 fcfb 	bl	800d47c <_Z7ei_freePv>
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	0801a660 	.word	0x0801a660
 8003a94:	0801a664 	.word	0x0801a664
 8003a98:	0801a5dc 	.word	0x0801a5dc

08003a9c <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fee7 	bl	800387c <_ZN2ei11ei_signal_tD1Ev>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6178      	str	r0, [r7, #20]
 8003ac0:	6139      	str	r1, [r7, #16]
 8003ac2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ac6:	edc7 0a02 	vstr	s1, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d837      	bhi.n	8003b48 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	f993 3000 	ldrsb.w	r3, [r3]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aea:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8003b04:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4811      	ldr	r0, [pc, #68]	; (8003b54 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x9c>)
 8003b10:	f000 faf6 	bl	8004100 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8003b14:	ed97 0a06 	vldr	s0, [r7, #24]
 8003b18:	f009 fb8a 	bl	800d230 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003b1c:	480e      	ldr	r0, [pc, #56]	; (8003b58 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0xa0>)
 8003b1e:	f000 faef 	bl	8004100 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e7c4      	b.n	8003ad2 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x1a>
    }
}
 8003b48:	bf00      	nop
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000000 	.word	0x20000000
 8003b54:	0801a730 	.word	0x0801a730
 8003b58:	0801a738 	.word	0x0801a738

08003b5c <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d82a      	bhi.n	8003bca <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	613b      	str	r3, [r7, #16]

        if (debug) {
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00e      	beq.n	8003ba4 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x48>
            ei_printf("[Debug]%s:\t", ei_classifier_inferencing_categories[ix]);
 8003b86:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4811      	ldr	r0, [pc, #68]	; (8003bd8 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x7c>)
 8003b92:	f000 fab5 	bl	8004100 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8003b96:	ed97 0a04 	vldr	s0, [r7, #16]
 8003b9a:	f009 fb49 	bl	800d230 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003b9e:	480f      	ldr	r0, [pc, #60]	; (8003bdc <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x80>)
 8003ba0:	f000 faae 	bl	8004100 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8003ba4:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e7d1      	b.n	8003b6e <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x12>
    }
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	0801a73c 	.word	0x0801a73c
 8003bdc:	0801a738 	.word	0x0801a738

08003be0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>:
    TfLiteTensor** output_scores,
#endif
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter** micro_interpreter,
#endif
    uint8_t** micro_tensor_arena) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    TfLiteStatus init_status = trained_model_init(ei_aligned_malloc);
 8003bee:	4823      	ldr	r0, [pc, #140]	; (8003c7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x9c>)
 8003bf0:	f00d fbc6 	bl	8011380 <_Z18trained_model_initPFPvjjE>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	4619      	mov	r1, r3
 8003c02:	481f      	ldr	r0, [pc, #124]	; (8003c80 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xa0>)
 8003c04:	f000 fa7c 	bl	8004100 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8003c08:	f06f 0305 	mvn.w	r3, #5
 8003c0c:	e032      	b.n	8003c74 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x94>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    }
    *micro_tensor_arena = tensor_arena;
#endif

    *ctx_start_ms = ei_read_timer_ms();
 8003c0e:	f009 fb03 	bl	800d218 <_Z16ei_read_timer_msv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	e9c1 2300 	strd	r2, r3, [r1]
    resolver.AddCustom("TFLite_Detection_PostProcess", tflite::ops::micro::Register_TFLite_Detection_PostProcess());
#endif
#endif // EI_CLASSIFIER_COMPILED != 1

#if (EI_CLASSIFIER_COMPILED == 1)
    *input = trained_model_input(0);
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f00d fd5b 	bl	80116d8 <_Z19trained_model_inputi>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(0);
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f00d fd67 	bl	80116fc <_Z20trained_model_outputi>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]
    *output_labels = interpreter->output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#endif

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xa4>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01a      	beq.n	8003c72 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x92>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d006      	beq.n	8003c54 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x74>
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xa8>)
 8003c48:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xac>)
 8003c4a:	f44f 7106 	mov.w	r1, #536	; 0x218
 8003c4e:	4810      	ldr	r0, [pc, #64]	; (8003c90 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xb0>)
 8003c50:	f011 fdac 	bl	80157ac <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d006      	beq.n	8003c6c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x8c>
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xb4>)
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xac>)
 8003c62:	f240 2119 	movw	r1, #537	; 0x219
 8003c66:	480a      	ldr	r0, [pc, #40]	; (8003c90 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xb0>)
 8003c68:	f011 fda0 	bl	80157ac <__assert_func>
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
        }
#endif
        tflite_first_run = false;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xa4>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	080039d5 	.word	0x080039d5
 8003c80:	0801a748 	.word	0x0801a748
 8003c84:	2000005c 	.word	0x2000005c
 8003c88:	0801a77c 	.word	0x0801a77c
 8003c8c:	0801a7b4 	.word	0x0801a7b4
 8003c90:	0801a820 	.word	0x0801a820
 8003c94:	0801a8a4 	.word	0x0801a8a4

08003c98 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>:
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter* interpreter,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_invoke();
 8003ca6:	f00d fd3b 	bl	8011720 <_Z20trained_model_invokev>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    delete interpreter;
#endif

    uint64_t ctx_end_ms = ei_read_timer_ms();
 8003caa:	f009 fab5 	bl	800d218 <_Z16ei_read_timer_msv>
 8003cae:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification = ctx_end_ms - ctx_start_ms;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b09      	cmp	r3, #9
 8003cc4:	bf0c      	ite	eq
 8003cc6:	2301      	moveq	r3, #1
 8003cc8:	2300      	movne	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x66>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ce8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cec:	461a      	mov	r2, r3
 8003cee:	eef0 0a47 	vmov.f32	s1, s14
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf8:	f7ff fede 	bl	8003ab8 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>
 8003cfc:	e007      	b.n	8003d0e <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x76>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003d06:	4619      	mov	r1, r3
 8003d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0a:	f7ff ff27 	bl	8003b5c <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>
    }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_reset(ei_aligned_free);
 8003d0e:	480b      	ldr	r0, [pc, #44]	; (8003d3c <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xa4>)
 8003d10:	f00d fd3c 	bl	801178c <_Z19trained_model_resetPFvPvE>
#else
    ei_aligned_free(tensor_arena);
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003d14:	f009 fa78 	bl	800d208 <_Z29ei_run_impulse_check_canceledv>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f113 0f02 	cmn.w	r3, #2
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x98>
        return EI_IMPULSE_CANCELED;
 8003d2a:	f06f 0301 	mvn.w	r3, #1
 8003d2e:	e000      	b.n	8003d32 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x9a>
    }

    return EI_IMPULSE_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	08003a55 	.word	0x08003a55

08003d40 <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b099      	sub	sp, #100	; 0x64
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	71fb      	strb	r3, [r7, #7]
        TfLiteTensor* output_labels;
#endif
        uint8_t* tensor_arena;

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_ms, &input, &output,
 8003d4e:	f107 031c 	add.w	r3, r7, #28
 8003d52:	f107 0220 	add.w	r2, r7, #32
 8003d56:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003d5a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d5e:	f7ff ff3f 	bl	8003be0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            &output_labels,
            &output_scores,
    #endif
            &interpreter, &tensor_arena);
#endif
        if (init_res != EI_IMPULSE_OK) {
 8003d68:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <run_inference+0x36>
            return init_res;
 8003d70:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003d74:	e0bb      	b.n	8003eee <run_inference+0x1ae>
            else {
                input->data.f[ix] = fmatrix->buffer[ix];
            }
        }
#else
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b09      	cmp	r3, #9
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003d86:	2300      	movs	r3, #0
 8003d88:	657b      	str	r3, [r7, #84]	; 0x54
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	6892      	ldr	r2, [r2, #8]
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d239      	bcs.n	8003e10 <run_inference+0xd0>
            // Quantize the input if it is int8
            if (int8_input) {
 8003d9c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d025      	beq.n	8003df0 <run_inference+0xb0>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	ed93 7a00 	vldr	s14, [r3]
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003db8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dbc:	eeb0 0a66 	vmov.f32	s0, s13
 8003dc0:	f7fd f974 	bl	80010ac <_ZSt5roundf>
 8003dc4:	eeb0 7a40 	vmov.f32	s14, s0
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	4413      	add	r3, r2
 8003de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003de4:	edc7 7a00 	vstr	s15, [r7]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	b252      	sxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e00b      	b.n	8003e08 <run_inference+0xc8>
                // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	6859      	ldr	r1, [r3, #4]
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e0e:	e7bc      	b.n	8003d8a <run_inference+0x4a>
            }
        }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_ms, output,
 8003e10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	69fc      	ldr	r4, [r7, #28]
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4623      	mov	r3, r4
 8003e22:	f7ff ff39 	bl	8003c98 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            output_scores,
    #endif
            interpreter, tensor_arena, result, debug);
#endif

        if (run_res != EI_IMPULSE_OK) {
 8003e2c:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <run_inference+0xfa>
            return run_res;
 8003e34:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8003e38:	e059      	b.n	8003eee <run_inference+0x1ae>

#if EI_CLASSIFIER_HAS_ANOMALY == 1

    // Anomaly detection
    {
        uint64_t anomaly_start_ms = ei_read_timer_ms();
 8003e3a:	f009 f9ed 	bl	800d218 <_Z16ei_read_timer_msv>
 8003e3e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

        float input[EI_CLASSIFIER_ANOM_AXIS_SIZE];
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 8003e42:	2300      	movs	r3, #0
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
 8003e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d813      	bhi.n	8003e74 <run_inference+0x134>
            input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4929      	ldr	r1, [pc, #164]	; (8003ef8 <run_inference+0x1b8>)
 8003e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003e66:	440b      	add	r3, r1
 8003e68:	3b48      	subs	r3, #72	; 0x48
 8003e6a:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 8003e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6e:	3301      	adds	r3, #1
 8003e70:	653b      	str	r3, [r7, #80]	; 0x50
 8003e72:	e7e8      	b.n	8003e46 <run_inference+0x106>
        }
        standard_scaler(input, ei_classifier_anom_scale, ei_classifier_anom_mean, EI_CLASSIFIER_ANOM_AXIS_SIZE);
 8003e74:	f107 0010 	add.w	r0, r7, #16
 8003e78:	2303      	movs	r3, #3
 8003e7a:	4a20      	ldr	r2, [pc, #128]	; (8003efc <run_inference+0x1bc>)
 8003e7c:	4920      	ldr	r1, [pc, #128]	; (8003f00 <run_inference+0x1c0>)
 8003e7e:	f7fd f925 	bl	80010cc <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
        float anomaly = get_min_distance_to_cluster(
 8003e82:	f107 0010 	add.w	r0, r7, #16
 8003e86:	2320      	movs	r3, #32
 8003e88:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <run_inference+0x1c4>)
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	f7fd f99a 	bl	80011c4 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8003e90:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
            input, EI_CLASSIFIER_ANOM_AXIS_SIZE, ei_classifier_anom_clusters, EI_CLASSIFIER_ANOM_CLUSTER_COUNT);

        uint64_t anomaly_end_ms = ei_read_timer_ms();
 8003e94:	f009 f9c0 	bl	800d218 <_Z16ei_read_timer_msv>
 8003e98:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        if (debug) {
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <run_inference+0x17e>
            ei_printf("[Debug]Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 8003ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4817      	ldr	r0, [pc, #92]	; (8003f08 <run_inference+0x1c8>)
 8003eac:	f000 f928 	bl	8004100 <_Z9ei_printfPKcz>
            ei_printf_float(anomaly);
 8003eb0:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8003eb4:	f009 f9bc 	bl	800d230 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003eb8:	4814      	ldr	r0, [pc, #80]	; (8003f0c <run_inference+0x1cc>)
 8003eba:	f000 f921 	bl	8004100 <_Z9ei_printfPKcz>
        }

        result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	649a      	str	r2, [r3, #72]	; 0x48

        result->anomaly = anomaly;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003ed0:	f009 f99a 	bl	800d208 <_Z29ei_run_impulse_check_canceledv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f113 0f02 	cmn.w	r3, #2
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <run_inference+0x1ac>
        return EI_IMPULSE_CANCELED;
 8003ee6:	f06f 0301 	mvn.w	r3, #1
 8003eea:	e000      	b.n	8003eee <run_inference+0x1ae>
    }

    return EI_IMPULSE_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	375c      	adds	r7, #92	; 0x5c
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	0801b66c 	.word	0x0801b66c
 8003efc:	0801b680 	.word	0x0801b680
 8003f00:	0801b674 	.word	0x0801b674
 8003f04:	0801b68c 	.word	0x0801b68c
 8003f08:	0801a8dc 	.word	0x0801a8dc
 8003f0c:	0801a738 	.word	0x0801a738

08003f10 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	b09f      	sub	sp, #124	; 0x7c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
 8003f1e:	2600      	movs	r6, #0
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003f20:	224c      	movs	r2, #76	; 0x4c
 8003f22:	2100      	movs	r1, #0
 8003f24:	68b8      	ldr	r0, [r7, #8]
 8003f26:	f011 fd65 	bl	80159f4 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8003f2a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2221      	movs	r2, #33	; 0x21
 8003f32:	2101      	movs	r1, #1
 8003f34:	f7fd f9f1 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_ms = ei_read_timer_ms();
 8003f38:	f009 f96e 	bl	800d218 <_Z16ei_read_timer_msv>
 8003f3c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	677b      	str	r3, [r7, #116]	; 0x74

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8003f44:	2300      	movs	r3, #0
 8003f46:	673b      	str	r3, [r7, #112]	; 0x70
 8003f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d16c      	bne.n	8004028 <run_classifier+0x118>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 8003f4e:	4948      	ldr	r1, [pc, #288]	; (8004070 <run_classifier+0x160>)
 8003f50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003f60:	461d      	mov	r5, r3
 8003f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 8003f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6e:	4413      	add	r3, r2
 8003f70:	2b21      	cmp	r3, #33	; 0x21
 8003f72:	d905      	bls.n	8003f80 <run_classifier+0x70>
            ei_printf("ERR: Would write outside feature buffer\n");
 8003f74:	483f      	ldr	r0, [pc, #252]	; (8004074 <run_classifier+0x164>)
 8003f76:	f000 f8c3 	bl	8004100 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003f7a:	f06f 0604 	mvn.w	r6, #4
 8003f7e:	e06c      	b.n	800405a <run_classifier+0x14a>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8003f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003f8e:	460a      	mov	r2, r1
 8003f90:	2101      	movs	r1, #1
 8003f92:	f7fd f9c2 	bl	800131a <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8003f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9a:	f107 0010 	add.w	r0, r7, #16
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	f7ff fc79 	bl	8003896 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8003fa4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8003fa6:	f107 0310 	add.w	r3, r7, #16
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fca0 	bl	80038f0 <_ZN14SignalWithAxes10get_signalEv>
 8003fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fb6:	eeb2 0a06 	vmov.f32	s0, #38	; 0x41300000  11.0
 8003fba:	4619      	mov	r1, r3
 8003fbc:	47a0      	blx	r4
 8003fbe:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 8003fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <run_classifier+0xc6>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8003fc6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003fc8:	482b      	ldr	r0, [pc, #172]	; (8004078 <run_classifier+0x168>)
 8003fca:	f000 f899 	bl	8004100 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003fce:	f06f 0604 	mvn.w	r6, #4
 8003fd2:	2400      	movs	r4, #0
 8003fd4:	e013      	b.n	8003ffe <run_classifier+0xee>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003fd6:	f009 f917 	bl	800d208 <_Z29ei_run_impulse_check_canceledv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f113 0f02 	cmn.w	r3, #2
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <run_classifier+0xe4>
            return EI_IMPULSE_CANCELED;
 8003fec:	f06f 0601 	mvn.w	r6, #1
 8003ff0:	2400      	movs	r4, #0
 8003ff2:	e004      	b.n	8003ffe <run_classifier+0xee>
        }

        out_features_index += block.n_output_features;
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ff8:	4413      	add	r3, r2
 8003ffa:	677b      	str	r3, [r7, #116]	; 0x74
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8003ffc:	2401      	movs	r4, #1
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fd4a 	bl	8003a9c <_ZN14SignalWithAxesD1Ev>
 8004008:	2c01      	cmp	r4, #1
 800400a:	d001      	beq.n	8004010 <run_classifier+0x100>
 800400c:	2400      	movs	r4, #0
 800400e:	e000      	b.n	8004012 <run_classifier+0x102>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8004010:	2401      	movs	r4, #1
 8004012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd f9aa 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 800401c:	2c01      	cmp	r4, #1
 800401e:	d11c      	bne.n	800405a <run_classifier+0x14a>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8004020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004022:	3301      	adds	r3, #1
 8004024:	673b      	str	r3, [r7, #112]	; 0x70
 8004026:	e78f      	b.n	8003f48 <run_classifier+0x38>
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 8004028:	f009 f8f6 	bl	800d218 <_Z16ei_read_timer_msv>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	461a      	mov	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
        //}
        //ei_printf("\n");
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <run_classifier+0x136>
        ei_printf("Running neural network...\n");
 8004040:	480e      	ldr	r0, [pc, #56]	; (800407c <run_classifier+0x16c>)
 8004042:	f000 f85d 	bl	8004100 <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 8004046:	79fa      	ldrb	r2, [r7, #7]
 8004048:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fe76 	bl	8003d40 <run_inference>
 8004054:	4603      	mov	r3, r0
 8004056:	461e      	mov	r6, r3
 8004058:	e000      	b.n	800405c <run_classifier+0x14c>
            return EI_IMPULSE_DSP_ERROR;
 800405a:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 800405c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd f985 	bl	8001370 <_ZN2ei9ei_matrixD1Ev>
 8004066:	4633      	mov	r3, r6
}
 8004068:	4618      	mov	r0, r3
 800406a:	377c      	adds	r7, #124	; 0x7c
 800406c:	46bd      	mov	sp, r7
 800406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004070:	20000048 	.word	0x20000048
 8004074:	0801a690 	.word	0x0801a690
 8004078:	0801a708 	.word	0x0801a708
 800407c:	0801a904 	.word	0x0801a904

08004080 <_Z16get_feature_datajjPf>:

using namespace ei;

static float features[33] = {0}; //declare feature container[0:32] to store rawX,rawY,rawZ

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float)); //out_ptr is destination, feature+offset is source, size
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <_Z16get_feature_datajjPf+0x2c>)
 8004092:	1899      	adds	r1, r3, r2
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	461a      	mov	r2, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f011 fc82 	bl	80159a4 <memcpy>
    return 0;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000364 	.word	0x20000364

080040b0 <_Z6vprintPKcSt9__va_list>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b0b4      	sub	sp, #208	; 0xd0
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f013 fd1c 	bl	8017b00 <vsiprintf>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfcc      	ite	gt
 80040ce:	2301      	movgt	r3, #1
 80040d0:	2300      	movle	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <_Z6vprintPKcSt9__va_list+0x44>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80040d8:	f107 0308 	add.w	r3, r7, #8
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc f8a1 	bl	8000224 <strlen>
 80040e2:	4603      	mov	r3, r0
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	f107 0108 	add.w	r1, r7, #8
 80040ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <_Z6vprintPKcSt9__va_list+0x4c>)
 80040f0:	f004 fb49 	bl	8008786 <HAL_UART_Transmit>
    }
}
 80040f4:	bf00      	nop
 80040f6:	37d0      	adds	r7, #208	; 0xd0
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	200004c8 	.word	0x200004c8

08004100 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8004100:	b40f      	push	{r0, r1, r2, r3}
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	6938      	ldr	r0, [r7, #16]
 8004112:	f7ff ffcd 	bl	80040b0 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004120:	b004      	add	sp, #16
 8004122:	4770      	bx	lr

08004124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b0d2      	sub	sp, #328	; 0x148
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800412a:	f002 fdeb 	bl	8006d04 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal; //construct a struc signal_t
 800412e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fb95 	bl	8003862 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]); //feature length
 8004138:	2321      	movs	r3, #33	; 0x21
 800413a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  signal.get_data = &get_feature_data;
 800413e:	4b97      	ldr	r3, [pc, #604]	; (800439c <main+0x278>)
 8004140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004144:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004148:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fcd8 	bl	8004b04 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004154:	f000 f938 	bl	80043c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004158:	f000 fb08 	bl	800476c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800415c:	f000 fad8 	bl	8004710 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8004160:	f000 f9aa 	bl	80044b8 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8004164:	f000 fa04 	bl	8004570 <_ZL12MX_ADC2_Initv>
  MX_ADC3_Init();
 8004168:	f000 fa5e 	bl	8004628 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 800416c:	f000 fab8 	bl	80046e0 <_ZL11MX_CRC_Initv>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
///*
	    int i; //features[i] iterator
	  	char highest_cat[100]=""; //store the name of highest confidence class name
 8004170:	2300      	movs	r3, #0
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004174:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004178:	2260      	movs	r2, #96	; 0x60
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f011 fc39 	bl	80159f4 <memset>
	  	float highest=0;  //store highest confidence class's score
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	  	if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==GPIO_PIN_RESET){ //check user want to perform inferencing
 800418a:	2120      	movs	r1, #32
 800418c:	4884      	ldr	r0, [pc, #528]	; (80043a0 <main+0x27c>)
 800418e:	f003 fced 	bl	8007b6c <HAL_GPIO_ReadPin>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80e2 	beq.w	8004368 <main+0x244>
	  	  	for(i=0; i<33;i+=3){ //collect features[0:32] through ADC if user wan to perform inferencing
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80041aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	dc55      	bgt.n	800425e <main+0x13a>

	  	  	  	  			//Get ADC value
	  	  	  	  	  		HAL_ADC_Start(&hadc1);
 80041b2:	487c      	ldr	r0, [pc, #496]	; (80043a4 <main+0x280>)
 80041b4:	f002 fe80 	bl	8006eb8 <HAL_ADC_Start>
	  	  	  	  	  		HAL_ADC_Start(&hadc3);
 80041b8:	487b      	ldr	r0, [pc, #492]	; (80043a8 <main+0x284>)
 80041ba:	f002 fe7d 	bl	8006eb8 <HAL_ADC_Start>
	  	  	  	  	  		HAL_ADC_Start(&hadc2);
 80041be:	487b      	ldr	r0, [pc, #492]	; (80043ac <main+0x288>)
 80041c0:	f002 fe7a 	bl	8006eb8 <HAL_ADC_Start>
	  	  	  	  	  		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80041c4:	f04f 31ff 	mov.w	r1, #4294967295
 80041c8:	4876      	ldr	r0, [pc, #472]	; (80043a4 <main+0x280>)
 80041ca:	f002 ff47 	bl	800705c <HAL_ADC_PollForConversion>
	  	  	  	  	  		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80041ce:	f04f 31ff 	mov.w	r1, #4294967295
 80041d2:	4875      	ldr	r0, [pc, #468]	; (80043a8 <main+0x284>)
 80041d4:	f002 ff42 	bl	800705c <HAL_ADC_PollForConversion>
	  	  	  	  	  		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80041d8:	f04f 31ff 	mov.w	r1, #4294967295
 80041dc:	4873      	ldr	r0, [pc, #460]	; (80043ac <main+0x288>)
 80041de:	f002 ff3d 	bl	800705c <HAL_ADC_PollForConversion>
	  	  	  	  	  		rawX = HAL_ADC_GetValue(&hadc1);
 80041e2:	4870      	ldr	r0, [pc, #448]	; (80043a4 <main+0x280>)
 80041e4:	f002 ffc5 	bl	8007172 <HAL_ADC_GetValue>
 80041e8:	ee07 0a90 	vmov	s15, r0
 80041ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f0:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
	  	  	  	  	  		rawY = HAL_ADC_GetValue(&hadc3);
 80041f4:	486c      	ldr	r0, [pc, #432]	; (80043a8 <main+0x284>)
 80041f6:	f002 ffbc 	bl	8007172 <HAL_ADC_GetValue>
 80041fa:	ee07 0a90 	vmov	s15, r0
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
	  	  	  	  	  		rawZ = HAL_ADC_GetValue(&hadc2);
 8004206:	4869      	ldr	r0, [pc, #420]	; (80043ac <main+0x288>)
 8004208:	f002 ffb3 	bl	8007172 <HAL_ADC_GetValue>
 800420c:	ee07 0a90 	vmov	s15, r0
 8004210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004214:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130

	  	  	  	  	  		features[i]= rawX;
 8004218:	4a65      	ldr	r2, [pc, #404]	; (80043b0 <main+0x28c>)
 800421a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004226:	601a      	str	r2, [r3, #0]
	  	  	  	  	  		features[i+1]= rawY;
 8004228:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800422c:	3301      	adds	r3, #1
 800422e:	4a60      	ldr	r2, [pc, #384]	; (80043b0 <main+0x28c>)
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004238:	601a      	str	r2, [r3, #0]
	  	  	  	  	  		features[i+2]= rawZ;
 800423a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800423e:	3302      	adds	r3, #2
 8004240:	4a5b      	ldr	r2, [pc, #364]	; (80043b0 <main+0x28c>)
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800424a:	601a      	str	r2, [r3, #0]
	  	  	  	  	  		HAL_Delay(90.91); // 11Hz similar as frenquency of train data
 800424c:	205a      	movs	r0, #90	; 0x5a
 800424e:	f002 fdcb 	bl	8006de8 <HAL_Delay>
	  	  	for(i=0; i<33;i+=3){ //collect features[0:32] through ADC if user wan to perform inferencing
 8004252:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004256:	3303      	adds	r3, #3
 8004258:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800425c:	e7a5      	b.n	80041aa <main+0x86>

	  	  	 }//end collecting raw data


	  	   ei_impulse_result_t result = { 0 }; //typedef is create aliase for cretain command; while  #if is determine this code will be compile if A is declared in #define eg: #ifdef A
 800425e:	463b      	mov	r3, r7
 8004260:	4618      	mov	r0, r3
 8004262:	234c      	movs	r3, #76	; 0x4c
 8004264:	461a      	mov	r2, r3
 8004266:	2100      	movs	r1, #0
 8004268:	f011 fbc4 	bl	80159f4 <memset>
	  	  	  	        EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 800426c:	4639      	mov	r1, r7
 800426e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004272:	2201      	movs	r2, #1
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fe4b 	bl	8003f10 <run_classifier>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

	  	  	// print the predictions
	  	  	//ei_printf("[");
	  	  	*/
///*
	  	  	for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) { //size_t = maximum size container allocation; while it loop each classes
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004286:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800428a:	2b06      	cmp	r3, #6
 800428c:	d828      	bhi.n	80042e0 <main+0x1bc>

	  	  	//ei_printf_float(result.classification[ix].value); //confidente % , result class store all answer
	  	  	if (result.classification[ix].value>highest) { //get the highest confidence score and class name
 800428e:	463a      	mov	r2, r7
 8004290:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	edd3 7a00 	vldr	s15, [r3]
 800429e:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 80042a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	d513      	bpl.n	80042d4 <main+0x1b0>
	  	  	  	strcpy(highest_cat,result.classification[ix].label);
 80042ac:	463b      	mov	r3, r7
 80042ae:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80042b2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80042b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f012 fd31 	bl	8016d24 <strcpy>
	  	  	  	highest=result.classification[ix].value;
 80042c2:	463a      	mov	r2, r7
 80042c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	  	  	for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) { //size_t = maximum size container allocation; while it loop each classes
 80042d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80042d8:	3301      	adds	r3, #1
 80042da:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80042de:	e7d2      	b.n	8004286 <main+0x162>
	  	  	       //ei_printf_float(result.anomaly);
	  	  	#endif
	  	  	       //ei_printf("]\n\n\n");

	  	  	//User LCD output result
	  	  	sprintf(msg, "\n\n\n\n\n ===================================================================================\n");
 80042e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80042e4:	4933      	ldr	r1, [pc, #204]	; (80043b4 <main+0x290>)
 80042e6:	4618      	mov	r0, r3
 80042e8:	f012 fcfc 	bl	8016ce4 <siprintf>
	  	  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80042ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fb ff97 	bl	8000224 <strlen>
 80042f6:	4603      	mov	r3, r0
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	482d      	ldr	r0, [pc, #180]	; (80043b8 <main+0x294>)
 8004304:	f004 fa3f 	bl	8008786 <HAL_UART_Transmit>
	  	  	sprintf(msg, "\n\n I am expressing:\t\t%s\t\t\t\n",highest_cat);
 8004308:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800430c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004310:	492a      	ldr	r1, [pc, #168]	; (80043bc <main+0x298>)
 8004312:	4618      	mov	r0, r3
 8004314:	f012 fce6 	bl	8016ce4 <siprintf>
	  	  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004318:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fb ff81 	bl	8000224 <strlen>
 8004322:	4603      	mov	r3, r0
 8004324:	b29a      	uxth	r2, r3
 8004326:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800432a:	f04f 33ff 	mov.w	r3, #4294967295
 800432e:	4822      	ldr	r0, [pc, #136]	; (80043b8 <main+0x294>)
 8004330:	f004 fa29 	bl	8008786 <HAL_UART_Transmit>
	  	  	sprintf(msg, "\n\n ===================================================================================\n");
 8004334:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004338:	4921      	ldr	r1, [pc, #132]	; (80043c0 <main+0x29c>)
 800433a:	4618      	mov	r0, r3
 800433c:	f012 fcd2 	bl	8016ce4 <siprintf>
	  	  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004340:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004344:	4618      	mov	r0, r3
 8004346:	f7fb ff6d 	bl	8000224 <strlen>
 800434a:	4603      	mov	r3, r0
 800434c:	b29a      	uxth	r2, r3
 800434e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	4818      	ldr	r0, [pc, #96]	; (80043b8 <main+0x294>)
 8004358:	f004 fa15 	bl	8008786 <HAL_UART_Transmit>
	  	  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800435c:	2200      	movs	r2, #0
 800435e:	2120      	movs	r1, #32
 8004360:	480f      	ldr	r0, [pc, #60]	; (80043a0 <main+0x27c>)
 8004362:	f003 fc1b 	bl	8007b9c <HAL_GPIO_WritePin>
 8004366:	e013      	b.n	8004390 <main+0x26c>
	  	  	}


	  	  else { //if user do not wan to preform inferencing
	  	  	 sprintf(msg, "\n\n Press blue button and start your expression\n\n");
 8004368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800436c:	4915      	ldr	r1, [pc, #84]	; (80043c4 <main+0x2a0>)
 800436e:	4618      	mov	r0, r3
 8004370:	f012 fcb8 	bl	8016ce4 <siprintf>
	  	  	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004374:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004378:	4618      	mov	r0, r3
 800437a:	f7fb ff53 	bl	8000224 <strlen>
 800437e:	4603      	mov	r3, r0
 8004380:	b29a      	uxth	r2, r3
 8004382:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	480b      	ldr	r0, [pc, #44]	; (80043b8 <main+0x294>)
 800438c:	f004 f9fb 	bl	8008786 <HAL_UART_Transmit>
	  	  	 }

	  	HAL_Delay(3000); //auto check in next 3s
 8004390:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004394:	f002 fd28 	bl	8006de8 <HAL_Delay>
	  	  	  	  		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	  	  	  	  		HAL_Delay(90.91);
*/

	    } //end while(1) loop
 8004398:	e6ea      	b.n	8004170 <main+0x4c>
 800439a:	bf00      	nop
 800439c:	08004081 	.word	0x08004081
 80043a0:	40020000 	.word	0x40020000
 80043a4:	200003e8 	.word	0x200003e8
 80043a8:	20000478 	.word	0x20000478
 80043ac:	20000430 	.word	0x20000430
 80043b0:	20000364 	.word	0x20000364
 80043b4:	0801a968 	.word	0x0801a968
 80043b8:	200004c8 	.word	0x200004c8
 80043bc:	0801a9c4 	.word	0x0801a9c4
 80043c0:	0801a9e0 	.word	0x0801a9e0
 80043c4:	0801aa38 	.word	0x0801aa38

080043c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b094      	sub	sp, #80	; 0x50
 80043cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043ce:	f107 031c 	add.w	r3, r7, #28
 80043d2:	2234      	movs	r2, #52	; 0x34
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f011 fb0c 	bl	80159f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043dc:	f107 0308 	add.w	r3, r7, #8
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	2300      	movs	r3, #0
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <_Z18SystemClock_Configv+0xe8>)
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	4a2e      	ldr	r2, [pc, #184]	; (80044b0 <_Z18SystemClock_Configv+0xe8>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6413      	str	r3, [r2, #64]	; 0x40
 80043fc:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <_Z18SystemClock_Configv+0xe8>)
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004408:	2300      	movs	r3, #0
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <_Z18SystemClock_Configv+0xec>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004414:	4a27      	ldr	r2, [pc, #156]	; (80044b4 <_Z18SystemClock_Configv+0xec>)
 8004416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <_Z18SystemClock_Configv+0xec>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004428:	2302      	movs	r3, #2
 800442a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800442c:	2301      	movs	r3, #1
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004430:	2310      	movs	r3, #16
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004434:	2302      	movs	r3, #2
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004438:	2300      	movs	r3, #0
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800443c:	2310      	movs	r3, #16
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004440:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004444:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004446:	2304      	movs	r3, #4
 8004448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800444a:	2302      	movs	r3, #2
 800444c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800444e:	2302      	movs	r3, #2
 8004450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004452:	f107 031c 	add.w	r3, r7, #28
 8004456:	4618      	mov	r0, r3
 8004458:	f003 feaa 	bl	80081b0 <HAL_RCC_OscConfig>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 800446c:	f000 f9f6 	bl	800485c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004470:	230f      	movs	r3, #15
 8004472:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004474:	2302      	movs	r3, #2
 8004476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800447c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004480:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	2102      	movs	r1, #2
 800448c:	4618      	mov	r0, r3
 800448e:	f003 fbc3 	bl	8007c18 <HAL_RCC_ClockConfig>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80044a2:	f000 f9db 	bl	800485c <Error_Handler>
  }
}
 80044a6:	bf00      	nop
 80044a8:	3750      	adds	r7, #80	; 0x50
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000

080044b8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80044be:	463b      	mov	r3, r7
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <_ZL12MX_ADC1_Initv+0xb0>)
 80044ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80044d0:	4b24      	ldr	r3, [pc, #144]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80044de:	4b21      	ldr	r3, [pc, #132]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80044e4:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80044ea:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 80044fa:	4a1c      	ldr	r2, [pc, #112]	; (800456c <_ZL12MX_ADC1_Initv+0xb4>)
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044fe:	4b19      	ldr	r3, [pc, #100]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 8004500:	2200      	movs	r2, #0
 8004502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 8004506:	2201      	movs	r2, #1
 8004508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800450a:	4b16      	ldr	r3, [pc, #88]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 8004514:	2201      	movs	r2, #1
 8004516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004518:	4812      	ldr	r0, [pc, #72]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 800451a:	f002 fc89 	bl	8006e30 <HAL_ADC_Init>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800452e:	f000 f995 	bl	800485c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004532:	2300      	movs	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800453e:	463b      	mov	r3, r7
 8004540:	4619      	mov	r1, r3
 8004542:	4808      	ldr	r0, [pc, #32]	; (8004564 <_ZL12MX_ADC1_Initv+0xac>)
 8004544:	f002 fe22 	bl	800718c <HAL_ADC_ConfigChannel>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf14      	ite	ne
 800454e:	2301      	movne	r3, #1
 8004550:	2300      	moveq	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8004558:	f000 f980 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	200003e8 	.word	0x200003e8
 8004568:	40012000 	.word	0x40012000
 800456c:	0f000001 	.word	0x0f000001

08004570 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004576:	463b      	mov	r3, r7
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 8004584:	4a26      	ldr	r2, [pc, #152]	; (8004620 <_ZL12MX_ADC2_Initv+0xb0>)
 8004586:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 800458a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800458e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 800459e:	2200      	movs	r2, #0
 80045a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80045a2:	4b1e      	ldr	r3, [pc, #120]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <_ZL12MX_ADC2_Initv+0xb4>)
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045b6:	4b19      	ldr	r3, [pc, #100]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80045bc:	4b17      	ldr	r3, [pc, #92]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045be:	2201      	movs	r2, #1
 80045c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80045d0:	4812      	ldr	r0, [pc, #72]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045d2:	f002 fc2d 	bl	8006e30 <HAL_ADC_Init>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 80045e6:	f000 f939 	bl	800485c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80045ea:	2304      	movs	r3, #4
 80045ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045f6:	463b      	mov	r3, r7
 80045f8:	4619      	mov	r1, r3
 80045fa:	4808      	ldr	r0, [pc, #32]	; (800461c <_ZL12MX_ADC2_Initv+0xac>)
 80045fc:	f002 fdc6 	bl	800718c <HAL_ADC_ConfigChannel>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf14      	ite	ne
 8004606:	2301      	movne	r3, #1
 8004608:	2300      	moveq	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 8004610:	f000 f924 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000430 	.word	0x20000430
 8004620:	40012100 	.word	0x40012100
 8004624:	0f000001 	.word	0x0f000001

08004628 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800462e:	463b      	mov	r3, r7
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800463a:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 800463c:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <_ZL12MX_ADC3_Initv+0xb0>)
 800463e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004640:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 8004642:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004646:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004654:	4b1f      	ldr	r3, [pc, #124]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 8004656:	2200      	movs	r2, #0
 8004658:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004662:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 8004664:	2200      	movs	r2, #0
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004668:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 800466a:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <_ZL12MX_ADC3_Initv+0xb4>)
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 8004670:	2200      	movs	r2, #0
 8004672:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004674:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 8004676:	2201      	movs	r2, #1
 8004678:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 8004684:	2201      	movs	r2, #1
 8004686:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004688:	4812      	ldr	r0, [pc, #72]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 800468a:	f002 fbd1 	bl	8006e30 <HAL_ADC_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 800469e:	f000 f8dd 	bl	800485c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80046ae:	463b      	mov	r3, r7
 80046b0:	4619      	mov	r1, r3
 80046b2:	4808      	ldr	r0, [pc, #32]	; (80046d4 <_ZL12MX_ADC3_Initv+0xac>)
 80046b4:	f002 fd6a 	bl	800718c <HAL_ADC_ConfigChannel>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80046c8:	f000 f8c8 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000478 	.word	0x20000478
 80046d8:	40012200 	.word	0x40012200
 80046dc:	0f000001 	.word	0x0f000001

080046e0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <_ZL11MX_CRC_Initv+0x28>)
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <_ZL11MX_CRC_Initv+0x2c>)
 80046e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80046ea:	4807      	ldr	r0, [pc, #28]	; (8004708 <_ZL11MX_CRC_Initv+0x28>)
 80046ec:	f003 f88d 	bl	800780a <HAL_CRC_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf14      	ite	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	2300      	moveq	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8004700:	f000 f8ac 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200004c0 	.word	0x200004c0
 800470c:	40023000 	.word	0x40023000

08004710 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004716:	4a14      	ldr	r2, [pc, #80]	; (8004768 <_ZL19MX_USART2_UART_Initv+0x58>)
 8004718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800471c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800472e:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004736:	220c      	movs	r2, #12
 8004738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800473c:	2200      	movs	r2, #0
 800473e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004746:	4807      	ldr	r0, [pc, #28]	; (8004764 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004748:	f003 ffd0 	bl	80086ec <HAL_UART_Init>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	bf14      	ite	ne
 8004752:	2301      	movne	r3, #1
 8004754:	2300      	moveq	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800475c:	f000 f87e 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}
 8004764:	200004c8 	.word	0x200004c8
 8004768:	40004400 	.word	0x40004400

0800476c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08a      	sub	sp, #40	; 0x28
 8004770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	4b31      	ldr	r3, [pc, #196]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4a30      	ldr	r2, [pc, #192]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	6313      	str	r3, [r2, #48]	; 0x30
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	6313      	str	r3, [r2, #48]	; 0x30
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	4b1c      	ldr	r3, [pc, #112]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a1b      	ldr	r2, [pc, #108]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b19      	ldr	r3, [pc, #100]	; (800484c <_ZL12MX_GPIO_Initv+0xe0>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80047f2:	2200      	movs	r2, #0
 80047f4:	2120      	movs	r1, #32
 80047f6:	4816      	ldr	r0, [pc, #88]	; (8004850 <_ZL12MX_GPIO_Initv+0xe4>)
 80047f8:	f003 f9d0 	bl	8007b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80047fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <_ZL12MX_GPIO_Initv+0xe8>)
 8004804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	4619      	mov	r1, r3
 8004810:	4811      	ldr	r0, [pc, #68]	; (8004858 <_ZL12MX_GPIO_Initv+0xec>)
 8004812:	f003 f817 	bl	8007844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004816:	2320      	movs	r3, #32
 8004818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800481a:	2301      	movs	r3, #1
 800481c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004822:	2300      	movs	r3, #0
 8004824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	4619      	mov	r1, r3
 800482c:	4808      	ldr	r0, [pc, #32]	; (8004850 <_ZL12MX_GPIO_Initv+0xe4>)
 800482e:	f003 f809 	bl	8007844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004832:	2200      	movs	r2, #0
 8004834:	2100      	movs	r1, #0
 8004836:	2028      	movs	r0, #40	; 0x28
 8004838:	f002 ffb1 	bl	800779e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800483c:	2028      	movs	r0, #40	; 0x28
 800483e:	f002 ffca 	bl	80077d6 <HAL_NVIC_EnableIRQ>

}
 8004842:	bf00      	nop
 8004844:	3728      	adds	r7, #40	; 0x28
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
 8004850:	40020000 	.word	0x40020000
 8004854:	10210000 	.word	0x10210000
 8004858:	40020800 	.word	0x40020800

0800485c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004860:	b672      	cpsid	i
}
 8004862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004864:	e7fe      	b.n	8004864 <Error_Handler+0x8>

08004866 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8004866:	b5b0      	push	{r4, r5, r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004870:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fb fe98 	bl	80005a8 <__aeabi_f2d>
 8004878:	4604      	mov	r4, r0
 800487a:	460d      	mov	r5, r1
 800487c:	6838      	ldr	r0, [r7, #0]
 800487e:	f7fb fe81 	bl	8000584 <__aeabi_i2d>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	ec43 2b11 	vmov	d1, r2, r3
 800488a:	ec45 4b10 	vmov	d0, r4, r5
 800488e:	f00e fc25 	bl	80130dc <pow>
 8004892:	eeb0 7a40 	vmov.f32	s14, s0
 8004896:	eef0 7a60 	vmov.f32	s15, s1
    }
 800489a:	eeb0 0a47 	vmov.f32	s0, s14
 800489e:	eef0 0a67 	vmov.f32	s1, s15
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bdb0      	pop	{r4, r5, r7, pc}

080048a8 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fb fe67 	bl	8000584 <__aeabi_i2d>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	ec43 2b10 	vmov	d0, r2, r3
 80048be:	f00e fcbb 	bl	8013238 <sqrt>
 80048c2:	eeb0 7a40 	vmov.f32	s14, s0
 80048c6:	eef0 7a60 	vmov.f32	s15, s1
 80048ca:	eeb0 0a47 	vmov.f32	s0, s14
 80048ce:	eef0 0a67 	vmov.f32	s1, s15
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80048d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fd04 	bl	80012f8 <_ZNKSt14_Function_base8_M_emptyEv>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 80048f6:	f7fc fd51 	bl	800139c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	68dc      	ldr	r4, [r3, #12]
 80048fe:	68fd      	ldr	r5, [r7, #12]
 8004900:	f107 0308 	add.w	r3, r7, #8
 8004904:	4618      	mov	r0, r3
 8004906:	f000 f95d 	bl	8004bc4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800490a:	4606      	mov	r6, r0
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f958 	bl	8004bc4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004914:	4680      	mov	r8, r0
 8004916:	463b      	mov	r3, r7
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f95e 	bl	8004bda <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800491e:	4603      	mov	r3, r0
 8004920:	4642      	mov	r2, r8
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47a0      	blx	r4
 8004928:	4603      	mov	r3, r0
    }
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004934 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fb fe21 	bl	8000584 <__aeabi_i2d>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	ec43 2b17 	vmov	d7, r2, r3
 800494a:	eeb0 0a47 	vmov.f32	s0, s14
 800494e:	eef0 0a67 	vmov.f32	s1, s15
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f945 	bl	8004bf0 <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f94d 	bl	8004c08 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f955 	bl	8004c30 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80049a8:	461a      	mov	r2, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f94b 	bl	8004c46 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
      }
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fd ff1c 	bl	80027f0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80049c2:	b5b0      	push	{r4, r5, r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681c      	ldr	r4, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f949 	bl	8004c6c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 80049da:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049dc:	461a      	mov	r2, r3
 80049de:	4629      	mov	r1, r5
 80049e0:	4620      	mov	r0, r4
 80049e2:	f000 f94e 	bl	8004c82 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ffd1 	bl	8004990 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bdb0      	pop	{r4, r5, r7, pc}

080049f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d00d      	beq.n	8004a2a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	f000 f941 	bl	8004c9e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f103 0208 	add.w	r2, r3, #8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8004a28:	e008      	b.n	8004a3c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f81a 	bl	8004a64 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 8004a30:	4603      	mov	r3, r0
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f95a 	bl	8004cf0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	4611      	mov	r1, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fa07 	bl	8004e68 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f9f6 	bl	8004e68 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>:
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f9f8 	bl	8004e88 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fa05 	bl	8004eac <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd90      	pop	{r4, r7, pc}

08004aaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	10db      	asrs	r3, r3, #3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
      }
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fc fbde 	bl	80012b6 <_ZNSt14_Function_baseC1Ev>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004b0e:	6838      	ldr	r0, [r7, #0]
 8004b10:	f000 f9f9 	bl	8004f06 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b14:	4603      	mov	r3, r0
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	f107 0308 	add.w	r3, r7, #8
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f9fc 	bl	8004f1c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f829 	bl	8004b82 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004b30:	f107 0308 	add.w	r3, r7, #8
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fe87 	bl	8003848 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004b3a:	687b      	ldr	r3, [r7, #4]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004b4e:	6838      	ldr	r0, [r7, #0]
 8004b50:	f000 fa0e 	bl	8004f70 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8004b54:	4602      	mov	r2, r0
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	6811      	ldr	r1, [r2, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fa13 	bl	8004f88 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f80a 	bl	8004b82 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004b6e:	f107 0308 	add.w	r3, r7, #8
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fe68 	bl	8003848 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004b78:	687b      	ldr	r3, [r7, #4]
	}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fa2d 	bl	8004ff2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f103 0208 	add.w	r2, r3, #8
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f000 fa56 	bl	8005056 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 020c 	add.w	r2, r3, #12
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f000 fa77 	bl	80050aa <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa75 	bl	80050e8 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	605a      	str	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	609a      	str	r2, [r3, #8]
	{ }
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
	if (__p)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fa4d 	bl	80050fe <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>
      }
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fa43 	bl	800511c <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>
    }
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa43 	bl	8005136 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fa48 	bl	800514c <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f805 	bl	8004cda <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8004cd0:	4603      	mov	r3, r0
      }
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8004ce2:	2301      	movs	r3, #1
      }
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8004cf0:	b5b0      	push	{r4, r5, r7, lr}
 8004cf2:	b08c      	sub	sp, #48	; 0x30
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8004cfc:	4a59      	ldr	r2, [pc, #356]	; (8004e64 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x174>)
 8004cfe:	2101      	movs	r1, #1
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fa3c 	bl	800517e <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>
 8004d06:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fe95 	bl	8004a44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	f107 0214 	add.w	r2, r7, #20
 8004d22:	f107 0308 	add.w	r3, r7, #8
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fa6f 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa7d 	bl	8005236 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>
 8004d3c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8004d42:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	18d5      	adds	r5, r2, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9f2 	bl	8005136 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	4629      	mov	r1, r5
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f7ff ffa0 	bl	8004c9e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8004d62:	f7ff ffaf 	bl	8004cc4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE15_S_use_relocateEv>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d027      	beq.n	8004dbc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8004d6c:	f107 0308 	add.w	r3, r7, #8
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fa88 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8004d76:	4603      	mov	r3, r0
 8004d78:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff75 	bl	8004c6c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004d82:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4621      	mov	r1, r4
 8004d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d8a:	f000 fa68 	bl	800525e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>
 8004d8e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	3308      	adds	r3, #8
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8004d96:	f107 0308 	add.w	r3, r7, #8
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fa73 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8004da0:	4603      	mov	r3, r0
 8004da2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff ff60 	bl	8004c6c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004dac:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	6a39      	ldr	r1, [r7, #32]
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 fa53 	bl	800525e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>
 8004db8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004dba:	e026      	b.n	8004e0a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8004dbc:	f107 0308 	add.w	r3, r7, #8
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fa60 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ff4d 	bl	8004c6c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004dd2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dda:	f000 fa5f 	bl	800529c <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8004dde:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	3308      	adds	r3, #8
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa4b 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8004df0:	4603      	mov	r3, r0
 8004df2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ff38 	bl	8004c6c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004dfc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8004dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 fa4a 	bl	800529c <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8004e08:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8004e0a:	f7ff ff5b 	bl	8004cc4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE15_S_use_relocateEv>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff ff25 	bl	8004c6c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004e22:	4603      	mov	r3, r0
 8004e24:	461a      	mov	r2, r3
 8004e26:	6a39      	ldr	r1, [r7, #32]
 8004e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e2a:	f7ff ff2a 	bl	8004c82 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8004e2e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e3e:	f7ff ff02 	bl	8004c46 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	609a      	str	r2, [r3, #8]
    }
 8004e5a:	bf00      	nop
 8004e5c:	3730      	adds	r7, #48	; 0x30
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bdb0      	pop	{r4, r5, r7, pc}
 8004e62:	bf00      	nop
 8004e64:	0801aaa0 	.word	0x0801aaa0

08004e68 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8004e88:	b5b0      	push	{r4, r5, r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fa1b 	bl	80052ce <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8004e98:	f107 030c 	add.w	r3, r7, #12
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fa20 	bl	80052e4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bdb0      	pop	{r4, r5, r7, pc}

08004eac <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8004eb8:	f107 0208 	add.w	r2, r7, #8
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa1c 	bl	8005300 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d017      	beq.n	8004efe <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8004ece:	f107 020c 	add.w	r2, r7, #12
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f997 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fc f9a3 	bl	800122c <_ZSt4__lgi>
 8004ee6:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8004ee8:	005a      	lsls	r2, r3, #1
 8004eea:	793b      	ldrb	r3, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fa1e 	bl	8005330 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8004ef4:	793a      	ldrb	r2, [r7, #4]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fa50 	bl	800539e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fc f9c4 	bl	80012b6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fa6c 	bl	800540e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00f      	beq.n	8004f5c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8004f3c:	687c      	ldr	r4, [r7, #4]
 8004f3e:	463b      	mov	r3, r7
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fa74 	bl	800542e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 fa7a 	bl	8005444 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8004f54:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8004f5a:	609a      	str	r2, [r3, #8]
      }
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd90      	pop	{r4, r7, pc}
 8004f66:	bf00      	nop
 8004f68:	08005469 	.word	0x08005469
 8004f6c:	080054b1 	.word	0x080054b1

08004f70 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fc f98e 	bl	80012b6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fab2 	bl	8005506 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00f      	beq.n	8004fc8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8004fa8:	687c      	ldr	r4, [r7, #4]
 8004faa:	463b      	mov	r3, r7
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fab5 	bl	800551c <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 fabb 	bl	8005532 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8004fc0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8004fc6:	609a      	str	r2, [r3, #8]
      }
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08005557 	.word	0x08005557
 8004fd8:	0800559f 	.word	0x0800559f

08004fdc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ffed 	bl	8004fdc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005002:	4602      	mov	r2, r0
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800500c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8005010:	6838      	ldr	r0, [r7, #0]
 8005012:	f7ff ffe3 	bl	8004fdc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005016:	4602      	mov	r2, r0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800501e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ffd8 	bl	8004fdc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800502c:	4602      	mov	r2, r0
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005034:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ffed 	bl	8005040 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005066:	4603      	mov	r3, r0
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800506c:	6838      	ldr	r0, [r7, #0]
 800506e:	f7ff ffe7 	bl	8005040 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005072:	4603      	mov	r3, r0
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800507a:	f107 030c 	add.w	r3, r7, #12
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ffde 	bl	8005040 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005084:	4603      	mov	r3, r0
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	601a      	str	r2, [r3, #0]
    }
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ffed 	bl	8005094 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80050ba:	4603      	mov	r3, r0
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80050c0:	6838      	ldr	r0, [r7, #0]
 80050c2:	f7ff ffe7 	bl	8005094 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80050c6:	4603      	mov	r3, r0
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ffde 	bl	8005094 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80050d8:	4603      	mov	r3, r0
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	601a      	str	r2, [r3, #0]
    }
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa70 	bl	80055f4 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fa70 	bl	800560e <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>
    }
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff ffec 	bl	8005136 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800515e:	4604      	mov	r4, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4619      	mov	r1, r3
 8005164:	2008      	movs	r0, #8
 8005166:	f7fc f870 	bl	800124a <_ZnwjPv>
 800516a:	4603      	mov	r3, r0
 800516c:	4622      	mov	r2, r4
 800516e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005172:	e883 0003 	stmia.w	r3, {r0, r1}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bd90      	pop	{r4, r7, pc}

0800517e <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800517e:	b590      	push	{r4, r7, lr}
 8005180:	b087      	sub	sp, #28
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fa4a 	bl	8005624 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 8005190:	4604      	mov	r4, r0
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff fc89 	bl	8004aaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8005198:	4603      	mov	r3, r0
 800519a:	1ae2      	subs	r2, r4, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf34      	ite	cc
 80051a2:	2301      	movcc	r3, #1
 80051a4:	2300      	movcs	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f00d fd8f 	bl	8012cd0 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff fc79 	bl	8004aaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80051b8:	4604      	mov	r4, r0
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff fc75 	bl	8004aaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80051c0:	4603      	mov	r3, r0
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	f107 0208 	add.w	r2, r7, #8
 80051c8:	f107 0310 	add.w	r3, r7, #16
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fa39 	bl	8005646 <_ZSt3maxIjERKT_S2_S2_>
 80051d4:	4603      	mov	r3, r0
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4423      	add	r3, r4
 80051da:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fc64 	bl	8004aaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80051e2:	4602      	mov	r2, r0
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d306      	bcc.n	80051f8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x7a>
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa1a 	bl	8005624 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d904      	bls.n	8005202 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x84>
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fa13 	bl	8005624 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 80051fe:	4603      	mov	r3, r0
 8005200:	e000      	b.n	8005204 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x86>
 8005202:	697b      	ldr	r3, [r7, #20]
      }
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	bd90      	pop	{r4, r7, pc}

0800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f835 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800521c:	4603      	mov	r3, r0
 800521e:	681c      	ldr	r4, [r3, #0]
 8005220:	6838      	ldr	r0, [r7, #0]
 8005222:	f000 f830 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005226:	4603      	mov	r3, r0
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1ae3      	subs	r3, r4, r3
 800522c:	10db      	asrs	r3, r3, #3
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bd90      	pop	{r4, r7, pc}

08005236 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x1e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa0f 	bl	800566e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>
 8005250:	4603      	mov	r3, r0
 8005252:	e000      	b.n	8005256 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x20>
 8005254:	2300      	movs	r3, #0
      }
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800525e:	b590      	push	{r4, r7, lr}
 8005260:	b089      	sub	sp, #36	; 0x24
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800526c:	f88d 4000 	strb.w	r4, [sp]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fa08 	bl	800568c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE14_S_do_relocateEPS3_S6_S6_RS4_St17integral_constantIbLb1EE>
 800527c:	4603      	mov	r3, r0
      }
 800527e:	4618      	mov	r0, r3
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}

08005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa00 	bl	80056b0 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 80052b0:	4604      	mov	r4, r0
 80052b2:	68b8      	ldr	r0, [r7, #8]
 80052b4:	f000 f9fc 	bl	80056b0 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 80052b8:	4601      	mov	r1, r0
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fa05 	bl	80056ce <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 80052c4:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd90      	pop	{r4, r7, pc}

080052ce <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 80052ee:	463b      	mov	r3, r7
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ffec 	bl	80052ce <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ffbb 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005310:	4603      	mov	r3, r0
 8005312:	681c      	ldr	r4, [r3, #0]
 8005314:	6838      	ldr	r0, [r7, #0]
 8005316:	f7ff ffb6 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800531a:	4603      	mov	r3, r0
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	429c      	cmp	r4, r3
 8005320:	bf14      	ite	ne
 8005322:	2301      	movne	r3, #1
 8005324:	2300      	moveq	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}

08005330 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800533e:	f107 020c 	add.w	r2, r7, #12
 8005342:	f107 0308 	add.w	r3, r7, #8
 8005346:	4611      	mov	r1, r2
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff ff5f 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800534e:	4603      	mov	r3, r0
 8005350:	2b10      	cmp	r3, #16
 8005352:	bfcc      	ite	gt
 8005354:	2301      	movgt	r3, #1
 8005356:	2300      	movle	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01c      	beq.n	8005398 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  if (__depth_limit == 0)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8005364:	783b      	ldrb	r3, [r7, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f9c0 	bl	80056f0 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
 8005370:	e012      	b.n	8005398 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  --__depth_limit;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3b01      	subs	r3, #1
 8005376:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8005378:	783a      	ldrb	r2, [r7, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f9ce 	bl	800571e <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>
 8005382:	4603      	mov	r3, r0
 8005384:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8005386:	783b      	ldrb	r3, [r7, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	6978      	ldr	r0, [r7, #20]
 800538e:	f7ff ffcf 	bl	8005330 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  __last = __cut;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8005396:	e7d2      	b.n	800533e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xe>
    }
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 80053aa:	f107 020c 	add.w	r2, r7, #12
 80053ae:	f107 0308 	add.w	r3, r7, #8
 80053b2:	4611      	mov	r1, r2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff ff29 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b10      	cmp	r3, #16
 80053be:	bfcc      	ite	gt
 80053c0:	2301      	movgt	r3, #1
 80053c2:	2300      	movle	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80053ca:	f107 030c 	add.w	r3, r7, #12
 80053ce:	2110      	movs	r1, #16
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f9e6 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80053d6:	4603      	mov	r3, r0
 80053d8:	793a      	ldrb	r2, [r7, #4]
 80053da:	4619      	mov	r1, r3
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f9f8 	bl	80057d2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 80053e2:	f107 030c 	add.w	r3, r7, #12
 80053e6:	2110      	movs	r1, #16
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f9da 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80053ee:	4603      	mov	r3, r0
 80053f0:	793a      	ldrb	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fa58 	bl	80058aa <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 80053fa:	e004      	b.n	8005406 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 80053fc:	793a      	ldrb	r2, [r7, #4]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f9e6 	bl	80057d2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800544e:	6838      	ldr	r0, [r7, #0]
 8005450:	f7ff ffed 	bl	800542e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005454:	4603      	mov	r3, r0
 8005456:	4622      	mov	r2, r4
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa49 	bl	80058f2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}

08005468 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa54 	bl	8005924 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800547c:	4603      	mov	r3, r0
 800547e:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005480:	68b8      	ldr	r0, [r7, #8]
 8005482:	f7ff fb9f 	bl	8004bc4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005486:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005488:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fb9a 	bl	8004bc4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005490:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005492:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f7ff fba0 	bl	8004bda <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800549a:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	4631      	mov	r1, r6
 80054a2:	4628      	mov	r0, r5
 80054a4:	47a0      	blx	r4
 80054a6:	4603      	mov	r3, r0
      }
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054b0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80054b0:	b5b0      	push	{r4, r5, r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d016      	beq.n	80054f2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	dc19      	bgt.n	80054fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d002      	beq.n	80054d2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d00a      	beq.n	80054e6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80054d0:	e014      	b.n	80054fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fa37 	bl	8005946 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80054d8:	4604      	mov	r4, r0
 80054da:	68b8      	ldr	r0, [r7, #8]
 80054dc:	f000 fa22 	bl	8005924 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80054e0:	4603      	mov	r3, r0
 80054e2:	6023      	str	r3, [r4, #0]
	      break;
 80054e4:	e00a      	b.n	80054fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80054e6:	462a      	mov	r2, r5
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fa37 	bl	800595e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80054f0:	e004      	b.n	80054fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80054f2:	4621      	mov	r1, r4
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fa4b 	bl	8005990 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80054fa:	bf00      	nop
	  return false;
 80054fc:	2300      	movs	r3, #0
	}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bdb0      	pop	{r4, r5, r7, pc}

08005506 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
	  { return true; }
 800550e:	2301      	movs	r3, #1
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005532:	b590      	push	{r4, r7, lr}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800553c:	6838      	ldr	r0, [r7, #0]
 800553e:	f7ff ffed 	bl	800551c <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8005542:	4603      	mov	r3, r0
 8005544:	4622      	mov	r2, r4
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fa2d 	bl	80059a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}

08005556 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fa38 	bl	80059da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800556a:	4606      	mov	r6, r0
	    std::forward<_ArgTypes>(__args)...);
 800556c:	68b8      	ldr	r0, [r7, #8]
 800556e:	f7ff fb29 	bl	8004bc4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005572:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005574:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fb24 	bl	8004bc4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800557c:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800557e:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005580:	6838      	ldr	r0, [r7, #0]
 8005582:	f7ff fb2a 	bl	8004bda <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005586:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	462a      	mov	r2, r5
 800558c:	4621      	mov	r1, r4
 800558e:	4630      	mov	r0, r6
 8005590:	f7fe f99b 	bl	80038ca <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8005594:	4603      	mov	r3, r0
      }
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800559e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800559e:	b5b0      	push	{r4, r5, r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	4613      	mov	r3, r2
 80055aa:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d016      	beq.n	80055e0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	dc19      	bgt.n	80055ea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d002      	beq.n	80055c0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d00a      	beq.n	80055d4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80055be:	e014      	b.n	80055ea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fa1b 	bl	80059fc <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 80055c6:	4604      	mov	r4, r0
 80055c8:	68b8      	ldr	r0, [r7, #8]
 80055ca:	f000 fa06 	bl	80059da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80055ce:	4603      	mov	r3, r0
 80055d0:	6023      	str	r3, [r4, #0]
	      break;
 80055d2:	e00a      	b.n	80055ea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80055d4:	462a      	mov	r2, r5
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fa1b 	bl	8005a14 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80055de:	e004      	b.n	80055ea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80055e0:	4621      	mov	r1, r4
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fa2f 	bl	8005a46 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80055e8:	bf00      	nop
	  return false;
 80055ea:	2300      	movs	r3, #0
	}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bdb0      	pop	{r4, r5, r7, pc}

080055f4 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005600:	68b8      	ldr	r0, [r7, #8]
 8005602:	f00d fb4b 	bl	8012c9c <_ZdlPv>
      }
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fa43 	bl	8005aba <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005634:	4603      	mov	r3, r0
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fa25 	bl	8005a86 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_max_sizeERKS4_>
 800563c:	4603      	mov	r3, r0
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d201      	bcs.n	8005660 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	e000      	b.n	8005662 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005660:	687b      	ldr	r3, [r7, #4]
    }
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005678:	2200      	movs	r2, #0
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa27 	bl	8005ad0 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>
 8005682:	4603      	mov	r3, r0
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE14_S_do_relocateEPS3_S6_S6_RS4_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fa33 	bl	8005b0c <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 80056a6:	4603      	mov	r3, r0
      }
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fa41 	bl	8005b46 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 fa3f 	bl	8005b64 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 80056fe:	783b      	ldrb	r3, [r7, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fa3f 	bl	8005b88 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800570a:	463b      	mov	r3, r7
 800570c:	461a      	mov	r2, r3
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fa6b 	bl	8005bec <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
    }
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800571e:	b590      	push	{r4, r7, lr}
 8005720:	b089      	sub	sp, #36	; 0x24
 8005722:	af02      	add	r7, sp, #8
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800572a:	f107 020c 	add.w	r2, r7, #12
 800572e:	f107 0308 	add.w	r3, r7, #8
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fd69 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800573a:	4603      	mov	r3, r0
 800573c:	0fda      	lsrs	r2, r3, #31
 800573e:	4413      	add	r3, r2
 8005740:	105b      	asrs	r3, r3, #1
 8005742:	461a      	mov	r2, r3
 8005744:	f107 030c 	add.w	r3, r7, #12
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f829 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005750:	4603      	mov	r3, r0
 8005752:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005754:	f107 030c 	add.w	r3, r7, #12
 8005758:	2101      	movs	r1, #1
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f821 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005760:	4604      	mov	r4, r0
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	2101      	movs	r1, #1
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fa65 	bl	8005c38 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>
 800576e:	4602      	mov	r2, r0
 8005770:	793b      	ldrb	r3, [r7, #4]
 8005772:	f88d 3000 	strb.w	r3, [sp]
 8005776:	4613      	mov	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4621      	mov	r1, r4
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fa90 	bl	8005ca2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8005782:	f107 030c 	add.w	r3, r7, #12
 8005786:	2101      	movs	r1, #1
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f80a 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800578e:	793b      	ldrb	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	f000 fada 	bl	8005d4c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>
 8005798:	4603      	mov	r3, r0
    }
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd90      	pop	{r4, r7, pc}

080057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	f107 020c 	add.w	r2, r7, #12
 80057bc:	f107 0308 	add.w	r3, r7, #8
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fb50 	bl	8004e68 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 80057d2:	b5b0      	push	{r4, r5, r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 80057de:	f107 0208 	add.w	r2, r7, #8
 80057e2:	f107 030c 	add.w	r3, r7, #12
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 faf7 	bl	8005ddc <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d156      	bne.n	80058a2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80057f4:	f107 030c 	add.w	r3, r7, #12
 80057f8:	2101      	movs	r1, #1
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff ffd1 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005800:	4603      	mov	r3, r0
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	f107 0208 	add.w	r2, r7, #8
 8005808:	f107 031c 	add.w	r3, r7, #28
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fd76 	bl	8005300 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d044      	beq.n	80058a4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd2>
	  if (__comp(__i, __first))
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	69f9      	ldr	r1, [r7, #28]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fa22 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d02d      	beq.n	8005888 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 800582c:	f107 031c 	add.w	r3, r7, #28
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fafc 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005836:	4603      	mov	r3, r0
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fb04 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800583e:	4602      	mov	r2, r0
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005848:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800584c:	f107 031c 	add.w	r3, r7, #28
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ffa5 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005858:	4603      	mov	r3, r0
 800585a:	461a      	mov	r2, r3
 800585c:	69f9      	ldr	r1, [r7, #28]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fafc 	bl	8005e5c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>
	      *__first = _GLIBCXX_MOVE(__val);
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	4618      	mov	r0, r3
 800586a:	f000 faec 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800586e:	4604      	mov	r4, r0
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fada 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800587a:	4603      	mov	r3, r0
 800587c:	4622      	mov	r2, r4
 800587e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005882:	e883 0003 	stmia.w	r3, {r0, r1}
 8005886:	e006      	b.n	8005896 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 8005888:	7938      	ldrb	r0, [r7, #4]
 800588a:	f000 faff 	bl	8005e8c <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800588e:	4629      	mov	r1, r5
 8005890:	69f8      	ldr	r0, [r7, #28]
 8005892:	f000 fb0e 	bl	8005eb2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005896:	f107 031c 	add.w	r3, r7, #28
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fab6 	bl	8005e0c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 80058a0:	e7b0      	b.n	8005804 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x32>
      if (__first == __last) return;
 80058a2:	bf00      	nop
    }
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bdb0      	pop	{r4, r5, r7, pc}

080058aa <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 80058aa:	b590      	push	{r4, r7, lr}
 80058ac:	b087      	sub	sp, #28
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	f107 0208 	add.w	r2, r7, #8
 80058be:	f107 0314 	add.w	r3, r7, #20
 80058c2:	4611      	mov	r1, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fd1b 	bl	8005300 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 80058d0:	7938      	ldrb	r0, [r7, #4]
 80058d2:	f000 fadb 	bl	8005e8c <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 80058d6:	4621      	mov	r1, r4
 80058d8:	6978      	ldr	r0, [r7, #20]
 80058da:	f000 faea 	bl	8005eb2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80058de:	f107 0314 	add.w	r3, r7, #20
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fa92 	bl	8005e0c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 80058e8:	e7e7      	b.n	80058ba <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x10>
    }
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd90      	pop	{r4, r7, pc}

080058f2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80058f2:	b590      	push	{r4, r7, lr}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80058fe:	68b8      	ldr	r0, [r7, #8]
 8005900:	f7ff fd95 	bl	800542e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005904:	4603      	mov	r3, r0
 8005906:	681c      	ldr	r4, [r3, #0]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7fb fcbe 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 800590e:	4603      	mov	r3, r0
 8005910:	4619      	mov	r1, r3
 8005912:	2004      	movs	r0, #4
 8005914:	f7fb fc99 	bl	800124a <_ZnwjPv>
 8005918:	4603      	mov	r3, r0
 800591a:	601c      	str	r4, [r3, #0]
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	bd90      	pop	{r4, r7, pc}

08005924 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fb15 	bl	8005f5c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8005932:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fb1d 	bl	8005f74 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800593a:	4603      	mov	r3, r0
 800593c:	bf00      	nop
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb fc9b 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 8005954:	4603      	mov	r3, r0
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800595e:	b590      	push	{r4, r7, lr}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f000 faf6 	bl	8005f5c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8005970:	4603      	mov	r3, r0
 8005972:	681c      	ldr	r4, [r3, #0]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7fb fc88 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 800597a:	4603      	mov	r3, r0
 800597c:	4619      	mov	r1, r3
 800597e:	2004      	movs	r0, #4
 8005980:	f7fb fc63 	bl	800124a <_ZnwjPv>
 8005984:	4603      	mov	r3, r0
 8005986:	601c      	str	r4, [r3, #0]
	}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bd90      	pop	{r4, r7, pc}

08005990 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 faf5 	bl	8005f8a <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f7ff fdb1 	bl	800551c <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80059ba:	4604      	mov	r4, r0
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7fb fc64 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 80059c2:	4603      	mov	r3, r0
 80059c4:	4619      	mov	r1, r3
 80059c6:	2004      	movs	r0, #4
 80059c8:	f7fb fc3f 	bl	800124a <_ZnwjPv>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd90      	pop	{r4, r7, pc}

080059da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fadd 	bl	8005fa2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 80059e8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fae5 	bl	8005fba <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 80059f0:	4603      	mov	r3, r0
 80059f2:	bf00      	nop
	}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fb fc40 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8005a14:	b590      	push	{r4, r7, lr}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8005a20:	68b8      	ldr	r0, [r7, #8]
 8005a22:	f000 fabe 	bl	8005fa2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8005a26:	4604      	mov	r4, r0
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7fb fc2e 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4619      	mov	r1, r3
 8005a32:	2004      	movs	r0, #4
 8005a34:	f7fb fc09 	bl	800124a <_ZnwjPv>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	6013      	str	r3, [r2, #0]
	}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd90      	pop	{r4, r7, pc}

08005a46 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fabd 	bl	8005fd0 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d201      	bcs.n	8005a78 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	e000      	b.n	8005a7a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8005a78:	687b      	ldr	r3, [r7, #4]
    }
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_max_sizeERKS4_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8005a8e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005a92:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 faa7 	bl	8005fe8 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005a9e:	f107 0208 	add.w	r2, r7, #8
 8005aa2:	f107 030c 	add.w	r3, r7, #12
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ffd8 	bl	8005a5e <_ZSt3minIjERKT_S2_S2_>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	681b      	ldr	r3, [r3, #0]
      }
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fa8f 	bl	8006000 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bf8c      	ite	hi
 8005aea:	2301      	movhi	r3, #1
 8005aec:	2300      	movls	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005af4:	f00d f8e9 	bl	8012cca <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4618      	mov	r0, r3
 8005afe:	f00d f8d1 	bl	8012ca4 <_Znwj>
 8005b02:	4603      	mov	r3, r0
      }
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8005b0c:	b5b0      	push	{r4, r5, r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fa7c 	bl	8006018 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8005b20:	4604      	mov	r4, r0
 8005b22:	68b8      	ldr	r0, [r7, #8]
 8005b24:	f000 fa78 	bl	8006018 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8005b28:	4605      	mov	r5, r0
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa74 	bl	8006018 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8005b30:	4602      	mov	r2, r0
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	4629      	mov	r1, r5
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 fa79 	bl	800602e <_ZSt14__relocate_a_1IN2ei8spectral10processing11freq_peak_tES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E>
 8005b3c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bdb0      	pop	{r4, r5, r7, pc}

08005b46 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fa76 	bl	800606a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>
 8005b7e:	4603      	mov	r3, r0
    }
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8005b96:	463b      	mov	r3, r7
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fa74 	bl	800608a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	1d3a      	adds	r2, r7, #4
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 faca 	bl	8006148 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x5c>
	if (__comp(__i, __first))
 8005bba:	463b      	mov	r3, r7
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	6979      	ldr	r1, [r7, #20]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f852 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8005bcc:	463b      	mov	r3, r7
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fad0 	bl	8006178 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005bd8:	f107 0314 	add.w	r3, r7, #20
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f915 	bl	8005e0c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 8005be2:	e7e0      	b.n	8005ba6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x1e>
    }
 8005be4:	bf00      	nop
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8005bf8:	f107 020c 	add.w	r2, r7, #12
 8005bfc:	f107 0308 	add.w	r3, r7, #8
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fb02 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	bfcc      	ite	gt
 8005c0e:	2301      	movgt	r3, #1
 8005c10:	2300      	movle	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x44>
	{
	  --__last;
 8005c18:	f107 0308 	add.w	r3, r7, #8
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 faf7 	bl	8006210 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 faa5 	bl	8006178 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      while (__last - __first > 1)
 8005c2e:	e7e3      	b.n	8005bf8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xc>
	}
    }
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	425b      	negs	r3, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	f107 020c 	add.w	r2, r7, #12
 8005c54:	f107 0308 	add.w	r3, r7, #8
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff f904 	bl	8004e68 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8005c6a:	b5b0      	push	{r4, r5, r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8005c76:	68fc      	ldr	r4, [r7, #12]
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f8d6 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005c82:	4605      	mov	r5, r0
 8005c84:	1d3b      	adds	r3, r7, #4
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f8d1 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4629      	mov	r1, r5
 8005c92:	4620      	mov	r0, r4
 8005c94:	f7fc fdd2 	bl	800283c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bdb0      	pop	{r4, r5, r7, pc}

08005ca2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	f107 0018 	add.w	r0, r7, #24
 8005cb8:	f7ff ffd7 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d020      	beq.n	8005d04 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x62>
	  if (__comp(__b, __c))
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	f107 0018 	add.w	r0, r7, #24
 8005cca:	f7ff ffce 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 faab 	bl	8006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005cdc:	e032      	b.n	8005d44 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	  else if (__comp(__a, __c))
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	f107 0018 	add.w	r0, r7, #24
 8005ce6:	f7ff ffc0 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x58>
	    std::iter_swap(__result, __c);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fa9d 	bl	8006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005cf8:	e024      	b.n	8005d44 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fa98 	bl	8006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005d02:	e01f      	b.n	8005d44 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__a, __c))
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	f107 0018 	add.w	r0, r7, #24
 8005d0c:	f7ff ffad 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d004      	beq.n	8005d20 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x7e>
	std::iter_swap(__result, __a);
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fa8a 	bl	8006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005d1e:	e011      	b.n	8005d44 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__b, __c))
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	f107 0018 	add.w	r0, r7, #24
 8005d28:	f7ff ff9f 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x9a>
	std::iter_swap(__result, __c);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fa7c 	bl	8006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005d3a:	e003      	b.n	8005d44 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	std::iter_swap(__result, __b);
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fa77 	bl	8006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff ff82 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x2c>
	    ++__first;
 8005d6c:	f107 030c 	add.w	r3, r7, #12
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f84b 	bl	8005e0c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
	  while (__comp(__first, __pivot))
 8005d76:	e7f0      	b.n	8005d5a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
	  --__last;
 8005d78:	f107 0308 	add.w	r3, r7, #8
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fa47 	bl	8006210 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 8005d82:	463b      	mov	r3, r7
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff ff6e 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x54>
	    --__last;
 8005d94:	f107 0308 	add.w	r3, r7, #8
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fa39 	bl	8006210 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 8005d9e:	e7f0      	b.n	8005d82 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x36>
	  if (!(__first < __last))
 8005da0:	f107 0208 	add.w	r2, r7, #8
 8005da4:	f107 030c 	add.w	r3, r7, #12
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f9cc 	bl	8006148 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f083 0301 	eor.w	r3, r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x74>
	    return __first;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	e009      	b.n	8005dd4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x88>
	  std::iter_swap(__first, __last);
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa35 	bl	8006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
	  ++__first;
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f81d 	bl	8005e0c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
	  while (__comp(__first, __pivot))
 8005dd2:	e7c2      	b.n	8005d5a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
    }
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fa4d 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005dec:	4603      	mov	r3, r0
 8005dee:	681c      	ldr	r4, [r3, #0]
 8005df0:	6838      	ldr	r0, [r7, #0]
 8005df2:	f7ff fa48 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005df6:	4603      	mov	r3, r0
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429c      	cmp	r4, r3
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2301      	moveq	r3, #1
 8005e00:	2300      	movne	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd90      	pop	{r4, r7, pc}

08005e0c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f103 0208 	add.w	r2, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]
	return *this;
 8005e20:	687b      	ldr	r3, [r7, #4]
      }
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f9f9 	bl	8006260 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	68b8      	ldr	r0, [r7, #8]
 8005e72:	f000 f9f5 	bl	8006260 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 8005e76:	4603      	mov	r3, r0
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 f9fa 	bl	8006276 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>
 8005e82:	4603      	mov	r3, r0
    }
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd90      	pop	{r4, r7, pc}

08005e8c <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fa0e 	bl	80062b8 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	f107 030c 	add.w	r3, r7, #12
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fa12 	bl	80062ce <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8005eaa:	4620      	mov	r0, r4
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd90      	pop	{r4, r7, pc}

08005eb2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8005eb2:	b590      	push	{r4, r7, lr}
 8005eb4:	b087      	sub	sp, #28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8005ebc:	1d3b      	adds	r3, r7, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff ffb5 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ffbd 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	f107 0310 	add.w	r3, r7, #16
 8005ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ed6:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
      --__next;
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 f994 	bl	8006210 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 8005ee8:	f107 0110 	add.w	r1, r7, #16
 8005eec:	463b      	mov	r3, r7
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 f9fa 	bl	80062ea <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff ff94 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff ff9c 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005f0e:	4604      	mov	r4, r0
 8005f10:	1d3b      	adds	r3, r7, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff ff8b 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f20:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	607b      	str	r3, [r7, #4]
	  --__next;
 8005f28:	f107 030c 	add.w	r3, r7, #12
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f96f 	bl	8006210 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 8005f32:	e7d9      	b.n	8005ee8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8005f34:	f107 0310 	add.w	r3, r7, #16
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff84 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005f3e:	4604      	mov	r4, r0
 8005f40:	1d3b      	adds	r3, r7, #4
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ff73 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd90      	pop	{r4, r7, pc}

08005f5c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7fb f99b 	bl	80012a0 <_ZNKSt9_Any_data9_M_accessEv>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb f979 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb f978 	bl	80012a0 <_ZNKSt9_Any_data9_M_accessEv>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fb f956 	bl	800128a <_ZNSt9_Any_data9_M_accessEv>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f805 	bl	8006000 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006008:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <_ZSt14__relocate_a_1IN2ei8spectral10processing11freq_peak_tES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	10db      	asrs	r3, r3, #3
 8006044:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dd06      	ble.n	800605a <_ZSt14__relocate_a_1IN2ei8spectral10processing11freq_peak_tES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	461a      	mov	r2, r3
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f00f fcb3 	bl	80159c0 <memmove>
      return __result + __count;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
    }
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f94b 	bl	8006316 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 8006080:	4603      	mov	r3, r0
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800608a:	b580      	push	{r7, lr}
 800608c:	b08a      	sub	sp, #40	; 0x28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8006096:	f107 020c 	add.w	r2, r7, #12
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff f8b3 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bfd4      	ite	le
 80060ac:	2301      	movle	r3, #1
 80060ae:	2300      	movgt	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d142      	bne.n	800613c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 80060b6:	f107 020c 	add.w	r2, r7, #12
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4611      	mov	r1, r2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff f8a3 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80060c6:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	3b02      	subs	r3, #2
 80060cc:	0fda      	lsrs	r2, r3, #31
 80060ce:	4413      	add	r3, r2
 80060d0:	105b      	asrs	r3, r3, #1
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80060d4:	f107 030c 	add.w	r3, r7, #12
 80060d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fb61 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80060e0:	4603      	mov	r3, r0
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	f107 031c 	add.w	r3, r7, #28
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff fea0 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80060ee:	4603      	mov	r3, r0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fea8 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80060f6:	4602      	mov	r2, r0
 80060f8:	f107 0314 	add.w	r3, r7, #20
 80060fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006100:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8006104:	f107 0314 	add.w	r3, r7, #20
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fe9c 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800610e:	4603      	mov	r3, r0
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	ed93 7a00 	vldr	s14, [r3]
 8006116:	edd3 7a01 	vldr	s15, [r3, #4]
 800611a:	7813      	ldrb	r3, [r2, #0]
 800611c:	eeb0 0a47 	vmov.f32	s0, s14
 8006120:	eef0 0a67 	vmov.f32	s1, s15
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f90c 	bl	8006346 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
	  if (__parent == 0)
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb6>
	  __parent--;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	3b01      	subs	r3, #1
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 800613a:	e7cb      	b.n	80060d4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x4a>
	return;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb8>
	    return;
 8006140:	bf00      	nop
    }
 8006142:	3728      	adds	r7, #40	; 0x28
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006148:	b590      	push	{r4, r7, lr}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff f897 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006158:	4603      	mov	r3, r0
 800615a:	681c      	ldr	r4, [r3, #0]
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f7ff f892 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006162:	4603      	mov	r3, r0
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429c      	cmp	r4, r3
 8006168:	bf34      	ite	cc
 800616a:	2301      	movcc	r3, #1
 800616c:	2300      	movcs	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}

08006178 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fe50 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800618e:	4603      	mov	r3, r0
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fe58 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006196:	4602      	mov	r2, r0
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061a0:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fe40 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fe48 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80061b6:	4604      	mov	r4, r0
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fe37 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4622      	mov	r2, r4
 80061c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061c8:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 80061cc:	f107 020c 	add.w	r2, r7, #12
 80061d0:	f107 0308 	add.w	r3, r7, #8
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff f818 	bl	800520c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80061dc:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 80061de:	f107 0310 	add.w	r3, r7, #16
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fe2f 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80061e8:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	ed93 7a00 	vldr	s14, [r3]
 80061f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80061f4:	7813      	ldrb	r3, [r2, #0]
 80061f6:	eeb0 0a47 	vmov.f32	s0, s14
 80061fa:	eef0 0a67 	vmov.f32	s1, s15
 80061fe:	4622      	mov	r2, r4
 8006200:	2100      	movs	r1, #0
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 f89f 	bl	8006346 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
    }
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd90      	pop	{r4, r7, pc}

08006210 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	--_M_current;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1a3 0208 	sub.w	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
	return *this;
 8006224:	687b      	ldr	r3, [r7, #4]
      }
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8006232:	b590      	push	{r4, r7, lr}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fdf5 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006244:	4604      	mov	r4, r0
 8006246:	463b      	mov	r3, r7
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fdf0 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800624e:	4603      	mov	r3, r0
 8006250:	4619      	mov	r1, r3
 8006252:	4620      	mov	r0, r4
 8006254:	f000 f93a 	bl	80064cc <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bd90      	pop	{r4, r7, pc}

08006260 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8006276:	b5b0      	push	{r4, r5, r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f949 	bl	800651a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006288:	4604      	mov	r4, r0
 800628a:	68b8      	ldr	r0, [r7, #8]
 800628c:	f000 f945 	bl	800651a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006290:	4605      	mov	r5, r0
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f941 	bl	800651a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	4629      	mov	r1, r5
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f949 	bl	8006536 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 80062a4:	4603      	mov	r3, r0
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f956 	bl	800655a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEES6_ET_SB_T0_>
 80062ae:	4603      	mov	r3, r0
    }
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bdb0      	pop	{r4, r5, r7, pc}

080062b8 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fff7 	bl	80052ce <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 80062ea:	b590      	push	{r4, r7, lr}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80062f6:	68fc      	ldr	r4, [r7, #12]
 80062f8:	1d3b      	adds	r3, r7, #4
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff fd97 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	4620      	mov	r0, r4
 8006308:	f7fc fa98 	bl	800283c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800630c:	4603      	mov	r3, r0
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}

08006316 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8006316:	b590      	push	{r4, r7, lr}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 f930 	bl	8006588 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006328:	4604      	mov	r4, r0
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	f000 f92c 	bl	8006588 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006330:	4603      	mov	r3, r0
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4619      	mov	r1, r3
 8006336:	4620      	mov	r0, r4
 8006338:	f000 f937 	bl	80065aa <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800633c:	4603      	mov	r3, r0
    }
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}

08006346 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8006346:	b590      	push	{r4, r7, lr}
 8006348:	b08f      	sub	sp, #60	; 0x3c
 800634a:	af00      	add	r7, sp, #0
 800634c:	6178      	str	r0, [r7, #20]
 800634e:	6139      	str	r1, [r7, #16]
 8006350:	60fa      	str	r2, [r7, #12]
 8006352:	eeb0 7a40 	vmov.f32	s14, s0
 8006356:	eef0 7a60 	vmov.f32	s15, s1
 800635a:	703b      	strb	r3, [r7, #0]
 800635c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006360:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	0fda      	lsrs	r2, r3, #31
 8006372:	4413      	add	r3, r2
 8006374:	105b      	asrs	r3, r3, #1
 8006376:	461a      	mov	r2, r3
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	4293      	cmp	r3, r2
 800637c:	da46      	bge.n	800640c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	3301      	adds	r3, #1
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8006386:	f107 0314 	add.w	r3, r7, #20
 800638a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fa08 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006392:	4604      	mov	r4, r0
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	1e5a      	subs	r2, r3, #1
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f9ff 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80063a4:	4602      	mov	r2, r0
 80063a6:	463b      	mov	r3, r7
 80063a8:	4621      	mov	r1, r4
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fc5d 	bl	8005c6a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x76>
	    __secondChild--;
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	3b01      	subs	r3, #1
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80063bc:	f107 0314 	add.w	r3, r7, #20
 80063c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff f9ed 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80063c8:	4603      	mov	r3, r0
 80063ca:	623b      	str	r3, [r7, #32]
 80063cc:	f107 0320 	add.w	r3, r7, #32
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fd2c 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80063d6:	4603      	mov	r3, r0
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fd34 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80063de:	4604      	mov	r4, r0
 80063e0:	f107 0314 	add.w	r3, r7, #20
 80063e4:	6939      	ldr	r1, [r7, #16]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff f9db 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80063ec:	4603      	mov	r3, r0
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
 80063f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fd1a 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80063fa:	4603      	mov	r3, r0
 80063fc:	4622      	mov	r2, r4
 80063fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006402:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800640a:	e7af      	b.n	800636c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d136      	bne.n	8006484 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3b02      	subs	r3, #2
 800641a:	0fda      	lsrs	r2, r3, #31
 800641c:	4413      	add	r3, r2
 800641e:	105b      	asrs	r3, r3, #1
 8006420:	461a      	mov	r2, r3
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	4293      	cmp	r3, r2
 8006426:	d12d      	bne.n	8006484 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	3301      	adds	r3, #1
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006432:	1e5a      	subs	r2, r3, #1
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	4611      	mov	r1, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff f9b1 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006440:	4603      	mov	r3, r0
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
 8006444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fcf0 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800644e:	4603      	mov	r3, r0
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fcf8 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006456:	4604      	mov	r4, r0
 8006458:	f107 0314 	add.w	r3, r7, #20
 800645c:	6939      	ldr	r1, [r7, #16]
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f99f 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006464:	4603      	mov	r3, r0
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fcde 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006472:	4603      	mov	r3, r0
 8006474:	4622      	mov	r2, r4
 8006476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800647a:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	3b01      	subs	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8006484:	463b      	mov	r3, r7
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff16 	bl	80062b8 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800648c:	4602      	mov	r2, r0
 800648e:	f107 031c 	add.w	r3, r7, #28
 8006492:	4611      	mov	r1, r2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f8ab 	bl	80065f0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800649a:	1d3b      	adds	r3, r7, #4
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fcd2 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80064a2:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 80064a4:	f107 021c 	add.w	r2, r7, #28
 80064a8:	ed93 7a00 	vldr	s14, [r3]
 80064ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	eeb0 0a47 	vmov.f32	s0, s14
 80064b6:	eef0 0a67 	vmov.f32	s1, s15
 80064ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064bc:	6939      	ldr	r1, [r7, #16]
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f000 f8a4 	bl	800660c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>
    }
 80064c4:	bf00      	nop
 80064c6:	373c      	adds	r7, #60	; 0x3c
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}

080064cc <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fcb5 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80064dc:	4602      	mov	r2, r0
 80064de:	f107 0308 	add.w	r3, r7, #8
 80064e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064e6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80064ea:	6838      	ldr	r0, [r7, #0]
 80064ec:	f7ff fcab 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80064f0:	4602      	mov	r2, r0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064f8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80064fc:	f107 0308 	add.w	r3, r7, #8
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fca0 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006506:	4602      	mov	r2, r0
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800650e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe feae 	bl	8005286 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800652a:	4603      	mov	r3, r0
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f8d5 	bl	80066fa <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8006550:	4603      	mov	r3, r0
    }
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEES6_ET_SB_T0_>:
    __niter_wrap(_From __from, _To __res)
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ffd8 	bl	800651a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 800656a:	4602      	mov	r2, r0
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	10db      	asrs	r3, r3, #3
 8006572:	461a      	mov	r2, r3
 8006574:	1d3b      	adds	r3, r7, #4
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff f912 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800657e:	4603      	mov	r3, r0
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006590:	1d3b      	adds	r3, r7, #4
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f8d3 	bl	800673e <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 8006598:	4603      	mov	r3, r0
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f8db 	bl	8006756 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 80065a0:	4603      	mov	r3, r0
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80065aa:	b5b0      	push	{r4, r5, r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fd2e 	bl	8006018 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 80065bc:	4604      	mov	r4, r0
 80065be:	68b8      	ldr	r0, [r7, #8]
 80065c0:	f7ff fd2a 	bl	8006018 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 80065c4:	4605      	mov	r5, r0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fd25 	bl	8006018 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	4629      	mov	r1, r5
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 f8c9 	bl	800676c <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 80065da:	4602      	mov	r2, r0
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f8d5 	bl	8006790 <_ZSt12__niter_wrapIPN2ei8spectral10processing11freq_peak_tEET_RKS5_S5_>
 80065e6:	4603      	mov	r3, r0
    }
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bdb0      	pop	{r4, r5, r7, pc}

080065f0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fe66 	bl	80052ce <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b08b      	sub	sp, #44	; 0x2c
 8006610:	af00      	add	r7, sp, #0
 8006612:	6178      	str	r0, [r7, #20]
 8006614:	6139      	str	r1, [r7, #16]
 8006616:	60fa      	str	r2, [r7, #12]
 8006618:	eeb0 7a40 	vmov.f32	s14, s0
 800661c:	eef0 7a60 	vmov.f32	s15, s1
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	ed87 7a01 	vstr	s14, [r7, #4]
 8006626:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	3b01      	subs	r3, #1
 800662e:	0fda      	lsrs	r2, r3, #31
 8006630:	4413      	add	r3, r2
 8006632:	105b      	asrs	r3, r3, #1
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	dd10      	ble.n	8006660 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 800663e:	f107 0314 	add.w	r3, r7, #20
 8006642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff f8ac 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800664a:	4601      	mov	r1, r0
 800664c:	1d3b      	adds	r3, r7, #4
 800664e:	461a      	mov	r2, r3
 8006650:	6838      	ldr	r0, [r7, #0]
 8006652:	f000 f8a9 	bl	80067a8 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x56>
 8006660:	2300      	movs	r3, #0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d02d      	beq.n	80066c2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff f898 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006672:	4603      	mov	r3, r0
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	f107 0318 	add.w	r3, r7, #24
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fbd7 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006680:	4603      	mov	r3, r0
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fbdf 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006688:	4604      	mov	r4, r0
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	6939      	ldr	r1, [r7, #16]
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff f886 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006696:	4603      	mov	r3, r0
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	f107 031c 	add.w	r3, r7, #28
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fbc5 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80066a4:	4603      	mov	r3, r0
 80066a6:	4622      	mov	r2, r4
 80066a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066ac:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	0fda      	lsrs	r2, r3, #31
 80066ba:	4413      	add	r3, r2
 80066bc:	105b      	asrs	r3, r3, #1
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80066c0:	e7b9      	b.n	8006636 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fbbe 	bl	8005e46 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80066ca:	4604      	mov	r4, r0
 80066cc:	f107 0314 	add.w	r3, r7, #20
 80066d0:	6939      	ldr	r1, [r7, #16]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff f865 	bl	80057a2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80066d8:	4603      	mov	r3, r0
 80066da:	623b      	str	r3, [r7, #32]
 80066dc:	f107 0320 	add.w	r3, r7, #32
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fba4 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80066e6:	4603      	mov	r3, r0
 80066e8:	4622      	mov	r2, r4
 80066ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066ee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80066f2:	bf00      	nop
 80066f4:	372c      	adds	r7, #44	; 0x2c
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	10db      	asrs	r3, r3, #3
 800670e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	425b      	negs	r3, r3
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	18d0      	adds	r0, r2, r3
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	461a      	mov	r2, r3
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	f00f f94a 	bl	80159c0 <memmove>
	  return __result - _Num;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	425b      	negs	r3, r3
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4413      	add	r3, r2
	}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __miter_base(_Iterator __it)
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f828 	bl	80067d6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8006786:	4603      	mov	r3, r0
    }
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <_ZSt12__niter_wrapIPN2ei8spectral10processing11freq_peak_tEET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
    { return __res; }
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80067a8:	b590      	push	{r4, r7, lr}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80067b4:	68fc      	ldr	r4, [r7, #12]
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fb37 	bl	8005e2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80067c0:	4603      	mov	r3, r0
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4619      	mov	r1, r3
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7fc f838 	bl	800283c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80067cc:	4603      	mov	r3, r0
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}

080067d6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	10db      	asrs	r3, r3, #3
 80067ea:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	461a      	mov	r2, r3
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f00f f8e0 	bl	80159c0 <memmove>
	  return __result + _Num;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4413      	add	r3, r2
	}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	607b      	str	r3, [r7, #4]
 800681a:	4b10      	ldr	r3, [pc, #64]	; (800685c <HAL_MspInit+0x4c>)
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	4a0f      	ldr	r2, [pc, #60]	; (800685c <HAL_MspInit+0x4c>)
 8006820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006824:	6453      	str	r3, [r2, #68]	; 0x44
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <HAL_MspInit+0x4c>)
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006832:	2300      	movs	r3, #0
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <HAL_MspInit+0x4c>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	4a08      	ldr	r2, [pc, #32]	; (800685c <HAL_MspInit+0x4c>)
 800683c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006840:	6413      	str	r3, [r2, #64]	; 0x40
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <HAL_MspInit+0x4c>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800684e:	2007      	movs	r0, #7
 8006850:	f000 ff9a 	bl	8007788 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40023800 	.word	0x40023800

08006860 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08e      	sub	sp, #56	; 0x38
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	605a      	str	r2, [r3, #4]
 8006872:	609a      	str	r2, [r3, #8]
 8006874:	60da      	str	r2, [r3, #12]
 8006876:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a45      	ldr	r2, [pc, #276]	; (8006994 <HAL_ADC_MspInit+0x134>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d128      	bne.n	80068d4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006882:	2300      	movs	r3, #0
 8006884:	623b      	str	r3, [r7, #32]
 8006886:	4b44      	ldr	r3, [pc, #272]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	4a43      	ldr	r2, [pc, #268]	; (8006998 <HAL_ADC_MspInit+0x138>)
 800688c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006890:	6453      	str	r3, [r2, #68]	; 0x44
 8006892:	4b41      	ldr	r3, [pc, #260]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	4b3d      	ldr	r3, [pc, #244]	; (8006998 <HAL_ADC_MspInit+0x138>)
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	4a3c      	ldr	r2, [pc, #240]	; (8006998 <HAL_ADC_MspInit+0x138>)
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	6313      	str	r3, [r2, #48]	; 0x30
 80068ae:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <HAL_ADC_MspInit+0x138>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80068ba:	2301      	movs	r3, #1
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068be:	2303      	movs	r3, #3
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ca:	4619      	mov	r1, r3
 80068cc:	4833      	ldr	r0, [pc, #204]	; (800699c <HAL_ADC_MspInit+0x13c>)
 80068ce:	f000 ffb9 	bl	8007844 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80068d2:	e05a      	b.n	800698a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a31      	ldr	r2, [pc, #196]	; (80069a0 <HAL_ADC_MspInit+0x140>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d128      	bne.n	8006930 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	4b2d      	ldr	r3, [pc, #180]	; (8006998 <HAL_ADC_MspInit+0x138>)
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	4a2c      	ldr	r2, [pc, #176]	; (8006998 <HAL_ADC_MspInit+0x138>)
 80068e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068ec:	6453      	str	r3, [r2, #68]	; 0x44
 80068ee:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <HAL_ADC_MspInit+0x138>)
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	4b26      	ldr	r3, [pc, #152]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	4a25      	ldr	r2, [pc, #148]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006904:	f043 0301 	orr.w	r3, r3, #1
 8006908:	6313      	str	r3, [r2, #48]	; 0x30
 800690a:	4b23      	ldr	r3, [pc, #140]	; (8006998 <HAL_ADC_MspInit+0x138>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006916:	2310      	movs	r3, #16
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800691a:	2303      	movs	r3, #3
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691e:	2300      	movs	r3, #0
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006926:	4619      	mov	r1, r3
 8006928:	481c      	ldr	r0, [pc, #112]	; (800699c <HAL_ADC_MspInit+0x13c>)
 800692a:	f000 ff8b 	bl	8007844 <HAL_GPIO_Init>
}
 800692e:	e02c      	b.n	800698a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <HAL_ADC_MspInit+0x144>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d127      	bne.n	800698a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	4b16      	ldr	r3, [pc, #88]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006948:	6453      	str	r3, [r2, #68]	; 0x44
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <HAL_ADC_MspInit+0x138>)
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <HAL_ADC_MspInit+0x138>)
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	4a0e      	ldr	r2, [pc, #56]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	6313      	str	r3, [r2, #48]	; 0x30
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <HAL_ADC_MspInit+0x138>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006972:	2302      	movs	r3, #2
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006976:	2303      	movs	r3, #3
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697a:	2300      	movs	r3, #0
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800697e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006982:	4619      	mov	r1, r3
 8006984:	4805      	ldr	r0, [pc, #20]	; (800699c <HAL_ADC_MspInit+0x13c>)
 8006986:	f000 ff5d 	bl	8007844 <HAL_GPIO_Init>
}
 800698a:	bf00      	nop
 800698c:	3738      	adds	r7, #56	; 0x38
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40012000 	.word	0x40012000
 8006998:	40023800 	.word	0x40023800
 800699c:	40020000 	.word	0x40020000
 80069a0:	40012100 	.word	0x40012100
 80069a4:	40012200 	.word	0x40012200

080069a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a0b      	ldr	r2, [pc, #44]	; (80069e4 <HAL_CRC_MspInit+0x3c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d10d      	bne.n	80069d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <HAL_CRC_MspInit+0x40>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <HAL_CRC_MspInit+0x40>)
 80069c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069c8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ca:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <HAL_CRC_MspInit+0x40>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40023000 	.word	0x40023000
 80069e8:	40023800 	.word	0x40023800

080069ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f4:	f107 0314 	add.w	r3, r7, #20
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	609a      	str	r2, [r3, #8]
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <HAL_UART_MspInit+0x84>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d12b      	bne.n	8006a66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <HAL_UART_MspInit+0x88>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	4a17      	ldr	r2, [pc, #92]	; (8006a74 <HAL_UART_MspInit+0x88>)
 8006a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1e:	4b15      	ldr	r3, [pc, #84]	; (8006a74 <HAL_UART_MspInit+0x88>)
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <HAL_UART_MspInit+0x88>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	4a10      	ldr	r2, [pc, #64]	; (8006a74 <HAL_UART_MspInit+0x88>)
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	6313      	str	r3, [r2, #48]	; 0x30
 8006a3a:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <HAL_UART_MspInit+0x88>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006a46:	230c      	movs	r3, #12
 8006a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a52:	2303      	movs	r3, #3
 8006a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006a56:	2307      	movs	r3, #7
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a5a:	f107 0314 	add.w	r3, r7, #20
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4805      	ldr	r0, [pc, #20]	; (8006a78 <HAL_UART_MspInit+0x8c>)
 8006a62:	f000 feef 	bl	8007844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006a66:	bf00      	nop
 8006a68:	3728      	adds	r7, #40	; 0x28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40004400 	.word	0x40004400
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40020000 	.word	0x40020000

08006a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a80:	e7fe      	b.n	8006a80 <NMI_Handler+0x4>

08006a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a82:	b480      	push	{r7}
 8006a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a86:	e7fe      	b.n	8006a86 <HardFault_Handler+0x4>

08006a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a8c:	e7fe      	b.n	8006a8c <MemManage_Handler+0x4>

08006a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a92:	e7fe      	b.n	8006a92 <BusFault_Handler+0x4>

08006a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a98:	e7fe      	b.n	8006a98 <UsageFault_Handler+0x4>

08006a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a9e:	bf00      	nop
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006aac:	bf00      	nop
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006aba:	bf00      	nop
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ac8:	f000 f96e 	bl	8006da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006acc:	bf00      	nop
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8006ad4:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <EXTI15_10_IRQHandler+0x28>)
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <EXTI15_10_IRQHandler+0x1c>
			//GPIOA ->ODR ^=toggle_Pin;
			GPIOA ->ODR ^=LD2_Pin; //toggle the state of LED pin which also the user choice whether to perform inferencing
 8006ae0:	4b06      	ldr	r3, [pc, #24]	; (8006afc <EXTI15_10_IRQHandler+0x2c>)
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	4a05      	ldr	r2, [pc, #20]	; (8006afc <EXTI15_10_IRQHandler+0x2c>)
 8006ae6:	f083 0320 	eor.w	r3, r3, #32
 8006aea:	6153      	str	r3, [r2, #20]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006aec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006af0:	f001 f86e 	bl	8007bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40013c00 	.word	0x40013c00
 8006afc:	40020000 	.word	0x40020000

08006b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
	return 1;
 8006b04:	2301      	movs	r3, #1
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <_kill>:

int _kill(int pid, int sig)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006b1a:	f00e fe71 	bl	8015800 <__errno>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2216      	movs	r2, #22
 8006b22:	601a      	str	r2, [r3, #0]
	return -1;
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <_exit>:

void _exit (int status)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006b38:	f04f 31ff 	mov.w	r1, #4294967295
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff ffe7 	bl	8006b10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006b42:	e7fe      	b.n	8006b42 <_exit+0x12>

08006b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e00a      	b.n	8006b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006b56:	f3af 8000 	nop.w
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	60ba      	str	r2, [r7, #8]
 8006b62:	b2ca      	uxtb	r2, r1
 8006b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	dbf0      	blt.n	8006b56 <_read+0x12>
	}

return len;
 8006b74:	687b      	ldr	r3, [r7, #4]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e009      	b.n	8006ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	60ba      	str	r2, [r7, #8]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	dbf1      	blt.n	8006b90 <_write+0x12>
	}
	return len;
 8006bac:	687b      	ldr	r3, [r7, #4]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <_close>:

int _close(int file)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bde:	605a      	str	r2, [r3, #4]
	return 0;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <_isatty>:

int _isatty(int file)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8006bf6:	2301      	movs	r3, #1
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c28:	4a14      	ldr	r2, [pc, #80]	; (8006c7c <_sbrk+0x5c>)
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <_sbrk+0x60>)
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c34:	4b13      	ldr	r3, [pc, #76]	; (8006c84 <_sbrk+0x64>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c3c:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <_sbrk+0x64>)
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <_sbrk+0x68>)
 8006c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <_sbrk+0x64>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d207      	bcs.n	8006c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c50:	f00e fdd6 	bl	8015800 <__errno>
 8006c54:	4603      	mov	r3, r0
 8006c56:	220c      	movs	r2, #12
 8006c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	e009      	b.n	8006c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <_sbrk+0x64>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <_sbrk+0x64>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	4a05      	ldr	r2, [pc, #20]	; (8006c84 <_sbrk+0x64>)
 8006c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c72:	68fb      	ldr	r3, [r7, #12]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20020000 	.word	0x20020000
 8006c80:	00000400 	.word	0x00000400
 8006c84:	2000050c 	.word	0x2000050c
 8006c88:	20000938 	.word	0x20000938

08006c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c90:	4b06      	ldr	r3, [pc, #24]	; (8006cac <SystemInit+0x20>)
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c96:	4a05      	ldr	r2, [pc, #20]	; (8006cac <SystemInit+0x20>)
 8006c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ca0:	bf00      	nop
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	e000ed00 	.word	0xe000ed00

08006cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006cb4:	480d      	ldr	r0, [pc, #52]	; (8006cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006cb6:	490e      	ldr	r1, [pc, #56]	; (8006cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006cb8:	4a0e      	ldr	r2, [pc, #56]	; (8006cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cbc:	e002      	b.n	8006cc4 <LoopCopyDataInit>

08006cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cc2:	3304      	adds	r3, #4

08006cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cc8:	d3f9      	bcc.n	8006cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cca:	4a0b      	ldr	r2, [pc, #44]	; (8006cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ccc:	4c0b      	ldr	r4, [pc, #44]	; (8006cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8006cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cd0:	e001      	b.n	8006cd6 <LoopFillZerobss>

08006cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cd4:	3204      	adds	r2, #4

08006cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006cd8:	d3fb      	bcc.n	8006cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006cda:	f7ff ffd7 	bl	8006c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cde:	f00e fe29 	bl	8015934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ce2:	f7fd fa1f 	bl	8004124 <main>
  bx  lr    
 8006ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006cf0:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8006cf4:	0803a454 	.word	0x0803a454
  ldr r2, =_sbss
 8006cf8:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8006cfc:	20000938 	.word	0x20000938

08006d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d00:	e7fe      	b.n	8006d00 <ADC_IRQHandler>
	...

08006d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d08:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <HAL_Init+0x40>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a0d      	ldr	r2, [pc, #52]	; (8006d44 <HAL_Init+0x40>)
 8006d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <HAL_Init+0x40>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a0a      	ldr	r2, [pc, #40]	; (8006d44 <HAL_Init+0x40>)
 8006d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d20:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <HAL_Init+0x40>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a07      	ldr	r2, [pc, #28]	; (8006d44 <HAL_Init+0x40>)
 8006d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d2c:	2003      	movs	r0, #3
 8006d2e:	f000 fd2b 	bl	8007788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d32:	2000      	movs	r0, #0
 8006d34:	f000 f808 	bl	8006d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d38:	f7ff fd6a 	bl	8006810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40023c00 	.word	0x40023c00

08006d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d50:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <HAL_InitTick+0x54>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b12      	ldr	r3, [pc, #72]	; (8006da0 <HAL_InitTick+0x58>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fd43 	bl	80077f2 <HAL_SYSTICK_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e00e      	b.n	8006d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b0f      	cmp	r3, #15
 8006d7a:	d80a      	bhi.n	8006d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	f000 fd0b 	bl	800779e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d88:	4a06      	ldr	r2, [pc, #24]	; (8006da4 <HAL_InitTick+0x5c>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e000      	b.n	8006d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000060 	.word	0x20000060
 8006da0:	20000068 	.word	0x20000068
 8006da4:	20000064 	.word	0x20000064

08006da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <HAL_IncTick+0x20>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_IncTick+0x24>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4413      	add	r3, r2
 8006db8:	4a04      	ldr	r2, [pc, #16]	; (8006dcc <HAL_IncTick+0x24>)
 8006dba:	6013      	str	r3, [r2, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000068 	.word	0x20000068
 8006dcc:	20000924 	.word	0x20000924

08006dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8006dd4:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <HAL_GetTick+0x14>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000924 	.word	0x20000924

08006de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006df0:	f7ff ffee 	bl	8006dd0 <HAL_GetTick>
 8006df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d005      	beq.n	8006e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e02:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <HAL_Delay+0x44>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e0e:	bf00      	nop
 8006e10:	f7ff ffde 	bl	8006dd0 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d8f7      	bhi.n	8006e10 <HAL_Delay+0x28>
  {
  }
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000068 	.word	0x20000068

08006e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e033      	b.n	8006eae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fd06 	bl	8006860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d118      	bne.n	8006ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e76:	f023 0302 	bic.w	r3, r3, #2
 8006e7a:	f043 0202 	orr.w	r2, r3, #2
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fab4 	bl	80073f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	f043 0201 	orr.w	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8006e9e:	e001      	b.n	8006ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <HAL_ADC_Start+0x1a>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e0b2      	b.n	8007038 <HAL_ADC_Start+0x180>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d018      	beq.n	8006f1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006ef8:	4b52      	ldr	r3, [pc, #328]	; (8007044 <HAL_ADC_Start+0x18c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a52      	ldr	r2, [pc, #328]	; (8007048 <HAL_ADC_Start+0x190>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	0c9a      	lsrs	r2, r3, #18
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4413      	add	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006f0c:	e002      	b.n	8006f14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f9      	bne.n	8006f0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d17a      	bne.n	800701e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d106      	bne.n	8006f76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	f023 0206 	bic.w	r2, r3, #6
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44
 8006f74:	e002      	b.n	8006f7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f84:	4b31      	ldr	r3, [pc, #196]	; (800704c <HAL_ADC_Start+0x194>)
 8006f86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d12a      	bne.n	8006ff4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <HAL_ADC_Start+0x198>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d015      	beq.n	8006fd4 <HAL_ADC_Start+0x11c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a29      	ldr	r2, [pc, #164]	; (8007054 <HAL_ADC_Start+0x19c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d105      	bne.n	8006fbe <HAL_ADC_Start+0x106>
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <HAL_ADC_Start+0x194>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a25      	ldr	r2, [pc, #148]	; (8007058 <HAL_ADC_Start+0x1a0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d136      	bne.n	8007036 <HAL_ADC_Start+0x17e>
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_ADC_Start+0x194>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d130      	bne.n	8007036 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d129      	bne.n	8007036 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ff0:	609a      	str	r2, [r3, #8]
 8006ff2:	e020      	b.n	8007036 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a15      	ldr	r2, [pc, #84]	; (8007050 <HAL_ADC_Start+0x198>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d11b      	bne.n	8007036 <HAL_ADC_Start+0x17e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d114      	bne.n	8007036 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800701a:	609a      	str	r2, [r3, #8]
 800701c:	e00b      	b.n	8007036 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f043 0210 	orr.w	r2, r3, #16
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702e:	f043 0201 	orr.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20000060 	.word	0x20000060
 8007048:	431bde83 	.word	0x431bde83
 800704c:	40012300 	.word	0x40012300
 8007050:	40012000 	.word	0x40012000
 8007054:	40012100 	.word	0x40012100
 8007058:	40012200 	.word	0x40012200

0800705c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007078:	d113      	bne.n	80070a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007088:	d10b      	bne.n	80070a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	f043 0220 	orr.w	r2, r3, #32
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e063      	b.n	800716a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80070a2:	f7ff fe95 	bl	8006dd0 <HAL_GetTick>
 80070a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070a8:	e021      	b.n	80070ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d01d      	beq.n	80070ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <HAL_ADC_PollForConversion+0x6c>
 80070b8:	f7ff fe8a 	bl	8006dd0 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d212      	bcs.n	80070ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d00b      	beq.n	80070ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f043 0204 	orr.w	r2, r3, #4
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e03d      	b.n	800716a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d1d6      	bne.n	80070aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0212 	mvn.w	r2, #18
 8007104:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d123      	bne.n	8007168 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007124:	2b00      	cmp	r3, #0
 8007126:	d11f      	bne.n	8007168 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007132:	2b00      	cmp	r3, #0
 8007134:	d006      	beq.n	8007144 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007140:	2b00      	cmp	r3, #0
 8007142:	d111      	bne.n	8007168 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d105      	bne.n	8007168 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	f043 0201 	orr.w	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x1c>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e113      	b.n	80073d0 <HAL_ADC_ConfigChannel+0x244>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d925      	bls.n	8007204 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68d9      	ldr	r1, [r3, #12]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	4613      	mov	r3, r2
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4413      	add	r3, r2
 80071cc:	3b1e      	subs	r3, #30
 80071ce:	2207      	movs	r2, #7
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	43da      	mvns	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	400a      	ands	r2, r1
 80071dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68d9      	ldr	r1, [r3, #12]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4618      	mov	r0, r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	4403      	add	r3, r0
 80071f6:	3b1e      	subs	r3, #30
 80071f8:	409a      	lsls	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	60da      	str	r2, [r3, #12]
 8007202:	e022      	b.n	800724a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6919      	ldr	r1, [r3, #16]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	4613      	mov	r3, r2
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	4413      	add	r3, r2
 8007218:	2207      	movs	r2, #7
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	43da      	mvns	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	400a      	ands	r2, r1
 8007226:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6919      	ldr	r1, [r3, #16]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4618      	mov	r0, r3
 800723a:	4603      	mov	r3, r0
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	4403      	add	r3, r0
 8007240:	409a      	lsls	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b06      	cmp	r3, #6
 8007250:	d824      	bhi.n	800729c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	3b05      	subs	r3, #5
 8007264:	221f      	movs	r2, #31
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43da      	mvns	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	400a      	ands	r2, r1
 8007272:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	4618      	mov	r0, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	3b05      	subs	r3, #5
 800728e:	fa00 f203 	lsl.w	r2, r0, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	635a      	str	r2, [r3, #52]	; 0x34
 800729a:	e04c      	b.n	8007336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d824      	bhi.n	80072ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	3b23      	subs	r3, #35	; 0x23
 80072b6:	221f      	movs	r2, #31
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	43da      	mvns	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	400a      	ands	r2, r1
 80072c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	4618      	mov	r0, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	3b23      	subs	r3, #35	; 0x23
 80072e0:	fa00 f203 	lsl.w	r2, r0, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30
 80072ec:	e023      	b.n	8007336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	3b41      	subs	r3, #65	; 0x41
 8007300:	221f      	movs	r2, #31
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43da      	mvns	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	400a      	ands	r2, r1
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	4618      	mov	r0, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	3b41      	subs	r3, #65	; 0x41
 800732a:	fa00 f203 	lsl.w	r2, r0, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007336:	4b29      	ldr	r3, [pc, #164]	; (80073dc <HAL_ADC_ConfigChannel+0x250>)
 8007338:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a28      	ldr	r2, [pc, #160]	; (80073e0 <HAL_ADC_ConfigChannel+0x254>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d10f      	bne.n	8007364 <HAL_ADC_ConfigChannel+0x1d8>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b12      	cmp	r3, #18
 800734a:	d10b      	bne.n	8007364 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1d      	ldr	r2, [pc, #116]	; (80073e0 <HAL_ADC_ConfigChannel+0x254>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d12b      	bne.n	80073c6 <HAL_ADC_ConfigChannel+0x23a>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <HAL_ADC_ConfigChannel+0x258>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <HAL_ADC_ConfigChannel+0x1f4>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b11      	cmp	r3, #17
 800737e:	d122      	bne.n	80073c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <HAL_ADC_ConfigChannel+0x258>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d111      	bne.n	80073c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80073a2:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <HAL_ADC_ConfigChannel+0x25c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a11      	ldr	r2, [pc, #68]	; (80073ec <HAL_ADC_ConfigChannel+0x260>)
 80073a8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ac:	0c9a      	lsrs	r2, r3, #18
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073b8:	e002      	b.n	80073c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	3b01      	subs	r3, #1
 80073be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f9      	bne.n	80073ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40012300 	.word	0x40012300
 80073e0:	40012000 	.word	0x40012000
 80073e4:	10000012 	.word	0x10000012
 80073e8:	20000060 	.word	0x20000060
 80073ec:	431bde83 	.word	0x431bde83

080073f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073f8:	4b79      	ldr	r3, [pc, #484]	; (80075e0 <ADC_Init+0x1f0>)
 80073fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	431a      	orrs	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6859      	ldr	r1, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	021a      	lsls	r2, r3, #8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6859      	ldr	r1, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800746a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6899      	ldr	r1, [r3, #8]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	4a58      	ldr	r2, [pc, #352]	; (80075e4 <ADC_Init+0x1f4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d022      	beq.n	80074ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6899      	ldr	r1, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6899      	ldr	r1, [r3, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	e00f      	b.n	80074ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0202 	bic.w	r2, r2, #2
 80074fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6899      	ldr	r1, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7e1b      	ldrb	r3, [r3, #24]
 8007508:	005a      	lsls	r2, r3, #1
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01b      	beq.n	8007554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800752a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800753a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6859      	ldr	r1, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	3b01      	subs	r3, #1
 8007548:	035a      	lsls	r2, r3, #13
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	e007      	b.n	8007564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	3b01      	subs	r3, #1
 8007580:	051a      	lsls	r2, r3, #20
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6899      	ldr	r1, [r3, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075a6:	025a      	lsls	r2, r3, #9
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6899      	ldr	r1, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	029a      	lsls	r2, r3, #10
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	609a      	str	r2, [r3, #8]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	40012300 	.word	0x40012300
 80075e4:	0f000001 	.word	0x0f000001

080075e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <__NVIC_SetPriorityGrouping+0x44>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007604:	4013      	ands	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800761a:	4a04      	ldr	r2, [pc, #16]	; (800762c <__NVIC_SetPriorityGrouping+0x44>)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	60d3      	str	r3, [r2, #12]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	e000ed00 	.word	0xe000ed00

08007630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <__NVIC_GetPriorityGrouping+0x18>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	0a1b      	lsrs	r3, r3, #8
 800763a:	f003 0307 	and.w	r3, r3, #7
}
 800763e:	4618      	mov	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	e000ed00 	.word	0xe000ed00

0800764c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	db0b      	blt.n	8007676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	f003 021f 	and.w	r2, r3, #31
 8007664:	4907      	ldr	r1, [pc, #28]	; (8007684 <__NVIC_EnableIRQ+0x38>)
 8007666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	2001      	movs	r0, #1
 800766e:	fa00 f202 	lsl.w	r2, r0, r2
 8007672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	e000e100 	.word	0xe000e100

08007688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	db0a      	blt.n	80076b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	490c      	ldr	r1, [pc, #48]	; (80076d4 <__NVIC_SetPriority+0x4c>)
 80076a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a6:	0112      	lsls	r2, r2, #4
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	440b      	add	r3, r1
 80076ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076b0:	e00a      	b.n	80076c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	4908      	ldr	r1, [pc, #32]	; (80076d8 <__NVIC_SetPriority+0x50>)
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	3b04      	subs	r3, #4
 80076c0:	0112      	lsls	r2, r2, #4
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	440b      	add	r3, r1
 80076c6:	761a      	strb	r2, [r3, #24]
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	e000e100 	.word	0xe000e100
 80076d8:	e000ed00 	.word	0xe000ed00

080076dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076dc:	b480      	push	{r7}
 80076de:	b089      	sub	sp, #36	; 0x24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f1c3 0307 	rsb	r3, r3, #7
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	bf28      	it	cs
 80076fa:	2304      	movcs	r3, #4
 80076fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3304      	adds	r3, #4
 8007702:	2b06      	cmp	r3, #6
 8007704:	d902      	bls.n	800770c <NVIC_EncodePriority+0x30>
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	3b03      	subs	r3, #3
 800770a:	e000      	b.n	800770e <NVIC_EncodePriority+0x32>
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	fa02 f303 	lsl.w	r3, r2, r3
 800771a:	43da      	mvns	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	401a      	ands	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007724:	f04f 31ff 	mov.w	r1, #4294967295
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	fa01 f303 	lsl.w	r3, r1, r3
 800772e:	43d9      	mvns	r1, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007734:	4313      	orrs	r3, r2
         );
}
 8007736:	4618      	mov	r0, r3
 8007738:	3724      	adds	r7, #36	; 0x24
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3b01      	subs	r3, #1
 8007750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007754:	d301      	bcc.n	800775a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007756:	2301      	movs	r3, #1
 8007758:	e00f      	b.n	800777a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800775a:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <SysTick_Config+0x40>)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3b01      	subs	r3, #1
 8007760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007762:	210f      	movs	r1, #15
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	f7ff ff8e 	bl	8007688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <SysTick_Config+0x40>)
 800776e:	2200      	movs	r2, #0
 8007770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007772:	4b04      	ldr	r3, [pc, #16]	; (8007784 <SysTick_Config+0x40>)
 8007774:	2207      	movs	r2, #7
 8007776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	e000e010 	.word	0xe000e010

08007788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff ff29 	bl	80075e8 <__NVIC_SetPriorityGrouping>
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	4603      	mov	r3, r0
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077b0:	f7ff ff3e 	bl	8007630 <__NVIC_GetPriorityGrouping>
 80077b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	6978      	ldr	r0, [r7, #20]
 80077bc:	f7ff ff8e 	bl	80076dc <NVIC_EncodePriority>
 80077c0:	4602      	mov	r2, r0
 80077c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c6:	4611      	mov	r1, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff ff5d 	bl	8007688 <__NVIC_SetPriority>
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	4603      	mov	r3, r0
 80077de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff ff31 	bl	800764c <__NVIC_EnableIRQ>
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff ffa2 	bl	8007744 <SysTick_Config>
 8007800:	4603      	mov	r3, r0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e00e      	b.n	800783a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	795b      	ldrb	r3, [r3, #5]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d105      	bne.n	8007832 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff f8bb 	bl	80069a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	; 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007856:	2300      	movs	r3, #0
 8007858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
 800785e:	e165      	b.n	8007b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007860:	2201      	movs	r2, #1
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	fa02 f303 	lsl.w	r3, r2, r3
 8007868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4013      	ands	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	429a      	cmp	r2, r3
 800787a:	f040 8154 	bne.w	8007b26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b01      	cmp	r3, #1
 8007888:	d005      	beq.n	8007896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007892:	2b02      	cmp	r3, #2
 8007894:	d130      	bne.n	80078f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	2203      	movs	r2, #3
 80078a2:	fa02 f303 	lsl.w	r3, r2, r3
 80078a6:	43db      	mvns	r3, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	4013      	ands	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4313      	orrs	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078cc:	2201      	movs	r2, #1
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	43db      	mvns	r3, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4013      	ands	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	091b      	lsrs	r3, r3, #4
 80078e2:	f003 0201 	and.w	r2, r3, #1
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	2b03      	cmp	r3, #3
 8007902:	d017      	beq.n	8007934 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	2203      	movs	r2, #3
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	43db      	mvns	r3, r3
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	4013      	ands	r3, r2
 800791a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4313      	orrs	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d123      	bne.n	8007988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	08da      	lsrs	r2, r3, #3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3208      	adds	r2, #8
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	220f      	movs	r2, #15
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	43db      	mvns	r3, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4013      	ands	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	4313      	orrs	r3, r2
 8007978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	08da      	lsrs	r2, r3, #3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3208      	adds	r2, #8
 8007982:	69b9      	ldr	r1, [r7, #24]
 8007984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	2203      	movs	r2, #3
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	43db      	mvns	r3, r3
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	4013      	ands	r3, r2
 800799e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f003 0203 	and.w	r2, r3, #3
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80ae 	beq.w	8007b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	4b5d      	ldr	r3, [pc, #372]	; (8007b44 <HAL_GPIO_Init+0x300>)
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	4a5c      	ldr	r2, [pc, #368]	; (8007b44 <HAL_GPIO_Init+0x300>)
 80079d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079d8:	6453      	str	r3, [r2, #68]	; 0x44
 80079da:	4b5a      	ldr	r3, [pc, #360]	; (8007b44 <HAL_GPIO_Init+0x300>)
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079e6:	4a58      	ldr	r2, [pc, #352]	; (8007b48 <HAL_GPIO_Init+0x304>)
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	3302      	adds	r3, #2
 80079ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	220f      	movs	r2, #15
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	43db      	mvns	r3, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	4013      	ands	r3, r2
 8007a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a4f      	ldr	r2, [pc, #316]	; (8007b4c <HAL_GPIO_Init+0x308>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d025      	beq.n	8007a5e <HAL_GPIO_Init+0x21a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a4e      	ldr	r2, [pc, #312]	; (8007b50 <HAL_GPIO_Init+0x30c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d01f      	beq.n	8007a5a <HAL_GPIO_Init+0x216>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a4d      	ldr	r2, [pc, #308]	; (8007b54 <HAL_GPIO_Init+0x310>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d019      	beq.n	8007a56 <HAL_GPIO_Init+0x212>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a4c      	ldr	r2, [pc, #304]	; (8007b58 <HAL_GPIO_Init+0x314>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d013      	beq.n	8007a52 <HAL_GPIO_Init+0x20e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a4b      	ldr	r2, [pc, #300]	; (8007b5c <HAL_GPIO_Init+0x318>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00d      	beq.n	8007a4e <HAL_GPIO_Init+0x20a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a4a      	ldr	r2, [pc, #296]	; (8007b60 <HAL_GPIO_Init+0x31c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <HAL_GPIO_Init+0x206>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a49      	ldr	r2, [pc, #292]	; (8007b64 <HAL_GPIO_Init+0x320>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d101      	bne.n	8007a46 <HAL_GPIO_Init+0x202>
 8007a42:	2306      	movs	r3, #6
 8007a44:	e00c      	b.n	8007a60 <HAL_GPIO_Init+0x21c>
 8007a46:	2307      	movs	r3, #7
 8007a48:	e00a      	b.n	8007a60 <HAL_GPIO_Init+0x21c>
 8007a4a:	2305      	movs	r3, #5
 8007a4c:	e008      	b.n	8007a60 <HAL_GPIO_Init+0x21c>
 8007a4e:	2304      	movs	r3, #4
 8007a50:	e006      	b.n	8007a60 <HAL_GPIO_Init+0x21c>
 8007a52:	2303      	movs	r3, #3
 8007a54:	e004      	b.n	8007a60 <HAL_GPIO_Init+0x21c>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e002      	b.n	8007a60 <HAL_GPIO_Init+0x21c>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <HAL_GPIO_Init+0x21c>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	f002 0203 	and.w	r2, r2, #3
 8007a66:	0092      	lsls	r2, r2, #2
 8007a68:	4093      	lsls	r3, r2
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a70:	4935      	ldr	r1, [pc, #212]	; (8007b48 <HAL_GPIO_Init+0x304>)
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	089b      	lsrs	r3, r3, #2
 8007a76:	3302      	adds	r3, #2
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a7e:	4b3a      	ldr	r3, [pc, #232]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	43db      	mvns	r3, r3
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007aa2:	4a31      	ldr	r2, [pc, #196]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007aa8:	4b2f      	ldr	r3, [pc, #188]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007acc:	4a26      	ldr	r2, [pc, #152]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ad2:	4b25      	ldr	r3, [pc, #148]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	43db      	mvns	r3, r3
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007af6:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007afc:	4b1a      	ldr	r3, [pc, #104]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b20:	4a11      	ldr	r2, [pc, #68]	; (8007b68 <HAL_GPIO_Init+0x324>)
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b0f      	cmp	r3, #15
 8007b30:	f67f ae96 	bls.w	8007860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	3724      	adds	r7, #36	; 0x24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40023800 	.word	0x40023800
 8007b48:	40013800 	.word	0x40013800
 8007b4c:	40020000 	.word	0x40020000
 8007b50:	40020400 	.word	0x40020400
 8007b54:	40020800 	.word	0x40020800
 8007b58:	40020c00 	.word	0x40020c00
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	40021400 	.word	0x40021400
 8007b64:	40021800 	.word	0x40021800
 8007b68:	40013c00 	.word	0x40013c00

08007b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	887b      	ldrh	r3, [r7, #2]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	e001      	b.n	8007b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	807b      	strh	r3, [r7, #2]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bac:	787b      	ldrb	r3, [r7, #1]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bb2:	887a      	ldrh	r2, [r7, #2]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bb8:	e003      	b.n	8007bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bba:	887b      	ldrh	r3, [r7, #2]
 8007bbc:	041a      	lsls	r2, r3, #16
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	619a      	str	r2, [r3, #24]
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
	...

08007bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bdc:	695a      	ldr	r2, [r3, #20]
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	4013      	ands	r3, r2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d006      	beq.n	8007bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007be6:	4a05      	ldr	r2, [pc, #20]	; (8007bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f806 	bl	8007c00 <HAL_GPIO_EXTI_Callback>
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	40013c00 	.word	0x40013c00

08007c00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
	...

08007c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0cc      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c2c:	4b68      	ldr	r3, [pc, #416]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d90c      	bls.n	8007c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3a:	4b65      	ldr	r3, [pc, #404]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c42:	4b63      	ldr	r3, [pc, #396]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d001      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0b8      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d020      	beq.n	8007ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c6c:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4a58      	ldr	r2, [pc, #352]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c84:	4b53      	ldr	r3, [pc, #332]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a52      	ldr	r2, [pc, #328]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c90:	4b50      	ldr	r3, [pc, #320]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	494d      	ldr	r1, [pc, #308]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d044      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cb6:	4b47      	ldr	r3, [pc, #284]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d119      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e07f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d003      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d107      	bne.n	8007ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cd6:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d109      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e06f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce6:	4b3b      	ldr	r3, [pc, #236]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e067      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cf6:	4b37      	ldr	r3, [pc, #220]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f023 0203 	bic.w	r2, r3, #3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	4934      	ldr	r1, [pc, #208]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d08:	f7ff f862 	bl	8006dd0 <HAL_GetTick>
 8007d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d10:	f7ff f85e 	bl	8006dd0 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e04f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d26:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 020c 	and.w	r2, r3, #12
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d1eb      	bne.n	8007d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d20c      	bcs.n	8007d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d46:	4b22      	ldr	r3, [pc, #136]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4e:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e032      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d6c:	4b19      	ldr	r3, [pc, #100]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4916      	ldr	r1, [pc, #88]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	490e      	ldr	r1, [pc, #56]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d9e:	f000 f855 	bl	8007e4c <HAL_RCC_GetSysClockFreq>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	490a      	ldr	r1, [pc, #40]	; (8007dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007db0:	5ccb      	ldrb	r3, [r1, r3]
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <HAL_RCC_ClockConfig+0x1c4>)
 8007db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <HAL_RCC_ClockConfig+0x1c8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe ffc2 	bl	8006d48 <HAL_InitTick>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40023c00 	.word	0x40023c00
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	0801b88c 	.word	0x0801b88c
 8007ddc:	20000060 	.word	0x20000060
 8007de0:	20000064 	.word	0x20000064

08007de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007de8:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dea:	681b      	ldr	r3, [r3, #0]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	20000060 	.word	0x20000060

08007dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e00:	f7ff fff0 	bl	8007de4 <HAL_RCC_GetHCLKFreq>
 8007e04:	4602      	mov	r2, r0
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	0a9b      	lsrs	r3, r3, #10
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	4903      	ldr	r1, [pc, #12]	; (8007e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e12:	5ccb      	ldrb	r3, [r1, r3]
 8007e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	0801b89c 	.word	0x0801b89c

08007e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e28:	f7ff ffdc 	bl	8007de4 <HAL_RCC_GetHCLKFreq>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0b5b      	lsrs	r3, r3, #13
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	4903      	ldr	r1, [pc, #12]	; (8007e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e3a:	5ccb      	ldrb	r3, [r1, r3]
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40023800 	.word	0x40023800
 8007e48:	0801b89c 	.word	0x0801b89c

08007e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e50:	b088      	sub	sp, #32
 8007e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e68:	4bce      	ldr	r3, [pc, #824]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 030c 	and.w	r3, r3, #12
 8007e70:	2b0c      	cmp	r3, #12
 8007e72:	f200 818d 	bhi.w	8008190 <HAL_RCC_GetSysClockFreq+0x344>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <HAL_RCC_GetSysClockFreq+0x30>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007eb1 	.word	0x08007eb1
 8007e80:	08008191 	.word	0x08008191
 8007e84:	08008191 	.word	0x08008191
 8007e88:	08008191 	.word	0x08008191
 8007e8c:	08007eb7 	.word	0x08007eb7
 8007e90:	08008191 	.word	0x08008191
 8007e94:	08008191 	.word	0x08008191
 8007e98:	08008191 	.word	0x08008191
 8007e9c:	08007ebd 	.word	0x08007ebd
 8007ea0:	08008191 	.word	0x08008191
 8007ea4:	08008191 	.word	0x08008191
 8007ea8:	08008191 	.word	0x08008191
 8007eac:	08008031 	.word	0x08008031
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007eb0:	4bbd      	ldr	r3, [pc, #756]	; (80081a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007eb2:	61bb      	str	r3, [r7, #24]
       break;
 8007eb4:	e16f      	b.n	8008196 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eb6:	4bbd      	ldr	r3, [pc, #756]	; (80081ac <HAL_RCC_GetSysClockFreq+0x360>)
 8007eb8:	61bb      	str	r3, [r7, #24]
      break;
 8007eba:	e16c      	b.n	8008196 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ebc:	4bb9      	ldr	r3, [pc, #740]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ec6:	4bb7      	ldr	r3, [pc, #732]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d053      	beq.n	8007f7a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ed2:	4bb4      	ldr	r3, [pc, #720]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ee2:	f04f 0100 	mov.w	r1, #0
 8007ee6:	ea02 0400 	and.w	r4, r2, r0
 8007eea:	603c      	str	r4, [r7, #0]
 8007eec:	400b      	ands	r3, r1
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	014b      	lsls	r3, r1, #5
 8007f02:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f06:	0142      	lsls	r2, r0, #5
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	1ac0      	subs	r0, r0, r3
 8007f10:	462b      	mov	r3, r5
 8007f12:	eb61 0103 	sbc.w	r1, r1, r3
 8007f16:	f04f 0200 	mov.w	r2, #0
 8007f1a:	f04f 0300 	mov.w	r3, #0
 8007f1e:	018b      	lsls	r3, r1, #6
 8007f20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f24:	0182      	lsls	r2, r0, #6
 8007f26:	1a12      	subs	r2, r2, r0
 8007f28:	eb63 0301 	sbc.w	r3, r3, r1
 8007f2c:	f04f 0000 	mov.w	r0, #0
 8007f30:	f04f 0100 	mov.w	r1, #0
 8007f34:	00d9      	lsls	r1, r3, #3
 8007f36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f3a:	00d0      	lsls	r0, r2, #3
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4621      	mov	r1, r4
 8007f42:	1852      	adds	r2, r2, r1
 8007f44:	4629      	mov	r1, r5
 8007f46:	eb43 0101 	adc.w	r1, r3, r1
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	f04f 0000 	mov.w	r0, #0
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	0259      	lsls	r1, r3, #9
 8007f56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007f5a:	0250      	lsls	r0, r2, #9
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	f7f8 febc 	bl	8000ce8 <__aeabi_uldivmod>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4613      	mov	r3, r2
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	e04c      	b.n	8008014 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f7a:	4b8a      	ldr	r3, [pc, #552]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	099b      	lsrs	r3, r3, #6
 8007f80:	461a      	mov	r2, r3
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f8a:	f04f 0100 	mov.w	r1, #0
 8007f8e:	ea02 0a00 	and.w	sl, r2, r0
 8007f92:	ea03 0b01 	and.w	fp, r3, r1
 8007f96:	4650      	mov	r0, sl
 8007f98:	4659      	mov	r1, fp
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	014b      	lsls	r3, r1, #5
 8007fa4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007fa8:	0142      	lsls	r2, r0, #5
 8007faa:	4610      	mov	r0, r2
 8007fac:	4619      	mov	r1, r3
 8007fae:	ebb0 000a 	subs.w	r0, r0, sl
 8007fb2:	eb61 010b 	sbc.w	r1, r1, fp
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	018b      	lsls	r3, r1, #6
 8007fc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007fc4:	0182      	lsls	r2, r0, #6
 8007fc6:	1a12      	subs	r2, r2, r0
 8007fc8:	eb63 0301 	sbc.w	r3, r3, r1
 8007fcc:	f04f 0000 	mov.w	r0, #0
 8007fd0:	f04f 0100 	mov.w	r1, #0
 8007fd4:	00d9      	lsls	r1, r3, #3
 8007fd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fda:	00d0      	lsls	r0, r2, #3
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	eb12 020a 	adds.w	r2, r2, sl
 8007fe4:	eb43 030b 	adc.w	r3, r3, fp
 8007fe8:	f04f 0000 	mov.w	r0, #0
 8007fec:	f04f 0100 	mov.w	r1, #0
 8007ff0:	0299      	lsls	r1, r3, #10
 8007ff2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007ff6:	0290      	lsls	r0, r2, #10
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4619      	mov	r1, r3
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	461a      	mov	r2, r3
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	f7f8 fe6e 	bl	8000ce8 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4613      	mov	r3, r2
 8008012:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008014:	4b63      	ldr	r3, [pc, #396]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	0c1b      	lsrs	r3, r3, #16
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	3301      	adds	r3, #1
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	fbb2 f3f3 	udiv	r3, r2, r3
 800802c:	61bb      	str	r3, [r7, #24]
      break;
 800802e:	e0b2      	b.n	8008196 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008030:	4b5c      	ldr	r3, [pc, #368]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008038:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800803a:	4b5a      	ldr	r3, [pc, #360]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d04d      	beq.n	80080e2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008046:	4b57      	ldr	r3, [pc, #348]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	099b      	lsrs	r3, r3, #6
 800804c:	461a      	mov	r2, r3
 800804e:	f04f 0300 	mov.w	r3, #0
 8008052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008056:	f04f 0100 	mov.w	r1, #0
 800805a:	ea02 0800 	and.w	r8, r2, r0
 800805e:	ea03 0901 	and.w	r9, r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	014b      	lsls	r3, r1, #5
 8008070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008074:	0142      	lsls	r2, r0, #5
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	ebb0 0008 	subs.w	r0, r0, r8
 800807e:	eb61 0109 	sbc.w	r1, r1, r9
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	018b      	lsls	r3, r1, #6
 800808c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008090:	0182      	lsls	r2, r0, #6
 8008092:	1a12      	subs	r2, r2, r0
 8008094:	eb63 0301 	sbc.w	r3, r3, r1
 8008098:	f04f 0000 	mov.w	r0, #0
 800809c:	f04f 0100 	mov.w	r1, #0
 80080a0:	00d9      	lsls	r1, r3, #3
 80080a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080a6:	00d0      	lsls	r0, r2, #3
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	eb12 0208 	adds.w	r2, r2, r8
 80080b0:	eb43 0309 	adc.w	r3, r3, r9
 80080b4:	f04f 0000 	mov.w	r0, #0
 80080b8:	f04f 0100 	mov.w	r1, #0
 80080bc:	0259      	lsls	r1, r3, #9
 80080be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80080c2:	0250      	lsls	r0, r2, #9
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4610      	mov	r0, r2
 80080ca:	4619      	mov	r1, r3
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	f7f8 fe08 	bl	8000ce8 <__aeabi_uldivmod>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4613      	mov	r3, r2
 80080de:	61fb      	str	r3, [r7, #28]
 80080e0:	e04a      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e2:	4b30      	ldr	r3, [pc, #192]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	461a      	mov	r2, r3
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80080f2:	f04f 0100 	mov.w	r1, #0
 80080f6:	ea02 0400 	and.w	r4, r2, r0
 80080fa:	ea03 0501 	and.w	r5, r3, r1
 80080fe:	4620      	mov	r0, r4
 8008100:	4629      	mov	r1, r5
 8008102:	f04f 0200 	mov.w	r2, #0
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	014b      	lsls	r3, r1, #5
 800810c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008110:	0142      	lsls	r2, r0, #5
 8008112:	4610      	mov	r0, r2
 8008114:	4619      	mov	r1, r3
 8008116:	1b00      	subs	r0, r0, r4
 8008118:	eb61 0105 	sbc.w	r1, r1, r5
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	018b      	lsls	r3, r1, #6
 8008126:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800812a:	0182      	lsls	r2, r0, #6
 800812c:	1a12      	subs	r2, r2, r0
 800812e:	eb63 0301 	sbc.w	r3, r3, r1
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f04f 0100 	mov.w	r1, #0
 800813a:	00d9      	lsls	r1, r3, #3
 800813c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008140:	00d0      	lsls	r0, r2, #3
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	1912      	adds	r2, r2, r4
 8008148:	eb45 0303 	adc.w	r3, r5, r3
 800814c:	f04f 0000 	mov.w	r0, #0
 8008150:	f04f 0100 	mov.w	r1, #0
 8008154:	0299      	lsls	r1, r3, #10
 8008156:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800815a:	0290      	lsls	r0, r2, #10
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4610      	mov	r0, r2
 8008162:	4619      	mov	r1, r3
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	461a      	mov	r2, r3
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	f7f8 fdbc 	bl	8000ce8 <__aeabi_uldivmod>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	4613      	mov	r3, r2
 8008176:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008178:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	0f1b      	lsrs	r3, r3, #28
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	fbb2 f3f3 	udiv	r3, r2, r3
 800818c:	61bb      	str	r3, [r7, #24]
      break;
 800818e:	e002      	b.n	8008196 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008192:	61bb      	str	r3, [r7, #24]
      break;
 8008194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008196:	69bb      	ldr	r3, [r7, #24]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081a2:	bf00      	nop
 80081a4:	40023800 	.word	0x40023800
 80081a8:	00f42400 	.word	0x00f42400
 80081ac:	007a1200 	.word	0x007a1200

080081b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e28d      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8083 	beq.w	80082d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80081d0:	4b94      	ldr	r3, [pc, #592]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 030c 	and.w	r3, r3, #12
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d019      	beq.n	8008210 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081dc:	4b91      	ldr	r3, [pc, #580]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d106      	bne.n	80081f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081e8:	4b8e      	ldr	r3, [pc, #568]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081f4:	d00c      	beq.n	8008210 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081f6:	4b8b      	ldr	r3, [pc, #556]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081fe:	2b0c      	cmp	r3, #12
 8008200:	d112      	bne.n	8008228 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008202:	4b88      	ldr	r3, [pc, #544]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800820a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800820e:	d10b      	bne.n	8008228 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008210:	4b84      	ldr	r3, [pc, #528]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05b      	beq.n	80082d4 <HAL_RCC_OscConfig+0x124>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d157      	bne.n	80082d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e25a      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008230:	d106      	bne.n	8008240 <HAL_RCC_OscConfig+0x90>
 8008232:	4b7c      	ldr	r3, [pc, #496]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a7b      	ldr	r2, [pc, #492]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	e01d      	b.n	800827c <HAL_RCC_OscConfig+0xcc>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008248:	d10c      	bne.n	8008264 <HAL_RCC_OscConfig+0xb4>
 800824a:	4b76      	ldr	r3, [pc, #472]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a75      	ldr	r2, [pc, #468]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	4b73      	ldr	r3, [pc, #460]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a72      	ldr	r2, [pc, #456]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 800825c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	e00b      	b.n	800827c <HAL_RCC_OscConfig+0xcc>
 8008264:	4b6f      	ldr	r3, [pc, #444]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a6e      	ldr	r2, [pc, #440]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 800826a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	4b6c      	ldr	r3, [pc, #432]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a6b      	ldr	r2, [pc, #428]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800827a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d013      	beq.n	80082ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fe fda4 	bl	8006dd0 <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800828c:	f7fe fda0 	bl	8006dd0 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b64      	cmp	r3, #100	; 0x64
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e21f      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800829e:	4b61      	ldr	r3, [pc, #388]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCC_OscConfig+0xdc>
 80082aa:	e014      	b.n	80082d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ac:	f7fe fd90 	bl	8006dd0 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082b4:	f7fe fd8c 	bl	8006dd0 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b64      	cmp	r3, #100	; 0x64
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e20b      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082c6:	4b57      	ldr	r3, [pc, #348]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f0      	bne.n	80082b4 <HAL_RCC_OscConfig+0x104>
 80082d2:	e000      	b.n	80082d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d06f      	beq.n	80083c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80082e2:	4b50      	ldr	r3, [pc, #320]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d017      	beq.n	800831e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082ee:	4b4d      	ldr	r3, [pc, #308]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d105      	bne.n	8008306 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082fa:	4b4a      	ldr	r3, [pc, #296]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00b      	beq.n	800831e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008306:	4b47      	ldr	r3, [pc, #284]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800830e:	2b0c      	cmp	r3, #12
 8008310:	d11c      	bne.n	800834c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008312:	4b44      	ldr	r3, [pc, #272]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d116      	bne.n	800834c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800831e:	4b41      	ldr	r3, [pc, #260]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <HAL_RCC_OscConfig+0x186>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d001      	beq.n	8008336 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e1d3      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008336:	4b3b      	ldr	r3, [pc, #236]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	4937      	ldr	r1, [pc, #220]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008346:	4313      	orrs	r3, r2
 8008348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800834a:	e03a      	b.n	80083c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d020      	beq.n	8008396 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008354:	4b34      	ldr	r3, [pc, #208]	; (8008428 <HAL_RCC_OscConfig+0x278>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835a:	f7fe fd39 	bl	8006dd0 <HAL_GetTick>
 800835e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008360:	e008      	b.n	8008374 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008362:	f7fe fd35 	bl	8006dd0 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e1b4      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008374:	4b2b      	ldr	r3, [pc, #172]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f0      	beq.n	8008362 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008380:	4b28      	ldr	r3, [pc, #160]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	4925      	ldr	r1, [pc, #148]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 8008390:	4313      	orrs	r3, r2
 8008392:	600b      	str	r3, [r1, #0]
 8008394:	e015      	b.n	80083c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008396:	4b24      	ldr	r3, [pc, #144]	; (8008428 <HAL_RCC_OscConfig+0x278>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fe fd18 	bl	8006dd0 <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083a4:	f7fe fd14 	bl	8006dd0 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e193      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083b6:	4b1b      	ldr	r3, [pc, #108]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f0      	bne.n	80083a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d036      	beq.n	800843c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d016      	beq.n	8008404 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083d6:	4b15      	ldr	r3, [pc, #84]	; (800842c <HAL_RCC_OscConfig+0x27c>)
 80083d8:	2201      	movs	r2, #1
 80083da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083dc:	f7fe fcf8 	bl	8006dd0 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083e4:	f7fe fcf4 	bl	8006dd0 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e173      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <HAL_RCC_OscConfig+0x274>)
 80083f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0f0      	beq.n	80083e4 <HAL_RCC_OscConfig+0x234>
 8008402:	e01b      	b.n	800843c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008404:	4b09      	ldr	r3, [pc, #36]	; (800842c <HAL_RCC_OscConfig+0x27c>)
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800840a:	f7fe fce1 	bl	8006dd0 <HAL_GetTick>
 800840e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008410:	e00e      	b.n	8008430 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008412:	f7fe fcdd 	bl	8006dd0 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d907      	bls.n	8008430 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e15c      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
 8008424:	40023800 	.word	0x40023800
 8008428:	42470000 	.word	0x42470000
 800842c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008430:	4b8a      	ldr	r3, [pc, #552]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1ea      	bne.n	8008412 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8097 	beq.w	8008578 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800844e:	4b83      	ldr	r3, [pc, #524]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10f      	bne.n	800847a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800845a:	2300      	movs	r3, #0
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	4b7f      	ldr	r3, [pc, #508]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	4a7e      	ldr	r2, [pc, #504]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008468:	6413      	str	r3, [r2, #64]	; 0x40
 800846a:	4b7c      	ldr	r3, [pc, #496]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008472:	60bb      	str	r3, [r7, #8]
 8008474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008476:	2301      	movs	r3, #1
 8008478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800847a:	4b79      	ldr	r3, [pc, #484]	; (8008660 <HAL_RCC_OscConfig+0x4b0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d118      	bne.n	80084b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008486:	4b76      	ldr	r3, [pc, #472]	; (8008660 <HAL_RCC_OscConfig+0x4b0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a75      	ldr	r2, [pc, #468]	; (8008660 <HAL_RCC_OscConfig+0x4b0>)
 800848c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008492:	f7fe fc9d 	bl	8006dd0 <HAL_GetTick>
 8008496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800849a:	f7fe fc99 	bl	8006dd0 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e118      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ac:	4b6c      	ldr	r3, [pc, #432]	; (8008660 <HAL_RCC_OscConfig+0x4b0>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0f0      	beq.n	800849a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d106      	bne.n	80084ce <HAL_RCC_OscConfig+0x31e>
 80084c0:	4b66      	ldr	r3, [pc, #408]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c4:	4a65      	ldr	r2, [pc, #404]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	6713      	str	r3, [r2, #112]	; 0x70
 80084cc:	e01c      	b.n	8008508 <HAL_RCC_OscConfig+0x358>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d10c      	bne.n	80084f0 <HAL_RCC_OscConfig+0x340>
 80084d6:	4b61      	ldr	r3, [pc, #388]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	4a60      	ldr	r2, [pc, #384]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084dc:	f043 0304 	orr.w	r3, r3, #4
 80084e0:	6713      	str	r3, [r2, #112]	; 0x70
 80084e2:	4b5e      	ldr	r3, [pc, #376]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	4a5d      	ldr	r2, [pc, #372]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084e8:	f043 0301 	orr.w	r3, r3, #1
 80084ec:	6713      	str	r3, [r2, #112]	; 0x70
 80084ee:	e00b      	b.n	8008508 <HAL_RCC_OscConfig+0x358>
 80084f0:	4b5a      	ldr	r3, [pc, #360]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f4:	4a59      	ldr	r2, [pc, #356]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084f6:	f023 0301 	bic.w	r3, r3, #1
 80084fa:	6713      	str	r3, [r2, #112]	; 0x70
 80084fc:	4b57      	ldr	r3, [pc, #348]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80084fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008500:	4a56      	ldr	r2, [pc, #344]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008502:	f023 0304 	bic.w	r3, r3, #4
 8008506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d015      	beq.n	800853c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008510:	f7fe fc5e 	bl	8006dd0 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008516:	e00a      	b.n	800852e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008518:	f7fe fc5a 	bl	8006dd0 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	f241 3288 	movw	r2, #5000	; 0x1388
 8008526:	4293      	cmp	r3, r2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e0d7      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800852e:	4b4b      	ldr	r3, [pc, #300]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0ee      	beq.n	8008518 <HAL_RCC_OscConfig+0x368>
 800853a:	e014      	b.n	8008566 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853c:	f7fe fc48 	bl	8006dd0 <HAL_GetTick>
 8008540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008542:	e00a      	b.n	800855a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008544:	f7fe fc44 	bl	8006dd0 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008552:	4293      	cmp	r3, r2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e0c1      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800855a:	4b40      	ldr	r3, [pc, #256]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 800855c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1ee      	bne.n	8008544 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d105      	bne.n	8008578 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800856c:	4b3b      	ldr	r3, [pc, #236]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	4a3a      	ldr	r2, [pc, #232]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80ad 	beq.w	80086dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008582:	4b36      	ldr	r3, [pc, #216]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 030c 	and.w	r3, r3, #12
 800858a:	2b08      	cmp	r3, #8
 800858c:	d060      	beq.n	8008650 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d145      	bne.n	8008622 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008596:	4b33      	ldr	r3, [pc, #204]	; (8008664 <HAL_RCC_OscConfig+0x4b4>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800859c:	f7fe fc18 	bl	8006dd0 <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085a4:	f7fe fc14 	bl	8006dd0 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e093      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085b6:	4b29      	ldr	r3, [pc, #164]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	019b      	lsls	r3, r3, #6
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	3b01      	subs	r3, #1
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	061b      	lsls	r3, r3, #24
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ec:	071b      	lsls	r3, r3, #28
 80085ee:	491b      	ldr	r1, [pc, #108]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085f4:	4b1b      	ldr	r3, [pc, #108]	; (8008664 <HAL_RCC_OscConfig+0x4b4>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fa:	f7fe fbe9 	bl	8006dd0 <HAL_GetTick>
 80085fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008602:	f7fe fbe5 	bl	8006dd0 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e064      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0f0      	beq.n	8008602 <HAL_RCC_OscConfig+0x452>
 8008620:	e05c      	b.n	80086dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <HAL_RCC_OscConfig+0x4b4>)
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008628:	f7fe fbd2 	bl	8006dd0 <HAL_GetTick>
 800862c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800862e:	e008      	b.n	8008642 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008630:	f7fe fbce 	bl	8006dd0 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e04d      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008642:	4b06      	ldr	r3, [pc, #24]	; (800865c <HAL_RCC_OscConfig+0x4ac>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1f0      	bne.n	8008630 <HAL_RCC_OscConfig+0x480>
 800864e:	e045      	b.n	80086dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d107      	bne.n	8008668 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e040      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
 800865c:	40023800 	.word	0x40023800
 8008660:	40007000 	.word	0x40007000
 8008664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008668:	4b1f      	ldr	r3, [pc, #124]	; (80086e8 <HAL_RCC_OscConfig+0x538>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d030      	beq.n	80086d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008680:	429a      	cmp	r2, r3
 8008682:	d129      	bne.n	80086d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800868e:	429a      	cmp	r2, r3
 8008690:	d122      	bne.n	80086d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008698:	4013      	ands	r3, r2
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800869e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d119      	bne.n	80086d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	3b01      	subs	r3, #1
 80086b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d10f      	bne.n	80086d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d107      	bne.n	80086d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d001      	beq.n	80086dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40023800 	.word	0x40023800

080086ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e03f      	b.n	800877e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fe f96a 	bl	80069ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2224      	movs	r2, #36	; 0x24
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800872e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f905 	bl	8008940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b08a      	sub	sp, #40	; 0x28
 800878a:	af02      	add	r7, sp, #8
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	603b      	str	r3, [r7, #0]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d17c      	bne.n	80088a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <HAL_UART_Transmit+0x2c>
 80087ac:	88fb      	ldrh	r3, [r7, #6]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e075      	b.n	80088a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_UART_Transmit+0x3e>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e06e      	b.n	80088a2 <HAL_UART_Transmit+0x11c>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2221      	movs	r2, #33	; 0x21
 80087d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087da:	f7fe faf9 	bl	8006dd0 <HAL_GetTick>
 80087de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	88fa      	ldrh	r2, [r7, #6]
 80087ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f4:	d108      	bne.n	8008808 <HAL_UART_Transmit+0x82>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	e003      	b.n	8008810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800880c:	2300      	movs	r3, #0
 800880e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008818:	e02a      	b.n	8008870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2200      	movs	r2, #0
 8008822:	2180      	movs	r1, #128	; 0x80
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f840 	bl	80088aa <UART_WaitOnFlagUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e036      	b.n	80088a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	3302      	adds	r3, #2
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	e007      	b.n	8008862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008866:	b29b      	uxth	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008874:	b29b      	uxth	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1cf      	bne.n	800881a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2200      	movs	r2, #0
 8008882:	2140      	movs	r1, #64	; 0x40
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f810 	bl	80088aa <UART_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e006      	b.n	80088a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	e000      	b.n	80088a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088a0:	2302      	movs	r3, #2
  }
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3720      	adds	r7, #32
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	603b      	str	r3, [r7, #0]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ba:	e02c      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c2:	d028      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <UART_WaitOnFlagUntilTimeout+0x30>
 80088ca:	f7fe fa81 	bl	8006dd0 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d21d      	bcs.n	8008916 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695a      	ldr	r2, [r3, #20]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e00f      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4013      	ands	r3, r2
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	429a      	cmp	r2, r3
 8008924:	bf0c      	ite	eq
 8008926:	2301      	moveq	r3, #1
 8008928:	2300      	movne	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	461a      	mov	r2, r3
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	429a      	cmp	r2, r3
 8008932:	d0c3      	beq.n	80088bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	b09f      	sub	sp, #124	; 0x7c
 8008946:	af00      	add	r7, sp, #0
 8008948:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800894a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008956:	68d9      	ldr	r1, [r3, #12]
 8008958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	ea40 0301 	orr.w	r3, r0, r1
 8008960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	431a      	orrs	r2, r3
 800896c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	431a      	orrs	r2, r3
 8008972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	4313      	orrs	r3, r2
 8008978:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800897a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008984:	f021 010c 	bic.w	r1, r1, #12
 8008988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800898e:	430b      	orrs	r3, r1
 8008990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800899c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899e:	6999      	ldr	r1, [r3, #24]
 80089a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	ea40 0301 	orr.w	r3, r0, r1
 80089a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4bc5      	ldr	r3, [pc, #788]	; (8008cc4 <UART_SetConfig+0x384>)
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d004      	beq.n	80089be <UART_SetConfig+0x7e>
 80089b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4bc3      	ldr	r3, [pc, #780]	; (8008cc8 <UART_SetConfig+0x388>)
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d103      	bne.n	80089c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089be:	f7ff fa31 	bl	8007e24 <HAL_RCC_GetPCLK2Freq>
 80089c2:	6778      	str	r0, [r7, #116]	; 0x74
 80089c4:	e002      	b.n	80089cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089c6:	f7ff fa19 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
 80089ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d4:	f040 80b6 	bne.w	8008b44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089da:	461c      	mov	r4, r3
 80089dc:	f04f 0500 	mov.w	r5, #0
 80089e0:	4622      	mov	r2, r4
 80089e2:	462b      	mov	r3, r5
 80089e4:	1891      	adds	r1, r2, r2
 80089e6:	6439      	str	r1, [r7, #64]	; 0x40
 80089e8:	415b      	adcs	r3, r3
 80089ea:	647b      	str	r3, [r7, #68]	; 0x44
 80089ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089f0:	1912      	adds	r2, r2, r4
 80089f2:	eb45 0303 	adc.w	r3, r5, r3
 80089f6:	f04f 0000 	mov.w	r0, #0
 80089fa:	f04f 0100 	mov.w	r1, #0
 80089fe:	00d9      	lsls	r1, r3, #3
 8008a00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a04:	00d0      	lsls	r0, r2, #3
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	1911      	adds	r1, r2, r4
 8008a0c:	6639      	str	r1, [r7, #96]	; 0x60
 8008a0e:	416b      	adcs	r3, r5
 8008a10:	667b      	str	r3, [r7, #100]	; 0x64
 8008a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	1891      	adds	r1, r2, r2
 8008a1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a20:	415b      	adcs	r3, r3
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008a2c:	f7f8 f95c 	bl	8000ce8 <__aeabi_uldivmod>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4ba5      	ldr	r3, [pc, #660]	; (8008ccc <UART_SetConfig+0x38c>)
 8008a36:	fba3 2302 	umull	r2, r3, r3, r2
 8008a3a:	095b      	lsrs	r3, r3, #5
 8008a3c:	011e      	lsls	r6, r3, #4
 8008a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a40:	461c      	mov	r4, r3
 8008a42:	f04f 0500 	mov.w	r5, #0
 8008a46:	4622      	mov	r2, r4
 8008a48:	462b      	mov	r3, r5
 8008a4a:	1891      	adds	r1, r2, r2
 8008a4c:	6339      	str	r1, [r7, #48]	; 0x30
 8008a4e:	415b      	adcs	r3, r3
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
 8008a52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a56:	1912      	adds	r2, r2, r4
 8008a58:	eb45 0303 	adc.w	r3, r5, r3
 8008a5c:	f04f 0000 	mov.w	r0, #0
 8008a60:	f04f 0100 	mov.w	r1, #0
 8008a64:	00d9      	lsls	r1, r3, #3
 8008a66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a6a:	00d0      	lsls	r0, r2, #3
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	1911      	adds	r1, r2, r4
 8008a72:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a74:	416b      	adcs	r3, r5
 8008a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	1891      	adds	r1, r2, r2
 8008a84:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a86:	415b      	adcs	r3, r3
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a92:	f7f8 f929 	bl	8000ce8 <__aeabi_uldivmod>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4b8c      	ldr	r3, [pc, #560]	; (8008ccc <UART_SetConfig+0x38c>)
 8008a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008aa0:	095b      	lsrs	r3, r3, #5
 8008aa2:	2164      	movs	r1, #100	; 0x64
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	3332      	adds	r3, #50	; 0x32
 8008aae:	4a87      	ldr	r2, [pc, #540]	; (8008ccc <UART_SetConfig+0x38c>)
 8008ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008abc:	441e      	add	r6, r3
 8008abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f04f 0100 	mov.w	r1, #0
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	1894      	adds	r4, r2, r2
 8008acc:	623c      	str	r4, [r7, #32]
 8008ace:	415b      	adcs	r3, r3
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ad6:	1812      	adds	r2, r2, r0
 8008ad8:	eb41 0303 	adc.w	r3, r1, r3
 8008adc:	f04f 0400 	mov.w	r4, #0
 8008ae0:	f04f 0500 	mov.w	r5, #0
 8008ae4:	00dd      	lsls	r5, r3, #3
 8008ae6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008aea:	00d4      	lsls	r4, r2, #3
 8008aec:	4622      	mov	r2, r4
 8008aee:	462b      	mov	r3, r5
 8008af0:	1814      	adds	r4, r2, r0
 8008af2:	653c      	str	r4, [r7, #80]	; 0x50
 8008af4:	414b      	adcs	r3, r1
 8008af6:	657b      	str	r3, [r7, #84]	; 0x54
 8008af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	461a      	mov	r2, r3
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	1891      	adds	r1, r2, r2
 8008b04:	61b9      	str	r1, [r7, #24]
 8008b06:	415b      	adcs	r3, r3
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008b12:	f7f8 f8e9 	bl	8000ce8 <__aeabi_uldivmod>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4b6c      	ldr	r3, [pc, #432]	; (8008ccc <UART_SetConfig+0x38c>)
 8008b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b20:	095b      	lsrs	r3, r3, #5
 8008b22:	2164      	movs	r1, #100	; 0x64
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	3332      	adds	r3, #50	; 0x32
 8008b2e:	4a67      	ldr	r2, [pc, #412]	; (8008ccc <UART_SetConfig+0x38c>)
 8008b30:	fba2 2303 	umull	r2, r3, r2, r3
 8008b34:	095b      	lsrs	r3, r3, #5
 8008b36:	f003 0207 	and.w	r2, r3, #7
 8008b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4432      	add	r2, r6
 8008b40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b42:	e0b9      	b.n	8008cb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b46:	461c      	mov	r4, r3
 8008b48:	f04f 0500 	mov.w	r5, #0
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	462b      	mov	r3, r5
 8008b50:	1891      	adds	r1, r2, r2
 8008b52:	6139      	str	r1, [r7, #16]
 8008b54:	415b      	adcs	r3, r3
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b5c:	1912      	adds	r2, r2, r4
 8008b5e:	eb45 0303 	adc.w	r3, r5, r3
 8008b62:	f04f 0000 	mov.w	r0, #0
 8008b66:	f04f 0100 	mov.w	r1, #0
 8008b6a:	00d9      	lsls	r1, r3, #3
 8008b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b70:	00d0      	lsls	r0, r2, #3
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	eb12 0804 	adds.w	r8, r2, r4
 8008b7a:	eb43 0905 	adc.w	r9, r3, r5
 8008b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f04f 0100 	mov.w	r1, #0
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	008b      	lsls	r3, r1, #2
 8008b92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b96:	0082      	lsls	r2, r0, #2
 8008b98:	4640      	mov	r0, r8
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	f7f8 f8a4 	bl	8000ce8 <__aeabi_uldivmod>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4b49      	ldr	r3, [pc, #292]	; (8008ccc <UART_SetConfig+0x38c>)
 8008ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	011e      	lsls	r6, r3, #4
 8008bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f04f 0100 	mov.w	r1, #0
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	1894      	adds	r4, r2, r2
 8008bbc:	60bc      	str	r4, [r7, #8]
 8008bbe:	415b      	adcs	r3, r3
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bc6:	1812      	adds	r2, r2, r0
 8008bc8:	eb41 0303 	adc.w	r3, r1, r3
 8008bcc:	f04f 0400 	mov.w	r4, #0
 8008bd0:	f04f 0500 	mov.w	r5, #0
 8008bd4:	00dd      	lsls	r5, r3, #3
 8008bd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bda:	00d4      	lsls	r4, r2, #3
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	1814      	adds	r4, r2, r0
 8008be2:	64bc      	str	r4, [r7, #72]	; 0x48
 8008be4:	414b      	adcs	r3, r1
 8008be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f04f 0100 	mov.w	r1, #0
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	008b      	lsls	r3, r1, #2
 8008bfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c00:	0082      	lsls	r2, r0, #2
 8008c02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c06:	f7f8 f86f 	bl	8000ce8 <__aeabi_uldivmod>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <UART_SetConfig+0x38c>)
 8008c10:	fba3 1302 	umull	r1, r3, r3, r2
 8008c14:	095b      	lsrs	r3, r3, #5
 8008c16:	2164      	movs	r1, #100	; 0x64
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	3332      	adds	r3, #50	; 0x32
 8008c22:	4a2a      	ldr	r2, [pc, #168]	; (8008ccc <UART_SetConfig+0x38c>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c2e:	441e      	add	r6, r3
 8008c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c32:	4618      	mov	r0, r3
 8008c34:	f04f 0100 	mov.w	r1, #0
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	1894      	adds	r4, r2, r2
 8008c3e:	603c      	str	r4, [r7, #0]
 8008c40:	415b      	adcs	r3, r3
 8008c42:	607b      	str	r3, [r7, #4]
 8008c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c48:	1812      	adds	r2, r2, r0
 8008c4a:	eb41 0303 	adc.w	r3, r1, r3
 8008c4e:	f04f 0400 	mov.w	r4, #0
 8008c52:	f04f 0500 	mov.w	r5, #0
 8008c56:	00dd      	lsls	r5, r3, #3
 8008c58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c5c:	00d4      	lsls	r4, r2, #3
 8008c5e:	4622      	mov	r2, r4
 8008c60:	462b      	mov	r3, r5
 8008c62:	eb12 0a00 	adds.w	sl, r2, r0
 8008c66:	eb43 0b01 	adc.w	fp, r3, r1
 8008c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f04f 0100 	mov.w	r1, #0
 8008c74:	f04f 0200 	mov.w	r2, #0
 8008c78:	f04f 0300 	mov.w	r3, #0
 8008c7c:	008b      	lsls	r3, r1, #2
 8008c7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c82:	0082      	lsls	r2, r0, #2
 8008c84:	4650      	mov	r0, sl
 8008c86:	4659      	mov	r1, fp
 8008c88:	f7f8 f82e 	bl	8000ce8 <__aeabi_uldivmod>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <UART_SetConfig+0x38c>)
 8008c92:	fba3 1302 	umull	r1, r3, r3, r2
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	2164      	movs	r1, #100	; 0x64
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	3332      	adds	r3, #50	; 0x32
 8008ca4:	4a09      	ldr	r2, [pc, #36]	; (8008ccc <UART_SetConfig+0x38c>)
 8008ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	f003 020f 	and.w	r2, r3, #15
 8008cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4432      	add	r2, r6
 8008cb6:	609a      	str	r2, [r3, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	377c      	adds	r7, #124	; 0x7c
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40011000 	.word	0x40011000
 8008cc8:	40011400 	.word	0x40011400
 8008ccc:	51eb851f 	.word	0x51eb851f

08008cd0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b08b      	sub	sp, #44	; 0x2c
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8008cdc:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	885b      	ldrh	r3, [r3, #2]
 8008cf4:	fb03 f302 	mul.w	r3, r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8008cfe:	e010      	b.n	8008d22 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	627a      	str	r2, [r7, #36]	; 0x24
 8008d06:	ed93 7a00 	vldr	s14, [r3]
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	1d1a      	adds	r2, r3, #4
 8008d0e:	623a      	str	r2, [r7, #32]
 8008d10:	edd7 7a02 	vldr	s15, [r7, #8]
 8008d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d18:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1eb      	bne.n	8008d00 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8008d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	372c      	adds	r7, #44	; 0x2c
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b08b      	sub	sp, #44	; 0x2c
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	885b      	ldrh	r3, [r3, #2]
 8008d5c:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8008d5e:	89fb      	ldrh	r3, [r7, #14]
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8008d70:	89bb      	ldrh	r3, [r7, #12]
 8008d72:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8008d74:	e00d      	b.n	8008d92 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	627a      	str	r2, [r7, #36]	; 0x24
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8008d82:	89fb      	ldrh	r3, [r7, #14]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	6a3a      	ldr	r2, [r7, #32]
 8008d88:	4413      	add	r3, r2
 8008d8a:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1ee      	bne.n	8008d76 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1dd      	bne.n	8008d66 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8008daa:	2300      	movs	r3, #0
 8008dac:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8008dae:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	372c      	adds	r7, #44	; 0x2c
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8008dd4:	e00d      	b.n	8008df2 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1d1a      	adds	r2, r3, #4
 8008dda:	60fa      	str	r2, [r7, #12]
 8008ddc:	edd3 7a00 	vldr	s15, [r3]
 8008de0:	ed97 7a04 	vldr	s14, [r7, #16]
 8008de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008de8:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1ee      	bne.n	8008dd6 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e02:	edd7 6a04 	vldr	s13, [r7, #16]
 8008e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	edc3 7a00 	vstr	s15, [r3]
}
 8008e10:	bf00      	nop
 8008e12:	371c      	adds	r7, #28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	; 0x28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8008e28:	f04f 0300 	mov.w	r3, #0
 8008e2c:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8008e32:	e011      	b.n	8008e58 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	60fa      	str	r2, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8008e3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e46:	ed97 7a08 	vldr	s14, [r7, #32]
 8008e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e4e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	3b01      	subs	r3, #1
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1ea      	bne.n	8008e34 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	ee07 3a90 	vmov	s15, r3
 8008e64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e68:	edd7 6a08 	vldr	s13, [r7, #32]
 8008e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e70:	edc7 7a06 	vstr	s15, [r7, #24]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8008e78:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e84:	db09      	blt.n	8008e9a <arm_rms_f32+0x7e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8008e86:	ed97 0a06 	vldr	s0, [r7, #24]
 8008e8a:	f00a fa7d 	bl	8013388 <sqrtf>
 8008e8e:	eef0 7a40 	vmov.f32	s15, s0
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8008e98:	e004      	b.n	8008ea4 <arm_rms_f32+0x88>
    }
    else
    {
      *pOut = 0.0f;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008ea2:	bf00      	nop
}
 8008ea4:	bf00      	nop
 8008ea6:	3728      	adds	r7, #40	; 0x28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b089      	sub	sp, #36	; 0x24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	e043      	b.n	8008f48 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	089b      	lsrs	r3, r3, #2
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	089b      	lsrs	r3, r3, #2
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4413      	add	r3, r2
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	441a      	add	r2, r3
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	440b      	add	r3, r1
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	3301      	adds	r3, #1
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	441a      	add	r2, r3
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	68f9      	ldr	r1, [r7, #12]
 8008f2e:	440b      	add	r3, r1
 8008f30:	6812      	ldr	r2, [r2, #0]
 8008f32:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	3301      	adds	r3, #1
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	601a      	str	r2, [r3, #0]

    i += 2;
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	3302      	adds	r3, #2
 8008f46:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8008f48:	897b      	ldrh	r3, [r7, #10]
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d3b7      	bcc.n	8008ec0 <arm_bitreversal_32+0x14>
  }
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	3724      	adds	r7, #36	; 0x24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b0a0      	sub	sp, #128	; 0x80
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8008f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	4413      	add	r3, r2
 8008f76:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8008f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f84:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8008f86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f88:	085b      	lsrs	r3, r3, #1
 8008f8a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8008f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	4413      	add	r3, r2
 8008f94:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8008f96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f9c:	4413      	add	r3, r2
 8008f9e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8008fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fa2:	089b      	lsrs	r3, r3, #2
 8008fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa6:	e1b6      	b.n	8009316 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8008fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8008fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8008fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8008fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8008fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8008fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8008fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8008fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8008ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8008ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8008ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8009002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8009008:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800900c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	1d1a      	adds	r2, r3, #4
 8009014:	603a      	str	r2, [r7, #0]
 8009016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800901a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800901e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009022:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	603a      	str	r2, [r7, #0]
 800902c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009030:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8009034:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009038:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	1d1a      	adds	r2, r3, #4
 8009040:	603a      	str	r2, [r7, #0]
 8009042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009046:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800904a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800904e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	1d1a      	adds	r2, r3, #4
 8009056:	603a      	str	r2, [r7, #0]
 8009058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800905c:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8009060:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009064:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800906c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8009070:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800907c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8009080:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009084:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800908c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8009090:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009094:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800909c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80090a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80090a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80090a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090aa:	1d1a      	adds	r2, r3, #4
 80090ac:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090b2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80090b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80090ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80090be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090c0:	1d1a      	adds	r2, r3, #4
 80090c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090c8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80090cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80090d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80090d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090d6:	1d1a      	adds	r2, r3, #4
 80090d8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090de:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80090e2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80090e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80090ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090ec:	1d1a      	adds	r2, r3, #4
 80090ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f4:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80090f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80090fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009104:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8009108:	ed97 7a03 	vldr	s14, [r7, #12]
 800910c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009114:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8009118:	ed97 7a04 	vldr	s14, [r7, #16]
 800911c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009124:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8009128:	ed97 7a05 	vldr	s14, [r7, #20]
 800912c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009134:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8009138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800913a:	1d1a      	adds	r2, r3, #4
 800913c:	673a      	str	r2, [r7, #112]	; 0x70
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8009142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009144:	1d1a      	adds	r2, r3, #4
 8009146:	673a      	str	r2, [r7, #112]	; 0x70
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800914c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009150:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009158:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800915c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009160:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009168:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800916c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009170:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009178:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800917c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009180:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009188:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800918c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918e:	1d1a      	adds	r2, r3, #4
 8009190:	677a      	str	r2, [r7, #116]	; 0x74
 8009192:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009196:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800919a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800919e:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80091a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a4:	1d1a      	adds	r2, r3, #4
 80091a6:	677a      	str	r2, [r7, #116]	; 0x74
 80091a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80091ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80091b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091b4:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80091b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80091bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80091c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80091c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80091cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80091d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 80091d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80091dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80091e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 80091e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80091ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80091f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80091f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091fa:	1d1a      	adds	r2, r3, #4
 80091fc:	67ba      	str	r2, [r7, #120]	; 0x78
 80091fe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009202:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800920a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800920e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	67ba      	str	r2, [r7, #120]	; 0x78
 8009214:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009218:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800921c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009220:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8009224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009226:	1d1a      	adds	r2, r3, #4
 8009228:	673a      	str	r2, [r7, #112]	; 0x70
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800922e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009230:	1d1a      	adds	r2, r3, #4
 8009232:	673a      	str	r2, [r7, #112]	; 0x70
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8009238:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800923c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009244:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8009248:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800924c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009254:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8009258:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800925c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009264:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8009268:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800926c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009274:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8009278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800927a:	1d1a      	adds	r2, r3, #4
 800927c:	677a      	str	r2, [r7, #116]	; 0x74
 800927e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009282:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800928a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800928e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009290:	1d1a      	adds	r2, r3, #4
 8009292:	677a      	str	r2, [r7, #116]	; 0x74
 8009294:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009298:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800929c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092a0:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80092a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80092a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80092ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80092b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80092b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80092c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80092c8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80092cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 80092d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80092d8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80092e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092e6:	1d1a      	adds	r2, r3, #4
 80092e8:	67ba      	str	r2, [r7, #120]	; 0x78
 80092ea:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80092ee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80092f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092f6:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80092fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fc:	1d1a      	adds	r2, r3, #4
 80092fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8009300:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009304:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800930c:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8009310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009312:	3b01      	subs	r3, #1
 8009314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009318:	2b00      	cmp	r3, #0
 800931a:	f47f ae45 	bne.w	8008fa8 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800931e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009320:	b299      	uxth	r1, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	2302      	movs	r3, #2
 8009328:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800932a:	f000 ffc3 	bl	800a2b4 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800932e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009330:	b299      	uxth	r1, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	2302      	movs	r3, #2
 8009338:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800933a:	f000 ffbb 	bl	800a2b4 <arm_radix8_butterfly_f32>
}
 800933e:	bf00      	nop
 8009340:	3780      	adds	r7, #128	; 0x80
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b0ac      	sub	sp, #176	; 0xb0
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	085b      	lsrs	r3, r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800935c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4413      	add	r3, r2
 8009366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800936a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009374:	4413      	add	r3, r2
 8009376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800937a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009384:	4413      	add	r3, r2
 8009386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800938e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009392:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8009394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009398:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800939a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800939e:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80093a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093a4:	3b04      	subs	r3, #4
 80093a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80093aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ae:	3b04      	subs	r3, #4
 80093b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80093b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093b8:	3b04      	subs	r3, #4
 80093ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80093be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80093c8:	4413      	add	r3, r2
 80093ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80093e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80093f0:	2302      	movs	r3, #2
 80093f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80093f4:	2304      	movs	r3, #4
 80093f6:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80093f8:	2306      	movs	r3, #6
 80093fa:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	ed93 7a00 	vldr	s14, [r3]
 8009402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009406:	edd3 7a00 	vldr	s15, [r3]
 800940a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800940e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	ed93 7a00 	vldr	s14, [r3]
 8009418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800941c:	edd3 7a00 	vldr	s15, [r3]
 8009420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009424:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	3304      	adds	r3, #4
 800942c:	ed93 7a00 	vldr	s14, [r3]
 8009430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009434:	3304      	adds	r3, #4
 8009436:	edd3 7a00 	vldr	s15, [r3]
 800943a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800943e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	3304      	adds	r3, #4
 8009446:	ed93 7a00 	vldr	s14, [r3]
 800944a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800944e:	3304      	adds	r3, #4
 8009450:	edd3 7a00 	vldr	s15, [r3]
 8009454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009458:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800945c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009460:	3304      	adds	r3, #4
 8009462:	ed93 7a00 	vldr	s14, [r3]
 8009466:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800946a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800946e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009472:	3304      	adds	r3, #4
 8009474:	edd3 7a00 	vldr	s15, [r3]
 8009478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800947c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009484:	edd3 7a00 	vldr	s15, [r3]
 8009488:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800948c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009494:	edd3 7a00 	vldr	s15, [r3]
 8009498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800949c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80094a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094a4:	edd3 7a00 	vldr	s15, [r3]
 80094a8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80094ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80094b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094b4:	edd3 7a00 	vldr	s15, [r3]
 80094b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094bc:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80094c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094c4:	3304      	adds	r3, #4
 80094c6:	edd3 7a00 	vldr	s15, [r3]
 80094ca:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80094ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80094d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094d6:	3304      	adds	r3, #4
 80094d8:	edd3 7a00 	vldr	s15, [r3]
 80094dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094e0:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80094e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094e8:	3304      	adds	r3, #4
 80094ea:	edd3 7a00 	vldr	s15, [r3]
 80094ee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80094f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80094f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094fa:	3304      	adds	r3, #4
 80094fc:	edd3 7a00 	vldr	s15, [r3]
 8009500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009504:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800950c:	ed93 7a00 	vldr	s14, [r3]
 8009510:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800951c:	edd3 7a00 	vldr	s15, [r3]
 8009520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009524:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009528:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800952c:	ed93 7a00 	vldr	s14, [r3]
 8009530:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800953c:	edd3 7a00 	vldr	s15, [r3]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	1d1a      	adds	r2, r3, #4
 8009544:	603a      	str	r2, [r7, #0]
 8009546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800954a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800954e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009552:	3304      	adds	r3, #4
 8009554:	ed93 7a00 	vldr	s14, [r3]
 8009558:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800955c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009564:	3304      	adds	r3, #4
 8009566:	edd3 7a00 	vldr	s15, [r3]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	1d1a      	adds	r2, r3, #4
 800956e:	603a      	str	r2, [r7, #0]
 8009570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009574:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8009578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800957c:	1d1a      	adds	r2, r3, #4
 800957e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009584:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8009586:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800958a:	1d1a      	adds	r2, r3, #4
 800958c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009592:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8009594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009598:	1d1a      	adds	r2, r3, #4
 800959a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80095a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095a6:	1d1a      	adds	r2, r3, #4
 80095a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80095b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095b4:	1d1a      	adds	r2, r3, #4
 80095b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80095be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095c2:	1d1a      	adds	r2, r3, #4
 80095c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80095cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80095d4:	4413      	add	r3, r2
 80095d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80095da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80095e2:	4413      	add	r3, r2
 80095e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80095e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095f0:	4413      	add	r3, r2
 80095f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80095f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095fa:	3b02      	subs	r3, #2
 80095fc:	085b      	lsrs	r3, r3, #1
 80095fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009602:	e31a      	b.n	8009c3a <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	ed93 7a00 	vldr	s14, [r3]
 800960a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800960e:	edd3 7a00 	vldr	s15, [r3]
 8009612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009616:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	ed93 7a00 	vldr	s14, [r3]
 8009620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009624:	edd3 7a00 	vldr	s15, [r3]
 8009628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800962c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	3304      	adds	r3, #4
 8009634:	ed93 7a00 	vldr	s14, [r3]
 8009638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800963c:	3304      	adds	r3, #4
 800963e:	edd3 7a00 	vldr	s15, [r3]
 8009642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009646:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	3304      	adds	r3, #4
 800964e:	ed93 7a00 	vldr	s14, [r3]
 8009652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009656:	3304      	adds	r3, #4
 8009658:	edd3 7a00 	vldr	s15, [r3]
 800965c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009660:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009668:	3304      	adds	r3, #4
 800966a:	ed93 7a00 	vldr	s14, [r3]
 800966e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800967a:	3304      	adds	r3, #4
 800967c:	edd3 7a00 	vldr	s15, [r3]
 8009680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009684:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800968c:	edd3 7a00 	vldr	s15, [r3]
 8009690:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800969c:	edd3 7a00 	vldr	s15, [r3]
 80096a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096a4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80096a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096ac:	edd3 7a00 	vldr	s15, [r3]
 80096b0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80096b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096bc:	edd3 7a00 	vldr	s15, [r3]
 80096c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096c4:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80096c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096cc:	3304      	adds	r3, #4
 80096ce:	edd3 7a00 	vldr	s15, [r3]
 80096d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80096d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096de:	3304      	adds	r3, #4
 80096e0:	edd3 7a00 	vldr	s15, [r3]
 80096e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096e8:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80096ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096f0:	3304      	adds	r3, #4
 80096f2:	edd3 7a00 	vldr	s15, [r3]
 80096f6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80096fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009702:	3304      	adds	r3, #4
 8009704:	edd3 7a00 	vldr	s15, [r3]
 8009708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800970c:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009714:	ed93 7a00 	vldr	s14, [r3]
 8009718:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800971c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009724:	edd3 7a00 	vldr	s15, [r3]
 8009728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800972c:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009734:	ed93 7a00 	vldr	s14, [r3]
 8009738:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800973c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009744:	edd3 7a00 	vldr	s15, [r3]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	603a      	str	r2, [r7, #0]
 800974e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009752:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009756:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800975a:	3304      	adds	r3, #4
 800975c:	ed93 7a00 	vldr	s14, [r3]
 8009760:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800976c:	3304      	adds	r3, #4
 800976e:	edd3 7a00 	vldr	s15, [r3]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	1d1a      	adds	r2, r3, #4
 8009776:	603a      	str	r2, [r7, #0]
 8009778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800977c:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8009780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009784:	3b04      	subs	r3, #4
 8009786:	ed93 7a00 	vldr	s14, [r3]
 800978a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800978e:	3b04      	subs	r3, #4
 8009790:	edd3 7a00 	vldr	s15, [r3]
 8009794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009798:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800979c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097a0:	3b04      	subs	r3, #4
 80097a2:	ed93 7a00 	vldr	s14, [r3]
 80097a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097aa:	3b04      	subs	r3, #4
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80097b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097bc:	ed93 7a00 	vldr	s14, [r3]
 80097c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097c4:	edd3 7a00 	vldr	s15, [r3]
 80097c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097cc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80097d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097d4:	ed93 7a00 	vldr	s14, [r3]
 80097d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097dc:	edd3 7a00 	vldr	s15, [r3]
 80097e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097e4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80097e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097ec:	ed93 7a00 	vldr	s14, [r3]
 80097f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097f4:	edd3 7a00 	vldr	s15, [r3]
 80097f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097fc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009804:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8009808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800980c:	ed93 7a00 	vldr	s14, [r3]
 8009810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009814:	edd3 7a00 	vldr	s15, [r3]
 8009818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800981c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009820:	3b04      	subs	r3, #4
 8009822:	edd3 7a00 	vldr	s15, [r3]
 8009826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800982a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800982e:	3b04      	subs	r3, #4
 8009830:	edd3 7a00 	vldr	s15, [r3]
 8009834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009838:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800983c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009840:	3b04      	subs	r3, #4
 8009842:	edd3 7a00 	vldr	s15, [r3]
 8009846:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800984a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800984e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009852:	3b04      	subs	r3, #4
 8009854:	edd3 7a00 	vldr	s15, [r3]
 8009858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800985c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8009860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009864:	edd3 7a00 	vldr	s15, [r3]
 8009868:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800986c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009870:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009874:	edd3 7a00 	vldr	s15, [r3]
 8009878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800987c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8009880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009884:	ed93 7a00 	vldr	s14, [r3]
 8009888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800988c:	edd3 7a00 	vldr	s15, [r3]
 8009890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009894:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800989c:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80098a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098a4:	3b04      	subs	r3, #4
 80098a6:	ed93 7a00 	vldr	s14, [r3]
 80098aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098ae:	3b04      	subs	r3, #4
 80098b0:	edd3 7a00 	vldr	s15, [r3]
 80098b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098b8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80098bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098c0:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80098c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098c8:	ed93 7a00 	vldr	s14, [r3]
 80098cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80098d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098d8:	edd3 7a00 	vldr	s15, [r3]
 80098dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098e0:	1f1a      	subs	r2, r3, #4
 80098e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098ea:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80098ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098f2:	3b04      	subs	r3, #4
 80098f4:	ed93 7a00 	vldr	s14, [r3]
 80098f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80098fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009900:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009904:	3b04      	subs	r3, #4
 8009906:	edd3 7a00 	vldr	s15, [r3]
 800990a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800990e:	1f1a      	subs	r2, r3, #4
 8009910:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009918:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800991c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009920:	1d1a      	adds	r2, r3, #4
 8009922:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800992a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800992e:	1d1a      	adds	r2, r3, #4
 8009930:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8009938:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800993c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009944:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8009948:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800994c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009954:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8009958:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800995c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009964:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8009968:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800996c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009974:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8009978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800997c:	1d1a      	adds	r2, r3, #4
 800997e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009982:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009986:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800998a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800998e:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8009992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009996:	1d1a      	adds	r2, r3, #4
 8009998:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800999c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80099a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80099a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099a8:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80099ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80099b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80099b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80099bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80099c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80099c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 80099cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80099d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80099d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 80099dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80099e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80099e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 80099ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099f0:	1f1a      	subs	r2, r3, #4
 80099f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80099fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80099fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a02:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8009a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a0a:	1f1a      	subs	r2, r3, #4
 8009a0c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a10:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009a14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a1c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8009a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8009a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8009a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009a38:	4413      	add	r3, r2
 8009a3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8009a3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8009a4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8009a5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a62:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8009a6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8009a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a82:	1d1a      	adds	r2, r3, #4
 8009a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a88:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009a8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a94:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8009a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a9c:	1d1a      	adds	r2, r3, #4
 8009a9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009aa2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009aa6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aae:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8009ab2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ab6:	eef1 7a67 	vneg.f32	s15, s15
 8009aba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8009ac6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009aca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8009ad6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ada:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8009ae6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009aea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8009af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009afa:	1f1a      	subs	r2, r3, #4
 8009afc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b00:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b0c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8009b10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b14:	1f1a      	subs	r2, r3, #4
 8009b16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b1a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009b1e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b26:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8009b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8009b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8009b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b42:	4413      	add	r3, r2
 8009b44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8009b48:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b4c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b54:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8009b58:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8009b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b74:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8009b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b84:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8009b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b8c:	1d1a      	adds	r2, r3, #4
 8009b8e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009b92:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b9e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8009ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ba6:	1d1a      	adds	r2, r3, #4
 8009ba8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009bac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009bb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bb8:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8009bbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009bc0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8009bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009bd0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8009bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009be0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8009bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8009bf0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8009bfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c00:	1f1a      	subs	r2, r3, #4
 8009c02:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009c06:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009c0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c12:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8009c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c1a:	1f1a      	subs	r2, r3, #4
 8009c1c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009c20:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c24:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c2c:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8009c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c34:	3b01      	subs	r3, #1
 8009c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f47f ace0 	bne.w	8009604 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	ed93 7a00 	vldr	s14, [r3]
 8009c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c4e:	edd3 7a00 	vldr	s15, [r3]
 8009c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c56:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	ed93 7a00 	vldr	s14, [r3]
 8009c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c64:	edd3 7a00 	vldr	s15, [r3]
 8009c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c6c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	3304      	adds	r3, #4
 8009c74:	ed93 7a00 	vldr	s14, [r3]
 8009c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	edd3 7a00 	vldr	s15, [r3]
 8009c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c86:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	ed93 7a00 	vldr	s14, [r3]
 8009c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c96:	3304      	adds	r3, #4
 8009c98:	edd3 7a00 	vldr	s15, [r3]
 8009c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ca0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009ca4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ca8:	3304      	adds	r3, #4
 8009caa:	ed93 7a00 	vldr	s14, [r3]
 8009cae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cba:	3304      	adds	r3, #4
 8009cbc:	edd3 7a00 	vldr	s15, [r3]
 8009cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cc4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009cc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ccc:	edd3 7a00 	vldr	s15, [r3]
 8009cd0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009cd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cdc:	edd3 7a00 	vldr	s15, [r3]
 8009ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ce4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cec:	edd3 7a00 	vldr	s15, [r3]
 8009cf0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cfc:	edd3 7a00 	vldr	s15, [r3]
 8009d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d04:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009d08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	edd3 7a00 	vldr	s15, [r3]
 8009d12:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d1e:	3304      	adds	r3, #4
 8009d20:	edd3 7a00 	vldr	s15, [r3]
 8009d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d28:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d30:	3304      	adds	r3, #4
 8009d32:	edd3 7a00 	vldr	s15, [r3]
 8009d36:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009d3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d42:	3304      	adds	r3, #4
 8009d44:	edd3 7a00 	vldr	s15, [r3]
 8009d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d4c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d54:	ed93 7a00 	vldr	s14, [r3]
 8009d58:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d64:	edd3 7a00 	vldr	s15, [r3]
 8009d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d6c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009d70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d74:	ed93 7a00 	vldr	s14, [r3]
 8009d78:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d84:	edd3 7a00 	vldr	s15, [r3]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	1d1a      	adds	r2, r3, #4
 8009d8c:	603a      	str	r2, [r7, #0]
 8009d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d92:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	ed93 7a00 	vldr	s14, [r3]
 8009da0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dac:	3304      	adds	r3, #4
 8009dae:	edd3 7a00 	vldr	s15, [r3]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	1d1a      	adds	r2, r3, #4
 8009db6:	603a      	str	r2, [r7, #0]
 8009db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dbc:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8009dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8009dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8009dd0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009dd4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ddc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8009de0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009de4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009df0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009df4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8009e00:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8009e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e14:	1d1a      	adds	r2, r3, #4
 8009e16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009e1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e26:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e34:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009e38:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e40:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8009e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8009e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8009e54:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e58:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e60:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8009e64:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e70:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8009e74:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e80:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8009e84:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8009e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009e9e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ea2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eaa:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8009eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eb2:	1d1a      	adds	r2, r3, #4
 8009eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009eb8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009ebc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ec4:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8009ec8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8009ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8009ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8009edc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009eec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009ef8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009efc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8009f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8009f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f1c:	1d1a      	adds	r2, r3, #4
 8009f1e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f22:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f2e:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8009f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f36:	1d1a      	adds	r2, r3, #4
 8009f38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f3c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f48:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8009f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f50:	b299      	uxth	r1, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	2304      	movs	r3, #4
 8009f58:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009f5a:	f000 f9ab 	bl	800a2b4 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8009f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f62:	b299      	uxth	r1, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	2304      	movs	r3, #4
 8009f6a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009f6c:	f000 f9a2 	bl	800a2b4 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8009f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f74:	b299      	uxth	r1, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	2304      	movs	r3, #4
 8009f7c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009f7e:	f000 f999 	bl	800a2b4 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8009f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f86:	b299      	uxth	r1, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009f90:	f000 f990 	bl	800a2b4 <arm_radix8_butterfly_f32>
}
 8009f94:	bf00      	nop
 8009f96:	37b0      	adds	r7, #176	; 0xb0
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b088      	sub	sp, #32
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	461a      	mov	r2, r3
 8009faa:	460b      	mov	r3, r1
 8009fac:	71fb      	strb	r3, [r7, #7]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d117      	bne.n	8009fee <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61fb      	str	r3, [r7, #28]
 8009fc8:	e00d      	b.n	8009fe6 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	edd3 7a00 	vldr	s15, [r3]
 8009fd0:	eef1 7a67 	vneg.f32	s15, s15
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	61fb      	str	r3, [r7, #28]
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d3ed      	bcc.n	8009fca <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff4:	d040      	beq.n	800a078 <arm_cfft_f32+0xdc>
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffc:	d845      	bhi.n	800a08a <arm_cfft_f32+0xee>
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a004:	d033      	beq.n	800a06e <arm_cfft_f32+0xd2>
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a00c:	d83d      	bhi.n	800a08a <arm_cfft_f32+0xee>
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a014:	d026      	beq.n	800a064 <arm_cfft_f32+0xc8>
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a01c:	d835      	bhi.n	800a08a <arm_cfft_f32+0xee>
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a024:	d028      	beq.n	800a078 <arm_cfft_f32+0xdc>
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a02c:	d82d      	bhi.n	800a08a <arm_cfft_f32+0xee>
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a034:	d01b      	beq.n	800a06e <arm_cfft_f32+0xd2>
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03c:	d825      	bhi.n	800a08a <arm_cfft_f32+0xee>
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b80      	cmp	r3, #128	; 0x80
 800a042:	d00f      	beq.n	800a064 <arm_cfft_f32+0xc8>
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b80      	cmp	r3, #128	; 0x80
 800a048:	d81f      	bhi.n	800a08a <arm_cfft_f32+0xee>
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d013      	beq.n	800a078 <arm_cfft_f32+0xdc>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b40      	cmp	r3, #64	; 0x40
 800a054:	d819      	bhi.n	800a08a <arm_cfft_f32+0xee>
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b10      	cmp	r3, #16
 800a05a:	d003      	beq.n	800a064 <arm_cfft_f32+0xc8>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2b20      	cmp	r3, #32
 800a060:	d005      	beq.n	800a06e <arm_cfft_f32+0xd2>
 800a062:	e012      	b.n	800a08a <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7fe ff79 	bl	8008f5e <arm_cfft_radix8by2_f32>
    break;
 800a06c:	e00d      	b.n	800a08a <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800a06e:	68b9      	ldr	r1, [r7, #8]
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff f968 	bl	8009346 <arm_cfft_radix8by4_f32>
    break;
 800a076:	e008      	b.n	800a08a <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	b299      	uxth	r1, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	2301      	movs	r3, #1
 800a082:	68b8      	ldr	r0, [r7, #8]
 800a084:	f000 f916 	bl	800a2b4 <arm_radix8_butterfly_f32>
    break;
 800a088:	bf00      	nop
  }

  if ( bitReverseFlag )
 800a08a:	79bb      	ldrb	r3, [r7, #6]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d007      	beq.n	800a0a0 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	8999      	ldrh	r1, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	461a      	mov	r2, r3
 800a09a:	68b8      	ldr	r0, [r7, #8]
 800a09c:	f7fe ff06 	bl	8008eac <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d130      	bne.n	800a108 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	ee07 3a90 	vmov	s15, r3
 800a0ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a0b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b8:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	e01c      	b.n	800a100 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	1d1a      	adds	r2, r3, #4
 800a0ca:	61ba      	str	r2, [r7, #24]
 800a0cc:	ed93 7a00 	vldr	s14, [r3]
 800a0d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d8:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	edd3 7a00 	vldr	s15, [r3]
 800a0e2:	eeb1 7a67 	vneg.f32	s14, s15
 800a0e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	61fb      	str	r3, [r7, #28]
 800a100:	69fa      	ldr	r2, [r7, #28]
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	429a      	cmp	r2, r3
 800a106:	d3de      	bcc.n	800a0c6 <arm_cfft_f32+0x12a>
    }
  }
}
 800a108:	bf00      	nop
 800a10a:	3720      	adds	r7, #32
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	887a      	ldrh	r2, [r7, #2]
 800a124:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a134:	d02c      	beq.n	800a190 <arm_cfft_init_f32+0x80>
 800a136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a13a:	f300 809e 	bgt.w	800a27a <arm_cfft_init_f32+0x16a>
 800a13e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a142:	d032      	beq.n	800a1aa <arm_cfft_init_f32+0x9a>
 800a144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a148:	f300 8097 	bgt.w	800a27a <arm_cfft_init_f32+0x16a>
 800a14c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a150:	d038      	beq.n	800a1c4 <arm_cfft_init_f32+0xb4>
 800a152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a156:	f300 8090 	bgt.w	800a27a <arm_cfft_init_f32+0x16a>
 800a15a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a15e:	d03e      	beq.n	800a1de <arm_cfft_init_f32+0xce>
 800a160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a164:	f300 8089 	bgt.w	800a27a <arm_cfft_init_f32+0x16a>
 800a168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16c:	d044      	beq.n	800a1f8 <arm_cfft_init_f32+0xe8>
 800a16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a172:	f300 8082 	bgt.w	800a27a <arm_cfft_init_f32+0x16a>
 800a176:	2b80      	cmp	r3, #128	; 0x80
 800a178:	d04b      	beq.n	800a212 <arm_cfft_init_f32+0x102>
 800a17a:	2b80      	cmp	r3, #128	; 0x80
 800a17c:	dc7d      	bgt.n	800a27a <arm_cfft_init_f32+0x16a>
 800a17e:	2b40      	cmp	r3, #64	; 0x40
 800a180:	d054      	beq.n	800a22c <arm_cfft_init_f32+0x11c>
 800a182:	2b40      	cmp	r3, #64	; 0x40
 800a184:	dc79      	bgt.n	800a27a <arm_cfft_init_f32+0x16a>
 800a186:	2b10      	cmp	r3, #16
 800a188:	d06a      	beq.n	800a260 <arm_cfft_init_f32+0x150>
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	d05b      	beq.n	800a246 <arm_cfft_init_f32+0x136>
 800a18e:	e074      	b.n	800a27a <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 800a190:	4b3f      	ldr	r3, [pc, #252]	; (800a290 <arm_cfft_init_f32+0x180>)
 800a192:	899a      	ldrh	r2, [r3, #12]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	819a      	strh	r2, [r3, #12]
 800a198:	4b3d      	ldr	r3, [pc, #244]	; (800a290 <arm_cfft_init_f32+0x180>)
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	609a      	str	r2, [r3, #8]
 800a1a0:	4b3b      	ldr	r3, [pc, #236]	; (800a290 <arm_cfft_init_f32+0x180>)
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	605a      	str	r2, [r3, #4]
            break;
 800a1a8:	e06a      	b.n	800a280 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800a1aa:	4b3a      	ldr	r3, [pc, #232]	; (800a294 <arm_cfft_init_f32+0x184>)
 800a1ac:	899a      	ldrh	r2, [r3, #12]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	819a      	strh	r2, [r3, #12]
 800a1b2:	4b38      	ldr	r3, [pc, #224]	; (800a294 <arm_cfft_init_f32+0x184>)
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	609a      	str	r2, [r3, #8]
 800a1ba:	4b36      	ldr	r3, [pc, #216]	; (800a294 <arm_cfft_init_f32+0x184>)
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	605a      	str	r2, [r3, #4]

            break;
 800a1c2:	e05d      	b.n	800a280 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800a1c4:	4b34      	ldr	r3, [pc, #208]	; (800a298 <arm_cfft_init_f32+0x188>)
 800a1c6:	899a      	ldrh	r2, [r3, #12]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	819a      	strh	r2, [r3, #12]
 800a1cc:	4b32      	ldr	r3, [pc, #200]	; (800a298 <arm_cfft_init_f32+0x188>)
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	609a      	str	r2, [r3, #8]
 800a1d4:	4b30      	ldr	r3, [pc, #192]	; (800a298 <arm_cfft_init_f32+0x188>)
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	605a      	str	r2, [r3, #4]

            break;
 800a1dc:	e050      	b.n	800a280 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800a1de:	4b2f      	ldr	r3, [pc, #188]	; (800a29c <arm_cfft_init_f32+0x18c>)
 800a1e0:	899a      	ldrh	r2, [r3, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	819a      	strh	r2, [r3, #12]
 800a1e6:	4b2d      	ldr	r3, [pc, #180]	; (800a29c <arm_cfft_init_f32+0x18c>)
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	609a      	str	r2, [r3, #8]
 800a1ee:	4b2b      	ldr	r3, [pc, #172]	; (800a29c <arm_cfft_init_f32+0x18c>)
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	605a      	str	r2, [r3, #4]
            break;
 800a1f6:	e043      	b.n	800a280 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800a1f8:	4b29      	ldr	r3, [pc, #164]	; (800a2a0 <arm_cfft_init_f32+0x190>)
 800a1fa:	899a      	ldrh	r2, [r3, #12]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	819a      	strh	r2, [r3, #12]
 800a200:	4b27      	ldr	r3, [pc, #156]	; (800a2a0 <arm_cfft_init_f32+0x190>)
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	609a      	str	r2, [r3, #8]
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <arm_cfft_init_f32+0x190>)
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	605a      	str	r2, [r3, #4]
            break;
 800a210:	e036      	b.n	800a280 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800a212:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <arm_cfft_init_f32+0x194>)
 800a214:	899a      	ldrh	r2, [r3, #12]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	819a      	strh	r2, [r3, #12]
 800a21a:	4b22      	ldr	r3, [pc, #136]	; (800a2a4 <arm_cfft_init_f32+0x194>)
 800a21c:	689a      	ldr	r2, [r3, #8]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	609a      	str	r2, [r3, #8]
 800a222:	4b20      	ldr	r3, [pc, #128]	; (800a2a4 <arm_cfft_init_f32+0x194>)
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]
            break;
 800a22a:	e029      	b.n	800a280 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 800a22c:	4b1e      	ldr	r3, [pc, #120]	; (800a2a8 <arm_cfft_init_f32+0x198>)
 800a22e:	899a      	ldrh	r2, [r3, #12]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	819a      	strh	r2, [r3, #12]
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <arm_cfft_init_f32+0x198>)
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	609a      	str	r2, [r3, #8]
 800a23c:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <arm_cfft_init_f32+0x198>)
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	605a      	str	r2, [r3, #4]
            break;
 800a244:	e01c      	b.n	800a280 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800a246:	4b19      	ldr	r3, [pc, #100]	; (800a2ac <arm_cfft_init_f32+0x19c>)
 800a248:	899a      	ldrh	r2, [r3, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	819a      	strh	r2, [r3, #12]
 800a24e:	4b17      	ldr	r3, [pc, #92]	; (800a2ac <arm_cfft_init_f32+0x19c>)
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	609a      	str	r2, [r3, #8]
 800a256:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <arm_cfft_init_f32+0x19c>)
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	605a      	str	r2, [r3, #4]
            break;
 800a25e:	e00f      	b.n	800a280 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800a260:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <arm_cfft_init_f32+0x1a0>)
 800a262:	899a      	ldrh	r2, [r3, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	819a      	strh	r2, [r3, #12]
 800a268:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <arm_cfft_init_f32+0x1a0>)
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	609a      	str	r2, [r3, #8]
 800a270:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <arm_cfft_init_f32+0x1a0>)
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	605a      	str	r2, [r3, #4]
            break;
 800a278:	e002      	b.n	800a280 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800a27a:	23ff      	movs	r3, #255	; 0xff
 800a27c:	73fb      	strb	r3, [r7, #15]
            break;
 800a27e:	bf00      	nop
        }


        return (status);
 800a280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	08038cfc 	.word	0x08038cfc
 800a294:	08038cec 	.word	0x08038cec
 800a298:	08038cdc 	.word	0x08038cdc
 800a29c:	08038ccc 	.word	0x08038ccc
 800a2a0:	08038cbc 	.word	0x08038cbc
 800a2a4:	08038cac 	.word	0x08038cac
 800a2a8:	08038c9c 	.word	0x08038c9c
 800a2ac:	08038c8c 	.word	0x08038c8c
 800a2b0:	08038c7c 	.word	0x08038c7c

0800a2b4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b0bd      	sub	sp, #244	; 0xf4
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	607a      	str	r2, [r7, #4]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	817b      	strh	r3, [r7, #10]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800a2c8:	4b09      	ldr	r3, [pc, #36]	; (800a2f0 <arm_radix8_butterfly_f32+0x3c>)
 800a2ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800a2ce:	897b      	ldrh	r3, [r7, #10]
 800a2d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800a2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800a2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e0:	08db      	lsrs	r3, r3, #3
 800a2e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2ec:	e002      	b.n	800a2f4 <arm_radix8_butterfly_f32+0x40>
 800a2ee:	bf00      	nop
 800a2f0:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800a2f4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800a302:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a30a:	4413      	add	r3, r2
 800a30c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800a310:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a318:	4413      	add	r3, r2
 800a31a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800a31e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a326:	4413      	add	r3, r2
 800a328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800a32c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a334:	4413      	add	r3, r2
 800a336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800a33a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a342:	4413      	add	r3, r2
 800a344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800a348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a350:	4413      	add	r3, r2
 800a352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	ed93 7a00 	vldr	s14, [r3]
 800a364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	edd3 7a00 	vldr	s15, [r3]
 800a372:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a376:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a37a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4413      	add	r3, r2
 800a384:	ed93 7a00 	vldr	s14, [r3]
 800a388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a38c:	00db      	lsls	r3, r3, #3
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	4413      	add	r3, r2
 800a392:	edd3 7a00 	vldr	s15, [r3]
 800a396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a39a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a39e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	ed93 7a00 	vldr	s14, [r3]
 800a3ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	edd3 7a00 	vldr	s15, [r3]
 800a3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	ed93 7a00 	vldr	s14, [r3]
 800a3d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4413      	add	r3, r2
 800a3da:	edd3 7a00 	vldr	s15, [r3]
 800a3de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3e2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a3e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	ed93 7a00 	vldr	s14, [r3]
 800a3f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	edd3 7a00 	vldr	s15, [r3]
 800a402:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a406:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800a40a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	ed93 7a00 	vldr	s14, [r3]
 800a418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a41c:	00db      	lsls	r3, r3, #3
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4413      	add	r3, r2
 800a422:	edd3 7a00 	vldr	s15, [r3]
 800a426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a42a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800a42e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4413      	add	r3, r2
 800a438:	ed93 7a00 	vldr	s14, [r3]
 800a43c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	4413      	add	r3, r2
 800a446:	edd3 7a00 	vldr	s15, [r3]
 800a44a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a44e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800a452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4413      	add	r3, r2
 800a45c:	ed93 7a00 	vldr	s14, [r3]
 800a460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4413      	add	r3, r2
 800a46a:	edd3 7a00 	vldr	s15, [r3]
 800a46e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a472:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800a476:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a47a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a47e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a482:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800a486:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a48a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a48e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a492:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800a496:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a49a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a49e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4a2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800a4a6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a4aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a4ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4b2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800a4b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a4c4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a4c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4cc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800a4d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a4de:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a4e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4e6:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800a4ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	ed93 7a00 	vldr	s14, [r3]
 800a4fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	3304      	adds	r3, #4
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4413      	add	r3, r2
 800a506:	edd3 7a00 	vldr	s15, [r3]
 800a50a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a50e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800a512:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	3304      	adds	r3, #4
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	4413      	add	r3, r2
 800a51e:	ed93 7a00 	vldr	s14, [r3]
 800a522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	3304      	adds	r3, #4
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	edd3 7a00 	vldr	s15, [r3]
 800a532:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a536:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800a53a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	3304      	adds	r3, #4
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	4413      	add	r3, r2
 800a546:	ed93 7a00 	vldr	s14, [r3]
 800a54a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	3304      	adds	r3, #4
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	edd3 7a00 	vldr	s15, [r3]
 800a55a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a55e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800a562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	3304      	adds	r3, #4
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	ed93 7a00 	vldr	s14, [r3]
 800a572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	3304      	adds	r3, #4
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4413      	add	r3, r2
 800a57e:	edd3 7a00 	vldr	s15, [r3]
 800a582:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a586:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800a58a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	3304      	adds	r3, #4
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	4413      	add	r3, r2
 800a596:	ed93 7a00 	vldr	s14, [r3]
 800a59a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	edd3 7a00 	vldr	s15, [r3]
 800a5aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5ae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a5b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	ed93 7a00 	vldr	s14, [r3]
 800a5c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	edd3 7a00 	vldr	s15, [r3]
 800a5d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5d6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a5da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	ed93 7a00 	vldr	s14, [r3]
 800a5ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	edd3 7a00 	vldr	s15, [r3]
 800a5fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5fe:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	3304      	adds	r3, #4
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4413      	add	r3, r2
 800a60e:	ed93 7a00 	vldr	s14, [r3]
 800a612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	3304      	adds	r3, #4
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	4413      	add	r3, r2
 800a61e:	edd3 7a00 	vldr	s15, [r3]
 800a622:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a626:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800a62a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a62e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a632:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a636:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800a63a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a63e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a642:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a646:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800a64a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a64e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a652:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a656:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800a65a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a65e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a662:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a666:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800a66a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	3304      	adds	r3, #4
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	4413      	add	r3, r2
 800a676:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a67a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a67e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a682:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800a686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	3304      	adds	r3, #4
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	4413      	add	r3, r2
 800a692:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a696:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a69a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a69e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800a6a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a6b0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a6b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6b8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800a6bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a6ca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a6ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6d2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800a6d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	3304      	adds	r3, #4
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a6e6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a6ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6ee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800a6f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a702:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a70a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800a70e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a712:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a71a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a722:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800a726:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a72a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a72e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a732:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800a73e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a742:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a74a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a752:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800a756:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a75a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a75e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a762:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a76a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800a76e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a772:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800a77e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a782:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a78a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800a78e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a792:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a79a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800a79e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a7a2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a7a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7aa:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800a7ae:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a7b2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a7b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7ba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800a7be:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a7c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ca:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800a7ce:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a7d2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a7d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7da:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800a7de:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a7e2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a7e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ea:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800a7ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a7fc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a800:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a804:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800a808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4413      	add	r3, r2
 800a812:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a816:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a81a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a81e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800a822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a826:	00db      	lsls	r3, r3, #3
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	4413      	add	r3, r2
 800a82c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a830:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a834:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a838:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800a83c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a840:	00db      	lsls	r3, r3, #3
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	4413      	add	r3, r2
 800a846:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a84a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a84e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a852:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800a856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	3304      	adds	r3, #4
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4413      	add	r3, r2
 800a862:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a866:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a86a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a86e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800a872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	3304      	adds	r3, #4
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a882:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a88a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800a88e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	3304      	adds	r3, #4
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4413      	add	r3, r2
 800a89a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a89e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a8a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800a8aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a8ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a8be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8c2:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800a8c6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a8ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800a8d4:	897b      	ldrh	r3, [r7, #10]
 800a8d6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	f4ff ad0a 	bcc.w	800a2f4 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800a8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e4:	2b07      	cmp	r3, #7
 800a8e6:	f240 84e3 	bls.w	800b2b0 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800a8f6:	893b      	ldrh	r3, [r7, #8]
 800a8f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a8fc:	4413      	add	r3, r2
 800a8fe:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800a900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a902:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800a906:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a90a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a90c:	4413      	add	r3, r2
 800a90e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800a910:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a914:	4413      	add	r3, r2
 800a916:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800a918:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a91a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a91c:	4413      	add	r3, r2
 800a91e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800a920:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a922:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a924:	4413      	add	r3, r2
 800a926:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800a928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a92a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a92c:	4413      	add	r3, r2
 800a92e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800a930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a934:	4413      	add	r3, r2
 800a936:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800a938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	4413      	add	r3, r2
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800a946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a948:	00db      	lsls	r3, r3, #3
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	4413      	add	r3, r2
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800a952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	4413      	add	r3, r2
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800a95e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	4413      	add	r3, r2
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800a96a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800a976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	4413      	add	r3, r2
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800a982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	4413      	add	r3, r2
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800a98e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	3304      	adds	r3, #4
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	4413      	add	r3, r2
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800a99e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9a0:	00db      	lsls	r3, r3, #3
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800a9ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800a9ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	3304      	adds	r3, #4
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800a9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800a9d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	3304      	adds	r3, #4
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	4413      	add	r3, r2
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800a9e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800a9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800a9fa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa02:	4413      	add	r3, r2
 800aa04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800aa08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800aa0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa10:	4413      	add	r3, r2
 800aa12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800aa16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aa1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa1e:	4413      	add	r3, r2
 800aa20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800aa24:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800aa28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800aa32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aa36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800aa40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa48:	4413      	add	r3, r2
 800aa4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800aa4e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aa52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa56:	4413      	add	r3, r2
 800aa58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800aa5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	ed93 7a00 	vldr	s14, [r3]
 800aa6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	edd3 7a00 	vldr	s15, [r3]
 800aa78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa7c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800aa80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	4413      	add	r3, r2
 800aa8a:	ed93 7a00 	vldr	s14, [r3]
 800aa8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	edd3 7a00 	vldr	s15, [r3]
 800aa9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaa0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800aaa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	ed93 7a00 	vldr	s14, [r3]
 800aab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	edd3 7a00 	vldr	s15, [r3]
 800aac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800aac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	ed93 7a00 	vldr	s14, [r3]
 800aad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	edd3 7a00 	vldr	s15, [r3]
 800aae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aae8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800aaec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	ed93 7a00 	vldr	s14, [r3]
 800aafa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4413      	add	r3, r2
 800ab04:	edd3 7a00 	vldr	s15, [r3]
 800ab08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab0c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800ab10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4413      	add	r3, r2
 800ab1a:	ed93 7a00 	vldr	s14, [r3]
 800ab1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	edd3 7a00 	vldr	s15, [r3]
 800ab2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab30:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800ab34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	ed93 7a00 	vldr	s14, [r3]
 800ab42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	edd3 7a00 	vldr	s15, [r3]
 800ab50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab54:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800ab58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4413      	add	r3, r2
 800ab62:	ed93 7a00 	vldr	s14, [r3]
 800ab66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	edd3 7a00 	vldr	s15, [r3]
 800ab74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab78:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800ab7c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ab80:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ab84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab88:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800ab8c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ab90:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ab94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab98:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800ab9c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aba0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aba8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800abac:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800abb0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800abb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abb8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800abbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800abca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800abce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abd2:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800abd6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800abda:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800abde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abe2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800abe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	3304      	adds	r3, #4
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	ed93 7a00 	vldr	s14, [r3]
 800abf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	3304      	adds	r3, #4
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	4413      	add	r3, r2
 800ac02:	edd3 7a00 	vldr	s15, [r3]
 800ac06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800ac0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	3304      	adds	r3, #4
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	ed93 7a00 	vldr	s14, [r3]
 800ac1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	3304      	adds	r3, #4
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	edd3 7a00 	vldr	s15, [r3]
 800ac2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac32:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800ac36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	ed93 7a00 	vldr	s14, [r3]
 800ac46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	4413      	add	r3, r2
 800ac52:	edd3 7a00 	vldr	s15, [r3]
 800ac56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800ac5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	3304      	adds	r3, #4
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	ed93 7a00 	vldr	s14, [r3]
 800ac6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	3304      	adds	r3, #4
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4413      	add	r3, r2
 800ac7a:	edd3 7a00 	vldr	s15, [r3]
 800ac7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac82:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800ac86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	ed93 7a00 	vldr	s14, [r3]
 800ac96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	4413      	add	r3, r2
 800aca2:	edd3 7a00 	vldr	s15, [r3]
 800aca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acaa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800acae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	3304      	adds	r3, #4
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	4413      	add	r3, r2
 800acba:	ed93 7a00 	vldr	s14, [r3]
 800acbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800acc2:	00db      	lsls	r3, r3, #3
 800acc4:	3304      	adds	r3, #4
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4413      	add	r3, r2
 800acca:	edd3 7a00 	vldr	s15, [r3]
 800acce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acd2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800acd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	3304      	adds	r3, #4
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4413      	add	r3, r2
 800ace2:	ed93 7a00 	vldr	s14, [r3]
 800ace6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	3304      	adds	r3, #4
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4413      	add	r3, r2
 800acf2:	edd3 7a00 	vldr	s15, [r3]
 800acf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acfa:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800acfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	3304      	adds	r3, #4
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	ed93 7a00 	vldr	s14, [r3]
 800ad0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	3304      	adds	r3, #4
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	4413      	add	r3, r2
 800ad1a:	edd3 7a00 	vldr	s15, [r3]
 800ad1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad22:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800ad26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad2a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ad2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad32:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800ad36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad3a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ad3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800ad46:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ad4a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ad4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad52:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800ad56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ad5a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ad5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800ad66:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ad6a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ad6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad72:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800ad76:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ad7a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ad7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad82:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800ad86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4413      	add	r3, r2
 800ad92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad9e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800ada2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ada6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800adaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800adb2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800adb6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800adba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800adc2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800adc6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800adca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adce:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800add2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800add6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800adda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adde:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800ade2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ade6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800adea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adee:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800adf2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800adf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800adfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfe:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800ae02:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ae06:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ae0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae0e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800ae12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae20:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae28:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800ae2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	3304      	adds	r3, #4
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	ed97 7a05 	vldr	s14, [r7, #20]
 800ae3c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae44:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800ae48:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ae4c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ae50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae54:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800ae58:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ae5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae64:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800ae68:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ae6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae74:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800ae78:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ae7c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ae80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae84:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800ae88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	4413      	add	r3, r2
 800ae92:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae96:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae9e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800aea2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	3304      	adds	r3, #4
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4413      	add	r3, r2
 800aeae:	ed97 7a05 	vldr	s14, [r7, #20]
 800aeb2:	edd7 7a04 	vldr	s15, [r7, #16]
 800aeb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeba:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800aebe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800aec2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800aec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeca:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800aece:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800aed2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800aed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeda:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800aede:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800aee2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800aee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeea:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800aeee:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800aef2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800aef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800aefe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af02:	00db      	lsls	r3, r3, #3
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	ed97 7a07 	vldr	s14, [r7, #28]
 800af0c:	edd7 7a06 	vldr	s15, [r7, #24]
 800af10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af14:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800af18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	3304      	adds	r3, #4
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4413      	add	r3, r2
 800af24:	ed97 7a05 	vldr	s14, [r7, #20]
 800af28:	edd7 7a04 	vldr	s15, [r7, #16]
 800af2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af30:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800af34:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800af38:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af40:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800af44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af48:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800af4c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800af50:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800af54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af58:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800af5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af60:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800af64:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800af68:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af70:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800af74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800af7c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800af80:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af88:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800af8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af90:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800af94:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af98:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800af9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afa0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800afa4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800afa8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800afac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afb0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800afb4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800afb8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800afbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afc0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800afc4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800afc8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800afcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afd0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800afd4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800afd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afe0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800afe4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800afe8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aff0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800aff4:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800aff8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800affc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b000:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800b004:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b008:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b00c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b010:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800b014:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b018:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b01c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b020:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800b024:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b028:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b02c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b030:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800b034:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b038:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b03c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b040:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800b044:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b048:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b04c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b050:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800b054:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b058:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b05c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b060:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800b064:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b068:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b06c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b070:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800b074:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b078:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b07c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b080:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800b084:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b088:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b08c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b090:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800b094:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b098:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800b0a4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b0a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800b0b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b0b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800b0c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b0c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b0cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800b0d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	ed97 7a07 	vldr	s14, [r7, #28]
 800b0e2:	edd7 7a06 	vldr	s15, [r7, #24]
 800b0e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ea:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800b0ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0f2:	00db      	lsls	r3, r3, #3
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	ed97 7a05 	vldr	s14, [r7, #20]
 800b0fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800b102:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b106:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b10a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b10e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b116:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b11a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b11e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b126:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b12a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b12e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b136:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b13a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b13e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b146:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b14a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b14e:	00db      	lsls	r3, r3, #3
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4413      	add	r3, r2
 800b154:	ed97 7a07 	vldr	s14, [r7, #28]
 800b158:	edd7 7a06 	vldr	s15, [r7, #24]
 800b15c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b160:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b164:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	3304      	adds	r3, #4
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	4413      	add	r3, r2
 800b170:	ed97 7a05 	vldr	s14, [r7, #20]
 800b174:	edd7 7a04 	vldr	s15, [r7, #16]
 800b178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b17c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b180:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b184:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b190:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b194:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b1a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b1a4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ac:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b1b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b1b4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1bc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b1c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b1c4:	00db      	lsls	r3, r3, #3
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	ed97 7a07 	vldr	s14, [r7, #28]
 800b1ce:	edd7 7a06 	vldr	s15, [r7, #24]
 800b1d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1d6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b1da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b1ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800b1ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1f2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b1f6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b1fa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b202:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800b206:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b20a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b212:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800b216:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b21a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b222:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800b226:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b22a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b232:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800b236:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	ed97 7a07 	vldr	s14, [r7, #28]
 800b244:	edd7 7a06 	vldr	s15, [r7, #24]
 800b248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b24c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800b250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b254:	00db      	lsls	r3, r3, #3
 800b256:	3304      	adds	r3, #4
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	4413      	add	r3, r2
 800b25c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b260:	edd7 7a04 	vldr	s15, [r7, #16]
 800b264:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b268:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800b26c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b274:	4413      	add	r3, r2
 800b276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800b27a:	897b      	ldrh	r3, [r7, #10]
 800b27c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b280:	429a      	cmp	r2, r3
 800b282:	f4ff abba 	bcc.w	800a9fa <arm_radix8_butterfly_f32+0x746>

         j++;
 800b286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b28a:	3301      	adds	r3, #1
 800b28c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800b290:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b298:	429a      	cmp	r2, r3
 800b29a:	f4ff ab2c 	bcc.w	800a8f6 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800b29e:	893b      	ldrh	r3, [r7, #8]
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800b2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2a8:	2b07      	cmp	r3, #7
 800b2aa:	f63f a813 	bhi.w	800a2d4 <arm_radix8_butterfly_f32+0x20>
}
 800b2ae:	e000      	b.n	800b2b2 <arm_radix8_butterfly_f32+0xffe>
         break;
 800b2b0:	bf00      	nop
}
 800b2b2:	bf00      	nop
 800b2b4:	37f4      	adds	r7, #244	; 0xf4
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop

0800b2c0 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b095      	sub	sp, #84	; 0x54
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800b2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800b2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800b2ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800b2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800b2fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2fc:	1d1a      	adds	r2, r3, #4
 800b2fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800b304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b306:	1d1a      	adds	r2, r3, #4
 800b308:	64ba      	str	r2, [r7, #72]	; 0x48
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800b30e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b312:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b31a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800b31e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b322:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b32a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800b32e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b332:	edd7 7a08 	vldr	s15, [r7, #32]
 800b336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	1d1a      	adds	r2, r3, #4
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b344:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b348:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800b34c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b350:	edd7 7a08 	vldr	s15, [r7, #32]
 800b354:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	1d1a      	adds	r2, r3, #4
 800b35c:	607a      	str	r2, [r7, #4]
 800b35e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b362:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b366:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800b36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	4413      	add	r3, r2
 800b372:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800b374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b376:	3308      	adds	r3, #8
 800b378:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800b37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800b380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800b386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800b38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800b392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b394:	1d1a      	adds	r2, r3, #4
 800b396:	64ba      	str	r2, [r7, #72]	; 0x48
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800b39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b39e:	1d1a      	adds	r2, r3, #4
 800b3a0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800b3a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b3aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b3ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800b3b6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b3ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b3be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3c2:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800b3c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b3ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800b3d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800b3e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b3ea:	edd7 7a08 	vldr	s15, [r7, #32]
 800b3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f2:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800b3f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3fa:	edd7 7a08 	vldr	s15, [r7, #32]
 800b3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b402:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800b406:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b40a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b40e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b412:	edd7 7a07 	vldr	s15, [r7, #28]
 800b416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b41a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b41e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	1d1a      	adds	r2, r3, #4
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b42c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b430:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800b434:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b438:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b43c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b440:	edd7 7a06 	vldr	s15, [r7, #24]
 800b444:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b448:	edd7 7a05 	vldr	s15, [r7, #20]
 800b44c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	1d1a      	adds	r2, r3, #4
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b45a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b45e:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800b462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b464:	3308      	adds	r3, #8
 800b466:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800b468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b46a:	3b08      	subs	r3, #8
 800b46c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800b46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b470:	3b01      	subs	r3, #1
 800b472:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800b474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b476:	2b00      	cmp	r3, #0
 800b478:	f47f af7f 	bne.w	800b37a <stage_rfft_f32+0xba>
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	3754      	adds	r7, #84	; 0x54
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b095      	sub	sp, #84	; 0x54
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800b4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800b4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800b4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800b4be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b4c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b4c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	1d1a      	adds	r2, r3, #4
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b4d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4d8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800b4dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b4e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b4e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	1d1a      	adds	r2, r3, #4
 800b4ec:	607a      	str	r2, [r7, #4]
 800b4ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b4f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4f6:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800b4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	4413      	add	r3, r2
 800b502:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800b504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b506:	3308      	adds	r3, #8
 800b508:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800b50a:	e07c      	b.n	800b606 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800b50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800b512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800b518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800b51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800b524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b526:	1d1a      	adds	r2, r3, #4
 800b528:	64ba      	str	r2, [r7, #72]	; 0x48
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800b52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	64ba      	str	r2, [r7, #72]	; 0x48
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800b538:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b53c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b540:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b544:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800b548:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b54c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b550:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b554:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800b558:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b55c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b564:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800b568:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b56c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b570:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b574:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800b578:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b57c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b580:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b584:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800b588:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b58c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b590:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b594:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800b598:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b59c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b5a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5a4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b5a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5ac:	edd7 7a06 	vldr	s15, [r7, #24]
 800b5b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	1d1a      	adds	r2, r3, #4
 800b5b8:	607a      	str	r2, [r7, #4]
 800b5ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b5be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5c2:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800b5c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b5ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b5ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5d2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5da:	edd7 7a04 	vldr	s15, [r7, #16]
 800b5de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	1d1a      	adds	r2, r3, #4
 800b5e6:	607a      	str	r2, [r7, #4]
 800b5e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b5ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5f0:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800b5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800b5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5fc:	3b08      	subs	r3, #8
 800b5fe:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800b600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b602:	3b01      	subs	r3, #1
 800b604:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800b606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f47f af7f 	bne.w	800b50c <merge_rfft_f32+0x82>
   }

}
 800b60e:	bf00      	nop
 800b610:	bf00      	nop
 800b612:	3754      	adds	r7, #84	; 0x54
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00b      	beq.n	800b64c <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f7ff ff26 	bl	800b48a <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800b63e:	78fa      	ldrb	r2, [r7, #3]
 800b640:	2301      	movs	r3, #1
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	6978      	ldr	r0, [r7, #20]
 800b646:	f7fe fca9 	bl	8009f9c <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800b64a:	e00a      	b.n	800b662 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800b64c:	78fa      	ldrb	r2, [r7, #3]
 800b64e:	2301      	movs	r3, #1
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	6978      	ldr	r0, [r7, #20]
 800b654:	f7fe fca2 	bl	8009f9c <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	68b9      	ldr	r1, [r7, #8]
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f7ff fe2f 	bl	800b2c0 <stage_rfft_f32>
}
 800b662:	bf00      	nop
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d102      	bne.n	800b680 <arm_rfft_32_fast_init_f32+0x14>
 800b67a:	f04f 33ff 	mov.w	r3, #4294967295
 800b67e:	e014      	b.n	800b6aa <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2110      	movs	r1, #16
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe fd43 	bl	800a110 <arm_cfft_init_f32>
 800b68a:	4603      	mov	r3, r0
 800b68c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 800b696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69a:	e006      	b.n	800b6aa <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2220      	movs	r2, #32
 800b6a0:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a03      	ldr	r2, [pc, #12]	; (800b6b4 <arm_rfft_32_fast_init_f32+0x48>)
 800b6a6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	08030cfc 	.word	0x08030cfc

0800b6b8 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d102      	bne.n	800b6cc <arm_rfft_64_fast_init_f32+0x14>
 800b6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ca:	e014      	b.n	800b6f6 <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2120      	movs	r1, #32
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fe fd1d 	bl	800a110 <arm_cfft_init_f32>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b6da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 800b6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6e6:	e006      	b.n	800b6f6 <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2240      	movs	r2, #64	; 0x40
 800b6ec:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a03      	ldr	r2, [pc, #12]	; (800b700 <arm_rfft_64_fast_init_f32+0x48>)
 800b6f2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	08030d7c 	.word	0x08030d7c

0800b704 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <arm_rfft_128_fast_init_f32+0x14>
 800b712:	f04f 33ff 	mov.w	r3, #4294967295
 800b716:	e014      	b.n	800b742 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2140      	movs	r1, #64	; 0x40
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe fcf7 	bl	800a110 <arm_cfft_init_f32>
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 800b72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b732:	e006      	b.n	800b742 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2280      	movs	r2, #128	; 0x80
 800b738:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a03      	ldr	r2, [pc, #12]	; (800b74c <arm_rfft_128_fast_init_f32+0x48>)
 800b73e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	08030e7c 	.word	0x08030e7c

0800b750 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d102      	bne.n	800b764 <arm_rfft_256_fast_init_f32+0x14>
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295
 800b762:	e015      	b.n	800b790 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2180      	movs	r1, #128	; 0x80
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe fcd1 	bl	800a110 <arm_cfft_init_f32>
 800b76e:	4603      	mov	r3, r0
 800b770:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 800b77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b77e:	e007      	b.n	800b790 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b786:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a03      	ldr	r2, [pc, #12]	; (800b798 <arm_rfft_256_fast_init_f32+0x48>)
 800b78c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	0803107c 	.word	0x0803107c

0800b79c <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <arm_rfft_512_fast_init_f32+0x14>
 800b7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ae:	e016      	b.n	800b7de <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe fcaa 	bl	800a110 <arm_cfft_init_f32>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800b7c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7cc:	e007      	b.n	800b7de <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7d4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a03      	ldr	r2, [pc, #12]	; (800b7e8 <arm_rfft_512_fast_init_f32+0x4c>)
 800b7da:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0803147c 	.word	0x0803147c

0800b7ec <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d102      	bne.n	800b800 <arm_rfft_1024_fast_init_f32+0x14>
 800b7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b7fe:	e016      	b.n	800b82e <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fc82 	bl	800a110 <arm_cfft_init_f32>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d002      	beq.n	800b81e <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800b818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b81c:	e007      	b.n	800b82e <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b824:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a03      	ldr	r2, [pc, #12]	; (800b838 <arm_rfft_1024_fast_init_f32+0x4c>)
 800b82a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	08031c7c 	.word	0x08031c7c

0800b83c <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <arm_rfft_2048_fast_init_f32+0x14>
 800b84a:	f04f 33ff 	mov.w	r3, #4294967295
 800b84e:	e016      	b.n	800b87e <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fc5a 	bl	800a110 <arm_cfft_init_f32>
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 800b868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b86c:	e007      	b.n	800b87e <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b874:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a03      	ldr	r2, [pc, #12]	; (800b888 <arm_rfft_2048_fast_init_f32+0x4c>)
 800b87a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	08032c7c 	.word	0x08032c7c

0800b88c <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <arm_rfft_4096_fast_init_f32+0x14>
 800b89a:	f04f 33ff 	mov.w	r3, #4294967295
 800b89e:	e016      	b.n	800b8ce <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fc32 	bl	800a110 <arm_cfft_init_f32>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b8b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800b8b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8bc:	e007      	b.n	800b8ce <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b8c4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a03      	ldr	r2, [pc, #12]	; (800b8d8 <arm_rfft_4096_fast_init_f32+0x4c>)
 800b8ca:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	08034c7c 	.word	0x08034c7c

0800b8dc <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 800b8ec:	887b      	ldrh	r3, [r7, #2]
 800b8ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f2:	d023      	beq.n	800b93c <arm_rfft_fast_init_f32+0x60>
 800b8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f8:	dc38      	bgt.n	800b96c <arm_rfft_fast_init_f32+0x90>
 800b8fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8fe:	d020      	beq.n	800b942 <arm_rfft_fast_init_f32+0x66>
 800b900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b904:	dc32      	bgt.n	800b96c <arm_rfft_fast_init_f32+0x90>
 800b906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b90a:	d01d      	beq.n	800b948 <arm_rfft_fast_init_f32+0x6c>
 800b90c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b910:	dc2c      	bgt.n	800b96c <arm_rfft_fast_init_f32+0x90>
 800b912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b916:	d01a      	beq.n	800b94e <arm_rfft_fast_init_f32+0x72>
 800b918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b91c:	dc26      	bgt.n	800b96c <arm_rfft_fast_init_f32+0x90>
 800b91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b922:	d017      	beq.n	800b954 <arm_rfft_fast_init_f32+0x78>
 800b924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b928:	dc20      	bgt.n	800b96c <arm_rfft_fast_init_f32+0x90>
 800b92a:	2b80      	cmp	r3, #128	; 0x80
 800b92c:	d015      	beq.n	800b95a <arm_rfft_fast_init_f32+0x7e>
 800b92e:	2b80      	cmp	r3, #128	; 0x80
 800b930:	dc1c      	bgt.n	800b96c <arm_rfft_fast_init_f32+0x90>
 800b932:	2b20      	cmp	r3, #32
 800b934:	d017      	beq.n	800b966 <arm_rfft_fast_init_f32+0x8a>
 800b936:	2b40      	cmp	r3, #64	; 0x40
 800b938:	d012      	beq.n	800b960 <arm_rfft_fast_init_f32+0x84>
 800b93a:	e017      	b.n	800b96c <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 800b93c:	4b14      	ldr	r3, [pc, #80]	; (800b990 <arm_rfft_fast_init_f32+0xb4>)
 800b93e:	60fb      	str	r3, [r7, #12]
    break;
 800b940:	e017      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 800b942:	4b14      	ldr	r3, [pc, #80]	; (800b994 <arm_rfft_fast_init_f32+0xb8>)
 800b944:	60fb      	str	r3, [r7, #12]
    break;
 800b946:	e014      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 800b948:	4b13      	ldr	r3, [pc, #76]	; (800b998 <arm_rfft_fast_init_f32+0xbc>)
 800b94a:	60fb      	str	r3, [r7, #12]
    break;
 800b94c:	e011      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 800b94e:	4b13      	ldr	r3, [pc, #76]	; (800b99c <arm_rfft_fast_init_f32+0xc0>)
 800b950:	60fb      	str	r3, [r7, #12]
    break;
 800b952:	e00e      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 800b954:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <arm_rfft_fast_init_f32+0xc4>)
 800b956:	60fb      	str	r3, [r7, #12]
    break;
 800b958:	e00b      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 800b95a:	4b12      	ldr	r3, [pc, #72]	; (800b9a4 <arm_rfft_fast_init_f32+0xc8>)
 800b95c:	60fb      	str	r3, [r7, #12]
    break;
 800b95e:	e008      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 800b960:	4b11      	ldr	r3, [pc, #68]	; (800b9a8 <arm_rfft_fast_init_f32+0xcc>)
 800b962:	60fb      	str	r3, [r7, #12]
    break;
 800b964:	e005      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 800b966:	4b11      	ldr	r3, [pc, #68]	; (800b9ac <arm_rfft_fast_init_f32+0xd0>)
 800b968:	60fb      	str	r3, [r7, #12]
    break;
 800b96a:	e002      	b.n	800b972 <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 800b96c:	f04f 33ff 	mov.w	r3, #4294967295
 800b970:	e009      	b.n	800b986 <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d102      	bne.n	800b97e <arm_rfft_fast_init_f32+0xa2>
 800b978:	f04f 33ff 	mov.w	r3, #4294967295
 800b97c:	e003      	b.n	800b986 <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	4798      	blx	r3
 800b984:	4603      	mov	r3, r0

}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	0800b88d 	.word	0x0800b88d
 800b994:	0800b83d 	.word	0x0800b83d
 800b998:	0800b7ed 	.word	0x0800b7ed
 800b99c:	0800b79d 	.word	0x0800b79d
 800b9a0:	0800b751 	.word	0x0800b751
 800b9a4:	0800b705 	.word	0x0800b705
 800b9a8:	0800b6b9 	.word	0x0800b6b9
 800b9ac:	0800b66d 	.word	0x0800b66d

0800b9b0 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b089      	sub	sp, #36	; 0x24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b9c4:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	ed93 7a00 	vldr	s14, [r3]
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	edd3 7a00 	vldr	s15, [r3]
 800b9dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	edd3 6a01 	vldr	s13, [r3, #4]
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	edd3 7a01 	vldr	s15, [r3, #4]
 800b9ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9f4:	edc7 7a04 	vstr	s15, [r7, #16]
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	ed93 7a00 	vldr	s14, [r3]
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	edd3 7a00 	vldr	s15, [r3]
 800ba14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba1c:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	4413      	add	r3, r2
 800ba28:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	ed93 7a00 	vldr	s14, [r3]
 800ba30:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	edc3 7a00 	vstr	s15, [r3]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	ed93 7a01 	vldr	s14, [r3, #4]
 800ba44:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	ed93 7a00 	vldr	s14, [r3]
 800ba58:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	edc3 7a00 	vstr	s15, [r3]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	ed93 7a01 	vldr	s14, [r3, #4]
 800ba6c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	3308      	adds	r3, #8
 800ba7e:	61fb      	str	r3, [r7, #28]
        ++Fout;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3308      	adds	r3, #8
 800ba84:	60fb      	str	r3, [r7, #12]
    }while (--m);
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	603b      	str	r3, [r7, #0]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bf14      	ite	ne
 800ba92:	2301      	movne	r3, #1
 800ba94:	2300      	moveq	r3, #0
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d000      	beq.n	800ba9e <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 800ba9c:	e798      	b.n	800b9d0 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 800ba9e:	bf00      	nop
 800baa0:	3724      	adds	r7, #36	; 0x24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 800baaa:	b480      	push	{r7}
 800baac:	b097      	sub	sp, #92	; 0x5c
 800baae:	af00      	add	r7, sp, #0
 800bab0:	60f8      	str	r0, [r7, #12]
 800bab2:	60b9      	str	r1, [r7, #8]
 800bab4:	607a      	str	r2, [r7, #4]
 800bab6:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	4613      	mov	r3, r2
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	4413      	add	r3, r2
 800baca:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800bad2:	657b      	str	r3, [r7, #84]	; 0x54
 800bad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bad6:	653b      	str	r3, [r7, #80]	; 0x50
 800bad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bada:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	4413      	add	r3, r2
 800bae4:	ed93 7a00 	vldr	s14, [r3]
 800bae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baea:	edd3 7a00 	vldr	s15, [r3]
 800baee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	00db      	lsls	r3, r3, #3
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	4413      	add	r3, r2
 800bafa:	edd3 6a01 	vldr	s13, [r3, #4]
 800bafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb00:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb0c:	edc7 7a04 	vstr	s15, [r7, #16]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	00db      	lsls	r3, r3, #3
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	ed93 7a00 	vldr	s14, [r3]
 800bb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb1e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb34:	edd3 7a00 	vldr	s15, [r3]
 800bb38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb40:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800bb44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	ed93 7a00 	vldr	s14, [r3]
 800bb50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb52:	edd3 7a00 	vldr	s15, [r3]
 800bb56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb5c:	00db      	lsls	r3, r3, #3
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4413      	add	r3, r2
 800bb62:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb68:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb74:	edc7 7a06 	vstr	s15, [r7, #24]
 800bb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	ed93 7a00 	vldr	s14, [r3]
 800bb84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb86:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	4413      	add	r3, r2
 800bb96:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb9c:	edd3 7a00 	vldr	s15, [r3]
 800bba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bba8:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 800bbac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbae:	00db      	lsls	r3, r3, #3
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	ed93 7a00 	vldr	s14, [r3]
 800bbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbba:	edd3 7a00 	vldr	s15, [r3]
 800bbbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	4413      	add	r3, r2
 800bbca:	edd3 6a01 	vldr	s13, [r3, #4]
 800bbce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd0:	edd3 7a01 	vldr	s15, [r3, #4]
 800bbd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bbd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbdc:	edc7 7a08 	vstr	s15, [r7, #32]
 800bbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	ed93 7a00 	vldr	s14, [r3]
 800bbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbee:	edd3 7a01 	vldr	s15, [r3, #4]
 800bbf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	edd3 6a01 	vldr	s13, [r3, #4]
 800bc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc04:	edd3 7a00 	vldr	s15, [r3]
 800bc08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	ed93 7a00 	vldr	s14, [r3]
 800bc1a:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc22:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc2c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	ed93 7a00 	vldr	s14, [r3]
 800bc3e:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	edc3 7a00 	vstr	s15, [r3]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc52:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 800bc60:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc64:	edd7 7a08 	vldr	s15, [r7, #32]
 800bc68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800bc70:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bc78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc7c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 800bc80:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc84:	edd7 7a08 	vldr	s15, [r7, #32]
 800bc88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc8c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800bc90:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bc98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc9c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	ed93 7a00 	vldr	s14, [r3]
 800bca6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcac:	00db      	lsls	r3, r3, #3
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcb6:	edc3 7a00 	vstr	s15, [r3]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	ed93 7a01 	vldr	s14, [r3, #4]
 800bcc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bcc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	4413      	add	r3, r2
 800bccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcd0:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcda:	4413      	add	r3, r2
 800bcdc:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	011b      	lsls	r3, r3, #4
 800bce2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bce4:	4413      	add	r3, r2
 800bce6:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf6:	4413      	add	r3, r2
 800bcf8:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	ed93 7a00 	vldr	s14, [r3]
 800bd00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	edc3 7a00 	vstr	s15, [r3]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd14:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bd18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d030      	beq.n	800bd8c <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 800bd2a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bd2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4413      	add	r3, r2
 800bd3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd3e:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800bd42:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bd46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	00db      	lsls	r3, r3, #3
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	4413      	add	r3, r2
 800bd52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd56:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 800bd5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bd5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd64:	00db      	lsls	r3, r3, #3
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4413      	add	r3, r2
 800bd6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd6e:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 800bd72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bd76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd86:	edc3 7a01 	vstr	s15, [r3, #4]
 800bd8a:	e02f      	b.n	800bdec <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 800bd8c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bd90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bda0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 800bda4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bda8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb8:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 800bdbc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bdc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bdc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4413      	add	r3, r2
 800bdcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdd0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800bdd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bdd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	4413      	add	r3, r2
 800bde4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bde8:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800bdf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	bf14      	ite	ne
 800bdfe:	2301      	movne	r3, #1
 800be00:	2300      	moveq	r3, #0
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b00      	cmp	r3, #0
 800be06:	d000      	beq.n	800be0a <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 800be08:	e668      	b.n	800badc <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 800be0a:	bf00      	nop
 800be0c:	375c      	adds	r7, #92	; 0x5c
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
	...

0800be18 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 800be18:	b5b0      	push	{r4, r5, r7, lr}
 800be1a:	b094      	sub	sp, #80	; 0x50
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
     size_t k=m;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	fb02 f303 	mul.w	r3, r2, r3
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	3321      	adds	r3, #33	; 0x21
 800be3c:	f107 0210 	add.w	r2, r7, #16
 800be40:	00db      	lsls	r3, r3, #3
 800be42:	440b      	add	r3, r1
 800be44:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be48:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800be52:	647b      	str	r3, [r7, #68]	; 0x44
 800be54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be56:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	ed93 7a00 	vldr	s14, [r3]
 800be64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be66:	edd3 7a00 	vldr	s15, [r3]
 800be6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	4413      	add	r3, r2
 800be76:	edd3 6a01 	vldr	s13, [r3, #4]
 800be7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be7c:	edd3 7a01 	vldr	s15, [r3, #4]
 800be80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be88:	edc7 7a08 	vstr	s15, [r7, #32]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	4413      	add	r3, r2
 800be94:	ed93 7a00 	vldr	s14, [r3]
 800be98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be9a:	edd3 7a01 	vldr	s15, [r3, #4]
 800be9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	00db      	lsls	r3, r3, #3
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	4413      	add	r3, r2
 800beaa:	edd3 6a01 	vldr	s13, [r3, #4]
 800beae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb0:	edd3 7a00 	vldr	s15, [r3]
 800beb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800beb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bebc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 800bec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4413      	add	r3, r2
 800bec8:	ed93 7a00 	vldr	s14, [r3]
 800becc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bece:	edd3 7a00 	vldr	s15, [r3]
 800bed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	4413      	add	r3, r2
 800bede:	edd3 6a01 	vldr	s13, [r3, #4]
 800bee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee4:	edd3 7a01 	vldr	s15, [r3, #4]
 800bee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800beec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bef0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800bef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	ed93 7a00 	vldr	s14, [r3]
 800bf00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf02:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	4413      	add	r3, r2
 800bf12:	edd3 6a01 	vldr	s13, [r3, #4]
 800bf16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf18:	edd3 7a00 	vldr	s15, [r3]
 800bf1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 800bf28:	ed97 7a08 	vldr	s14, [r7, #32]
 800bf2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800bf38:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bf3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bf40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf44:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 800bf48:	ed97 7a08 	vldr	s14, [r7, #32]
 800bf4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf54:	edc7 7a06 	vstr	s15, [r7, #24]
 800bf58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bf5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bf60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf64:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	00db      	lsls	r3, r3, #3
 800bf6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf6e:	4413      	add	r3, r2
 800bf70:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	011b      	lsls	r3, r3, #4
 800bf76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf78:	4413      	add	r3, r2
 800bf7a:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f4 fb11 	bl	80005a8 <__aeabi_f2d>
 800bf86:	4604      	mov	r4, r0
 800bf88:	460d      	mov	r5, r1
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f4 fb0b 	bl	80005a8 <__aeabi_f2d>
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	4b57      	ldr	r3, [pc, #348]	; (800c0f4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800bf98:	f7f4 fb5e 	bl	8000658 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	f7f4 f9a0 	bl	80002e8 <__aeabi_dsub>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4610      	mov	r0, r2
 800bfae:	4619      	mov	r1, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	00db      	lsls	r3, r3, #3
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	18d4      	adds	r4, r2, r3
 800bfb8:	f7f4 fe46 	bl	8000c48 <__aeabi_d2f>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7f4 faef 	bl	80005a8 <__aeabi_f2d>
 800bfca:	4604      	mov	r4, r0
 800bfcc:	460d      	mov	r5, r1
 800bfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7f4 fae9 	bl	80005a8 <__aeabi_f2d>
 800bfd6:	f04f 0200 	mov.w	r2, #0
 800bfda:	4b46      	ldr	r3, [pc, #280]	; (800c0f4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800bfdc:	f7f4 fb3c 	bl	8000658 <__aeabi_dmul>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f7f4 f97e 	bl	80002e8 <__aeabi_dsub>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4610      	mov	r0, r2
 800bff2:	4619      	mov	r1, r3
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	00db      	lsls	r3, r3, #3
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	18d4      	adds	r4, r2, r3
 800bffc:	f7f4 fe24 	bl	8000c48 <__aeabi_d2f>
 800c000:	4603      	mov	r3, r0
 800c002:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 800c004:	ed97 7a06 	vldr	s14, [r7, #24]
 800c008:	edd7 7a05 	vldr	s15, [r7, #20]
 800c00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c010:	edc7 7a06 	vstr	s15, [r7, #24]
 800c014:	ed97 7a07 	vldr	s14, [r7, #28]
 800c018:	edd7 7a05 	vldr	s15, [r7, #20]
 800c01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c020:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	ed93 7a00 	vldr	s14, [r3]
 800c02a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c02e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	edc3 7a00 	vstr	s15, [r3]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c03e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c042:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	4413      	add	r3, r2
 800c054:	ed93 7a00 	vldr	s14, [r3]
 800c058:	edd7 7a07 	vldr	s15, [r7, #28]
 800c05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	4413      	add	r3, r2
 800c064:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c068:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	4413      	add	r3, r2
 800c074:	ed93 7a01 	vldr	s14, [r3, #4]
 800c078:	edd7 7a06 	vldr	s15, [r7, #24]
 800c07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c07e:	00db      	lsls	r3, r3, #3
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c088:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	4413      	add	r3, r2
 800c094:	ed93 7a00 	vldr	s14, [r3]
 800c098:	edd7 7a07 	vldr	s15, [r7, #28]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0a8:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	00db      	lsls	r3, r3, #3
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c0b8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0c8:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	60fb      	str	r3, [r7, #12]
     }while(--k);
 800c0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bf14      	ite	ne
 800c0de:	2301      	movne	r3, #1
 800c0e0:	2300      	moveq	r3, #0
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d000      	beq.n	800c0ea <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 800c0e8:	e6b6      	b.n	800be58 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 800c0ea:	bf00      	nop
 800c0ec:	3750      	adds	r7, #80	; 0x50
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	3fe00000 	.word	0x3fe00000

0800c0f8 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b0ab      	sub	sp, #172	; 0xac
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c10c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	fb02 f303 	mul.w	r3, r2, r3
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c11e:	441a      	add	r2, r3
 800c120:	f107 0318 	add.w	r3, r7, #24
 800c124:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c128:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	fb02 f303 	mul.w	r3, r2, r3
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c13a:	441a      	add	r2, r3
 800c13c:	f107 0310 	add.w	r3, r7, #16
 800c140:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c144:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c156:	4413      	add	r3, r2
 800c158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	011b      	lsls	r3, r3, #4
 800c160:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c164:	4413      	add	r3, r2
 800c166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	4613      	mov	r3, r2
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	4413      	add	r3, r2
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	461a      	mov	r2, r3
 800c176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c17a:	4413      	add	r3, r2
 800c17c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	015b      	lsls	r3, r3, #5
 800c184:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c188:	4413      	add	r3, r2
 800c18a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 800c198:	2300      	movs	r3, #0
 800c19a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c19e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	f280 82a9 	bge.w	800c6fc <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 800c1aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c1ae:	f107 0320 	add.w	r3, r7, #32
 800c1b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1b6:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 800c1ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1be:	ed93 7a00 	vldr	s14, [r3]
 800c1c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	fb02 f303 	mul.w	r3, r2, r3
 800c1cc:	00db      	lsls	r3, r3, #3
 800c1ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c1d2:	4413      	add	r3, r2
 800c1d4:	edd3 7a00 	vldr	s15, [r3]
 800c1d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1e0:	edd3 6a01 	vldr	s13, [r3, #4]
 800c1e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	fb02 f303 	mul.w	r3, r2, r3
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c1f4:	4413      	add	r3, r2
 800c1f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800c1fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c202:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800c206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c20a:	ed93 7a00 	vldr	s14, [r3]
 800c20e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	fb02 f303 	mul.w	r3, r2, r3
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c21e:	4413      	add	r3, r2
 800c220:	edd3 7a01 	vldr	s15, [r3, #4]
 800c224:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c228:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c22c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c230:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	fb02 f303 	mul.w	r3, r2, r3
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c240:	4413      	add	r3, r2
 800c242:	edd3 7a00 	vldr	s15, [r3]
 800c246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c24a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c24e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 800c252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c256:	ed93 7a00 	vldr	s14, [r3]
 800c25a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	011b      	lsls	r3, r3, #4
 800c266:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c26a:	4413      	add	r3, r2
 800c26c:	edd3 7a00 	vldr	s15, [r3]
 800c270:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c278:	edd3 6a01 	vldr	s13, [r3, #4]
 800c27c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	fb02 f303 	mul.w	r3, r2, r3
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c28c:	4413      	add	r3, r2
 800c28e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c29a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800c29e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2a2:	ed93 7a00 	vldr	s14, [r3]
 800c2a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	fb02 f303 	mul.w	r3, r2, r3
 800c2b0:	011b      	lsls	r3, r3, #4
 800c2b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2b6:	4413      	add	r3, r2
 800c2b8:	edd3 7a01 	vldr	s15, [r3, #4]
 800c2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2c4:	edd3 6a01 	vldr	s13, [r3, #4]
 800c2c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	fb02 f303 	mul.w	r3, r2, r3
 800c2d2:	011b      	lsls	r3, r3, #4
 800c2d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2d8:	4413      	add	r3, r2
 800c2da:	edd3 7a00 	vldr	s15, [r3]
 800c2de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 800c2ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2ee:	ed93 7a00 	vldr	s14, [r3]
 800c2f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	fb02 f203 	mul.w	r2, r2, r3
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	4413      	add	r3, r2
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	461a      	mov	r2, r3
 800c306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c30a:	4413      	add	r3, r2
 800c30c:	edd3 7a00 	vldr	s15, [r3]
 800c310:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c318:	edd3 6a01 	vldr	s13, [r3, #4]
 800c31c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	fb02 f203 	mul.w	r2, r2, r3
 800c326:	4613      	mov	r3, r2
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	4413      	add	r3, r2
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	461a      	mov	r2, r3
 800c330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c334:	4413      	add	r3, r2
 800c336:	edd3 7a01 	vldr	s15, [r3, #4]
 800c33a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c33e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c342:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800c346:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c34a:	ed93 7a00 	vldr	s14, [r3]
 800c34e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	fb02 f203 	mul.w	r2, r2, r3
 800c358:	4613      	mov	r3, r2
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	4413      	add	r3, r2
 800c35e:	00db      	lsls	r3, r3, #3
 800c360:	461a      	mov	r2, r3
 800c362:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c366:	4413      	add	r3, r2
 800c368:	edd3 7a01 	vldr	s15, [r3, #4]
 800c36c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c374:	edd3 6a01 	vldr	s13, [r3, #4]
 800c378:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	fb02 f203 	mul.w	r2, r2, r3
 800c382:	4613      	mov	r3, r2
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	4413      	add	r3, r2
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	461a      	mov	r2, r3
 800c38c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c390:	4413      	add	r3, r2
 800c392:	edd3 7a00 	vldr	s15, [r3]
 800c396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c39e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 800c3a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3a6:	ed93 7a00 	vldr	s14, [r3]
 800c3aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	fb02 f303 	mul.w	r3, r2, r3
 800c3b4:	015b      	lsls	r3, r3, #5
 800c3b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3ba:	4413      	add	r3, r2
 800c3bc:	edd3 7a00 	vldr	s15, [r3]
 800c3c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3c8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c3cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	fb02 f303 	mul.w	r3, r2, r3
 800c3d6:	015b      	lsls	r3, r3, #5
 800c3d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3dc:	4413      	add	r3, r2
 800c3de:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3ea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800c3ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3f2:	ed93 7a00 	vldr	s14, [r3]
 800c3f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	fb02 f303 	mul.w	r3, r2, r3
 800c400:	015b      	lsls	r3, r3, #5
 800c402:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c406:	4413      	add	r3, r2
 800c408:	edd3 7a01 	vldr	s15, [r3, #4]
 800c40c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c410:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c414:	edd3 6a01 	vldr	s13, [r3, #4]
 800c418:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	fb02 f303 	mul.w	r3, r2, r3
 800c422:	015b      	lsls	r3, r3, #5
 800c424:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c428:	4413      	add	r3, r2
 800c42a:	edd3 7a00 	vldr	s15, [r3]
 800c42e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c432:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c436:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 800c43a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c43e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c442:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c446:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800c44a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c44e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c452:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c456:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 800c45a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c45e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c462:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c466:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 800c46a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c46e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c472:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c476:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 800c47a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c47e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c482:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c486:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 800c48a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c48e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c492:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c496:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 800c49a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c49e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c4a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800c4aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c4ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c4b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4b6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 800c4ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4be:	ed93 7a00 	vldr	s14, [r3]
 800c4c2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c4c6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4d6:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 800c4da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4de:	ed93 7a01 	vldr	s14, [r3, #4]
 800c4e2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c4e6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800c4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4f6:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 800c4fa:	ed97 7a08 	vldr	s14, [r7, #32]
 800c4fe:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c502:	edd7 7a06 	vldr	s15, [r7, #24]
 800c506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c50a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c50e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800c512:	edd7 7a04 	vldr	s15, [r7, #16]
 800c516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c51a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c51e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 800c522:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c526:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c52a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c52e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c532:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c536:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800c53a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c53e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c542:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c546:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 800c54a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800c54e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c552:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c556:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800c55a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c55e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c562:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c566:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 800c56a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c56e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c576:	eeb1 7a67 	vneg.f32	s14, s15
 800c57a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800c57e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c58a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 800c58e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c592:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800c596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c59a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c59e:	edc3 7a00 	vstr	s15, [r3]
 800c5a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c5a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c5aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5b2:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 800c5b6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c5ba:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800c5be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5c6:	edc3 7a00 	vstr	s15, [r3]
 800c5ca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c5ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c5d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5da:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 800c5de:	ed97 7a08 	vldr	s14, [r7, #32]
 800c5e2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c5e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5f2:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800c5f6:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c602:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 800c606:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c60a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c60e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c61a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800c61e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c62a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 800c62e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800c632:	edd7 7a07 	vldr	s15, [r7, #28]
 800c636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c63a:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800c63e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c64a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 800c64e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c652:	edd7 7a05 	vldr	s15, [r7, #20]
 800c656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c65a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800c65e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c66a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 800c66e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800c672:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c67a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c67e:	edc3 7a00 	vstr	s15, [r3]
 800c682:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800c686:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c68a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c68e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c692:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 800c696:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800c69a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c69e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6a6:	edc3 7a00 	vstr	s15, [r3]
 800c6aa:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800c6ae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c6b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6ba:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 800c6be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6c2:	3308      	adds	r3, #8
 800c6c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c6c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c6d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6d6:	3308      	adds	r3, #8
 800c6d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c6dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c6e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 800c6f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c6fa:	e550      	b.n	800c19e <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 800c6fc:	bf00      	nop
 800c6fe:	37ac      	adds	r7, #172	; 0xac
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08e      	sub	sp, #56	; 0x38
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c71c:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 800c724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c726:	00db      	lsls	r3, r3, #3
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 fe8d 	bl	800d448 <_Z9ei_mallocj>
 800c72e:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 800c730:	2300      	movs	r3, #0
 800c732:	637b      	str	r3, [r7, #52]	; 0x34
 800c734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	f280 80b6 	bge.w	800c8aa <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c742:	2300      	movs	r3, #0
 800c744:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c74a:	429a      	cmp	r2, r3
 800c74c:	da14      	bge.n	800c778 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 800c74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	18d1      	adds	r1, r2, r3
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	4413      	add	r3, r2
 800c75e:	460a      	mov	r2, r1
 800c760:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c764:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 800c768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	4413      	add	r3, r2
 800c76e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	3301      	adds	r3, #1
 800c774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c776:	e7e6      	b.n	800c746 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 800c778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c77c:	2300      	movs	r3, #0
 800c77e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c784:	429a      	cmp	r2, r3
 800c786:	f280 808c 	bge.w	800c8a2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	69ba      	ldr	r2, [r7, #24]
 800c798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c79c:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	da72      	bge.n	800c892 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	fb02 f203 	mul.w	r2, r2, r3
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b6:	4413      	add	r3, r2
 800c7b8:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 800c7ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	db03      	blt.n	800c7ca <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 800c7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	ed93 7a00 	vldr	s14, [r3]
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	6a3a      	ldr	r2, [r7, #32]
 800c7dc:	4413      	add	r3, r2
 800c7de:	edd3 7a00 	vldr	s15, [r3]
 800c7e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	00db      	lsls	r3, r3, #3
 800c7ea:	69ba      	ldr	r2, [r7, #24]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	edd3 6a01 	vldr	s13, [r3, #4]
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	6a3a      	ldr	r2, [r7, #32]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c802:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c806:	edc7 7a04 	vstr	s15, [r7, #16]
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	69ba      	ldr	r2, [r7, #24]
 800c810:	4413      	add	r3, r2
 800c812:	ed93 7a00 	vldr	s14, [r3]
 800c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	6a3a      	ldr	r2, [r7, #32]
 800c81c:	4413      	add	r3, r2
 800c81e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c822:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	69ba      	ldr	r2, [r7, #24]
 800c82c:	4413      	add	r3, r2
 800c82e:	edd3 6a01 	vldr	s13, [r3, #4]
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	6a3a      	ldr	r2, [r7, #32]
 800c838:	4413      	add	r3, r2
 800c83a:	edd3 7a00 	vldr	s15, [r3]
 800c83e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c842:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c846:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	00db      	lsls	r3, r3, #3
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	4413      	add	r3, r2
 800c852:	ed93 7a00 	vldr	s14, [r3]
 800c856:	edd7 7a04 	vldr	s15, [r7, #16]
 800c85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85c:	00db      	lsls	r3, r3, #3
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	4413      	add	r3, r2
 800c862:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c866:	edc3 7a00 	vstr	s15, [r3]
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	4413      	add	r3, r2
 800c872:	ed93 7a01 	vldr	s14, [r3, #4]
 800c876:	edd7 7a05 	vldr	s15, [r7, #20]
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	4413      	add	r3, r2
 800c882:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c886:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 800c88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88c:	3301      	adds	r3, #1
 800c88e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c890:	e788      	b.n	800c7a4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 800c892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	4413      	add	r3, r2
 800c898:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	3301      	adds	r3, #1
 800c89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8a0:	e76e      	b.n	800c780 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 800c8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a8:	e744      	b.n	800c734 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 800c8aa:	69b8      	ldr	r0, [r7, #24]
 800c8ac:	f000 fde6 	bl	800d47c <_Z7ei_freePv>
}
 800c8b0:	bf00      	nop
 800c8b2:	3738      	adds	r7, #56	; 0x38
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08a      	sub	sp, #40	; 0x28
 800c8bc:	af02      	add	r7, sp, #8
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	1d1a      	adds	r2, r3, #4
 800c8ce:	62ba      	str	r2, [r7, #40]	; 0x28
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	1d1a      	adds	r2, r3, #4
 800c8d8:	62ba      	str	r2, [r7, #40]	; 0x28
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	fb02 f303 	mul.w	r3, r2, r3
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d11a      	bne.n	800c92a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8fc:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	fb02 f303 	mul.w	r3, r2, r3
 800c908:	00db      	lsls	r3, r3, #3
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4413      	add	r3, r2
 800c90e:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3308      	adds	r3, #8
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	bf14      	ite	ne
 800c91e:	2301      	movne	r3, #1
 800c920:	2300      	moveq	r3, #0
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b00      	cmp	r3, #0
 800c926:	d024      	beq.n	800c972 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800c928:	e7e4      	b.n	800c8f4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	fb02 f203 	mul.w	r2, r2, r3
 800c932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c934:	9301      	str	r3, [sp, #4]
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68b9      	ldr	r1, [r7, #8]
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f7ff ffba 	bl	800c8b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	fb02 f303 	mul.w	r3, r2, r3
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	4413      	add	r3, r2
 800c952:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	00db      	lsls	r3, r3, #3
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4413      	add	r3, r2
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	429a      	cmp	r2, r3
 800c964:	bf14      	ite	ne
 800c966:	2301      	movne	r3, #1
 800c968:	2300      	moveq	r3, #0
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d000      	beq.n	800c972 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800c970:	e7db      	b.n	800c92a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	3b02      	subs	r3, #2
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d826      	bhi.n	800c9cc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 800c97e:	a201      	add	r2, pc, #4	; (adr r2, 800c984 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 800c980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c984:	0800c995 	.word	0x0800c995
 800c988:	0800c9a3 	.word	0x0800c9a3
 800c98c:	0800c9b1 	.word	0x0800c9b1
 800c990:	0800c9bf 	.word	0x0800c9bf

    // recombine the p smaller DFTs
    switch (p) {
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f7ff f808 	bl	800b9b0 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 800c9a0:	e01d      	b.n	800c9de <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9a6:	6879      	ldr	r1, [r7, #4]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f7ff fa35 	bl	800be18 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 800c9ae:	e016      	b.n	800c9de <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b4:	6879      	ldr	r1, [r7, #4]
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f7ff f877 	bl	800baaa <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 800c9bc:	e00f      	b.n	800c9de <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7ff fb97 	bl	800c0f8 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 800c9ca:	e008      	b.n	800c9de <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d4:	6879      	ldr	r1, [r7, #4]
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f7ff fe96 	bl	800c708 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 800c9dc:	bf00      	nop
    }
}
 800c9de:	bf00      	nop
 800c9e0:	3720      	adds	r7, #32
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop

0800c9e8 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
    int p=4;
 800c9f2:	2304      	movs	r3, #4
 800c9f4:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7f3 fdc4 	bl	8000584 <__aeabi_i2d>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	ec43 2b10 	vmov	d0, r2, r3
 800ca04:	f006 fc18 	bl	8013238 <sqrt>
 800ca08:	eeb0 7a40 	vmov.f32	s14, s0
 800ca0c:	eef0 7a60 	vmov.f32	s15, s1
 800ca10:	eeb0 0a47 	vmov.f32	s0, s14
 800ca14:	eef0 0a67 	vmov.f32	s1, s15
 800ca18:	f006 f9b6 	bl	8012d88 <floor>
 800ca1c:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	fb93 f2f2 	sdiv	r2, r3, r2
 800ca28:	6979      	ldr	r1, [r7, #20]
 800ca2a:	fb01 f202 	mul.w	r2, r1, r2
 800ca2e:	1a9b      	subs	r3, r3, r2
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01e      	beq.n	800ca72 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d005      	beq.n	800ca46 <_ZL9kf_factoriPi+0x5e>
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	2b04      	cmp	r3, #4
 800ca3e:	d105      	bne.n	800ca4c <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 800ca40:	2302      	movs	r3, #2
 800ca42:	617b      	str	r3, [r7, #20]
 800ca44:	e006      	b.n	800ca54 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 800ca46:	2303      	movs	r3, #3
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e003      	b.n	800ca54 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	3302      	adds	r3, #2
 800ca50:	617b      	str	r3, [r7, #20]
 800ca52:	bf00      	nop
            }
            if (p > floor_sqrt)
 800ca54:	6978      	ldr	r0, [r7, #20]
 800ca56:	f7f3 fd95 	bl	8000584 <__aeabi_i2d>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca62:	f7f4 f86b 	bl	8000b3c <__aeabi_dcmplt>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d001      	beq.n	800ca70 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	617b      	str	r3, [r7, #20]
        while (n % p) {
 800ca70:	e7d6      	b.n	800ca20 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca7a:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	1d1a      	adds	r2, r3, #4
 800ca80:	603a      	str	r2, [r7, #0]
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	1d1a      	adds	r2, r3, #4
 800ca8a:	603a      	str	r2, [r7, #0]
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	dd00      	ble.n	800ca98 <_ZL9kf_factoriPi+0xb0>
    do {
 800ca96:	e7c3      	b.n	800ca20 <_ZL9kf_factoriPi+0x38>
}
 800ca98:	bf00      	nop
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 800caa0:	b5b0      	push	{r4, r5, r7, lr}
 800caa2:	b090      	sub	sp, #64	; 0x40
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d104      	bne.n	800caca <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 800cac0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cac2:	f000 fcc1 	bl	800d448 <_Z9ei_mallocj>
 800cac6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cac8:	e00c      	b.n	800cae4 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d006      	beq.n	800cade <kiss_fft_alloc+0x3e>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d801      	bhi.n	800cade <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cae2:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 800cae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 80a0 	beq.w	800cc2c <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 800caec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 800caf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d048      	beq.n	800cb90 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 800cafe:	2300      	movs	r3, #0
 800cb00:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	f280 808a 	bge.w	800cc20 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800cb0c:	a34e      	add	r3, pc, #312	; (adr r3, 800cc48 <kiss_fft_alloc+0x1a8>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 800cb16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb18:	f7f3 fd34 	bl	8000584 <__aeabi_i2d>
 800cb1c:	a34c      	add	r3, pc, #304	; (adr r3, 800cc50 <kiss_fft_alloc+0x1b0>)
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	f7f3 fd99 	bl	8000658 <__aeabi_dmul>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4614      	mov	r4, r2
 800cb2c:	461d      	mov	r5, r3
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f7f3 fd28 	bl	8000584 <__aeabi_i2d>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f3 feb6 	bl	80008ac <__aeabi_ddiv>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 800cb48:	ed97 0b04 	vldr	d0, [r7, #16]
 800cb4c:	f006 f8cc 	bl	8012ce8 <cos>
 800cb50:	ec51 0b10 	vmov	r0, r1, d0
 800cb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb56:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	18d4      	adds	r4, r2, r3
 800cb60:	f7f4 f872 	bl	8000c48 <__aeabi_d2f>
 800cb64:	4603      	mov	r3, r0
 800cb66:	6023      	str	r3, [r4, #0]
 800cb68:	ed97 0b04 	vldr	d0, [r7, #16]
 800cb6c:	f006 fa0c 	bl	8012f88 <sin>
 800cb70:	ec51 0b10 	vmov	r0, r1, d0
 800cb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb76:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	18d4      	adds	r4, r2, r3
 800cb80:	f7f4 f862 	bl	8000c48 <__aeabi_d2f>
 800cb84:	4603      	mov	r3, r0
 800cb86:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb8e:	e7b8      	b.n	800cb02 <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 800cb90:	2300      	movs	r3, #0
 800cb92:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	da41      	bge.n	800cc20 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800cb9c:	a32a      	add	r3, pc, #168	; (adr r3, 800cc48 <kiss_fft_alloc+0x1a8>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 800cba6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cba8:	f7f3 fcec 	bl	8000584 <__aeabi_i2d>
 800cbac:	a32a      	add	r3, pc, #168	; (adr r3, 800cc58 <kiss_fft_alloc+0x1b8>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fd51 	bl	8000658 <__aeabi_dmul>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4614      	mov	r4, r2
 800cbbc:	461d      	mov	r5, r3
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7f3 fce0 	bl	8000584 <__aeabi_i2d>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4620      	mov	r0, r4
 800cbca:	4629      	mov	r1, r5
 800cbcc:	f7f3 fe6e 	bl	80008ac <__aeabi_ddiv>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 800cbd8:	ed97 0b08 	vldr	d0, [r7, #32]
 800cbdc:	f006 f884 	bl	8012ce8 <cos>
 800cbe0:	ec51 0b10 	vmov	r0, r1, d0
 800cbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbec:	00db      	lsls	r3, r3, #3
 800cbee:	18d4      	adds	r4, r2, r3
 800cbf0:	f7f4 f82a 	bl	8000c48 <__aeabi_d2f>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	ed97 0b08 	vldr	d0, [r7, #32]
 800cbfc:	f006 f9c4 	bl	8012f88 <sin>
 800cc00:	ec51 0b10 	vmov	r0, r1, d0
 800cc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc06:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	00db      	lsls	r3, r3, #3
 800cc0e:	18d4      	adds	r4, r2, r3
 800cc10:	f7f4 f81a 	bl	8000c48 <__aeabi_d2f>
 800cc14:	4603      	mov	r3, r0
 800cc16:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc1e:	e7b9      	b.n	800cb94 <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 800cc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc22:	3308      	adds	r3, #8
 800cc24:	4619      	mov	r1, r3
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f7ff fede 	bl	800c9e8 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 800cc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 800cc32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc36:	601a      	str	r2, [r3, #0]
    }

    return st;
 800cc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3740      	adds	r7, #64	; 0x40
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bdb0      	pop	{r4, r5, r7, pc}
 800cc42:	bf00      	nop
 800cc44:	f3af 8000 	nop.w
 800cc48:	54442d18 	.word	0x54442d18
 800cc4c:	400921fb 	.word	0x400921fb
 800cc50:	54442d18 	.word	0x54442d18
 800cc54:	401921fb 	.word	0x401921fb
 800cc58:	54442d18 	.word	0x54442d18
 800cc5c:	c01921fb 	.word	0xc01921fb

0800cc60 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b088      	sub	sp, #32
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
 800cc6c:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d11d      	bne.n	800ccb2 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fbe3 	bl	800d448 <_Z9ei_mallocj>
 800cc82:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	3308      	adds	r3, #8
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	9201      	str	r2, [sp, #4]
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2201      	movs	r2, #1
 800cc92:	68b9      	ldr	r1, [r7, #8]
 800cc94:	6978      	ldr	r0, [r7, #20]
 800cc96:	f7ff fe0f 	bl	800c8b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	461a      	mov	r2, r3
 800cca2:	6979      	ldr	r1, [r7, #20]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f008 fe7d 	bl	80159a4 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 800ccaa:	6978      	ldr	r0, [r7, #20]
 800ccac:	f000 fbe6 	bl	800d47c <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 800ccb0:	e00a      	b.n	800ccc8 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	9201      	str	r2, [sp, #4]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fdf8 	bl	800c8b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 800ccc8:	bf00      	nop
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 800ccdc:	2301      	movs	r3, #1
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	68b9      	ldr	r1, [r7, #8]
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f7ff ffbc 	bl	800cc60 <kiss_fft_stride>
}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 800ccf0:	b5b0      	push	{r4, r5, r7, lr}
 800ccf2:	b090      	sub	sp, #64	; 0x40
 800ccf4:	af02      	add	r7, sp, #8
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 800cd02:	2300      	movs	r3, #0
 800cd04:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d009      	beq.n	800cd24 <kiss_fftr_alloc+0x34>
        fprintf(stderr,"Real FFT optimization must be even.\n");
 800cd10:	4b87      	ldr	r3, [pc, #540]	; (800cf30 <kiss_fftr_alloc+0x240>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	2224      	movs	r2, #36	; 0x24
 800cd18:	2101      	movs	r1, #1
 800cd1a:	4886      	ldr	r0, [pc, #536]	; (800cf34 <kiss_fftr_alloc+0x244>)
 800cd1c:	f008 fdfc 	bl	8015918 <fwrite>
        return NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	e0f9      	b.n	800cf18 <kiss_fftr_alloc+0x228>
    }
    nfft >>= 1;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	105b      	asrs	r3, r3, #1
 800cd28:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 800cd2a:	f107 0314 	add.w	r3, r7, #20
 800cd2e:	2200      	movs	r2, #0
 800cd30:	9200      	str	r2, [sp, #0]
 800cd32:	2200      	movs	r2, #0
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f7ff feb2 	bl	800caa0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4413      	add	r3, r2
 800cd44:	0fda      	lsrs	r2, r3, #31
 800cd46:	4413      	add	r3, r2
 800cd48:	105b      	asrs	r3, r3, #1
 800cd4a:	00da      	lsls	r2, r3, #3
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	4413      	add	r3, r2
 800cd50:	330c      	adds	r3, #12
 800cd52:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d104      	bne.n	800cd64 <kiss_fftr_alloc+0x74>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 800cd5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd5c:	f000 fb74 	bl	800d448 <_Z9ei_mallocj>
 800cd60:	6338      	str	r0, [r7, #48]	; 0x30
 800cd62:	e009      	b.n	800cd78 <kiss_fftr_alloc+0x88>
    } else {
        if (*lenmem >= memneeded)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d801      	bhi.n	800cd72 <kiss_fftr_alloc+0x82>
            st = (kiss_fftr_cfg) mem;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd76:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <kiss_fftr_alloc+0x92>
        return NULL;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e0ca      	b.n	800cf18 <kiss_fftr_alloc+0x228>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	f103 020c 	add.w	r2, r3, #12
 800cd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8a:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	441a      	add	r2, r3
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 800cd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	00db      	lsls	r3, r3, #3
 800cda0:	441a      	add	r2, r3
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	f107 0314 	add.w	r3, r7, #20
 800cdae:	2100      	movs	r1, #0
 800cdb0:	9100      	str	r1, [sp, #0]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f7ff fe73 	bl	800caa0 <kiss_fft_alloc>

    if (inverse_fft) {
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d052      	beq.n	800ce66 <kiss_fftr_alloc+0x176>
        for (i = 0; i < nfft/2; ++i) {
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	637b      	str	r3, [r7, #52]	; 0x34
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	0fda      	lsrs	r2, r3, #31
 800cdc8:	4413      	add	r3, r2
 800cdca:	105b      	asrs	r3, r3, #1
 800cdcc:	461a      	mov	r2, r3
 800cdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	f280 809a 	bge.w	800cf0a <kiss_fftr_alloc+0x21a>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd8:	3301      	adds	r3, #1
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7f3 fbd2 	bl	8000584 <__aeabi_i2d>
 800cde0:	4604      	mov	r4, r0
 800cde2:	460d      	mov	r5, r1
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f7f3 fbcd 	bl	8000584 <__aeabi_i2d>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4620      	mov	r0, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	f7f3 fd5b 	bl	80008ac <__aeabi_ddiv>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	f04f 0200 	mov.w	r2, #0
 800ce02:	4b4d      	ldr	r3, [pc, #308]	; (800cf38 <kiss_fftr_alloc+0x248>)
 800ce04:	f7f3 fa72 	bl	80002ec <__adddf3>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4619      	mov	r1, r3
            double phase =
 800ce10:	a343      	add	r3, pc, #268	; (adr r3, 800cf20 <kiss_fftr_alloc+0x230>)
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	f7f3 fc1f 	bl	8000658 <__aeabi_dmul>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 800ce22:	ed97 0b06 	vldr	d0, [r7, #24]
 800ce26:	f005 ff5f 	bl	8012ce8 <cos>
 800ce2a:	ec51 0b10 	vmov	r0, r1, d0
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	689a      	ldr	r2, [r3, #8]
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	00db      	lsls	r3, r3, #3
 800ce36:	18d4      	adds	r4, r2, r3
 800ce38:	f7f3 ff06 	bl	8000c48 <__aeabi_d2f>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	6023      	str	r3, [r4, #0]
 800ce40:	ed97 0b06 	vldr	d0, [r7, #24]
 800ce44:	f006 f8a0 	bl	8012f88 <sin>
 800ce48:	ec51 0b10 	vmov	r0, r1, d0
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4e:	689a      	ldr	r2, [r3, #8]
 800ce50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	18d4      	adds	r4, r2, r3
 800ce56:	f7f3 fef7 	bl	8000c48 <__aeabi_d2f>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce60:	3301      	adds	r3, #1
 800ce62:	637b      	str	r3, [r7, #52]	; 0x34
 800ce64:	e7ae      	b.n	800cdc4 <kiss_fftr_alloc+0xd4>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 800ce66:	2300      	movs	r3, #0
 800ce68:	637b      	str	r3, [r7, #52]	; 0x34
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	0fda      	lsrs	r2, r3, #31
 800ce6e:	4413      	add	r3, r2
 800ce70:	105b      	asrs	r3, r3, #1
 800ce72:	461a      	mov	r2, r3
 800ce74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce76:	4293      	cmp	r3, r2
 800ce78:	da47      	bge.n	800cf0a <kiss_fftr_alloc+0x21a>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800ce7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f3 fb80 	bl	8000584 <__aeabi_i2d>
 800ce84:	4604      	mov	r4, r0
 800ce86:	460d      	mov	r5, r1
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7f3 fb7b 	bl	8000584 <__aeabi_i2d>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4620      	mov	r0, r4
 800ce94:	4629      	mov	r1, r5
 800ce96:	f7f3 fd09 	bl	80008ac <__aeabi_ddiv>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4610      	mov	r0, r2
 800cea0:	4619      	mov	r1, r3
 800cea2:	f04f 0200 	mov.w	r2, #0
 800cea6:	4b24      	ldr	r3, [pc, #144]	; (800cf38 <kiss_fftr_alloc+0x248>)
 800cea8:	f7f3 fa20 	bl	80002ec <__adddf3>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4619      	mov	r1, r3
            double phase =
 800ceb4:	a31c      	add	r3, pc, #112	; (adr r3, 800cf28 <kiss_fftr_alloc+0x238>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 fbcd 	bl	8000658 <__aeabi_dmul>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 800cec6:	ed97 0b08 	vldr	d0, [r7, #32]
 800ceca:	f005 ff0d 	bl	8012ce8 <cos>
 800cece:	ec51 0b10 	vmov	r0, r1, d0
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	689a      	ldr	r2, [r3, #8]
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	00db      	lsls	r3, r3, #3
 800ceda:	18d4      	adds	r4, r2, r3
 800cedc:	f7f3 feb4 	bl	8000c48 <__aeabi_d2f>
 800cee0:	4603      	mov	r3, r0
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	ed97 0b08 	vldr	d0, [r7, #32]
 800cee8:	f006 f84e 	bl	8012f88 <sin>
 800ceec:	ec51 0b10 	vmov	r0, r1, d0
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	18d4      	adds	r4, r2, r3
 800cefa:	f7f3 fea5 	bl	8000c48 <__aeabi_d2f>
 800cefe:	4603      	mov	r3, r0
 800cf00:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 800cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf04:	3301      	adds	r3, #1
 800cf06:	637b      	str	r3, [r7, #52]	; 0x34
 800cf08:	e7af      	b.n	800ce6a <kiss_fftr_alloc+0x17a>
        }
    }

    if (memallocated != NULL) {
 800cf0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d002      	beq.n	800cf16 <kiss_fftr_alloc+0x226>
        *memallocated = memneeded;
 800cf10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf14:	601a      	str	r2, [r3, #0]
    }

    return st;
 800cf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3738      	adds	r7, #56	; 0x38
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bdb0      	pop	{r4, r5, r7, pc}
 800cf20:	54442d18 	.word	0x54442d18
 800cf24:	400921fb 	.word	0x400921fb
 800cf28:	54442d18 	.word	0x54442d18
 800cf2c:	c00921fb 	.word	0xc00921fb
 800cf30:	20000170 	.word	0x20000170
 800cf34:	0801ab3c 	.word	0x0801ab3c
 800cf38:	3fe00000 	.word	0x3fe00000

0800cf3c <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b092      	sub	sp, #72	; 0x48
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00a      	beq.n	800cf68 <kiss_fftr+0x2c>
        fprintf(stderr,"kiss fft usage error: improper alloc\n");
 800cf52:	4b8b      	ldr	r3, [pc, #556]	; (800d180 <kiss_fftr+0x244>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	2225      	movs	r2, #37	; 0x25
 800cf5a:	2101      	movs	r1, #1
 800cf5c:	4889      	ldr	r0, [pc, #548]	; (800d184 <kiss_fftr+0x248>)
 800cf5e:	f008 fcdb 	bl	8015918 <fwrite>
        exit(1);
 800cf62:	2001      	movs	r0, #1
 800cf64:	f008 fc52 	bl	801580c <exit>
    }

    ncfft = st->substate->nfft;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6818      	ldr	r0, [r3, #0]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	68b9      	ldr	r1, [r7, #8]
 800cf7c:	f7ff fea8 	bl	800ccd0 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 800cf90:	ed97 7a04 	vldr	s14, [r7, #16]
 800cf94:	edd7 7a05 	vldr	s15, [r7, #20]
 800cf98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 800cfa2:	ed97 7a04 	vldr	s14, [r7, #16]
 800cfa6:	edd7 7a05 	vldr	s15, [r7, #20]
 800cfaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfb6:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f04f 0200 	mov.w	r2, #0
 800cfc0:	605a      	str	r2, [r3, #4]
 800cfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	4413      	add	r3, r2
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	6852      	ldr	r2, [r2, #4]
 800cfce:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	647b      	str	r3, [r7, #68]	; 0x44
 800cfd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd6:	0fda      	lsrs	r2, r3, #31
 800cfd8:	4413      	add	r3, r2
 800cfda:	105b      	asrs	r3, r3, #1
 800cfdc:	461a      	mov	r2, r3
 800cfde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	f300 80c9 	bgt.w	800d178 <kiss_fftr+0x23c>
        fpk    = st->tmpbuf[k];
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	685a      	ldr	r2, [r3, #4]
 800cfea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	441a      	add	r2, r3
 800cff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cff8:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d004:	1acb      	subs	r3, r1, r3
 800d006:	00db      	lsls	r3, r3, #3
 800d008:	4413      	add	r3, r2
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	685a      	ldr	r2, [r3, #4]
 800d012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d016:	1acb      	subs	r3, r1, r3
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	4413      	add	r3, r2
 800d01c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d020:	eef1 7a67 	vneg.f32	s15, s15
 800d024:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 800d028:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d02c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d030:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d034:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800d038:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d03c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d040:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d044:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 800d048:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d04c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d050:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d054:	edc7 7a08 	vstr	s15, [r7, #32]
 800d058:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d05c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d060:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d064:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 800d068:	ed97 7a08 	vldr	s14, [r7, #32]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d072:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d076:	3b01      	subs	r3, #1
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	4413      	add	r3, r2
 800d07c:	edd3 7a00 	vldr	s15, [r3]
 800d080:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d084:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d08e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d092:	3b01      	subs	r3, #1
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	4413      	add	r3, r2
 800d098:	edd3 7a01 	vldr	s15, [r3, #4]
 800d09c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0a4:	edc7 7a06 	vstr	s15, [r7, #24]
 800d0a8:	ed97 7a08 	vldr	s14, [r7, #32]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	689a      	ldr	r2, [r3, #8]
 800d0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	4413      	add	r3, r2
 800d0bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800d0c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	689a      	ldr	r2, [r3, #8]
 800d0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	00db      	lsls	r3, r3, #3
 800d0d6:	4413      	add	r3, r2
 800d0d8:	edd3 7a00 	vldr	s15, [r3]
 800d0dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0e4:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 800d0e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0ec:	edd7 7a06 	vldr	s15, [r7, #24]
 800d0f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d100:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d104:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 800d108:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d10c:	edd7 7a07 	vldr	s15, [r7, #28]
 800d110:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	4413      	add	r3, r2
 800d11c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d120:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d124:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 800d128:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d12c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	4413      	add	r3, r2
 800d140:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d144:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d148:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 800d14c:	ed97 7a07 	vldr	s14, [r7, #28]
 800d150:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d154:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	4413      	add	r3, r2
 800d164:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d16c:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 800d170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d172:	3301      	adds	r3, #1
 800d174:	647b      	str	r3, [r7, #68]	; 0x44
 800d176:	e72d      	b.n	800cfd4 <kiss_fftr+0x98>
    }
}
 800d178:	bf00      	nop
 800d17a:	3748      	adds	r7, #72	; 0x48
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20000170 	.word	0x20000170
 800d184:	0801ab64 	.word	0x0801ab64

0800d188 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d192:	ed97 0a01 	vldr	s0, [r7, #4]
 800d196:	f006 f8c1 	bl	801331c <log10f>
 800d19a:	eef0 7a40 	vmov.f32	s15, s0
 800d19e:	eeb0 0a67 	vmov.f32	s0, s15
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	ed87 0b00 	vstr	d0, [r7]
 800d1b2:	683c      	ldr	r4, [r7, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	461e      	mov	r6, r3
 800d1be:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c2:	4b10      	ldr	r3, [pc, #64]	; (800d204 <_ZSt5isinfd+0x5c>)
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	f7f3 fce0 	bl	8000b8c <__aeabi_dcmpun>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10b      	bne.n	800d1ea <_ZSt5isinfd+0x42>
 800d1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d6:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <_ZSt5isinfd+0x5c>)
 800d1d8:	4620      	mov	r0, r4
 800d1da:	4629      	mov	r1, r5
 800d1dc:	f7f3 fcb8 	bl	8000b50 <__aeabi_dcmple>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <_ZSt5isinfd+0x42>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	461e      	mov	r6, r3
 800d1ea:	b2f3      	uxtb	r3, r6
 800d1ec:	f083 0301 	eor.w	r3, r3, #1
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	bf14      	ite	ne
 800d1f6:	2301      	movne	r3, #1
 800d1f8:	2300      	moveq	r3, #0
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	7fefffff 	.word	0x7fefffff

0800d208 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800d21c:	f7f9 fdd8 	bl	8006dd0 <HAL_GetTick>
 800d220:	4603      	mov	r3, r0
 800d222:	461a      	mov	r2, r3
 800d224:	f04f 0300 	mov.w	r3, #0
}
 800d228:	4610      	mov	r0, r2
 800d22a:	4619      	mov	r1, r3
 800d22c:	bd80      	pop	{r7, pc}
	...

0800d230 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 800d230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d232:	b08d      	sub	sp, #52	; 0x34
 800d234:	af00      	add	r7, sp, #0
 800d236:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 800d23a:	466b      	mov	r3, sp
 800d23c:	461e      	mov	r6, r3
    float n = f;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 800d242:	4b7d      	ldr	r3, [pc, #500]	; (800d438 <_Z15ei_printf_floatf+0x208>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	1e5c      	subs	r4, r3, #1
 800d248:	623c      	str	r4, [r7, #32]
 800d24a:	4623      	mov	r3, r4
 800d24c:	3301      	adds	r3, #1
 800d24e:	4618      	mov	r0, r3
 800d250:	f04f 0100 	mov.w	r1, #0
 800d254:	f04f 0200 	mov.w	r2, #0
 800d258:	f04f 0300 	mov.w	r3, #0
 800d25c:	00cb      	lsls	r3, r1, #3
 800d25e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d262:	00c2      	lsls	r2, r0, #3
 800d264:	4623      	mov	r3, r4
 800d266:	3301      	adds	r3, #1
 800d268:	4618      	mov	r0, r3
 800d26a:	f04f 0100 	mov.w	r1, #0
 800d26e:	f04f 0200 	mov.w	r2, #0
 800d272:	f04f 0300 	mov.w	r3, #0
 800d276:	00cb      	lsls	r3, r1, #3
 800d278:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d27c:	00c2      	lsls	r2, r0, #3
 800d27e:	4623      	mov	r3, r4
 800d280:	3301      	adds	r3, #1
 800d282:	3307      	adds	r3, #7
 800d284:	08db      	lsrs	r3, r3, #3
 800d286:	00db      	lsls	r3, r3, #3
 800d288:	ebad 0d03 	sub.w	sp, sp, r3
 800d28c:	466b      	mov	r3, sp
 800d28e:	3300      	adds	r3, #0
 800d290:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 800d292:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d296:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d29e:	d106      	bne.n	800d2ae <_Z15ei_printf_floatf+0x7e>
        strcpy(s, "0");
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	4966      	ldr	r1, [pc, #408]	; (800d43c <_Z15ei_printf_floatf+0x20c>)
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	881b      	ldrh	r3, [r3, #0]
 800d2aa:	8013      	strh	r3, [r2, #0]
 800d2ac:	e0b6      	b.n	800d41c <_Z15ei_printf_floatf+0x1ec>
        char *c = s;
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 800d2b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d2b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2be:	bf4c      	ite	mi
 800d2c0:	2301      	movmi	r3, #1
 800d2c2:	2300      	movpl	r3, #0
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	61bb      	str	r3, [r7, #24]
        if (neg) {
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d005      	beq.n	800d2da <_Z15ei_printf_floatf+0xaa>
            n = -n;
 800d2ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d2d2:	eef1 7a67 	vneg.f32	s15, s15
 800d2d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 800d2da:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800d2de:	f7ff ff53 	bl	800d188 <_ZSt5log10f>
 800d2e2:	eef0 7a40 	vmov.f32	s15, s0
 800d2e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2ea:	ee17 3a90 	vmov	r3, s15
 800d2ee:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d004      	beq.n	800d300 <_Z15ei_printf_floatf+0xd0>
            *(c++) = '-';
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d2fc:	222d      	movs	r2, #45	; 0x2d
 800d2fe:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	2b00      	cmp	r3, #0
 800d304:	dc01      	bgt.n	800d30a <_Z15ei_printf_floatf+0xda>
            m = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 800d30a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d30c:	f7f3 f94c 	bl	80005a8 <__aeabi_f2d>
 800d310:	4b4b      	ldr	r3, [pc, #300]	; (800d440 <_Z15ei_printf_floatf+0x210>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	2401      	movs	r4, #1
 800d318:	f7f3 fc2e 	bl	8000b78 <__aeabi_dcmpgt>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <_Z15ei_printf_floatf+0xf6>
 800d322:	2300      	movs	r3, #0
 800d324:	461c      	mov	r4, r3
 800d326:	b2e3      	uxtb	r3, r4
 800d328:	f083 0301 	eor.w	r3, r3, #1
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d002      	beq.n	800d338 <_Z15ei_printf_floatf+0x108>
 800d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d334:	2b00      	cmp	r3, #0
 800d336:	db6e      	blt.n	800d416 <_Z15ei_printf_floatf+0x1e6>
            double weight = pow(10.0, m);
 800d338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d33a:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 800d430 <_Z15ei_printf_floatf+0x200>
 800d33e:	f000 f8a8 	bl	800d492 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800d342:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 800d346:	f04f 0200 	mov.w	r2, #0
 800d34a:	f04f 0300 	mov.w	r3, #0
 800d34e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d352:	f7f3 fc11 	bl	8000b78 <__aeabi_dcmpgt>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00b      	beq.n	800d374 <_Z15ei_printf_floatf+0x144>
 800d35c:	ed97 0b04 	vldr	d0, [r7, #16]
 800d360:	f7ff ff22 	bl	800d1a8 <_ZSt5isinfd>
 800d364:	4603      	mov	r3, r0
 800d366:	f083 0301 	eor.w	r3, r3, #1
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <_Z15ei_printf_floatf+0x144>
 800d370:	2301      	movs	r3, #1
 800d372:	e000      	b.n	800d376 <_Z15ei_printf_floatf+0x146>
 800d374:	2300      	movs	r3, #0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d03a      	beq.n	800d3f0 <_Z15ei_printf_floatf+0x1c0>
                digit = floor(n / weight);
 800d37a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d37c:	f7f3 f914 	bl	80005a8 <__aeabi_f2d>
 800d380:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d384:	f7f3 fa92 	bl	80008ac <__aeabi_ddiv>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	ec43 2b17 	vmov	d7, r2, r3
 800d390:	eeb0 0a47 	vmov.f32	s0, s14
 800d394:	eef0 0a67 	vmov.f32	s1, s15
 800d398:	f005 fcf6 	bl	8012d88 <floor>
 800d39c:	ec53 2b10 	vmov	r2, r3, d0
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	f7f3 fc08 	bl	8000bb8 <__aeabi_d2iz>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 800d3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ae:	f7f3 f8fb 	bl	80005a8 <__aeabi_f2d>
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	460d      	mov	r5, r1
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f7f3 f8e4 	bl	8000584 <__aeabi_i2d>
 800d3bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d3c0:	f7f3 f94a 	bl	8000658 <__aeabi_dmul>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	f7f2 ff8c 	bl	80002e8 <__aeabi_dsub>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	f7f3 fc36 	bl	8000c48 <__aeabi_d2f>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	1c59      	adds	r1, r3, #1
 800d3e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d3ea:	3230      	adds	r2, #48	; 0x30
 800d3ec:	b2d2      	uxtb	r2, r2
 800d3ee:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10b      	bne.n	800d40e <_Z15ei_printf_floatf+0x1de>
 800d3f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d3fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	dd04      	ble.n	800d40e <_Z15ei_printf_floatf+0x1de>
                *(c++) = '.';
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d40a:	222e      	movs	r2, #46	; 0x2e
 800d40c:	701a      	strb	r2, [r3, #0]
            m--;
 800d40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d410:	3b01      	subs	r3, #1
 800d412:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 800d414:	e779      	b.n	800d30a <_Z15ei_printf_floatf+0xda>
        *(c) = '\0';
 800d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d418:	2200      	movs	r2, #0
 800d41a:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	4619      	mov	r1, r3
 800d420:	4808      	ldr	r0, [pc, #32]	; (800d444 <_Z15ei_printf_floatf+0x214>)
 800d422:	f7f6 fe6d 	bl	8004100 <_Z9ei_printfPKcz>
 800d426:	46b5      	mov	sp, r6
}
 800d428:	bf00      	nop
 800d42a:	3734      	adds	r7, #52	; 0x34
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d430:	00000000 	.word	0x00000000
 800d434:	40240000 	.word	0x40240000
 800d438:	20000078 	.word	0x20000078
 800d43c:	0801ab8c 	.word	0x0801ab8c
 800d440:	20000070 	.word	0x20000070
 800d444:	0801ab90 	.word	0x0801ab90

0800d448 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f008 fa97 	bl	8015984 <malloc>
 800d456:	4603      	mov	r3, r0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 800d46a:	6839      	ldr	r1, [r7, #0]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f008 f9bf 	bl	80157f0 <calloc>
 800d472:	4603      	mov	r3, r0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
    free(ptr);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f008 fa85 	bl	8015994 <free>
}
 800d48a:	bf00      	nop
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	ed87 0b02 	vstr	d0, [r7, #8]
 800d49c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7f3 f870 	bl	8000584 <__aeabi_i2d>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	ec43 2b11 	vmov	d1, r2, r3
 800d4ac:	ed97 0b02 	vldr	d0, [r7, #8]
 800d4b0:	f005 fe14 	bl	80130dc <pow>
 800d4b4:	eeb0 7a40 	vmov.f32	s14, s0
 800d4b8:	eef0 7a60 	vmov.f32	s15, s1
    }
 800d4bc:	eeb0 0a47 	vmov.f32	s0, s14
 800d4c0:	eef0 0a67 	vmov.f32	s1, s15
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
	...

0800d4cc <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	2b0b      	cmp	r3, #11
 800d4da:	d833      	bhi.n	800d544 <TfLiteTypeGetName+0x78>
 800d4dc:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <TfLiteTypeGetName+0x18>)
 800d4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e2:	bf00      	nop
 800d4e4:	0800d515 	.word	0x0800d515
 800d4e8:	0800d519 	.word	0x0800d519
 800d4ec:	0800d521 	.word	0x0800d521
 800d4f0:	0800d525 	.word	0x0800d525
 800d4f4:	0800d52d 	.word	0x0800d52d
 800d4f8:	0800d539 	.word	0x0800d539
 800d4fc:	0800d531 	.word	0x0800d531
 800d500:	0800d51d 	.word	0x0800d51d
 800d504:	0800d535 	.word	0x0800d535
 800d508:	0800d529 	.word	0x0800d529
 800d50c:	0800d53d 	.word	0x0800d53d
 800d510:	0800d541 	.word	0x0800d541
    case kTfLiteNoType:
      return "NOTYPE";
 800d514:	4b0f      	ldr	r3, [pc, #60]	; (800d554 <TfLiteTypeGetName+0x88>)
 800d516:	e016      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800d518:	4b0f      	ldr	r3, [pc, #60]	; (800d558 <TfLiteTypeGetName+0x8c>)
 800d51a:	e014      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 800d51c:	4b0f      	ldr	r3, [pc, #60]	; (800d55c <TfLiteTypeGetName+0x90>)
 800d51e:	e012      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 800d520:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <TfLiteTypeGetName+0x94>)
 800d522:	e010      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 800d524:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <TfLiteTypeGetName+0x98>)
 800d526:	e00e      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 800d528:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <TfLiteTypeGetName+0x9c>)
 800d52a:	e00c      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 800d52c:	4b0f      	ldr	r3, [pc, #60]	; (800d56c <TfLiteTypeGetName+0xa0>)
 800d52e:	e00a      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 800d530:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <TfLiteTypeGetName+0xa4>)
 800d532:	e008      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800d534:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <TfLiteTypeGetName+0xa8>)
 800d536:	e006      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 800d538:	4b0f      	ldr	r3, [pc, #60]	; (800d578 <TfLiteTypeGetName+0xac>)
 800d53a:	e004      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 800d53c:	4b0f      	ldr	r3, [pc, #60]	; (800d57c <TfLiteTypeGetName+0xb0>)
 800d53e:	e002      	b.n	800d546 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800d540:	4b0f      	ldr	r3, [pc, #60]	; (800d580 <TfLiteTypeGetName+0xb4>)
 800d542:	e000      	b.n	800d546 <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 800d544:	4b0f      	ldr	r3, [pc, #60]	; (800d584 <TfLiteTypeGetName+0xb8>)
}
 800d546:	4618      	mov	r0, r3
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	0801ab94 	.word	0x0801ab94
 800d558:	0801ab9c 	.word	0x0801ab9c
 800d55c:	0801aba4 	.word	0x0801aba4
 800d560:	0801abac 	.word	0x0801abac
 800d564:	0801abb4 	.word	0x0801abb4
 800d568:	0801abbc 	.word	0x0801abbc
 800d56c:	0801abc4 	.word	0x0801abc4
 800d570:	0801abcc 	.word	0x0801abcc
 800d574:	0801abd4 	.word	0x0801abd4
 800d578:	0801abe0 	.word	0x0801abe0
 800d57c:	0801abe8 	.word	0x0801abe8
 800d580:	0801abf0 	.word	0x0801abf0
 800d584:	0801abf8 	.word	0x0801abf8

0800d588 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800d588:	b480      	push	{r7}
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d590:	4618      	mov	r0, r3
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
	...

0800d59c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800d59c:	b5b0      	push	{r4, r5, r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	ed87 0b02 	vstr	d0, [r7, #8]
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800d5aa:	f04f 0200 	mov.w	r2, #0
 800d5ae:	f04f 0300 	mov.w	r3, #0
 800d5b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d5b6:	f7f3 fab7 	bl	8000b28 <__aeabi_dcmpeq>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d006      	beq.n	800d5ce <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
    return;
 800d5cc:	e06b      	b.n	800d6a6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800d5ce:	6838      	ldr	r0, [r7, #0]
 800d5d0:	ed97 0b02 	vldr	d0, [r7, #8]
 800d5d4:	f005 fc58 	bl	8012e88 <frexp>
 800d5d8:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	4b32      	ldr	r3, [pc, #200]	; (800d6ac <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800d5e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d5e6:	f7f3 f837 	bl	8000658 <__aeabi_dmul>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	ec43 2b17 	vmov	d7, r2, r3
 800d5f2:	eeb0 0a47 	vmov.f32	s0, s14
 800d5f6:	eef0 0a67 	vmov.f32	s1, s15
 800d5fa:	f000 f97a 	bl	800d8f2 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800d5fe:	ec53 2b10 	vmov	r2, r3, d0
 800d602:	4610      	mov	r0, r2
 800d604:	4619      	mov	r1, r3
 800d606:	f7f3 fb87 	bl	8000d18 <__aeabi_d2lz>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800d612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d616:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d61a:	f04f 0100 	mov.w	r1, #0
 800d61e:	4290      	cmp	r0, r2
 800d620:	eb71 0303 	sbcs.w	r3, r1, r3
 800d624:	da01      	bge.n	800d62a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800d626:	f008 f8b9 	bl	801579c <abort>
  if (q_fixed == (1ll << 31)) {
 800d62a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	bf08      	it	eq
 800d632:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800d636:	d117      	bne.n	800d668 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800d638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d63c:	0fd9      	lsrs	r1, r3, #31
 800d63e:	4608      	mov	r0, r1
 800d640:	f04f 0100 	mov.w	r1, #0
 800d644:	1884      	adds	r4, r0, r2
 800d646:	eb41 0503 	adc.w	r5, r1, r3
 800d64a:	f04f 0200 	mov.w	r2, #0
 800d64e:	f04f 0300 	mov.w	r3, #0
 800d652:	0862      	lsrs	r2, r4, #1
 800d654:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800d658:	106b      	asrs	r3, r5, #1
 800d65a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800d668:	f7ff ff8e 	bl	800d588 <_ZNSt14numeric_limitsIlE3maxEv>
 800d66c:	4603      	mov	r3, r0
 800d66e:	4618      	mov	r0, r3
 800d670:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d678:	4290      	cmp	r0, r2
 800d67a:	eb71 0303 	sbcs.w	r3, r1, r3
 800d67e:	da01      	bge.n	800d684 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800d680:	f008 f88c 	bl	801579c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f113 0f1f 	cmn.w	r3, #31
 800d68c:	da08      	bge.n	800d6a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2200      	movs	r2, #0
 800d692:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800d694:	f04f 0200 	mov.w	r2, #0
 800d698:	f04f 0300 	mov.w	r3, #0
 800d69c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800d6a0:	69ba      	ldr	r2, [r7, #24]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	601a      	str	r2, [r3, #0]
}
 800d6a6:	3720      	adds	r7, #32
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bdb0      	pop	{r4, r5, r7, pc}
 800d6ac:	41e00000 	.word	0x41e00000

0800d6b0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	ed87 0b02 	vstr	d0, [r7, #8]
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800d6be:	f04f 0200 	mov.w	r2, #0
 800d6c2:	4b0d      	ldr	r3, [pc, #52]	; (800d6f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800d6c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d6c8:	f7f3 fa56 	bl	8000b78 <__aeabi_dcmpgt>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d101      	bne.n	800d6d6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800d6d2:	f008 f863 	bl	801579c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	ed97 0b02 	vldr	d0, [r7, #8]
 800d6de:	f7ff ff5d 	bl	800d59c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	da01      	bge.n	800d6ee <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800d6ea:	f008 f857 	bl	801579c <abort>
}
 800d6ee:	bf00      	nop
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	3ff00000 	.word	0x3ff00000

0800d6fc <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f7f3 fa13 	bl	8000b3c <__aeabi_dcmplt>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d001      	beq.n	800d720 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	e000      	b.n	800d722 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800d720:	687b      	ldr	r3, [r7, #4]
    }
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	0000      	movs	r0, r0
 800d72c:	0000      	movs	r0, r0
	...

0800d730 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800d730:	b5b0      	push	{r4, r5, r7, lr}
 800d732:	b08e      	sub	sp, #56	; 0x38
 800d734:	af00      	add	r7, sp, #0
 800d736:	ed87 0b06 	vstr	d0, [r7, #24]
 800d73a:	ed87 1b04 	vstr	d1, [r7, #16]
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  // Patched by Edge Impulse, cast double to std::min/std::max calls
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800d744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d748:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d74c:	f7f2 ff84 	bl	8000658 <__aeabi_dmul>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4614      	mov	r4, r2
 800d756:	461d      	mov	r5, r3
 800d758:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	fa22 f303 	lsr.w	r3, r2, r3
 800d762:	4618      	mov	r0, r3
 800d764:	f7f2 ff0e 	bl	8000584 <__aeabi_i2d>
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	4620      	mov	r0, r4
 800d76e:	4629      	mov	r1, r5
 800d770:	f7f2 ff72 	bl	8000658 <__aeabi_dmul>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800d77c:	a30e      	add	r3, pc, #56	; (adr r3, 800d7b8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d782:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d78a:	f107 0320 	add.w	r3, r7, #32
 800d78e:	4611      	mov	r1, r2
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff ffb3 	bl	800d6fc <_ZSt3minIdERKT_S2_S2_>
 800d796:	4603      	mov	r3, r0
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800d7a0:	6879      	ldr	r1, [r7, #4]
 800d7a2:	68b8      	ldr	r0, [r7, #8]
 800d7a4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800d7a8:	f7ff ff82 	bl	800d6b0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800d7ac:	bf00      	nop
 800d7ae:	3738      	adds	r7, #56	; 0x38
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bdb0      	pop	{r4, r5, r7, pc}
 800d7b4:	f3af 8000 	nop.w
 800d7b8:	ffc00000 	.word	0xffc00000
 800d7bc:	41dfffff 	.word	0x41dfffff

0800d7c0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	b087      	sub	sp, #28
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	60f8      	str	r0, [r7, #12]
 800d7ca:	60b9      	str	r1, [r7, #8]
 800d7cc:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7f2 fed3 	bl	8000584 <__aeabi_i2d>
 800d7de:	4682      	mov	sl, r0
 800d7e0:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	1ad1      	subs	r1, r2, r3
 800d7e8:	f04f 0201 	mov.w	r2, #1
 800d7ec:	f04f 0300 	mov.w	r3, #0
 800d7f0:	f1a1 0620 	sub.w	r6, r1, #32
 800d7f4:	f1c1 0020 	rsb	r0, r1, #32
 800d7f8:	fa03 f901 	lsl.w	r9, r3, r1
 800d7fc:	fa02 f606 	lsl.w	r6, r2, r6
 800d800:	ea49 0906 	orr.w	r9, r9, r6
 800d804:	fa22 f000 	lsr.w	r0, r2, r0
 800d808:	ea49 0900 	orr.w	r9, r9, r0
 800d80c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800d810:	4640      	mov	r0, r8
 800d812:	4649      	mov	r1, r9
 800d814:	f7f2 fef2 	bl	80005fc <__aeabi_l2d>
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	4650      	mov	r0, sl
 800d81e:	4659      	mov	r1, fp
 800d820:	f7f2 ff1a 	bl	8000658 <__aeabi_dmul>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	4690      	mov	r8, r2
 800d82a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800d82c:	f04f 0201 	mov.w	r2, #1
 800d830:	f04f 0300 	mov.w	r3, #0
 800d834:	68b9      	ldr	r1, [r7, #8]
 800d836:	f1a1 0620 	sub.w	r6, r1, #32
 800d83a:	f1c1 0020 	rsb	r0, r1, #32
 800d83e:	fa03 f501 	lsl.w	r5, r3, r1
 800d842:	fa02 f606 	lsl.w	r6, r2, r6
 800d846:	4335      	orrs	r5, r6
 800d848:	fa22 f000 	lsr.w	r0, r2, r0
 800d84c:	4305      	orrs	r5, r0
 800d84e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800d852:	4620      	mov	r0, r4
 800d854:	4629      	mov	r1, r5
 800d856:	f7f2 fed1 	bl	80005fc <__aeabi_l2d>
 800d85a:	4602      	mov	r2, r0
 800d85c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800d85e:	4640      	mov	r0, r8
 800d860:	4649      	mov	r1, r9
 800d862:	f7f3 f823 	bl	80008ac <__aeabi_ddiv>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800d86e:	ed97 0b04 	vldr	d0, [r7, #16]
 800d872:	f005 fa89 	bl	8012d88 <floor>
 800d876:	ec53 2b10 	vmov	r2, r3, d0
 800d87a:	4610      	mov	r0, r2
 800d87c:	4619      	mov	r1, r3
 800d87e:	f7f3 f99b 	bl	8000bb8 <__aeabi_d2iz>
 800d882:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800d884:	4618      	mov	r0, r3
 800d886:	371c      	adds	r7, #28
 800d888:	46bd      	mov	sp, r7
 800d88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d88e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	ed93 7a00 	vldr	s14, [r3]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	edd3 7a00 	vldr	s15, [r3]
 800d8a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	d501      	bpl.n	800d8b2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	e000      	b.n	800d8b4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800d8b2:	687b      	ldr	r3, [r7, #4]
    }
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	ed93 7a00 	vldr	s14, [r3]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	edd3 7a00 	vldr	s15, [r3]
 800d8d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8de:	d501      	bpl.n	800d8e4 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	e000      	b.n	800d8e6 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800d8e4:	687b      	ldr	r3, [r7, #4]
    }
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	370c      	adds	r7, #12
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	ed87 0b00 	vstr	d0, [r7]
 800d8fc:	ed97 0b00 	vldr	d0, [r7]
 800d900:	f005 fafa 	bl	8012ef8 <round>
 800d904:	eeb0 7a40 	vmov.f32	s14, s0
 800d908:	eef0 7a60 	vmov.f32	s15, s1
 800d90c:	eeb0 0a47 	vmov.f32	s0, s14
 800d910:	eef0 0a67 	vmov.f32	s1, s15
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	ed87 0a01 	vstr	s0, [r7, #4]
 800d924:	ed97 0a01 	vldr	s0, [r7, #4]
 800d928:	f7f3 fbc0 	bl	80010ac <_ZSt5roundf>
 800d92c:	eef0 7a40 	vmov.f32	s15, s0
 800d930:	eeb0 0a67 	vmov.f32	s0, s15
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800d93a:	b480      	push	{r7}
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800d942:	4618      	mov	r0, r3
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800d94c:	b480      	push	{r7}
 800d94e:	af00      	add	r7, sp, #0
 800d950:	237f      	movs	r3, #127	; 0x7f
 800d952:	4618      	mov	r0, r3
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800d95c:	b480      	push	{r7}
 800d95e:	af00      	add	r7, sp, #0
 800d960:	2300      	movs	r3, #0
 800d962:	4618      	mov	r0, r3
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800d96c:	b480      	push	{r7}
 800d96e:	af00      	add	r7, sp, #0
 800d970:	23ff      	movs	r3, #255	; 0xff
 800d972:	4618      	mov	r0, r3
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 800d996:	b480      	push	{r7}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	ed87 0b00 	vstr	d0, [r7]
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	6879      	ldr	r1, [r7, #4]
 800d9a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9a8:	ec43 2b17 	vmov	d7, r2, r3
 800d9ac:	eeb0 0a47 	vmov.f32	s0, s14
 800d9b0:	eef0 0a67 	vmov.f32	s1, s15
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
	...

0800d9c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800d9c0:	b5b0      	push	{r4, r5, r7, lr}
 800d9c2:	b08e      	sub	sp, #56	; 0x38
 800d9c4:	af02      	add	r7, sp, #8
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
 800d9cc:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f2 fde8 	bl	80005a8 <__aeabi_f2d>
 800d9d8:	4604      	mov	r4, r0
 800d9da:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7f2 fde1 	bl	80005a8 <__aeabi_f2d>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	f7f2 fe33 	bl	8000658 <__aeabi_dmul>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d04a      	beq.n	800da96 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	4618      	mov	r0, r3
 800da06:	f7f2 fdcf 	bl	80005a8 <__aeabi_f2d>
 800da0a:	4602      	mov	r2, r0
 800da0c:	460b      	mov	r3, r1
 800da0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800da12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800da16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800da1a:	f7f2 fc65 	bl	80002e8 <__aeabi_dsub>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	ec43 2b17 	vmov	d7, r2, r3
 800da26:	eeb0 0a47 	vmov.f32	s0, s14
 800da2a:	eef0 0a67 	vmov.f32	s1, s15
 800da2e:	f7ff ffb2 	bl	800d996 <_ZSt3absd>
 800da32:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800da36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7f2 fdb4 	bl	80005a8 <__aeabi_f2d>
 800da40:	4602      	mov	r2, r0
 800da42:	460b      	mov	r3, r1
 800da44:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800da48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da50:	f7f2 ff2c 	bl	80008ac <__aeabi_ddiv>
 800da54:	4602      	mov	r2, r0
 800da56:	460b      	mov	r3, r1
 800da58:	4610      	mov	r0, r2
 800da5a:	4619      	mov	r1, r3
 800da5c:	2301      	movs	r3, #1
 800da5e:	461c      	mov	r4, r3
 800da60:	a318      	add	r3, pc, #96	; (adr r3, 800dac4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	f7f3 f873 	bl	8000b50 <__aeabi_dcmple>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800da70:	2300      	movs	r3, #0
 800da72:	461c      	mov	r4, r3
 800da74:	b2e3      	uxtb	r3, r4
 800da76:	f083 0301 	eor.w	r3, r3, #1
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00a      	beq.n	800da96 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	695c      	ldr	r4, [r3, #20]
 800da84:	4b0c      	ldr	r3, [pc, #48]	; (800dab8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	239a      	movs	r3, #154	; 0x9a
 800da8a:	4a0c      	ldr	r2, [pc, #48]	; (800dabc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800da8c:	490c      	ldr	r1, [pc, #48]	; (800dac0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	47a0      	blx	r4
 800da92:	2301      	movs	r3, #1
 800da94:	e009      	b.n	800daaa <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800da96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 f813 	bl	800dacc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800daa6:	4603      	mov	r3, r0
                                          multiplier);
 800daa8:	bf00      	nop
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3730      	adds	r7, #48	; 0x30
 800daae:	46bd      	mov	sp, r7
 800dab0:	bdb0      	pop	{r4, r5, r7, pc}
 800dab2:	bf00      	nop
 800dab4:	f3af 8000 	nop.w
 800dab8:	0801ae1c 	.word	0x0801ae1c
 800dabc:	0801ac08 	.word	0x0801ac08
 800dac0:	0801ad08 	.word	0x0801ad08
 800dac4:	47ae147b 	.word	0x47ae147b
 800dac8:	3f947ae1 	.word	0x3f947ae1

0800dacc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800dacc:	b590      	push	{r4, r7, lr}
 800dace:	b089      	sub	sp, #36	; 0x24
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
 800dad8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	ed93 7a03 	vldr	s14, [r3, #12]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	edd3 7a03 	vldr	s15, [r3, #12]
 800dae6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800daea:	ee17 0a90 	vmov	r0, s15
 800daee:	f7f2 fd5b 	bl	80005a8 <__aeabi_f2d>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800dafa:	2301      	movs	r3, #1
 800dafc:	461c      	mov	r4, r3
 800dafe:	f04f 0200 	mov.w	r2, #0
 800db02:	f04f 0300 	mov.w	r3, #0
 800db06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800db0a:	f7f3 f82b 	bl	8000b64 <__aeabi_dcmpge>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d101      	bne.n	800db18 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800db14:	2300      	movs	r3, #0
 800db16:	461c      	mov	r4, r3
 800db18:	b2e3      	uxtb	r3, r4
 800db1a:	f083 0301 	eor.w	r3, r3, #1
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00a      	beq.n	800db3a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	695c      	ldr	r4, [r3, #20]
 800db28:	4b0e      	ldr	r3, [pc, #56]	; (800db64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	23a7      	movs	r3, #167	; 0xa7
 800db2e:	4a0e      	ldr	r2, [pc, #56]	; (800db68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800db30:	490e      	ldr	r1, [pc, #56]	; (800db6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	47a0      	blx	r4
 800db36:	2301      	movs	r3, #1
 800db38:	e010      	b.n	800db5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	4618      	mov	r0, r3
 800db40:	f7f2 fd32 	bl	80005a8 <__aeabi_f2d>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800db4c:	f7f2 feae 	bl	80008ac <__aeabi_ddiv>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db56:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	371c      	adds	r7, #28
 800db60:	46bd      	mov	sp, r7
 800db62:	bd90      	pop	{r4, r7, pc}
 800db64:	0801ae40 	.word	0x0801ae40
 800db68:	0801ac08 	.word	0x0801ac08
 800db6c:	0801ad08 	.word	0x0801ad08

0800db70 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	ed87 0a00 	vstr	s0, [r7]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800db82:	ed97 7a00 	vldr	s14, [r7]
 800db86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800db8a:	eeb0 0a66 	vmov.f32	s0, s13
 800db8e:	f7ff fec4 	bl	800d91a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800db92:	eef0 7a40 	vmov.f32	s15, s0
 800db96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db9a:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800dba2:	4413      	add	r3, r2
  };
 800dba4:	4618      	mov	r0, r3
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b08e      	sub	sp, #56	; 0x38
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60b9      	str	r1, [r7, #8]
 800dbb4:	607a      	str	r2, [r7, #4]
 800dbb6:	603b      	str	r3, [r7, #0]
 800dbb8:	4603      	mov	r3, r0
 800dbba:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800dbc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbca:	617b      	str	r3, [r7, #20]
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d118      	bne.n	800dc08 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800dbd6:	f107 0314 	add.w	r3, r7, #20
 800dbda:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800dcd0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff ffc6 	bl	800db70 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	61fb      	str	r3, [r7, #28]
 800dbe8:	f107 021c 	add.w	r2, r7, #28
 800dbec:	f107 0308 	add.w	r3, r7, #8
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f8c2 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbfe:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc04:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800dc06:	e05f      	b.n	800dcc8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
 800dc0a:	2b03      	cmp	r3, #3
 800dc0c:	d129      	bne.n	800dc62 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800dc0e:	f107 0314 	add.w	r3, r7, #20
 800dc12:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800dcd0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff ffaa 	bl	800db70 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	623b      	str	r3, [r7, #32]
 800dc20:	f107 0220 	add.w	r2, r7, #32
 800dc24:	f107 0308 	add.w	r3, r7, #8
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 f8a6 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 800dc30:	4603      	mov	r3, r0
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc36:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 800dc38:	f107 0314 	add.w	r3, r7, #20
 800dc3c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff ff95 	bl	800db70 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800dc46:	4603      	mov	r3, r0
 800dc48:	627b      	str	r3, [r7, #36]	; 0x24
 800dc4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dc4e:	1d3b      	adds	r3, r7, #4
 800dc50:	4611      	mov	r1, r2
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 f8a6 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc5e:	601a      	str	r2, [r3, #0]
}
 800dc60:	e032      	b.n	800dcc8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d129      	bne.n	800dcbc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800dc68:	f107 0314 	add.w	r3, r7, #20
 800dc6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff ff7d 	bl	800db70 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800dc76:	4603      	mov	r3, r0
 800dc78:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800dc7e:	f107 0308 	add.w	r3, r7, #8
 800dc82:	4611      	mov	r1, r2
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 f879 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc90:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800dc92:	f107 0314 	add.w	r3, r7, #20
 800dc96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7ff ff68 	bl	800db70 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800dca0:	4603      	mov	r3, r0
 800dca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dca4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dca8:	1d3b      	adds	r3, r7, #4
 800dcaa:	4611      	mov	r1, r2
 800dcac:	4618      	mov	r0, r3
 800dcae:	f000 f879 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcb8:	601a      	str	r2, [r3, #0]
}
 800dcba:	e005      	b.n	800dcc8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcc0:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcc6:	601a      	str	r2, [r3, #0]
}
 800dcc8:	bf00      	nop
 800dcca:	3738      	adds	r7, #56	; 0x38
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	00000000 	.word	0x00000000

0800dcd4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800dcd4:	b590      	push	{r4, r7, lr}
 800dcd6:	b089      	sub	sp, #36	; 0x24
 800dcd8:	af02      	add	r7, sp, #8
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	607a      	str	r2, [r7, #4]
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	460b      	mov	r3, r1
 800dce2:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800dce8:	2300      	movs	r3, #0
 800dcea:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b03      	cmp	r3, #3
 800dcf2:	d108      	bne.n	800dd06 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800dcf4:	f7ff fe32 	bl	800d95c <_ZNSt14numeric_limitsIhE3minEv>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800dcfc:	f7ff fe36 	bl	800d96c <_ZNSt14numeric_limitsIhE3maxEv>
 800dd00:	4603      	mov	r3, r0
 800dd02:	613b      	str	r3, [r7, #16]
 800dd04:	e024      	b.n	800dd50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b09      	cmp	r3, #9
 800dd0c:	d108      	bne.n	800dd20 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800dd0e:	f7ff fe14 	bl	800d93a <_ZNSt14numeric_limitsIaE3minEv>
 800dd12:	4603      	mov	r3, r0
 800dd14:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800dd16:	f7ff fe19 	bl	800d94c <_ZNSt14numeric_limitsIaE3maxEv>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	613b      	str	r3, [r7, #16]
 800dd1e:	e017      	b.n	800dd50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b07      	cmp	r3, #7
 800dd26:	d108      	bne.n	800dd3a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800dd28:	f7f3 fa9c 	bl	8001264 <_ZNSt14numeric_limitsIsE3minEv>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800dd30:	f7f3 faa2 	bl	8001278 <_ZNSt14numeric_limitsIsE3maxEv>
 800dd34:	4603      	mov	r3, r0
 800dd36:	613b      	str	r3, [r7, #16]
 800dd38:	e00a      	b.n	800dd50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	695c      	ldr	r4, [r3, #20]
 800dd3e:	4b0c      	ldr	r3, [pc, #48]	; (800dd70 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	23da      	movs	r3, #218	; 0xda
 800dd44:	4a0b      	ldr	r2, [pc, #44]	; (800dd74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 800dd46:	490c      	ldr	r1, [pc, #48]	; (800dd78 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	47a0      	blx	r4
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e00a      	b.n	800dd66 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800dd50:	7af8      	ldrb	r0, [r7, #11]
 800dd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd54:	9301      	str	r3, [sp, #4]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	693a      	ldr	r2, [r7, #16]
 800dd5e:	6979      	ldr	r1, [r7, #20]
 800dd60:	f7ff ff24 	bl	800dbac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	371c      	adds	r7, #28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd90      	pop	{r4, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	0801ae5c 	.word	0x0801ae5c
 800dd74:	0801ac08 	.word	0x0801ac08
 800dd78:	0801ad08 	.word	0x0801ad08

0800dd7c <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	da01      	bge.n	800dd96 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	e000      	b.n	800dd98 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800dd96:	687b      	ldr	r3, [r7, #4]
    }
 800dd98:	4618      	mov	r0, r3
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	da01      	bge.n	800ddbe <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	e000      	b.n	800ddc0 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800ddbe:	687b      	ldr	r3, [r7, #4]
    }
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
 800ddcc:	b480      	push	{r7}
 800ddce:	b085      	sub	sp, #20
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	689a      	ldr	r2, [r3, #8]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	6819      	ldr	r1, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	440b      	add	r3, r1
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	019b      	lsls	r3, r3, #6
 800ddea:	4413      	add	r3, r2
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3714      	adds	r7, #20
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                                      const TfLiteNode* node, int index) {
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	689a      	ldr	r2, [r3, #8]
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	6859      	ldr	r1, [r3, #4]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	440b      	add	r3, r1
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	019b      	lsls	r3, r3, #6
 800de16:	4413      	add	r3, r2
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d002      	beq.n	800de38 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800de36:	e000      	b.n	800de3a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800de46:	b480      	push	{r7}
 800de48:	b083      	sub	sp, #12
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	e000      	b.n	800de5c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4618      	mov	r0, r3
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	68b9      	ldr	r1, [r7, #8]
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f000 f89e 	bl	800dfdc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	4618      	mov	r0, r3
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b05      	cmp	r3, #5
 800deb8:	dd08      	ble.n	800decc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d004      	beq.n	800decc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f004 feea 	bl	8012ca0 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4618      	mov	r0, r3
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800deee:	b580      	push	{r7, lr}
 800def0:	b082      	sub	sp, #8
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	da01      	bge.n	800df02 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800defe:	f007 fc4d 	bl	801579c <abort>
    TFLITE_DCHECK_LT(i, size_);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	429a      	cmp	r2, r3
 800df0a:	db01      	blt.n	800df10 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800df0c:	f007 fc46 	bl	801579c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b05      	cmp	r3, #5
 800df16:	dd06      	ble.n	800df26 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	e004      	b.n	800df30 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	685b      	ldr	r3, [r3, #4]
  }
 800df30:	4618      	mov	r0, r3
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b05      	cmp	r3, #5
 800df46:	dd02      	ble.n	800df4e <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	e001      	b.n	800df52 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3304      	adds	r3, #4
  }
 800df52:	4618      	mov	r0, r3
 800df54:	370c      	adds	r7, #12
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800df5e:	b480      	push	{r7}
 800df60:	b083      	sub	sp, #12
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	dd02      	ble.n	800df74 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	e001      	b.n	800df78 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	3304      	adds	r3, #4
  }
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b05      	cmp	r3, #5
 800df94:	dd08      	ble.n	800dfa8 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d004      	beq.n	800dfa8 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f004 fe7c 	bl	8012ca0 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b05      	cmp	r3, #5
 800dfb2:	dd0f      	ble.n	800dfd4 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d201      	bcs.n	800dfc2 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	e001      	b.n	800dfc6 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800dfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f004 fe7d 	bl	8012cc6 <_Znaj>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	461a      	mov	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7ff ffca 	bl	800df84 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f7ff ffa1 	bl	800df38 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800dff6:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	461a      	mov	r2, r3
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	6978      	ldr	r0, [r7, #20]
 800e002:	f007 fccf 	bl	80159a4 <memcpy>
  }
 800e006:	bf00      	nop
 800e008:	3718      	adds	r7, #24
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800e00e:	b580      	push	{r7, lr}
 800e010:	b086      	sub	sp, #24
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d103      	bne.n	800e026 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff ff22 	bl	800de68 <_ZN6tflite12RuntimeShapeC1Ev>
 800e024:	e00d      	b.n	800e042 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	3304      	adds	r3, #4
 800e036:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	6939      	ldr	r1, [r7, #16]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7ff ff21 	bl	800de84 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	3718      	adds	r7, #24
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e04a:	b480      	push	{r7}
 800e04c:	b083      	sub	sp, #12
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e05c:	e000      	b.n	800e060 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e05e:	2300      	movs	r3, #0
}
 800e060:	4618      	mov	r0, r3
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	e000      	b.n	800e082 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e08e:	b480      	push	{r7}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e0a0:	e000      	b.n	800e0a4 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	e000      	b.n	800e0c6 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	370c      	adds	r7, #12
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800e0d2:	b480      	push	{r7}
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0da:	4618      	mov	r0, r3
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800e0e4:	b480      	push	{r7}
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	4b04      	ldr	r3, [pc, #16]	; (800e0fc <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800e0ea:	ee07 3a90 	vmov	s15, r3
 800e0ee:	eeb0 0a67 	vmov.f32	s0, s15
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	7f7fffff 	.word	0x7f7fffff

0800e100 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800e100:	b480      	push	{r7}
 800e102:	af00      	add	r7, sp, #0
 800e104:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800e108:	ee07 3a90 	vmov	s15, r3
 800e10c:	eeb0 0a67 	vmov.f32	s0, s15
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800e118:	b5b0      	push	{r4, r5, r7, lr}
 800e11a:	b08c      	sub	sp, #48	; 0x30
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	429a      	cmp	r2, r3
 800e128:	d107      	bne.n	800e13a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800e12a:	f7ff ffd2 	bl	800e0d2 <_ZNSt14numeric_limitsIlE3minEv>
 800e12e:	4602      	mov	r2, r0
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4293      	cmp	r3, r2
 800e134:	d101      	bne.n	800e13a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800e136:	2301      	movs	r3, #1
 800e138:	e000      	b.n	800e13c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800e13a:	2300      	movs	r3, #0
 800e13c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	461a      	mov	r2, r3
 800e144:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e148:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e154:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	69ba      	ldr	r2, [r7, #24]
 800e15c:	fb02 f203 	mul.w	r2, r2, r3
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	6a39      	ldr	r1, [r7, #32]
 800e164:	fb01 f303 	mul.w	r3, r1, r3
 800e168:	18d1      	adds	r1, r2, r3
 800e16a:	6a3a      	ldr	r2, [r7, #32]
 800e16c:	69bb      	ldr	r3, [r7, #24]
 800e16e:	fba2 2303 	umull	r2, r3, r2, r3
 800e172:	4419      	add	r1, r3
 800e174:	460b      	mov	r3, r1
 800e176:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800e17a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800e17e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e182:	2a00      	cmp	r2, #0
 800e184:	f173 0300 	sbcs.w	r3, r3, #0
 800e188:	db02      	blt.n	800e190 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800e18a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e18e:	e000      	b.n	800e192 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800e190:	4b18      	ldr	r3, [pc, #96]	; (800e1f4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800e192:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	4618      	mov	r0, r3
 800e198:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e19c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e1a0:	1884      	adds	r4, r0, r2
 800e1a2:	eb41 0503 	adc.w	r5, r1, r3
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	462b      	mov	r3, r5
 800e1aa:	2a00      	cmp	r2, #0
 800e1ac:	f173 0100 	sbcs.w	r1, r3, #0
 800e1b0:	da06      	bge.n	800e1c0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800e1b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e1b6:	f04f 0100 	mov.w	r1, #0
 800e1ba:	1812      	adds	r2, r2, r0
 800e1bc:	eb41 0303 	adc.w	r3, r1, r3
 800e1c0:	f04f 0000 	mov.w	r0, #0
 800e1c4:	f04f 0100 	mov.w	r1, #0
 800e1c8:	0fd0      	lsrs	r0, r2, #31
 800e1ca:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e1ce:	17d9      	asrs	r1, r3, #31
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800e1d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d003      	beq.n	800e1e8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800e1e0:	f7ff f9d2 	bl	800d588 <_ZNSt14numeric_limitsIlE3maxEv>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	e000      	b.n	800e1ea <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800e1e8:	68bb      	ldr	r3, [r7, #8]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3730      	adds	r7, #48	; 0x30
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	c0000001 	.word	0xc0000001

0800e1f8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	ed87 0a03 	vstr	s0, [r7, #12]
 800e202:	edc7 0a02 	vstr	s1, [r7, #8]
 800e206:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 800e20a:	f107 0208 	add.w	r2, r7, #8
 800e20e:	f107 030c 	add.w	r3, r7, #12
 800e212:	4611      	mov	r1, r2
 800e214:	4618      	mov	r0, r3
 800e216:	f7ff fb53 	bl	800d8c0 <_ZSt3maxIfERKT_S2_S2_>
 800e21a:	4602      	mov	r2, r0
 800e21c:	1d3b      	adds	r3, r7, #4
 800e21e:	4619      	mov	r1, r3
 800e220:	4610      	mov	r0, r2
 800e222:	f7ff fb34 	bl	800d88e <_ZSt3minIfERKT_S2_S2_>
 800e226:	4603      	mov	r3, r0
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	ee07 3a90 	vmov	s15, r3
}
 800e22e:	eeb0 0a67 	vmov.f32	s0, s15
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800e238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e23a:	b089      	sub	sp, #36	; 0x24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	2900      	cmp	r1, #0
 800e246:	da06      	bge.n	800e256 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800e248:	4b31      	ldr	r3, [pc, #196]	; (800e310 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800e24a:	4a32      	ldr	r2, [pc, #200]	; (800e314 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800e24c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800e250:	4831      	ldr	r0, [pc, #196]	; (800e318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800e252:	f007 faab 	bl	80157ac <__assert_func>
  assert(exponent <= 31);
 800e256:	6839      	ldr	r1, [r7, #0]
 800e258:	291f      	cmp	r1, #31
 800e25a:	dd06      	ble.n	800e26a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800e25c:	4b2f      	ldr	r3, [pc, #188]	; (800e31c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800e25e:	4a2d      	ldr	r2, [pc, #180]	; (800e314 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800e260:	f240 1167 	movw	r1, #359	; 0x167
 800e264:	482c      	ldr	r0, [pc, #176]	; (800e318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800e266:	f007 faa1 	bl	80157ac <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800e26a:	f04f 0001 	mov.w	r0, #1
 800e26e:	f04f 0100 	mov.w	r1, #0
 800e272:	683c      	ldr	r4, [r7, #0]
 800e274:	f1a4 0620 	sub.w	r6, r4, #32
 800e278:	f1c4 0520 	rsb	r5, r4, #32
 800e27c:	fa01 f304 	lsl.w	r3, r1, r4
 800e280:	fa00 f606 	lsl.w	r6, r0, r6
 800e284:	4333      	orrs	r3, r6
 800e286:	fa20 f505 	lsr.w	r5, r0, r5
 800e28a:	432b      	orrs	r3, r5
 800e28c:	fa00 f204 	lsl.w	r2, r0, r4
 800e290:	4613      	mov	r3, r2
 800e292:	3b01      	subs	r3, #1
 800e294:	4618      	mov	r0, r3
 800e296:	f000 f885 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e29a:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800e29c:	2000      	movs	r0, #0
 800e29e:	f000 f881 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e2a2:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	f000 f87d 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e2aa:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800e2ac:	69f9      	ldr	r1, [r7, #28]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f883 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e2b4:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	69f8      	ldr	r0, [r7, #28]
 800e2ba:	f000 f88c 	bl	800e3d6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800e2be:	4604      	mov	r4, r0
 800e2c0:	69b9      	ldr	r1, [r7, #24]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f896 	bl	800e3f4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	6979      	ldr	r1, [r7, #20]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f000 f874 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 f8a0 	bl	800e41c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e2dc:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f878 	bl	800e3d6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	68f9      	ldr	r1, [r7, #12]
 800e2ea:	6938      	ldr	r0, [r7, #16]
 800e2ec:	f000 f8a4 	bl	800e438 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	6979      	ldr	r1, [r7, #20]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 f860 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4620      	mov	r0, r4
 800e300:	f000 f88c 	bl	800e41c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e304:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800e306:	4618      	mov	r0, r3
 800e308:	3724      	adds	r7, #36	; 0x24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e30e:	bf00      	nop
 800e310:	0801aef4 	.word	0x0801aef4
 800e314:	0801af04 	.word	0x0801af04
 800e318:	0801af60 	.word	0x0801af60
 800e31c:	0801aff0 	.word	0x0801aff0

0800e320 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
 800e330:	2b01      	cmp	r3, #1
 800e332:	d10b      	bne.n	800e34c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	f04f 0200 	mov.w	r2, #0
 800e33a:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800e33c:	f7ff fed2 	bl	800e0e4 <_ZNSt14numeric_limitsIfE3maxEv>
 800e340:	eef0 7a40 	vmov.f32	s15, s0
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800e34a:	e023      	b.n	800e394 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d107      	bne.n	800e362 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	f04f 0200 	mov.w	r2, #0
 800e358:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a0f      	ldr	r2, [pc, #60]	; (800e39c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800e35e:	601a      	str	r2, [r3, #0]
}
 800e360:	e018      	b.n	800e394 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	2b02      	cmp	r3, #2
 800e366:	d107      	bne.n	800e378 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	4a0d      	ldr	r2, [pc, #52]	; (800e3a0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800e36c:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e374:	601a      	str	r2, [r3, #0]
}
 800e376:	e00d      	b.n	800e394 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800e378:	f7ff fec2 	bl	800e100 <_ZNSt14numeric_limitsIfE6lowestEv>
 800e37c:	eef0 7a40 	vmov.f32	s15, s0
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800e386:	f7ff fead 	bl	800e0e4 <_ZNSt14numeric_limitsIfE3maxEv>
 800e38a:	eef0 7a40 	vmov.f32	s15, s0
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	edc3 7a00 	vstr	s15, [r3]
}
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	40c00000 	.word	0x40c00000
 800e3a0:	bf800000 	.word	0xbf800000

0800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  return x;
 800e3ac:	687b      	ldr	r3, [r7, #4]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	370c      	adds	r7, #12
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800e3ba:	b480      	push	{r7}
 800e3bc:	b083      	sub	sp, #12
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	6039      	str	r1, [r7, #0]
  return a & b;
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	4013      	ands	r3, r2
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	370c      	adds	r7, #12
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr

0800e3d6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800e3d6:	b480      	push	{r7}
 800e3d8:	b083      	sub	sp, #12
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
 800e3de:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	fa42 f303 	asr.w	r3, r2, r3
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	429a      	cmp	r2, r3
 800e404:	bfb4      	ite	lt
 800e406:	2301      	movlt	r3, #1
 800e408:	2300      	movge	r3, #0
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	4618      	mov	r0, r3
 800e40e:	f000 f827 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e412:	4603      	mov	r3, r0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  return a + b;
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	4413      	add	r3, r2
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	429a      	cmp	r2, r3
 800e448:	bfcc      	ite	gt
 800e44a:	2301      	movgt	r3, #1
 800e44c:	2300      	movle	r3, #0
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	4618      	mov	r0, r3
 800e452:	f000 f805 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e456:	4603      	mov	r3, r0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d004      	beq.n	800e478 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800e46e:	2000      	movs	r0, #0
 800e470:	f000 f807 	bl	800e482 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800e474:	4603      	mov	r3, r0
 800e476:	e000      	b.n	800e47a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800e482:	b480      	push	{r7}
 800e484:	b083      	sub	sp, #12
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
  return ~a;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	43db      	mvns	r3, r3
}
 800e48e:	4618      	mov	r0, r3
 800e490:	370c      	adds	r7, #12
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e49a:	b480      	push	{r7}
 800e49c:	b083      	sub	sp, #12
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e4ac:	e000      	b.n	800e4b0 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800e4d6:	b480      	push	{r7}
 800e4d8:	b083      	sub	sp, #12
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800e4f0:	b590      	push	{r4, r7, lr}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800e4fe:	68b9      	ldr	r1, [r7, #8]
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f7ff fcf4 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800e506:	4604      	mov	r4, r0
 800e508:	6839      	ldr	r1, [r7, #0]
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7ff fcef 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800e510:	4603      	mov	r3, r0
 800e512:	429c      	cmp	r4, r3
 800e514:	d001      	beq.n	800e51a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800e516:	f007 f941 	bl	801579c <abort>
  return shape1.Dims(index1);
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f7ff fce6 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800e522:	4603      	mov	r3, r0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3714      	adds	r7, #20
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd90      	pop	{r4, r7, pc}

0800e52c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e53e:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	dc02      	bgt.n	800e54c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	425b      	negs	r3, r3
 800e54a:	e000      	b.n	800e54e <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800e54c:	2300      	movs	r3, #0
 800e54e:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	fa02 f303 	lsl.w	r3, r2, r3
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff fddc 	bl	800e118 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e560:	4603      	mov	r3, r0
 800e562:	6939      	ldr	r1, [r7, #16]
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff fe67 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e56a:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3718      	adds	r7, #24
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 800e574:	b480      	push	{r7}
 800e576:	b087      	sub	sp, #28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	429a      	cmp	r2, r3
 800e58a:	da0a      	bge.n	800e5a2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 800e598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59c:	d001      	beq.n	800e5a2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e000      	b.n	800e5a4 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 800e5a6:	7dfb      	ldrb	r3, [r7, #23]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00a      	beq.n	800e5c2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	689a      	ldr	r2, [r3, #8]
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	6819      	ldr	r1, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	440b      	add	r3, r1
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	019b      	lsls	r3, r3, #6
 800e5be:	4413      	add	r3, r2
 800e5c0:	e000      	b.n	800e5c4 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  return nullptr;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	371c      	adds	r7, #28
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7ff fc7b 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e5e0:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	db03      	blt.n	800e5f0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	db01      	blt.n	800e5f4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800e5f0:	f007 f8d4 	bl	801579c <abort>
  const auto* dims_data = shape.DimsData();
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7ff fcb2 	bl	800df5e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800e5fa:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800e600:	2300      	movs	r3, #0
 800e602:	613b      	str	r3, [r7, #16]
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	429a      	cmp	r2, r3
 800e60a:	da12      	bge.n	800e632 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	429a      	cmp	r2, r3
 800e612:	d005      	beq.n	800e620 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	4413      	add	r3, r2
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	e000      	b.n	800e622 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800e620:	2301      	movs	r3, #1
 800e622:	697a      	ldr	r2, [r7, #20]
 800e624:	fb03 f302 	mul.w	r3, r3, r2
 800e628:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	3301      	adds	r3, #1
 800e62e:	613b      	str	r3, [r7, #16]
 800e630:	e7e8      	b.n	800e604 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800e632:	697b      	ldr	r3, [r7, #20]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3718      	adds	r7, #24
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800e63c:	b590      	push	{r4, r7, lr}
 800e63e:	b091      	sub	sp, #68	; 0x44
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	69db      	ldr	r3, [r3, #28]
 800e64e:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6a1b      	ldr	r3, [r3, #32]
 800e654:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800e656:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e658:	f7ff fc3d 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e65c:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800e65e:	6838      	ldr	r0, [r7, #0]
 800e660:	f7ff fc39 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e664:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800e666:	6a3b      	ldr	r3, [r7, #32]
 800e668:	3b01      	subs	r3, #1
 800e66a:	4619      	mov	r1, r3
 800e66c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e66e:	f7ff ffaf 	bl	800e5d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800e672:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	1e99      	subs	r1, r3, #2
 800e678:	6a3b      	ldr	r3, [r7, #32]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e67e:	6838      	ldr	r0, [r7, #0]
 800e680:	f7ff ff36 	bl	800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e684:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	3b01      	subs	r3, #1
 800e68a:	4619      	mov	r1, r3
 800e68c:	6838      	ldr	r0, [r7, #0]
 800e68e:	f7ff fc2e 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800e692:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800e694:	2300      	movs	r3, #0
 800e696:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	da5f      	bge.n	800e760 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	da55      	bge.n	800e758 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800e6ac:	f04f 0300 	mov.w	r3, #0
 800e6b0:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	633b      	str	r3, [r7, #48]	; 0x30
 800e6b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	da21      	bge.n	800e702 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800e6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	fb02 f203 	mul.w	r2, r2, r3
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	4413      	add	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	693a      	ldr	r2, [r7, #16]
 800e6d8:	fb02 f203 	mul.w	r2, r2, r3
 800e6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6de:	4413      	add	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6e4:	4413      	add	r3, r2
 800e6e6:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800e6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e6f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	633b      	str	r3, [r7, #48]	; 0x30
 800e700:	e7d9      	b.n	800e6b6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800e702:	f04f 0300 	mov.w	r3, #0
 800e706:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800e708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d005      	beq.n	800e71a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e714:	4413      	add	r3, r2
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800e71a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e71e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e722:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e72a:	fb02 f203 	mul.w	r2, r2, r3
 800e72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e730:	4413      	add	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e736:	18d4      	adds	r4, r2, r3
 800e738:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800e73c:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800e740:	eeb0 0a67 	vmov.f32	s0, s15
 800e744:	f7ff fd58 	bl	800e1f8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800e748:	eef0 7a40 	vmov.f32	s15, s0
 800e74c:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	3301      	adds	r3, #1
 800e754:	63bb      	str	r3, [r7, #56]	; 0x38
 800e756:	e7a5      	b.n	800e6a4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800e758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e75a:	3301      	adds	r3, #1
 800e75c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e75e:	e79b      	b.n	800e698 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800e760:	bf00      	nop
 800e762:	3744      	adds	r7, #68	; 0x44
 800e764:	46bd      	mov	sp, r7
 800e766:	bd90      	pop	{r4, r7, pc}

0800e768 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 800e768:	b580      	push	{r7, lr}
 800e76a:	b096      	sub	sp, #88	; 0x58
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800e7a0:	6838      	ldr	r0, [r7, #0]
 800e7a2:	f7ff fb98 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	dc01      	bgt.n	800e7b0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 800e7ac:	f006 fff6 	bl	801579c <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800e7b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7b2:	f7ff fb90 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	dc01      	bgt.n	800e7c0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 800e7bc:	f006 ffee 	bl	801579c <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800e7c0:	69ba      	ldr	r2, [r7, #24]
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	dd01      	ble.n	800e7cc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 800e7c8:	f006 ffe8 	bl	801579c <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800e7cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7ce:	f7ff fb82 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e7d2:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800e7d4:	6838      	ldr	r0, [r7, #0]
 800e7d6:	f7ff fb7e 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e7da:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800e7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7e4:	f7ff fef4 	bl	800e5d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800e7e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ec:	1e99      	subs	r1, r3, #2
 800e7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e7f4:	6838      	ldr	r0, [r7, #0]
 800e7f6:	f7ff fe7b 	bl	800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e7fa:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fe:	3b01      	subs	r3, #1
 800e800:	4619      	mov	r1, r3
 800e802:	6838      	ldr	r0, [r7, #0]
 800e804:	f7ff fb73 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800e808:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800e80a:	2300      	movs	r3, #0
 800e80c:	657b      	str	r3, [r7, #84]	; 0x54
 800e80e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	429a      	cmp	r2, r3
 800e814:	da73      	bge.n	800e8fe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800e816:	2300      	movs	r3, #0
 800e818:	653b      	str	r3, [r7, #80]	; 0x50
 800e81a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81e:	429a      	cmp	r2, r3
 800e820:	da69      	bge.n	800e8f6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 800e822:	2300      	movs	r3, #0
 800e824:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800e826:	2300      	movs	r3, #0
 800e828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e82a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	429a      	cmp	r2, r3
 800e830:	da24      	bge.n	800e87c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 800e832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e836:	fb02 f203 	mul.w	r2, r2, r3
 800e83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e83c:	4413      	add	r3, r2
 800e83e:	461a      	mov	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800e848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e84c:	fb02 f203 	mul.w	r2, r2, r3
 800e850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e852:	4413      	add	r3, r2
 800e854:	461a      	mov	r2, r3
 800e856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e858:	4413      	add	r3, r2
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e862:	4413      	add	r3, r2
 800e864:	6a39      	ldr	r1, [r7, #32]
 800e866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e868:	440a      	add	r2, r1
 800e86a:	fb02 f203 	mul.w	r2, r2, r3
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	4413      	add	r3, r2
 800e872:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800e874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e876:	3301      	adds	r3, #1
 800e878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e87a:	e7d6      	b.n	800e82a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 800e87c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d007      	beq.n	800e892 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 800e882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e888:	4413      	add	r3, r2
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	4413      	add	r3, r2
 800e890:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff fe47 	bl	800e52c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a6:	4413      	add	r3, r2
 800e8a8:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 800e8aa:	f107 0218 	add.w	r2, r7, #24
 800e8ae:	f107 0310 	add.w	r3, r7, #16
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7ff fa61 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 800e8c0:	f107 0214 	add.w	r2, r7, #20
 800e8c4:	f107 0310 	add.w	r3, r7, #16
 800e8c8:	4611      	mov	r1, r2
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7ff fa6a 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 800e8d6:	6939      	ldr	r1, [r7, #16]
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e8dc:	fb02 f203 	mul.w	r2, r2, r3
 800e8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e2:	4413      	add	r3, r2
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8e8:	4413      	add	r3, r2
 800e8ea:	b2ca      	uxtb	r2, r1
 800e8ec:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800e8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	653b      	str	r3, [r7, #80]	; 0x50
 800e8f4:	e791      	b.n	800e81a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 800e8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	657b      	str	r3, [r7, #84]	; 0x54
 800e8fc:	e787      	b.n	800e80e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 800e8fe:	bf00      	nop
 800e900:	3758      	adds	r7, #88	; 0x58
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 800e906:	b580      	push	{r7, lr}
 800e908:	b098      	sub	sp, #96	; 0x60
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	699b      	ldr	r3, [r3, #24]
 800e93c:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800e93e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e942:	429a      	cmp	r2, r3
 800e944:	dd01      	ble.n	800e94a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 800e946:	f006 ff29 	bl	801579c <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800e94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800e950:	f006 ff24 	bl	801579c <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800e954:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e956:	f7ff fabe 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e95a:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800e95c:	6838      	ldr	r0, [r7, #0]
 800e95e:	f7ff faba 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e962:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800e964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e966:	3b01      	subs	r3, #1
 800e968:	4619      	mov	r1, r3
 800e96a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e96c:	f7ff fe30 	bl	800e5d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800e970:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	1e99      	subs	r1, r3, #2
 800e976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e978:	3b01      	subs	r3, #1
 800e97a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e97c:	6838      	ldr	r0, [r7, #0]
 800e97e:	f7ff fdb7 	bl	800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e982:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	3b01      	subs	r3, #1
 800e988:	4619      	mov	r1, r3
 800e98a:	6838      	ldr	r0, [r7, #0]
 800e98c:	f7ff faaf 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800e990:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800e992:	2300      	movs	r3, #0
 800e994:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e996:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	429a      	cmp	r2, r3
 800e99c:	da7c      	bge.n	800ea98 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800e99e:	2300      	movs	r3, #0
 800e9a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	da72      	bge.n	800ea90 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 800e9aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e9b0:	4413      	add	r3, r2
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	657b      	str	r3, [r7, #84]	; 0x54
 800e9ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	da2c      	bge.n	800ea1c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 800e9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9c6:	fb02 f203 	mul.w	r2, r2, r3
 800e9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9cc:	4413      	add	r3, r2
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	4413      	add	r3, r2
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 800e9e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e6:	fb02 f203 	mul.w	r2, r2, r3
 800e9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ec:	4413      	add	r3, r2
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9f2:	4413      	add	r3, r2
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	4413      	add	r3, r2
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 800ea02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea06:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ea0a:	fb02 f203 	mul.w	r2, r2, r3
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	4413      	add	r3, r2
 800ea12:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800ea14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea16:	3301      	adds	r3, #1
 800ea18:	657b      	str	r3, [r7, #84]	; 0x54
 800ea1a:	e7ce      	b.n	800e9ba <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7ff fd82 	bl	800e52c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ea28:	4603      	mov	r3, r0
      accum =
 800ea2a:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 800ea2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	61bb      	str	r3, [r7, #24]
 800ea34:	f107 0218 	add.w	r2, r7, #24
 800ea38:	f107 0314 	add.w	r3, r7, #20
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7ff f99c 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 800ea44:	4603      	mov	r3, r0
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 800ea4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	61fb      	str	r3, [r7, #28]
 800ea52:	f107 021c 	add.w	r2, r7, #28
 800ea56:	f107 0314 	add.w	r3, r7, #20
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7ff f9a1 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 800ea62:	4603      	mov	r3, r0
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea6c:	4413      	add	r3, r2
 800ea6e:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800ea70:	6979      	ldr	r1, [r7, #20]
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea76:	fb02 f203 	mul.w	r2, r2, r3
 800ea7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea7c:	4413      	add	r3, r2
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ea82:	4413      	add	r3, r2
 800ea84:	b20a      	sxth	r2, r1
 800ea86:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ea88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea8e:	e788      	b.n	800e9a2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 800ea90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea92:	3301      	adds	r3, #1
 800ea94:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea96:	e77e      	b.n	800e996 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 800ea98:	bf00      	nop
 800ea9a:	3760      	adds	r7, #96	; 0x60
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b096      	sub	sp, #88	; 0x58
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	695b      	ldr	r3, [r3, #20]
 800ead0:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800ead8:	6838      	ldr	r0, [r7, #0]
 800eada:	f7ff f9fc 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	dc01      	bgt.n	800eae8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800eae4:	f006 fe5a 	bl	801579c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800eae8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eaea:	f7ff f9f4 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d001      	beq.n	800eaf8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800eaf4:	f006 fe52 	bl	801579c <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800eaf8:	69fa      	ldr	r2, [r7, #28]
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	dd01      	ble.n	800eb04 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800eb00:	f006 fe4c 	bl	801579c <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800eb04:	6838      	ldr	r0, [r7, #0]
 800eb06:	f7ff f9e6 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800eb0a:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb10:	f7ff f9ed 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800eb14:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800eb16:	2101      	movs	r1, #1
 800eb18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb1a:	f7ff f9e8 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800eb1e:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800eb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb22:	3b02      	subs	r3, #2
 800eb24:	4619      	mov	r1, r3
 800eb26:	6838      	ldr	r0, [r7, #0]
 800eb28:	f7ff f9e1 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb30:	4293      	cmp	r3, r2
 800eb32:	dd01      	ble.n	800eb38 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800eb34:	f006 fe32 	bl	801579c <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800eb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6838      	ldr	r0, [r7, #0]
 800eb40:	f7ff f9d5 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800eb44:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 800eb46:	2300      	movs	r3, #0
 800eb48:	657b      	str	r3, [r7, #84]	; 0x54
 800eb4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	da75      	bge.n	800ec3e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800eb52:	2300      	movs	r3, #0
 800eb54:	653b      	str	r3, [r7, #80]	; 0x50
 800eb56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	da6b      	bge.n	800ec36 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32 acc = 0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800eb62:	2300      	movs	r3, #0
 800eb64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	da26      	bge.n	800ebbc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32 input_val = input_data[b * accum_depth + d];
 800eb6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb72:	fb02 f203 	mul.w	r2, r2, r3
 800eb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb78:	4413      	add	r3, r2
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4413      	add	r3, r2
 800eb80:	f993 3000 	ldrsb.w	r3, [r3]
 800eb84:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800eb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb8a:	fb02 f203 	mul.w	r2, r2, r3
 800eb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb90:	4413      	add	r3, r2
 800eb92:	461a      	mov	r2, r3
 800eb94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb96:	4413      	add	r3, r2
 800eb98:	f993 3000 	ldrsb.w	r3, [r3]
 800eb9c:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800eb9e:	6a3a      	ldr	r2, [r7, #32]
 800eba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eba2:	4413      	add	r3, r2
 800eba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eba8:	440a      	add	r2, r1
 800ebaa:	fb02 f203 	mul.w	r2, r2, r3
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800ebb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ebba:	e7d4      	b.n	800eb66 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 800ebbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d007      	beq.n	800ebd2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800ebc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebc8:	4413      	add	r3, r2
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	4413      	add	r3, r2
 800ebd0:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7ff fca7 	bl	800e52c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800ebe2:	697a      	ldr	r2, [r7, #20]
 800ebe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebe6:	4413      	add	r3, r2
 800ebe8:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800ebea:	f107 021c 	add.w	r2, r7, #28
 800ebee:	f107 0314 	add.w	r3, r7, #20
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7ff f8c1 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800ec00:	f107 0218 	add.w	r2, r7, #24
 800ec04:	f107 0314 	add.w	r3, r7, #20
 800ec08:	4611      	mov	r1, r2
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff f8ca 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 800ec10:	4603      	mov	r3, r0
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800ec16:	6979      	ldr	r1, [r7, #20]
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec1c:	fb02 f203 	mul.w	r2, r2, r3
 800ec20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec22:	4413      	add	r3, r2
 800ec24:	461a      	mov	r2, r3
 800ec26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec28:	4413      	add	r3, r2
 800ec2a:	b24a      	sxtb	r2, r1
 800ec2c:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ec2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec30:	3301      	adds	r3, #1
 800ec32:	653b      	str	r3, [r7, #80]	; 0x50
 800ec34:	e78f      	b.n	800eb56 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800ec36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec38:	3301      	adds	r3, #1
 800ec3a:	657b      	str	r3, [r7, #84]	; 0x54
 800ec3c:	e785      	b.n	800eb4a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 800ec3e:	bf00      	nop
 800ec40:	3758      	adds	r7, #88	; 0x58
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b08c      	sub	sp, #48	; 0x30
 800ec4a:	af02      	add	r7, sp, #8
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	607b      	str	r3, [r7, #4]
 800ec50:	460b      	mov	r3, r1
 800ec52:	72fb      	strb	r3, [r7, #11]
 800ec54:	4613      	mov	r3, r2
 800ec56:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800ec5e:	7abb      	ldrb	r3, [r7, #10]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d041      	beq.n	800ece8 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 800ec64:	f04f 0200 	mov.w	r2, #0
 800ec68:	f04f 0300 	mov.w	r3, #0
 800ec6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800ec70:	f107 0318 	add.w	r3, r7, #24
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f7fe fe9d 	bl	800d9c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ec8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d002      	beq.n	800ec9a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 800ec94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec98:	e028      	b.n	800ecec <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800ec9a:	ed97 7b06 	vldr	d7, [r7, #24]
 800ec9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eca0:	f107 0214 	add.w	r2, r7, #20
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	eeb0 0a47 	vmov.f32	s0, s14
 800ecac:	eef0 0a67 	vmov.f32	s1, s15
 800ecb0:	f7fe fc74 	bl	800d59c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	425a      	negs	r2, r3
 800ecb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecba:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800ecbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecbe:	f103 0208 	add.w	r2, r3, #8
 800ecc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc4:	330c      	adds	r3, #12
 800ecc6:	7af9      	ldrb	r1, [r7, #11]
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	4613      	mov	r3, r2
 800eccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f7ff f800 	bl	800dcd4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ecda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d002      	beq.n	800ece8 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 800ece2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ece6:	e001      	b.n	800ecec <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 800ece8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3728      	adds	r7, #40	; 0x28
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d101      	bne.n	800ed0c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 800ed08:	f006 fd48 	bl	801579c <abort>
  void* data = nullptr;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	f107 0214 	add.w	r2, r7, #20
 800ed18:	2114      	movs	r1, #20
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	4798      	blx	r3
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	bf0c      	ite	eq
 800ed24:	2301      	moveq	r3, #1
 800ed26:	2300      	movne	r3, #0
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e000      	b.n	800ed34 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 800ed32:	697b      	ldr	r3, [r7, #20]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800ed3c:	b5b0      	push	{r4, r5, r7, lr}
 800ed3e:	b08c      	sub	sp, #48	; 0x30
 800ed40:	af04      	add	r7, sp, #16
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800ed4e:	f006 fd25 	bl	801579c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800ed5a:	f006 fd1f 	bl	801579c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	61fb      	str	r3, [r7, #28]
  const auto params =
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	695b      	ldr	r3, [r3, #20]
 800ed68:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7ff f82c 	bl	800ddcc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800ed74:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800ed76:	2201      	movs	r2, #1
 800ed78:	6839      	ldr	r1, [r7, #0]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7ff f826 	bl	800ddcc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800ed80:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800ed82:	2202      	movs	r2, #2
 800ed84:	6839      	ldr	r1, [r7, #0]
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f7ff fbf4 	bl	800e574 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800ed8c:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800ed8e:	2200      	movs	r2, #0
 800ed90:	6839      	ldr	r1, [r7, #0]
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7ff f830 	bl	800ddf8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800ed98:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	781a      	ldrb	r2, [r3, #0]
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d01b      	beq.n	800edde <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	695c      	ldr	r4, [r3, #20]
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe fb8c 	bl	800d4cc <TfLiteTypeGetName>
 800edb4:	4605      	mov	r5, r0
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fe fb86 	bl	800d4cc <TfLiteTypeGetName>
 800edc0:	4603      	mov	r3, r0
 800edc2:	9303      	str	r3, [sp, #12]
 800edc4:	9502      	str	r5, [sp, #8]
 800edc6:	4b17      	ldr	r3, [pc, #92]	; (800ee24 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800edc8:	9301      	str	r3, [sp, #4]
 800edca:	4b17      	ldr	r3, [pc, #92]	; (800ee28 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	f240 23ef 	movw	r3, #751	; 0x2ef
 800edd2:	4a16      	ldr	r2, [pc, #88]	; (800ee2c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800edd4:	4916      	ldr	r1, [pc, #88]	; (800ee30 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	47a0      	blx	r4
 800edda:	2301      	movs	r3, #1
 800eddc:	e01e      	b.n	800ee1c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	781a      	ldrb	r2, [r3, #0]
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d006      	beq.n	800edf8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	695b      	ldr	r3, [r3, #20]
 800edee:	4911      	ldr	r1, [pc, #68]	; (800ee34 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	4798      	blx	r3
 800edf4:	2301      	movs	r3, #1
 800edf6:	e011      	b.n	800ee1c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800edf8:	69bb      	ldr	r3, [r7, #24]
 800edfa:	7819      	ldrb	r1, [r3, #0]
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	781a      	ldrb	r2, [r3, #0]
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	9303      	str	r3, [sp, #12]
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	9302      	str	r3, [sp, #8]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	9301      	str	r3, [sp, #4]
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f7ff ff17 	bl	800ec46 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 800ee18:	4603      	mov	r3, r0
                         filter, bias, output, data);
 800ee1a:	bf00      	nop
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3720      	adds	r7, #32
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bdb0      	pop	{r4, r5, r7, pc}
 800ee24:	0801b0b0 	.word	0x0801b0b0
 800ee28:	0801b0c0 	.word	0x0801b0c0
 800ee2c:	0801b000 	.word	0x0801b000
 800ee30:	0801b094 	.word	0x0801b094
 800ee34:	0801b0cc 	.word	0x0801b0cc

0800ee38 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 800ee38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee3a:	b0ad      	sub	sp, #180	; 0xb4
 800ee3c:	af06      	add	r7, sp, #24
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
 800ee44:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	691b      	ldr	r3, [r3, #16]
 800ee4a:	425b      	negs	r3, r3
 800ee4c:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 800ee4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	425b      	negs	r3, r3
 800ee56:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 800ee58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	425b      	negs	r3, r3
 800ee6c:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800ee7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff f8c4 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800ee86:	6838      	ldr	r0, [r7, #0]
 800ee88:	f7ff f901 	bl	800e08e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800ee8c:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800ee8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ee92:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff f8b9 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800ee9c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800eea0:	f7ff f8f5 	bl	800e08e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800eea4:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800eea6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eeaa:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7ff f8ad 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800eeb4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800eeb8:	f7ff faef 	bl	800e49a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800eebc:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800eebe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800eec2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7ff f8a1 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800eecc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800eed0:	f7ff f8ee 	bl	800e0b0 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800eed4:	4603      	mov	r3, r0
 800eed6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800eeda:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800eede:	f107 0010 	add.w	r0, r7, #16
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800eee8:	9303      	str	r3, [sp, #12]
 800eeea:	9502      	str	r5, [sp, #8]
 800eeec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	9400      	str	r4, [sp, #0]
 800eef4:	4613      	mov	r3, r2
 800eef6:	4632      	mov	r2, r6
 800eef8:	f7ff fdd2 	bl	800eaa0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800eefc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fe ffd2 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800ef06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fe ffcd 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800ef10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fe ffc8 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800ef1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe ffc3 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 800ef24:	2300      	movs	r3, #0
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	379c      	adds	r7, #156	; 0x9c
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ef30 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 800ef30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef32:	b0c9      	sub	sp, #292	; 0x124
 800ef34:	af06      	add	r7, sp, #24
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	f107 0008 	add.w	r0, r7, #8
 800ef3c:	6001      	str	r1, [r0, #0]
 800ef3e:	1d39      	adds	r1, r7, #4
 800ef40:	600a      	str	r2, [r1, #0]
 800ef42:	463a      	mov	r2, r7
 800ef44:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 800ef46:	463b      	mov	r3, r7
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	425b      	negs	r3, r3
 800ef4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 800ef52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	425b      	negs	r3, r3
 800ef5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 800ef5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 800ef68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef6c:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 800ef6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ef72:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 800ef74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef78:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 800ef7a:	1d3b      	adds	r3, r7, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 800ef82:	1d3b      	adds	r3, r7, #4
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	425b      	negs	r3, r3
 800ef8a:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 800ef8c:	1d3b      	adds	r3, r7, #4
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800ef94:	1d3b      	adds	r3, r7, #4
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 800ef9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	2b03      	cmp	r3, #3
 800efa4:	d002      	beq.n	800efac <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 800efa6:	2b07      	cmp	r3, #7
 800efa8:	d058      	beq.n	800f05c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 800efaa:	e0af      	b.n	800f10c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800efac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800efb0:	463b      	mov	r3, r7
 800efb2:	6819      	ldr	r1, [r3, #0]
 800efb4:	4610      	mov	r0, r2
 800efb6:	f7ff f82a 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800efba:	463b      	mov	r3, r7
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	f7fe ff31 	bl	800de24 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800efc2:	4606      	mov	r6, r0
 800efc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800efc8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff f81e 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800efd2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800efd6:	f7fe ff25 	bl	800de24 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800efda:	4604      	mov	r4, r0
 800efdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800efe0:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff f812 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800efea:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800efee:	f7ff fa54 	bl	800e49a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800eff2:	4605      	mov	r5, r0
 800eff4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eff8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800effc:	4618      	mov	r0, r3
 800effe:	f7ff f806 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800f002:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800f006:	f7fe ff1e 	bl	800de46 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800f00a:	4603      	mov	r3, r0
 800f00c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f010:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800f014:	f107 0014 	add.w	r0, r7, #20
 800f018:	9304      	str	r3, [sp, #16]
 800f01a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f01e:	9303      	str	r3, [sp, #12]
 800f020:	9502      	str	r5, [sp, #8]
 800f022:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f026:	9301      	str	r3, [sp, #4]
 800f028:	9400      	str	r4, [sp, #0]
 800f02a:	4613      	mov	r3, r2
 800f02c:	4632      	mov	r2, r6
 800f02e:	f7ff fb9b 	bl	800e768 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800f032:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f036:	4618      	mov	r0, r3
 800f038:	f7fe ff37 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
 800f03c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f040:	4618      	mov	r0, r3
 800f042:	f7fe ff32 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
 800f046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fe ff2d 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
 800f050:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f054:	4618      	mov	r0, r3
 800f056:	f7fe ff28 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800f05a:	e068      	b.n	800f12e <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 800f05c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800f060:	463b      	mov	r3, r7
 800f062:	6819      	ldr	r1, [r3, #0]
 800f064:	4610      	mov	r0, r2
 800f066:	f7fe ffd2 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800f06a:	463b      	mov	r3, r7
 800f06c:	6818      	ldr	r0, [r3, #0]
 800f06e:	f7fe fed9 	bl	800de24 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800f072:	4606      	mov	r6, r0
 800f074:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f078:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fe ffc6 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800f082:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800f086:	f7fe fecd 	bl	800de24 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800f08a:	4604      	mov	r4, r0
 800f08c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f090:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f094:	4618      	mov	r0, r3
 800f096:	f7fe ffba 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800f09a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f09e:	f7ff f9fc 	bl	800e49a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f0a8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fe ffae 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800f0b2:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800f0b6:	f000 f935 	bl	800f324 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800f0c0:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800f0c4:	f107 0014 	add.w	r0, r7, #20
 800f0c8:	9304      	str	r3, [sp, #16]
 800f0ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f0ce:	9303      	str	r3, [sp, #12]
 800f0d0:	9502      	str	r5, [sp, #8]
 800f0d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	9400      	str	r4, [sp, #0]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	4632      	mov	r2, r6
 800f0de:	f7ff fc12 	bl	800e906 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800f0e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fe fedf 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
 800f0ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fe feda 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
 800f0f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fe fed5 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
 800f100:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f104:	4618      	mov	r0, r3
 800f106:	f7fe fed0 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800f10a:	e010      	b.n	800f12e <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	695c      	ldr	r4, [r3, #20]
 800f110:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	4618      	mov	r0, r3
 800f118:	f7fe f9d8 	bl	800d4cc <TfLiteTypeGetName>
 800f11c:	4602      	mov	r2, r0
 800f11e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	4905      	ldr	r1, [pc, #20]	; (800f13c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
  }

  return kTfLiteOk;
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800f136:	46bd      	mov	sp, r7
 800f138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f13a:	bf00      	nop
 800f13c:	0801b190 	.word	0x0801b190

0800f140 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 800f140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f142:	b0af      	sub	sp, #188	; 0xbc
 800f144:	af06      	add	r7, sp, #24
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	603b      	str	r3, [r7, #0]
 800f14c:	4613      	mov	r3, r2
 800f14e:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 800f150:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f154:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800f158:	79fb      	ldrb	r3, [r7, #7]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7ff f8e0 	bl	800e320 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 800f160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f162:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800f168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fe ff4d 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800f174:	6838      	ldr	r0, [r7, #0]
 800f176:	f7fe ff68 	bl	800e04a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800f17a:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 800f17c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f180:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f184:	4618      	mov	r0, r3
 800f186:	f7fe ff42 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800f18a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800f18e:	f7fe ff5c 	bl	800e04a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800f192:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800f194:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f198:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fe ff36 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800f1a2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800f1a6:	f7fe ff50 	bl	800e04a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800f1aa:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800f1ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f1b0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fe ff2a 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800f1ba:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800f1be:	f7fe ff55 	bl	800e06c <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f1c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f1cc:	f107 0010 	add.w	r0, r7, #16
 800f1d0:	9304      	str	r3, [sp, #16]
 800f1d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f1d6:	9303      	str	r3, [sp, #12]
 800f1d8:	9502      	str	r5, [sp, #8]
 800f1da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	9400      	str	r4, [sp, #0]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	f7ff fa29 	bl	800e63c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800f1ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fe fe5b 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
 800f1f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fe fe56 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 800f1fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f202:	4618      	mov	r0, r3
 800f204:	f7fe fe51 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800f208:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fe fe4c 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	37a4      	adds	r7, #164	; 0xa4
 800f218:	46bd      	mov	sp, r7
 800f21a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f21c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800f21c:	b590      	push	{r4, r7, lr}
 800f21e:	b08d      	sub	sp, #52	; 0x34
 800f220:	af04      	add	r7, sp, #16
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d101      	bne.n	800f232 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800f22e:	f006 fab5 	bl	801579c <abort>
  const auto* params =
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800f238:	2200      	movs	r2, #0
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7fe fdc5 	bl	800ddcc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f242:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800f244:	2201      	movs	r2, #1
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f7fe fdbf 	bl	800ddcc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f24e:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800f250:	2202      	movs	r2, #2
 800f252:	6839      	ldr	r1, [r7, #0]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7ff f98d 	bl	800e574 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800f25a:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800f25c:	2200      	movs	r2, #0
 800f25e:	6839      	ldr	r1, [r7, #0]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7fe fdc9 	bl	800ddf8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800f266:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d101      	bne.n	800f274 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 800f270:	f006 fa94 	bl	801579c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	2b09      	cmp	r3, #9
 800f280:	d015      	beq.n	800f2ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 800f282:	2b09      	cmp	r3, #9
 800f284:	dc2f      	bgt.n	800f2e6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 800f286:	2b01      	cmp	r3, #1
 800f288:	d002      	beq.n	800f290 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 800f28a:	2b03      	cmp	r3, #3
 800f28c:	d01d      	beq.n	800f2ca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 800f28e:	e02a      	b.n	800f2e6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	781a      	ldrb	r2, [r3, #0]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	9302      	str	r3, [sp, #8]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	9301      	str	r3, [sp, #4]
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	6839      	ldr	r1, [r7, #0]
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff ff4b 	bl	800f140 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 800f2aa:	4603      	mov	r3, r0
                       output);
 800f2ac:	e029      	b.n	800f302 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	9302      	str	r3, [sp, #8]
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	68ba      	ldr	r2, [r7, #8]
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7ff fdb9 	bl	800ee38 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800f2c6:	4603      	mov	r3, r0
                               output);
 800f2c8:	e01b      	b.n	800f302 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	9302      	str	r3, [sp, #8]
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	9301      	str	r3, [sp, #4]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	6839      	ldr	r1, [r7, #0]
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff fe27 	bl	800ef30 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	e00d      	b.n	800f302 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	695c      	ldr	r4, [r3, #20]
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe f8ec 	bl	800d4cc <TfLiteTypeGetName>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	4904      	ldr	r1, [pc, #16]	; (800f30c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800f300:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 800f302:	4618      	mov	r0, r3
 800f304:	3724      	adds	r7, #36	; 0x24
 800f306:	46bd      	mov	sp, r7
 800f308:	bd90      	pop	{r4, r7, pc}
 800f30a:	bf00      	nop
 800f30c:	0801b190 	.word	0x0801b190

0800f310 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 800f310:	b480      	push	{r7}
 800f312:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800f314:	4b02      	ldr	r3, [pc, #8]	; (800f320 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 800f316:	4618      	mov	r0, r3
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr
 800f320:	2000007c 	.word	0x2000007c

0800f324 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d002      	beq.n	800f338 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	e000      	b.n	800f33a <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 800f338:	2300      	movs	r3, #0
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	370c      	adds	r7, #12
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr

0800f346 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800f346:	b590      	push	{r4, r7, lr}
 800f348:	b087      	sub	sp, #28
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	60f8      	str	r0, [r7, #12]
 800f34e:	60b9      	str	r1, [r7, #8]
 800f350:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f7fe fdbf 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f358:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800f35a:	2300      	movs	r3, #0
 800f35c:	617b      	str	r3, [r7, #20]
 800f35e:	697a      	ldr	r2, [r7, #20]
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	429a      	cmp	r2, r3
 800f364:	da15      	bge.n	800f392 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d00d      	beq.n	800f38a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800f36e:	6979      	ldr	r1, [r7, #20]
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f7fe fdbc 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800f376:	4604      	mov	r4, r0
 800f378:	6979      	ldr	r1, [r7, #20]
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7fe fdb7 	bl	800deee <_ZNK6tflite12RuntimeShape4DimsEi>
 800f380:	4603      	mov	r3, r0
 800f382:	429c      	cmp	r4, r3
 800f384:	d001      	beq.n	800f38a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800f386:	f006 fa09 	bl	801579c <abort>
  for (int i = 0; i < dims_count; ++i) {
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	3301      	adds	r3, #1
 800f38e:	617b      	str	r3, [r7, #20]
 800f390:	e7e5      	b.n	800f35e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f7ff f91b 	bl	800e5d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800f39a:	4603      	mov	r3, r0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	371c      	adds	r7, #28
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd90      	pop	{r4, r7, pc}

0800f3a4 <_ZN6tflite17CountLeadingZerosImEEiT_>:
  int32_t result = x >> total_shift;
  return result;
}

template <typename T>
int CountLeadingZeros(T integer_input) {
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d003      	beq.n	800f3ba <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800f3b8:	e000      	b.n	800f3bc <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800f3ba:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f3de:	b590      	push	{r4, r7, lr}
 800f3e0:	b085      	sub	sp, #20
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f3e6:	f107 030c 	add.w	r3, r7, #12
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff ffec 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7fe ffd6 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	6023      	str	r3, [r4, #0]
    return retval;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
  }
 800f3fe:	4618      	mov	r0, r3
 800f400:	3714      	adds	r7, #20
 800f402:	46bd      	mov	sp, r7
 800f404:	bd90      	pop	{r4, r7, pc}

0800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800f406:	b580      	push	{r7, lr}
 800f408:	b082      	sub	sp, #8
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800f40e:	2100      	movs	r1, #0
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7fe ff11 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f416:	4603      	mov	r3, r0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 f813 	bl	800f454 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800f42e:	4603      	mov	r3, r0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  return a - b;
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	1ad3      	subs	r3, r2, r3
}
 800f448:	4618      	mov	r0, r3
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800f45c:	2101      	movs	r1, #1
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7fe feea 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f464:	4603      	mov	r3, r0
  }
 800f466:	4618      	mov	r0, r3
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800f46e:	b480      	push	{r7}
 800f470:	b089      	sub	sp, #36	; 0x24
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	461a      	mov	r2, r3
 800f47c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f480:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800f484:	2201      	movs	r2, #1
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	fa02 f303 	lsl.w	r3, r2, r3
 800f48c:	461a      	mov	r2, r3
 800f48e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f492:	69f9      	ldr	r1, [r7, #28]
 800f494:	fb02 f001 	mul.w	r0, r2, r1
 800f498:	69b9      	ldr	r1, [r7, #24]
 800f49a:	fb03 f101 	mul.w	r1, r3, r1
 800f49e:	4401      	add	r1, r0
 800f4a0:	69b8      	ldr	r0, [r7, #24]
 800f4a2:	fba0 2302 	umull	r2, r3, r0, r2
 800f4a6:	4419      	add	r1, r3
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f4ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800f4b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4b6:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800f4b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f4bc:	60bb      	str	r3, [r7, #8]
             ? min
 800f4be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f4c2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800f4c6:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800f4ca:	db0e      	blt.n	800f4ea <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800f4cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f4d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f4d4:	f04f 0100 	mov.w	r1, #0
 800f4d8:	4290      	cmp	r0, r2
 800f4da:	eb71 0303 	sbcs.w	r3, r1, r3
 800f4de:	db01      	blt.n	800f4e4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 800f4e0:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800f4e2:	e004      	b.n	800f4ee <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 800f4e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800f4e8:	e001      	b.n	800f4ee <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 800f4ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3724      	adds	r7, #36	; 0x24
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr

0800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800f4fa:	b590      	push	{r4, r7, lr}
 800f4fc:	b085      	sub	sp, #20
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	60f8      	str	r0, [r7, #12]
 800f502:	60b9      	str	r1, [r7, #8]
 800f504:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800f506:	68b9      	ldr	r1, [r7, #8]
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f7fe ff56 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f50e:	4604      	mov	r4, r0
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f7fe ffb6 	bl	800e482 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800f516:	4603      	mov	r3, r0
 800f518:	6879      	ldr	r1, [r7, #4]
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fe ff4d 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f520:	4603      	mov	r3, r0
 800f522:	4619      	mov	r1, r3
 800f524:	4620      	mov	r0, r4
 800f526:	f000 f805 	bl	800f534 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800f52a:	4603      	mov	r3, r0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3714      	adds	r7, #20
 800f530:	46bd      	mov	sp, r7
 800f532:	bd90      	pop	{r4, r7, pc}

0800f534 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	4053      	eors	r3, r2
}
 800f544:	4618      	mov	r0, r3
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800f550:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f554:	b08b      	sub	sp, #44	; 0x2c
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800f55c:	6879      	ldr	r1, [r7, #4]
 800f55e:	4608      	mov	r0, r1
 800f560:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f564:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	4608      	mov	r0, r1
 800f56c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f570:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 800f574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f578:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f57c:	eb18 0a00 	adds.w	sl, r8, r0
 800f580:	eb49 0b01 	adc.w	fp, r9, r1
 800f584:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800f588:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f58c:	2800      	cmp	r0, #0
 800f58e:	f171 0100 	sbcs.w	r1, r1, #0
 800f592:	db04      	blt.n	800f59e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 800f594:	f04f 0001 	mov.w	r0, #1
 800f598:	f04f 0100 	mov.w	r1, #0
 800f59c:	e003      	b.n	800f5a6 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 800f59e:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a2:	f04f 31ff 	mov.w	r1, #4294967295
 800f5a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800f5aa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800f5ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f5b2:	eb18 0400 	adds.w	r4, r8, r0
 800f5b6:	eb49 0501 	adc.w	r5, r9, r1
 800f5ba:	0fe9      	lsrs	r1, r5, #31
 800f5bc:	4608      	mov	r0, r1
 800f5be:	f04f 0100 	mov.w	r1, #0
 800f5c2:	1902      	adds	r2, r0, r4
 800f5c4:	eb41 0305 	adc.w	r3, r1, r5
 800f5c8:	f04f 0000 	mov.w	r0, #0
 800f5cc:	f04f 0100 	mov.w	r1, #0
 800f5d0:	0850      	lsrs	r0, r2, #1
 800f5d2:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800f5d6:	1059      	asrs	r1, r3, #1
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	4613      	mov	r3, r2
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	372c      	adds	r7, #44	; 0x2c
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f5e8:	4770      	bx	lr

0800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b084      	sub	sp, #16
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f5f2:	f107 030c 	add.w	r3, r7, #12
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff fee6 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6013      	str	r3, [r2, #0]
    return retval;
 800f602:	68fb      	ldr	r3, [r7, #12]
  }
 800f604:	4618      	mov	r0, r3
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b08a      	sub	sp, #40	; 0x28
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800f614:	f000 f85a 	bl	800f6cc <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800f618:	4603      	mov	r3, r0
 800f61a:	4619      	mov	r1, r3
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 f860 	bl	800f6e2 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f622:	4603      	mov	r3, r0
 800f624:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800f626:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800f62a:	f000 f88c 	bl	800f746 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800f62e:	4603      	mov	r3, r0
 800f630:	4618      	mov	r0, r3
 800f632:	f000 f874 	bl	800f71e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f636:	4603      	mov	r3, r0
 800f638:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800f63a:	4823      	ldr	r0, [pc, #140]	; (800f6c8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800f63c:	f000 f883 	bl	800f746 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800f640:	4603      	mov	r3, r0
 800f642:	4618      	mov	r0, r3
 800f644:	f000 f86b 	bl	800f71e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f648:	4603      	mov	r3, r0
 800f64a:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800f64c:	69b9      	ldr	r1, [r7, #24]
 800f64e:	6a38      	ldr	r0, [r7, #32]
 800f650:	f000 f886 	bl	800f760 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f654:	4603      	mov	r3, r0
 800f656:	4619      	mov	r1, r3
 800f658:	69f8      	ldr	r0, [r7, #28]
 800f65a:	f000 f8a3 	bl	800f7a4 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f65e:	4603      	mov	r3, r0
 800f660:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800f662:	2300      	movs	r3, #0
 800f664:	627b      	str	r3, [r7, #36]	; 0x24
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	2b02      	cmp	r3, #2
 800f66a:	dc21      	bgt.n	800f6b0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800f66c:	6979      	ldr	r1, [r7, #20]
 800f66e:	6a38      	ldr	r0, [r7, #32]
 800f670:	f000 f876 	bl	800f760 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f674:	4603      	mov	r3, r0
 800f676:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800f678:	f000 f8b2 	bl	800f7e0 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800f67c:	4603      	mov	r3, r0
 800f67e:	6939      	ldr	r1, [r7, #16]
 800f680:	4618      	mov	r0, r3
 800f682:	f000 f8b6 	bl	800f7f2 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f686:	4603      	mov	r3, r0
 800f688:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800f68a:	68f9      	ldr	r1, [r7, #12]
 800f68c:	6978      	ldr	r0, [r7, #20]
 800f68e:	f000 f8ce 	bl	800f82e <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f692:	4603      	mov	r3, r0
 800f694:	4618      	mov	r0, r3
 800f696:	f000 f8ec 	bl	800f872 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f69a:	4603      	mov	r3, r0
 800f69c:	4619      	mov	r1, r3
 800f69e:	6978      	ldr	r0, [r7, #20]
 800f6a0:	f000 f880 	bl	800f7a4 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f6ae:	e7da      	b.n	800f666 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800f6b0:	6978      	ldr	r0, [r7, #20]
 800f6b2:	f000 f8f8 	bl	800f8a6 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 f90a 	bl	800f8d2 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f6be:	4603      	mov	r3, r0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3728      	adds	r7, #40	; 0x28
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	c3c3c3c4 	.word	0xc3c3c3c4

0800f6cc <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f6d0:	f000 f945 	bl	800f95e <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7ff fe81 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f6dc:	4603      	mov	r3, r0
  }
 800f6de:	4618      	mov	r0, r3
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800f6e2:	b590      	push	{r4, r7, lr}
 800f6e4:	b083      	sub	sp, #12
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
 800f6ea:	6039      	str	r1, [r7, #0]
 800f6ec:	1d3b      	adds	r3, r7, #4
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7ff fe6a 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	681c      	ldr	r4, [r3, #0]
 800f6f8:	463b      	mov	r3, r7
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7ff fe64 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f700:	4603      	mov	r3, r0
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4619      	mov	r1, r3
 800f706:	4620      	mov	r0, r4
 800f708:	f7ff ff22 	bl	800f550 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800f70c:	4603      	mov	r3, r0
 800f70e:	4618      	mov	r0, r3
 800f710:	f7ff ff6b 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f714:	4603      	mov	r3, r0
 800f716:	4618      	mov	r0, r3
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd90      	pop	{r4, r7, pc}

0800f71e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f71e:	b590      	push	{r4, r7, lr}
 800f720:	b085      	sub	sp, #20
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f726:	f107 030c 	add.w	r3, r7, #12
 800f72a:	4618      	mov	r0, r3
 800f72c:	f000 f91e 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f730:	4604      	mov	r4, r0
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7fe fe36 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f738:	4603      	mov	r3, r0
 800f73a:	6023      	str	r3, [r4, #0]
    return retval;
 800f73c:	68fb      	ldr	r3, [r7, #12]
  }
 800f73e:	4618      	mov	r0, r3
 800f740:	3714      	adds	r7, #20
 800f742:	46bd      	mov	sp, r7
 800f744:	bd90      	pop	{r4, r7, pc}

0800f746 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800f746:	b580      	push	{r7, lr}
 800f748:	b082      	sub	sp, #8
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800f74e:	2100      	movs	r1, #0
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7fe fd71 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f756:	4603      	mov	r3, r0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f76a:	1d3b      	adds	r3, r7, #4
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7ff fe2b 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f772:	4603      	mov	r3, r0
 800f774:	681d      	ldr	r5, [r3, #0]
 800f776:	463b      	mov	r3, r7
 800f778:	4618      	mov	r0, r3
 800f77a:	f000 f8f7 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f77e:	4603      	mov	r3, r0
 800f780:	681e      	ldr	r6, [r3, #0]
 800f782:	f107 030c 	add.w	r3, r7, #12
 800f786:	4618      	mov	r0, r3
 800f788:	f000 f8f0 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f78c:	4604      	mov	r4, r0
 800f78e:	4631      	mov	r1, r6
 800f790:	4628      	mov	r0, r5
 800f792:	f7fe fcc1 	bl	800e118 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f796:	4603      	mov	r3, r0
 800f798:	6023      	str	r3, [r4, #0]
  return c;
 800f79a:	68fb      	ldr	r3, [r7, #12]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3714      	adds	r7, #20
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7a4 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800f7a4:	b590      	push	{r4, r7, lr}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
 800f7ae:	1d3b      	adds	r3, r7, #4
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 f8db 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	681c      	ldr	r4, [r3, #0]
 800f7ba:	463b      	mov	r3, r7
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f000 f8d5 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f7fe fe27 	bl	800e41c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f000 f8d6 	bl	800f982 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	4618      	mov	r0, r3
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd90      	pop	{r4, r7, pc}

0800f7e0 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f7e4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800f7e8:	f7ff ff99 	bl	800f71e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f7ec:	4603      	mov	r3, r0
  }
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800f7f2:	b590      	push	{r4, r7, lr}
 800f7f4:	b083      	sub	sp, #12
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	6039      	str	r1, [r7, #0]
 800f7fc:	1d3b      	adds	r3, r7, #4
 800f7fe:	4618      	mov	r0, r3
 800f800:	f000 f8b4 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f804:	4603      	mov	r3, r0
 800f806:	681c      	ldr	r4, [r3, #0]
 800f808:	463b      	mov	r3, r7
 800f80a:	4618      	mov	r0, r3
 800f80c:	f000 f8ae 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f810:	4603      	mov	r3, r0
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4619      	mov	r1, r3
 800f816:	4620      	mov	r0, r4
 800f818:	f7ff fe0e 	bl	800f438 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800f81c:	4603      	mov	r3, r0
 800f81e:	4618      	mov	r0, r3
 800f820:	f000 f8af 	bl	800f982 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f824:	4603      	mov	r3, r0
 800f826:	4618      	mov	r0, r3
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd90      	pop	{r4, r7, pc}

0800f82e <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f82e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f830:	b085      	sub	sp, #20
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
 800f836:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f838:	1d3b      	adds	r3, r7, #4
 800f83a:	4618      	mov	r0, r3
 800f83c:	f000 f896 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f840:	4603      	mov	r3, r0
 800f842:	681d      	ldr	r5, [r3, #0]
 800f844:	463b      	mov	r3, r7
 800f846:	4618      	mov	r0, r3
 800f848:	f000 f890 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f84c:	4603      	mov	r3, r0
 800f84e:	681e      	ldr	r6, [r3, #0]
 800f850:	f107 030c 	add.w	r3, r7, #12
 800f854:	4618      	mov	r0, r3
 800f856:	f000 f856 	bl	800f906 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f85a:	4604      	mov	r4, r0
 800f85c:	4631      	mov	r1, r6
 800f85e:	4628      	mov	r0, r5
 800f860:	f7fe fc5a 	bl	800e118 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f864:	4603      	mov	r3, r0
 800f866:	6023      	str	r3, [r4, #0]
  return c;
 800f868:	68fb      	ldr	r3, [r7, #12]
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3714      	adds	r7, #20
 800f86e:	46bd      	mov	sp, r7
 800f870:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f872 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f872:	b5b0      	push	{r4, r5, r7, lr}
 800f874:	b084      	sub	sp, #16
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f87a:	1d3b      	adds	r3, r7, #4
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 f842 	bl	800f906 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f882:	4603      	mov	r3, r0
 800f884:	681d      	ldr	r5, [r3, #0]
 800f886:	f107 030c 	add.w	r3, r7, #12
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 f86e 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f890:	4604      	mov	r4, r0
 800f892:	4628      	mov	r0, r5
 800f894:	f000 f886 	bl	800f9a4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800f898:	4603      	mov	r3, r0
 800f89a:	6023      	str	r3, [r4, #0]
  return result;
 800f89c:	68fb      	ldr	r3, [r7, #12]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3710      	adds	r7, #16
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bdb0      	pop	{r4, r5, r7, pc}

0800f8a6 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800f8a6:	b590      	push	{r4, r7, lr}
 800f8a8:	b085      	sub	sp, #20
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800f8ae:	1d3b      	adds	r3, r7, #4
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 f85b 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	f107 030c 	add.w	r3, r7, #12
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f000 f87d 	bl	800f9bc <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	6823      	ldr	r3, [r4, #0]
 800f8c6:	6013      	str	r3, [r2, #0]
  return c;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3714      	adds	r7, #20
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd90      	pop	{r4, r7, pc}

0800f8d2 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f8d2:	b5b0      	push	{r4, r5, r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f8da:	1d3b      	adds	r3, r7, #4
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f000 f86d 	bl	800f9bc <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	681d      	ldr	r5, [r3, #0]
 800f8e6:	f107 030c 	add.w	r3, r7, #12
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff fd6c 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f000 f86d 	bl	800f9d2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	6023      	str	r3, [r4, #0]
  return result;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bdb0      	pop	{r4, r5, r7, pc}

0800f906 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4618      	mov	r0, r3
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800f91c:	b590      	push	{r4, r7, lr}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800f928:	f107 0308 	add.w	r3, r7, #8
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7ff fd4b 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f932:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800f934:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800f936:	1d3b      	adds	r3, r7, #4
 800f938:	4618      	mov	r0, r3
 800f93a:	f7ff fd45 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f93e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	461a      	mov	r2, r3
 800f944:	4621      	mov	r1, r4
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f7ff fdd7 	bl	800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f94c:	4603      	mov	r3, r0
 800f94e:	4618      	mov	r0, r3
 800f950:	f7ff fe4b 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f954:	4603      	mov	r3, r0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3714      	adds	r7, #20
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd90      	pop	{r4, r7, pc}

0800f95e <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800f95e:	b580      	push	{r7, lr}
 800f960:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800f962:	f7fd fe11 	bl	800d588 <_ZNSt14numeric_limitsIlE3maxEv>
 800f966:	4603      	mov	r3, r0
  }
 800f968:	4618      	mov	r0, r3
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4618      	mov	r0, r3
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f982:	b580      	push	{r7, lr}
 800f984:	b084      	sub	sp, #16
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f98a:	f107 030c 	add.w	r3, r7, #12
 800f98e:	4618      	mov	r0, r3
 800f990:	f7ff ffec 	bl	800f96c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f994:	4602      	mov	r2, r0
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6013      	str	r3, [r2, #0]
    return retval;
 800f99a:	68fb      	ldr	r3, [r7, #12]
  }
 800f99c:	4618      	mov	r0, r3
 800f99e:	3710      	adds	r7, #16
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f82f 	bl	800fa10 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800f9b2:	4603      	mov	r3, r0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	370c      	adds	r7, #12
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr

0800f9d2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b082      	sub	sp, #8
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f85a 	bl	800fa94 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800f9e0:	4603      	mov	r3, r0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b082      	sub	sp, #8
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	bf0c      	ite	eq
 800f9f8:	2301      	moveq	r3, #1
 800f9fa:	2300      	movne	r3, #0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fe fd2e 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800fa04:	4603      	mov	r3, r0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
	...

0800fa10 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b08a      	sub	sp, #40	; 0x28
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800fa18:	f7fe fb5b 	bl	800e0d2 <_ZNSt14numeric_limitsIlE3minEv>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fe fcc0 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fa24:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800fa26:	f7fd fdaf 	bl	800d588 <_ZNSt14numeric_limitsIlE3maxEv>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7fe fcb9 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fa32:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fa34:	2320      	movs	r3, #32
 800fa36:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fa38:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fa3c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fa3e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800fa42:	f7fe fcaf 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fa46:	4603      	mov	r3, r0
 800fa48:	4619      	mov	r1, r3
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7fe fcf4 	bl	800e438 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fa50:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fa52:	480f      	ldr	r0, [pc, #60]	; (800fa90 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800fa54:	f7fe fca6 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fe fcc9 	bl	800e3f4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fa62:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fa64:	2102      	movs	r1, #2
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7ff fd01 	bl	800f46e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800fa6c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	6a39      	ldr	r1, [r7, #32]
 800fa72:	6978      	ldr	r0, [r7, #20]
 800fa74:	f7ff fd41 	bl	800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fa78:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa7e:	6938      	ldr	r0, [r7, #16]
 800fa80:	f7ff fd3b 	bl	800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fa84:	60f8      	str	r0, [r7, #12]
    return result;
 800fa86:	68fb      	ldr	r3, [r7, #12]
  }
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3728      	adds	r7, #40	; 0x28
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	e0000001 	.word	0xe0000001

0800fa94 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08a      	sub	sp, #40	; 0x28
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800fa9c:	f7fe fb19 	bl	800e0d2 <_ZNSt14numeric_limitsIlE3minEv>
 800faa0:	4603      	mov	r3, r0
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fe fc7e 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800faa8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800faaa:	f7fd fd6d 	bl	800d588 <_ZNSt14numeric_limitsIlE3maxEv>
 800faae:	4603      	mov	r3, r0
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe fc77 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fab6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fab8:	2320      	movs	r3, #32
 800faba:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fabc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fac0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fac2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800fac6:	f7fe fc6d 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800faca:	4603      	mov	r3, r0
 800facc:	4619      	mov	r1, r3
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f7fe fcb2 	bl	800e438 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fad4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fad6:	480f      	ldr	r0, [pc, #60]	; (800fb14 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800fad8:	f7fe fc64 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fadc:	4603      	mov	r3, r0
 800fade:	4619      	mov	r1, r3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7fe fc87 	bl	800e3f4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fae6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fae8:	2101      	movs	r1, #1
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7ff fcbf 	bl	800f46e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800faf0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	6a39      	ldr	r1, [r7, #32]
 800faf6:	6978      	ldr	r0, [r7, #20]
 800faf8:	f7ff fcff 	bl	800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fafc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb02:	6938      	ldr	r0, [r7, #16]
 800fb04:	f7ff fcf9 	bl	800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fb08:	60f8      	str	r0, [r7, #12]
    return result;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
  }
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3728      	adds	r7, #40	; 0x28
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	c0000001 	.word	0xc0000001

0800fb18 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08a      	sub	sp, #40	; 0x28
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800fb20:	482c      	ldr	r0, [pc, #176]	; (800fbd4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800fb22:	f7ff fc70 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fb26:	4603      	mov	r3, r0
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7ff fc58 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800fb32:	4829      	ldr	r0, [pc, #164]	; (800fbd8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800fb34:	f7ff fc67 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff fc4f 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fb40:	4603      	mov	r3, r0
 800fb42:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800fb44:	f000 f86c 	bl	800fc20 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 f870 	bl	800fc32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fb52:	4603      	mov	r3, r0
 800fb54:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800fb56:	69f9      	ldr	r1, [r7, #28]
 800fb58:	69f8      	ldr	r0, [r7, #28]
 800fb5a:	f000 f83f 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800fb62:	69f9      	ldr	r1, [r7, #28]
 800fb64:	69b8      	ldr	r0, [r7, #24]
 800fb66:	f000 f839 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800fb6e:	69b9      	ldr	r1, [r7, #24]
 800fb70:	69b8      	ldr	r0, [r7, #24]
 800fb72:	f000 f833 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fb76:	4603      	mov	r3, r0
 800fb78:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800fb7a:	6938      	ldr	r0, [r7, #16]
 800fb7c:	f000 f877 	bl	800fc6e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800fb80:	4603      	mov	r3, r0
 800fb82:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800fb84:	6979      	ldr	r1, [r7, #20]
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f000 f853 	bl	800fc32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	6a39      	ldr	r1, [r7, #32]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f000 f823 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fb96:	4603      	mov	r3, r0
 800fb98:	69b9      	ldr	r1, [r7, #24]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f849 	bl	800fc32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fba0:	4603      	mov	r3, r0
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 f879 	bl	800fc9a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800fbac:	68b9      	ldr	r1, [r7, #8]
 800fbae:	69f8      	ldr	r0, [r7, #28]
 800fbb0:	f000 f83f 	bl	800fc32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbba:	f000 f80f 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbc4:	f000 f87f 	bl	800fcc6 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fbc8:	4603      	mov	r3, r0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3728      	adds	r7, #40	; 0x28
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	70f5a894 	.word	0x70f5a894
 800fbd8:	2aaaaaab 	.word	0x2aaaaaab

0800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800fbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800fbe6:	1d3b      	adds	r3, r7, #4
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7ff fbed 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	681d      	ldr	r5, [r3, #0]
 800fbf2:	463b      	mov	r3, r7
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff fbe7 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	681e      	ldr	r6, [r3, #0]
 800fbfe:	f107 030c 	add.w	r3, r7, #12
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7ff fbe0 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fc08:	4604      	mov	r4, r0
 800fc0a:	4631      	mov	r1, r6
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f7fe fa83 	bl	800e118 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800fc12:	4603      	mov	r3, r0
 800fc14:	6023      	str	r3, [r4, #0]
  return c;
 800fc16:	68fb      	ldr	r3, [r7, #12]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc20 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800fc20:	b580      	push	{r7, lr}
 800fc22:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800fc24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800fc28:	f7ff fbd9 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fc2c:	4603      	mov	r3, r0
  }
 800fc2e:	4618      	mov	r0, r3
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800fc32:	b590      	push	{r4, r7, lr}
 800fc34:	b083      	sub	sp, #12
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
 800fc3a:	6039      	str	r1, [r7, #0]
 800fc3c:	1d3b      	adds	r3, r7, #4
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7ff fbc2 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fc44:	4603      	mov	r3, r0
 800fc46:	681c      	ldr	r4, [r3, #0]
 800fc48:	463b      	mov	r3, r7
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff fbbc 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fc50:	4603      	mov	r3, r0
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4619      	mov	r1, r3
 800fc56:	4620      	mov	r0, r4
 800fc58:	f7fe fbe0 	bl	800e41c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7ff fcc3 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fc64:	4603      	mov	r3, r0
 800fc66:	4618      	mov	r0, r3
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd90      	pop	{r4, r7, pc}

0800fc6e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b082      	sub	sp, #8
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fc76:	1d3b      	adds	r3, r7, #4
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff fba5 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fc7e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 f83d 	bl	800fd02 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff fcad 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fc90:	4603      	mov	r3, r0
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3708      	adds	r7, #8
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b082      	sub	sp, #8
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fca2:	1d3b      	adds	r3, r7, #4
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7ff fb8f 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fcaa:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff fbb6 	bl	800f420 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7ff fc97 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fcbc:	4603      	mov	r3, r0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800fcc6:	b590      	push	{r4, r7, lr}
 800fcc8:	b083      	sub	sp, #12
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800fcd0:	1d3b      	adds	r3, r7, #4
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fb78 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fcd8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fcda:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800fcdc:	463b      	mov	r3, r7
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7ff fb72 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fce4:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4619      	mov	r1, r3
 800fcea:	4620      	mov	r0, r4
 800fcec:	f000 f815 	bl	800fd1a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7ff fc79 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fcf8:	4603      	mov	r3, r0
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd90      	pop	{r4, r7, pc}

0800fd02 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b082      	sub	sp, #8
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f813 	bl	800fd36 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800fd10:	4603      	mov	r3, r0
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3708      	adds	r7, #8
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b082      	sub	sp, #8
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	6078      	str	r0, [r7, #4]
 800fd22:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800fd24:	6839      	ldr	r1, [r7, #0]
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 f812 	bl	800fd50 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800fd2c:	4603      	mov	r3, r0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b082      	sub	sp, #8
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800fd3e:	2102      	movs	r1, #2
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7fe fa79 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800fd46:	4603      	mov	r3, r0
  }
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
 800fd5a:	6839      	ldr	r1, [r7, #0]
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f7fe fb5d 	bl	800e41c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800fd62:	4603      	mov	r3, r0
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	781a      	ldrb	r2, [r3, #0]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d201      	bcs.n	800fd86 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	e000      	b.n	800fd88 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 800fd86:	687b      	ldr	r3, [r7, #4]
    }
 800fd88:	4618      	mov	r0, r3
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f993 2000 	ldrsb.w	r2, [r3]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	f993 3000 	ldrsb.w	r3, [r3]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	da01      	bge.n	800fdb2 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	e000      	b.n	800fdb4 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800fdb2:	687b      	ldr	r3, [r7, #4]
    }
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	370c      	adds	r7, #12
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800fdd4:	68b9      	ldr	r1, [r7, #8]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fe f99e 	bl	800e118 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800fddc:	4603      	mov	r3, r0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b088      	sub	sp, #32
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	60f8      	str	r0, [r7, #12]
 800fdee:	60b9      	str	r1, [r7, #8]
 800fdf0:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7ff fad5 	bl	800f3a4 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800fdfa:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	1ad2      	subs	r2, r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	601a      	str	r2, [r3, #0]
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 800fe12:	61bb      	str	r3, [r7, #24]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 800fe14:	69b8      	ldr	r0, [r7, #24]
 800fe16:	f7ff fbe8 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7ff fbf5 	bl	800f60c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800fe22:	4603      	mov	r3, r0
 800fe24:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800fe26:	f107 0314 	add.w	r3, r7, #20
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff facc 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fe30:	4603      	mov	r3, r0
 800fe32:	681b      	ldr	r3, [r3, #0]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3720      	adds	r7, #32
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	ed2d 8b02 	vpush	{d8}
 800fe42:	b08e      	sub	sp, #56	; 0x38
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800fe4e:	68b8      	ldr	r0, [r7, #8]
 800fe50:	f7fe f841 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fe54:	4603      	mov	r3, r0
 800fe56:	3b01      	subs	r3, #1
 800fe58:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800fe5a:	683a      	ldr	r2, [r7, #0]
 800fe5c:	6a39      	ldr	r1, [r7, #32]
 800fe5e:	68b8      	ldr	r0, [r7, #8]
 800fe60:	f7ff fa71 	bl	800f346 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800fe64:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	683a      	ldr	r2, [r7, #0]
 800fe6a:	6a39      	ldr	r1, [r7, #32]
 800fe6c:	68b8      	ldr	r0, [r7, #8]
 800fe6e:	f7fe fb3f 	bl	800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fe72:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800fe74:	2300      	movs	r3, #0
 800fe76:	637b      	str	r3, [r7, #52]	; 0x34
 800fe78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe7a:	69fb      	ldr	r3, [r7, #28]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	f280 808f 	bge.w	800ffa0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800fe82:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800fe86:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 800fe88:	2300      	movs	r3, #0
 800fe8a:	633b      	str	r3, [r7, #48]	; 0x30
 800fe8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	da15      	bge.n	800fec0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800fe94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe96:	69ba      	ldr	r2, [r7, #24]
 800fe98:	fb02 f203 	mul.w	r2, r2, r3
 800fe9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9e:	4413      	add	r3, r2
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	441a      	add	r2, r3
 800fea6:	f107 0314 	add.w	r3, r7, #20
 800feaa:	4611      	mov	r1, r2
 800feac:	4618      	mov	r0, r3
 800feae:	f7fd fd07 	bl	800d8c0 <_ZSt3maxIfERKT_S2_S2_>
 800feb2:	4603      	mov	r3, r0
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feba:	3301      	adds	r3, #1
 800febc:	633b      	str	r3, [r7, #48]	; 0x30
 800febe:	e7e5      	b.n	800fe8c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800fec0:	f04f 0300 	mov.w	r3, #0
 800fec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800fec6:	2300      	movs	r3, #0
 800fec8:	62bb      	str	r3, [r7, #40]	; 0x28
 800feca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	429a      	cmp	r2, r3
 800fed0:	da29      	bge.n	800ff26 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 800fed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed4:	69ba      	ldr	r2, [r7, #24]
 800fed6:	fb02 f203 	mul.w	r2, r2, r3
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	4413      	add	r3, r2
 800fee4:	ed93 7a00 	vldr	s14, [r3]
 800fee8:	edd7 7a05 	vldr	s15, [r7, #20]
 800feec:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef6:	4610      	mov	r0, r2
 800fef8:	4619      	mov	r1, r3
 800fefa:	f7f0 fea5 	bl	8000c48 <__aeabi_d2f>
 800fefe:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 800ff02:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ff06:	eeb0 0a67 	vmov.f32	s0, s15
 800ff0a:	f7f1 f8af 	bl	800106c <_ZSt3expf>
 800ff0e:	eeb0 7a40 	vmov.f32	s14, s0
 800ff12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ff16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff1a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	3301      	adds	r3, #1
 800ff22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff24:	e7d1      	b.n	800feca <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800ff26:	2300      	movs	r3, #0
 800ff28:	627b      	str	r3, [r7, #36]	; 0x24
 800ff2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	da32      	bge.n	800ff98 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800ff32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	fb02 f203 	mul.w	r2, r2, r3
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	4413      	add	r3, r2
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	4413      	add	r3, r2
 800ff44:	ed93 7a00 	vldr	s14, [r3]
 800ff48:	edd7 7a05 	vldr	s15, [r7, #20]
 800ff4c:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff56:	4610      	mov	r0, r2
 800ff58:	4619      	mov	r1, r3
 800ff5a:	f7f0 fe75 	bl	8000c48 <__aeabi_d2f>
 800ff5e:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800ff62:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ff66:	eeb0 0a67 	vmov.f32	s0, s15
 800ff6a:	f7f1 f87f 	bl	800106c <_ZSt3expf>
 800ff6e:	eef0 6a40 	vmov.f32	s13, s0
 800ff72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff74:	69ba      	ldr	r2, [r7, #24]
 800ff76:	fb02 f203 	mul.w	r2, r2, r3
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7c:	4413      	add	r3, r2
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff82:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 800ff84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ff88:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800ff8c:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff92:	3301      	adds	r3, #1
 800ff94:	627b      	str	r3, [r7, #36]	; 0x24
 800ff96:	e7c8      	b.n	800ff2a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 800ff98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff9e:	e76b      	b.n	800fe78 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 800ffa0:	bf00      	nop
 800ffa2:	3738      	adds	r7, #56	; 0x38
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	ecbd 8b02 	vpop	{d8}
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800ffac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ffb0:	b08a      	sub	sp, #40	; 0x28
 800ffb2:	af04      	add	r7, sp, #16
 800ffb4:	60f8      	str	r0, [r7, #12]
 800ffb6:	60b9      	str	r1, [r7, #8]
 800ffb8:	607a      	str	r2, [r7, #4]
 800ffba:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d004      	beq.n	800ffce <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b09      	cmp	r3, #9
 800ffca:	f040 80ef 	bne.w	80101ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
    if (input->type == kTfLiteUInt8) {
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	2b03      	cmp	r3, #3
 800ffd4:	d133      	bne.n	801003e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x92>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	2b03      	cmp	r3, #3
 800ffdc:	d018      	beq.n	8010010 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x64>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	695c      	ldr	r4, [r3, #20]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fd fa70 	bl	800d4cc <TfLiteTypeGetName>
 800ffec:	4605      	mov	r5, r0
 800ffee:	2003      	movs	r0, #3
 800fff0:	f7fd fa6c 	bl	800d4cc <TfLiteTypeGetName>
 800fff4:	4603      	mov	r3, r0
 800fff6:	9303      	str	r3, [sp, #12]
 800fff8:	9502      	str	r5, [sp, #8]
 800fffa:	4b91      	ldr	r3, [pc, #580]	; (8010240 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>)
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	4b91      	ldr	r3, [pc, #580]	; (8010244 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	23c3      	movs	r3, #195	; 0xc3
 8010004:	4a90      	ldr	r2, [pc, #576]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8010006:	4991      	ldr	r1, [pc, #580]	; (801024c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	47a0      	blx	r4
 801000c:	2301      	movs	r3, #1
 801000e:	e112      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	691b      	ldr	r3, [r3, #16]
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 8094 	beq.w	8010142 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	695c      	ldr	r4, [r3, #20]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	2200      	movs	r2, #0
 8010024:	9203      	str	r2, [sp, #12]
 8010026:	9302      	str	r3, [sp, #8]
 8010028:	4b89      	ldr	r3, [pc, #548]	; (8010250 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 801002a:	9301      	str	r3, [sp, #4]
 801002c:	4b89      	ldr	r3, [pc, #548]	; (8010254 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801002e:	9300      	str	r3, [sp, #0]
 8010030:	23c4      	movs	r3, #196	; 0xc4
 8010032:	4a85      	ldr	r2, [pc, #532]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8010034:	4988      	ldr	r1, [pc, #544]	; (8010258 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	47a0      	blx	r4
 801003a:	2301      	movs	r3, #1
 801003c:	e0fb      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	2b09      	cmp	r3, #9
 8010044:	d018      	beq.n	8010078 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	695c      	ldr	r4, [r3, #20]
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	4618      	mov	r0, r3
 8010050:	f7fd fa3c 	bl	800d4cc <TfLiteTypeGetName>
 8010054:	4605      	mov	r5, r0
 8010056:	2009      	movs	r0, #9
 8010058:	f7fd fa38 	bl	800d4cc <TfLiteTypeGetName>
 801005c:	4603      	mov	r3, r0
 801005e:	9303      	str	r3, [sp, #12]
 8010060:	9502      	str	r5, [sp, #8]
 8010062:	4b7e      	ldr	r3, [pc, #504]	; (801025c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 8010064:	9301      	str	r3, [sp, #4]
 8010066:	4b7e      	ldr	r3, [pc, #504]	; (8010260 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	23c6      	movs	r3, #198	; 0xc6
 801006c:	4a76      	ldr	r2, [pc, #472]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 801006e:	4977      	ldr	r1, [pc, #476]	; (801024c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	47a0      	blx	r4
 8010074:	2301      	movs	r3, #1
 8010076:	e0de      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      if (output->type == kTfLiteInt16) {
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	2b07      	cmp	r3, #7
 801007e:	d116      	bne.n	80100ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	691b      	ldr	r3, [r3, #16]
 8010084:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8010088:	d05b      	beq.n	8010142 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	695c      	ldr	r4, [r3, #20]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	691b      	ldr	r3, [r3, #16]
 8010092:	4a74      	ldr	r2, [pc, #464]	; (8010264 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8010094:	9203      	str	r2, [sp, #12]
 8010096:	9302      	str	r3, [sp, #8]
 8010098:	4b73      	ldr	r3, [pc, #460]	; (8010268 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 801009a:	9301      	str	r3, [sp, #4]
 801009c:	4b6d      	ldr	r3, [pc, #436]	; (8010254 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	23c8      	movs	r3, #200	; 0xc8
 80100a2:	4a69      	ldr	r2, [pc, #420]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80100a4:	496c      	ldr	r1, [pc, #432]	; (8010258 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	47a0      	blx	r4
 80100aa:	2301      	movs	r3, #1
 80100ac:	e0c3      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	2b09      	cmp	r3, #9
 80100b4:	d018      	beq.n	80100e8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x13c>
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	695c      	ldr	r4, [r3, #20]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fd fa04 	bl	800d4cc <TfLiteTypeGetName>
 80100c4:	4605      	mov	r5, r0
 80100c6:	2009      	movs	r0, #9
 80100c8:	f7fd fa00 	bl	800d4cc <TfLiteTypeGetName>
 80100cc:	4603      	mov	r3, r0
 80100ce:	9303      	str	r3, [sp, #12]
 80100d0:	9502      	str	r5, [sp, #8]
 80100d2:	4b62      	ldr	r3, [pc, #392]	; (801025c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 80100d4:	9301      	str	r3, [sp, #4]
 80100d6:	4b5b      	ldr	r3, [pc, #364]	; (8010244 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	23cc      	movs	r3, #204	; 0xcc
 80100dc:	4a5a      	ldr	r2, [pc, #360]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80100de:	495b      	ldr	r1, [pc, #364]	; (801024c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	47a0      	blx	r4
 80100e4:	2301      	movs	r3, #1
 80100e6:	e0a6      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	691b      	ldr	r3, [r3, #16]
 80100ec:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80100f0:	d012      	beq.n	8010118 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	695c      	ldr	r4, [r3, #20]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80100fe:	9203      	str	r2, [sp, #12]
 8010100:	9302      	str	r3, [sp, #8]
 8010102:	4b5a      	ldr	r3, [pc, #360]	; (801026c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	4b53      	ldr	r3, [pc, #332]	; (8010254 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	23cd      	movs	r3, #205	; 0xcd
 801010c:	4a4e      	ldr	r2, [pc, #312]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 801010e:	4952      	ldr	r1, [pc, #328]	; (8010258 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	47a0      	blx	r4
 8010114:	2301      	movs	r3, #1
 8010116:	e08e      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	edd3 7a03 	vldr	s15, [r3, #12]
 801011e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010270 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>
 8010122:	eef4 7a47 	vcmp.f32	s15, s14
 8010126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012a:	d00a      	beq.n	8010142 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	695c      	ldr	r4, [r3, #20]
 8010130:	4b50      	ldr	r3, [pc, #320]	; (8010274 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8010132:	9300      	str	r3, [sp, #0]
 8010134:	23ce      	movs	r3, #206	; 0xce
 8010136:	4a44      	ldr	r2, [pc, #272]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8010138:	494f      	ldr	r1, [pc, #316]	; (8010278 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	47a0      	blx	r4
 801013e:	2301      	movs	r3, #1
 8010140:	e079      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 8010146:	4618      	mov	r0, r3
 8010148:	f7f0 fa2e 	bl	80005a8 <__aeabi_f2d>
 801014c:	4680      	mov	r8, r0
 801014e:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 8010154:	4618      	mov	r0, r3
 8010156:	f7f0 fa27 	bl	80005a8 <__aeabi_f2d>
 801015a:	4682      	mov	sl, r0
 801015c:	468b      	mov	fp, r1
 801015e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010160:	3308      	adds	r3, #8
 8010162:	f107 0214 	add.w	r2, r7, #20
 8010166:	4619      	mov	r1, r3
 8010168:	2005      	movs	r0, #5
 801016a:	ec4b ab11 	vmov	d1, sl, fp
 801016e:	ec49 8b10 	vmov	d0, r8, r9
 8010172:	f7fd fadd 	bl	800d730 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 8010176:	697a      	ldr	r2, [r7, #20]
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 801017c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017e:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8010180:	221f      	movs	r2, #31
 8010182:	4619      	mov	r1, r3
 8010184:	2005      	movs	r0, #5
 8010186:	f7fd fb1b 	bl	800d7c0 <_ZN6tflite20CalculateInputRadiusEiii>
 801018a:	4603      	mov	r3, r0
 801018c:	4618      	mov	r0, r3
 801018e:	f7f0 f9f9 	bl	8000584 <__aeabi_i2d>
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	4614      	mov	r4, r2
 8010198:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 801019c:	4620      	mov	r0, r4
 801019e:	4629      	mov	r1, r5
 80101a0:	f7f0 fd0a 	bl	8000bb8 <__aeabi_d2iz>
 80101a4:	4602      	mov	r2, r0
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 80101aa:	e043      	b.n	8010234 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x288>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d018      	beq.n	80101e6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x23a>
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	695c      	ldr	r4, [r3, #20]
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fd f985 	bl	800d4cc <TfLiteTypeGetName>
 80101c2:	4605      	mov	r5, r0
 80101c4:	2001      	movs	r0, #1
 80101c6:	f7fd f981 	bl	800d4cc <TfLiteTypeGetName>
 80101ca:	4603      	mov	r3, r0
 80101cc:	9303      	str	r3, [sp, #12]
 80101ce:	9502      	str	r5, [sp, #8]
 80101d0:	4b2a      	ldr	r3, [pc, #168]	; (801027c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80101d2:	9301      	str	r3, [sp, #4]
 80101d4:	4b22      	ldr	r3, [pc, #136]	; (8010260 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 80101d6:	9300      	str	r3, [sp, #0]
 80101d8:	23de      	movs	r3, #222	; 0xde
 80101da:	4a1b      	ldr	r2, [pc, #108]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80101dc:	491b      	ldr	r1, [pc, #108]	; (801024c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	47a0      	blx	r4
 80101e2:	2301      	movs	r3, #1
 80101e4:	e027      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d018      	beq.n	8010220 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x274>
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	695c      	ldr	r4, [r3, #20]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fd f968 	bl	800d4cc <TfLiteTypeGetName>
 80101fc:	4605      	mov	r5, r0
 80101fe:	2001      	movs	r0, #1
 8010200:	f7fd f964 	bl	800d4cc <TfLiteTypeGetName>
 8010204:	4603      	mov	r3, r0
 8010206:	9303      	str	r3, [sp, #12]
 8010208:	9502      	str	r5, [sp, #8]
 801020a:	4b1c      	ldr	r3, [pc, #112]	; (801027c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801020c:	9301      	str	r3, [sp, #4]
 801020e:	4b0d      	ldr	r3, [pc, #52]	; (8010244 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	23df      	movs	r3, #223	; 0xdf
 8010214:	4a0c      	ldr	r2, [pc, #48]	; (8010248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8010216:	490d      	ldr	r1, [pc, #52]	; (801024c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	47a0      	blx	r4
 801021c:	2301      	movs	r3, #1
 801021e:	e00a      	b.n	8010236 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    op_data->beta = static_cast<double>(params->beta);
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4618      	mov	r0, r3
 8010226:	f7f0 f9bf 	bl	80005a8 <__aeabi_f2d>
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010230:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010240:	0801b360 	.word	0x0801b360
 8010244:	0801b370 	.word	0x0801b370
 8010248:	0801b2b8 	.word	0x0801b2b8
 801024c:	0801b344 	.word	0x0801b344
 8010250:	0801b39c 	.word	0x0801b39c
 8010254:	0801b3a0 	.word	0x0801b3a0
 8010258:	0801b380 	.word	0x0801b380
 801025c:	0801b3bc 	.word	0x0801b3bc
 8010260:	0801b3c8 	.word	0x0801b3c8
 8010264:	ffff8000 	.word	0xffff8000
 8010268:	0801b3d4 	.word	0x0801b3d4
 801026c:	0801b3dc 	.word	0x0801b3dc
 8010270:	3b800000 	.word	0x3b800000
 8010274:	0801b3fc 	.word	0x0801b3fc
 8010278:	0801b3e4 	.word	0x0801b3e4
 801027c:	0801b420 	.word	0x0801b420

08010280 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8010280:	b590      	push	{r4, r7, lr}
 8010282:	b089      	sub	sp, #36	; 0x24
 8010284:	af04      	add	r7, sp, #16
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801028a:	6838      	ldr	r0, [r7, #0]
 801028c:	f7fe f916 	bl	800e4bc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8010290:	4603      	mov	r3, r0
 8010292:	2b01      	cmp	r3, #1
 8010294:	bf14      	ite	ne
 8010296:	2301      	movne	r3, #1
 8010298:	2300      	moveq	r3, #0
 801029a:	b2db      	uxtb	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d013      	beq.n	80102c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	695c      	ldr	r4, [r3, #20]
 80102a4:	6838      	ldr	r0, [r7, #0]
 80102a6:	f7fe f909 	bl	800e4bc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2201      	movs	r2, #1
 80102ae:	9203      	str	r2, [sp, #12]
 80102b0:	9302      	str	r3, [sp, #8]
 80102b2:	4b25      	ldr	r3, [pc, #148]	; (8010348 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	4b25      	ldr	r3, [pc, #148]	; (801034c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	23e8      	movs	r3, #232	; 0xe8
 80102bc:	4a24      	ldr	r2, [pc, #144]	; (8010350 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80102be:	4925      	ldr	r1, [pc, #148]	; (8010354 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	47a0      	blx	r4
 80102c4:	2301      	movs	r3, #1
 80102c6:	e03b      	b.n	8010340 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80102c8:	6838      	ldr	r0, [r7, #0]
 80102ca:	f7fe f904 	bl	800e4d6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	bf14      	ite	ne
 80102d4:	2301      	movne	r3, #1
 80102d6:	2300      	moveq	r3, #0
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d013      	beq.n	8010306 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	695c      	ldr	r4, [r3, #20]
 80102e2:	6838      	ldr	r0, [r7, #0]
 80102e4:	f7fe f8f7 	bl	800e4d6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2201      	movs	r2, #1
 80102ec:	9203      	str	r2, [sp, #12]
 80102ee:	9302      	str	r3, [sp, #8]
 80102f0:	4b15      	ldr	r3, [pc, #84]	; (8010348 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 80102f2:	9301      	str	r3, [sp, #4]
 80102f4:	4b18      	ldr	r3, [pc, #96]	; (8010358 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	23e9      	movs	r3, #233	; 0xe9
 80102fa:	4a15      	ldr	r2, [pc, #84]	; (8010350 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80102fc:	4915      	ldr	r1, [pc, #84]	; (8010354 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	47a0      	blx	r4
 8010302:	2301      	movs	r3, #1
 8010304:	e01c      	b.n	8010340 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8010306:	2200      	movs	r2, #0
 8010308:	6839      	ldr	r1, [r7, #0]
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7fd fd5e 	bl	800ddcc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010310:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f7fd fb32 	bl	800d97c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8010318:	4603      	mov	r3, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	bfd4      	ite	le
 801031e:	2301      	movle	r3, #1
 8010320:	2300      	movgt	r3, #0
 8010322:	b2db      	uxtb	r3, r3
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00a      	beq.n	801033e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	695c      	ldr	r4, [r3, #20]
 801032c:	4b0b      	ldr	r3, [pc, #44]	; (801035c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	23eb      	movs	r3, #235	; 0xeb
 8010332:	4a07      	ldr	r2, [pc, #28]	; (8010350 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8010334:	490a      	ldr	r1, [pc, #40]	; (8010360 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	47a0      	blx	r4
 801033a:	2301      	movs	r3, #1
 801033c:	e000      	b.n	8010340 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>

  return kTfLiteOk;
 801033e:	2300      	movs	r3, #0
}
 8010340:	4618      	mov	r0, r3
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	bd90      	pop	{r4, r7, pc}
 8010348:	0801b430 	.word	0x0801b430
 801034c:	0801b434 	.word	0x0801b434
 8010350:	0801b2b8 	.word	0x0801b2b8
 8010354:	0801b380 	.word	0x0801b380
 8010358:	0801b444 	.word	0x0801b444
 801035c:	0801b458 	.word	0x0801b458
 8010360:	0801b3e4 	.word	0x0801b3e4

08010364 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 8010364:	b590      	push	{r4, r7, lr}
 8010366:	b093      	sub	sp, #76	; 0x4c
 8010368:	af02      	add	r7, sp, #8
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8010370:	f107 0310 	add.w	r3, r7, #16
 8010374:	68f9      	ldr	r1, [r7, #12]
 8010376:	4618      	mov	r0, r3
 8010378:	f7fd fe49 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f7fd fe64 	bl	800e04a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010382:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 8010384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010388:	68b9      	ldr	r1, [r7, #8]
 801038a:	4618      	mov	r0, r3
 801038c:	f7fd fe3f 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8010390:	68b8      	ldr	r0, [r7, #8]
 8010392:	f7fd fe6b 	bl	800e06c <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8010396:	4602      	mov	r2, r0
 8010398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801039c:	f107 0110 	add.w	r1, r7, #16
 80103a0:	9200      	str	r2, [sp, #0]
 80103a2:	4622      	mov	r2, r4
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff fd49 	bl	800fe3c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 80103aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fd fd7b 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 80103b4:	f107 0310 	add.w	r3, r7, #16
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fd fd76 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
}
 80103be:	bf00      	nop
 80103c0:	3744      	adds	r7, #68	; 0x44
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd90      	pop	{r4, r7, pc}

080103c6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 80103c6:	b590      	push	{r4, r7, lr}
 80103c8:	b0ab      	sub	sp, #172	; 0xac
 80103ca:	af02      	add	r7, sp, #8
 80103cc:	60f8      	str	r0, [r7, #12]
 80103ce:	60b9      	str	r1, [r7, #8]
 80103d0:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d127      	bne.n	801042a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 80103da:	f107 0310 	add.w	r3, r7, #16
 80103de:	68f9      	ldr	r1, [r7, #12]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fd fe14 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f7fd fd1c 	bl	800de24 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80103ec:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 80103ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103f2:	68b9      	ldr	r1, [r7, #8]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fd fe0a 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 80103fa:	68b8      	ldr	r0, [r7, #8]
 80103fc:	f7fd fd23 	bl	800de46 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010400:	4602      	mov	r2, r0
 8010402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010406:	f107 0110 	add.w	r1, r7, #16
 801040a:	9200      	str	r2, [sp, #0]
 801040c:	4622      	mov	r2, r4
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 f8c4 	bl	801059c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8010414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010418:	4618      	mov	r0, r3
 801041a:	f7fd fd46 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801041e:	f107 0310 	add.w	r3, r7, #16
 8010422:	4618      	mov	r0, r3
 8010424:	f7fd fd41 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 8010428:	e052      	b.n	80104d0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2b07      	cmp	r3, #7
 8010430:	d127      	bne.n	8010482 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8010432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010436:	68f9      	ldr	r1, [r7, #12]
 8010438:	4618      	mov	r0, r3
 801043a:	f7fd fde8 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	f7fd fe25 	bl	800e08e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010444:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8010446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801044a:	68b9      	ldr	r1, [r7, #8]
 801044c:	4618      	mov	r0, r3
 801044e:	f7fd fdde 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8010452:	68b8      	ldr	r0, [r7, #8]
 8010454:	f7fe ff66 	bl	800f324 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8010458:	4602      	mov	r2, r0
 801045a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801045e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010462:	9200      	str	r2, [sp, #0]
 8010464:	4622      	mov	r2, r4
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f9b3 	bl	80107d2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 801046c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010470:	4618      	mov	r0, r3
 8010472:	f7fd fd1a 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8010476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801047a:	4618      	mov	r0, r3
 801047c:	f7fd fd15 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
}
 8010480:	e026      	b.n	80104d0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8010482:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010486:	68f9      	ldr	r1, [r7, #12]
 8010488:	4618      	mov	r0, r3
 801048a:	f7fd fdc0 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801048e:	68f8      	ldr	r0, [r7, #12]
 8010490:	f7fd fdfd 	bl	800e08e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010494:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 8010496:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801049a:	68b9      	ldr	r1, [r7, #8]
 801049c:	4618      	mov	r0, r3
 801049e:	f7fd fdb6 	bl	800e00e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 80104a2:	68b8      	ldr	r0, [r7, #8]
 80104a4:	f7fd fe04 	bl	800e0b0 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80104a8:	4602      	mov	r2, r0
 80104aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80104ae:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80104b2:	9200      	str	r2, [sp, #0]
 80104b4:	4622      	mov	r2, r4
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 faa9 	bl	8010a0e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 80104bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fd fcf2 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 80104c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fd fced 	bl	800deaa <_ZN6tflite12RuntimeShapeD1Ev>
}
 80104d0:	bf00      	nop
 80104d2:	37a4      	adds	r7, #164	; 0xa4
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd90      	pop	{r4, r7, pc}

080104d8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 80104d8:	b590      	push	{r4, r7, lr}
 80104da:	b097      	sub	sp, #92	; 0x5c
 80104dc:	af02      	add	r7, sp, #8
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 80104e8:	2200      	movs	r2, #0
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7fd fc6d 	bl	800ddcc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80104f2:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 80104f4:	2200      	movs	r2, #0
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7fd fc7d 	bl	800ddf8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80104fe:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 8010500:	f107 0308 	add.w	r3, r7, #8
 8010504:	9300      	str	r3, [sp, #0]
 8010506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801050a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7ff fd4d 	bl	800ffac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8010512:	4603      	mov	r3, r0
 8010514:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010518:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8010520:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010524:	e02a      	b.n	801057c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 8010526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	2b09      	cmp	r3, #9
 801052c:	d00f      	beq.n	801054e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 801052e:	2b09      	cmp	r3, #9
 8010530:	dc16      	bgt.n	8010560 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8010532:	2b01      	cmp	r3, #1
 8010534:	d002      	beq.n	801053c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>
 8010536:	2b03      	cmp	r3, #3
 8010538:	d009      	beq.n	801054e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 801053a:	e011      	b.n	8010560 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 801053c:	f107 0308 	add.w	r3, r7, #8
 8010540:	461a      	mov	r2, r3
 8010542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010544:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010546:	f7ff ff0d 	bl	8010364 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801054a:	2300      	movs	r3, #0
 801054c:	e016      	b.n	801057c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 801054e:	f107 0308 	add.w	r3, r7, #8
 8010552:	461a      	mov	r2, r3
 8010554:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010556:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010558:	f7ff ff35 	bl	80103c6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801055c:	2300      	movs	r3, #0
 801055e:	e00d      	b.n	801057c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	695c      	ldr	r4, [r3, #20]
 8010564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	4618      	mov	r0, r3
 801056a:	f7fc ffaf 	bl	800d4cc <TfLiteTypeGetName>
 801056e:	4602      	mov	r2, r0
 8010570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	4903      	ldr	r1, [pc, #12]	; (8010584 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801057a:	2301      	movs	r3, #1
  }
}
 801057c:	4618      	mov	r0, r3
 801057e:	3754      	adds	r7, #84	; 0x54
 8010580:	46bd      	mov	sp, r7
 8010582:	bd90      	pop	{r4, r7, pc}
 8010584:	0801b474 	.word	0x0801b474

08010588 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 8010588:	b480      	push	{r7}
 801058a:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 801058c:	4b02      	ldr	r3, [pc, #8]	; (8010598 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 801058e:	4618      	mov	r0, r3
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr
 8010598:	2000009c 	.word	0x2000009c

0801059c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 801059c:	b590      	push	{r4, r7, lr}
 801059e:	b09f      	sub	sp, #124	; 0x7c
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
 80105a8:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	699b      	ldr	r3, [r3, #24]
 80105ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80105bc:	68b8      	ldr	r0, [r7, #8]
 80105be:	f7fd fc8a 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80105c2:	4603      	mov	r3, r0
 80105c4:	3b01      	subs	r3, #1
 80105c6:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105cc:	68b8      	ldr	r0, [r7, #8]
 80105ce:	f7fe feba 	bl	800f346 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80105d2:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80105d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105da:	68b8      	ldr	r0, [r7, #8]
 80105dc:	f7fd ff88 	bl	800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80105e0:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 80105e2:	2300      	movs	r3, #0
 80105e4:	677b      	str	r3, [r7, #116]	; 0x74
 80105e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80105e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105ea:	429a      	cmp	r2, r3
 80105ec:	f280 80ed 	bge.w	80107ca <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80105f0:	2300      	movs	r3, #0
 80105f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80105f6:	2300      	movs	r3, #0
 80105f8:	673b      	str	r3, [r7, #112]	; 0x70
 80105fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80105fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105fe:	429a      	cmp	r2, r3
 8010600:	da16      	bge.n	8010630 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8010602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010604:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010606:	fb02 f203 	mul.w	r2, r2, r3
 801060a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801060c:	4413      	add	r3, r2
 801060e:	461a      	mov	r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	441a      	add	r2, r3
 8010614:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8010618:	4611      	mov	r1, r2
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff fba6 	bl	800fd6c <_ZSt3maxIhERKT_S2_S2_>
 8010620:	4603      	mov	r3, r0
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8010628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801062a:	3301      	adds	r3, #1
 801062c:	673b      	str	r3, [r7, #112]	; 0x70
 801062e:	e7e4      	b.n	80105fa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8010630:	f000 fb0b 	bl	8010c4a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8010634:	4603      	mov	r3, r0
 8010636:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8010638:	2300      	movs	r3, #0
 801063a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801063c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801063e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010640:	429a      	cmp	r2, r3
 8010642:	da2f      	bge.n	80106a4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8010644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010648:	fb02 f203 	mul.w	r2, r2, r3
 801064c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801064e:	4413      	add	r3, r2
 8010650:	461a      	mov	r2, r3
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4413      	add	r3, r2
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	461a      	mov	r2, r3
 801065a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8010662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010666:	429a      	cmp	r2, r3
 8010668:	db18      	blt.n	801069c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801066a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801066c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801066e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010670:	f7ff fba6 	bl	800fdc0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8010674:	64b8      	str	r0, [r7, #72]	; 0x48
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8010676:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010678:	f000 faef 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801067c:	4603      	mov	r3, r0
 801067e:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8010680:	69f8      	ldr	r0, [r7, #28]
 8010682:	f000 fb19 	bl	8010cb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8010686:	4603      	mov	r3, r0
 8010688:	4618      	mov	r0, r3
 801068a:	f000 fc5d 	bl	8010f48 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801068e:	4603      	mov	r3, r0
 8010690:	4619      	mov	r1, r3
 8010692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010694:	f000 faf2 	bl	8010c7c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010698:	4603      	mov	r3, r0
 801069a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801069c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801069e:	3301      	adds	r3, #1
 80106a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106a2:	e7cb      	b.n	801063c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80106a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 fc67 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80106ae:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80106b6:	210c      	movs	r1, #12
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7ff fb94 	bl	800fde6 <_ZN6tflite13GetReciprocalEliPi>
 80106be:	4603      	mov	r3, r0
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fe ff92 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80106c6:	4603      	mov	r3, r0
 80106c8:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 80106ca:	2300      	movs	r3, #0
 80106cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80106ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106d2:	429a      	cmp	r2, r3
 80106d4:	da75      	bge.n	80107c2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80106d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80106da:	fb02 f203 	mul.w	r2, r2, r3
 80106de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106e0:	4413      	add	r3, r2
 80106e2:	461a      	mov	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	4413      	add	r3, r2
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80106f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106f8:	429a      	cmp	r2, r3
 80106fa:	db50      	blt.n	801079e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80106fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80106fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010700:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010702:	f7ff fb5d 	bl	800fdc0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8010706:	6438      	str	r0, [r7, #64]	; 0x40
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8010708:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801070a:	f000 faa6 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801070e:	4603      	mov	r3, r0
 8010710:	61bb      	str	r3, [r7, #24]

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8010712:	69b8      	ldr	r0, [r7, #24]
 8010714:	f000 fad0 	bl	8010cb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8010718:	4603      	mov	r3, r0
 801071a:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 801071c:	6979      	ldr	r1, [r7, #20]
 801071e:	6a38      	ldr	r0, [r7, #32]
 8010720:	f7ff fa5c 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010724:	4603      	mov	r3, r0
 8010726:	633b      	str	r3, [r7, #48]	; 0x30
 8010728:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801072c:	4618      	mov	r0, r3
 801072e:	f7fe fe4b 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010732:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8010734:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8010736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010738:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801073a:	4611      	mov	r1, r2
 801073c:	4618      	mov	r0, r3
 801073e:	f7fd fd7b 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8010742:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8010744:	f7fd f90a 	bl	800d95c <_ZNSt14numeric_limitsIhE3minEv>
 8010748:	4603      	mov	r3, r0
 801074a:	461a      	mov	r2, r3
            unsat_output +
 801074c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801074e:	4413      	add	r3, r2
        const int32 shifted_output =
 8010750:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8010752:	f7fd f90b 	bl	800d96c <_ZNSt14numeric_limitsIhE3maxEv>
 8010756:	4603      	mov	r3, r0
 8010758:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 801075a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801075e:	f107 0310 	add.w	r3, r7, #16
 8010762:	4611      	mov	r1, r2
 8010764:	4618      	mov	r0, r3
 8010766:	f7fd fb1d 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 801076a:	4604      	mov	r4, r0
 801076c:	f7fd f8f6 	bl	800d95c <_ZNSt14numeric_limitsIhE3minEv>
 8010770:	4603      	mov	r3, r0
 8010772:	63bb      	str	r3, [r7, #56]	; 0x38
 8010774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010778:	4619      	mov	r1, r3
 801077a:	4620      	mov	r0, r4
 801077c:	f7fd fafe 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 8010780:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8010782:	6819      	ldr	r1, [r3, #0]
 8010784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010786:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010788:	fb02 f203 	mul.w	r2, r2, r3
 801078c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801078e:	4413      	add	r3, r2
 8010790:	461a      	mov	r2, r3
 8010792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010796:	4413      	add	r3, r2
 8010798:	b2ca      	uxtb	r2, r1
 801079a:	701a      	strb	r2, [r3, #0]
 801079c:	e00d      	b.n	80107ba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801079e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80107a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107a2:	fb02 f203 	mul.w	r2, r2, r3
 80107a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80107a8:	4413      	add	r3, r2
 80107aa:	461a      	mov	r2, r3
 80107ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107b0:	189c      	adds	r4, r3, r2
 80107b2:	f7fd f8d3 	bl	800d95c <_ZNSt14numeric_limitsIhE3minEv>
 80107b6:	4603      	mov	r3, r0
 80107b8:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80107ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80107bc:	3301      	adds	r3, #1
 80107be:	66bb      	str	r3, [r7, #104]	; 0x68
 80107c0:	e785      	b.n	80106ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 80107c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80107c4:	3301      	adds	r3, #1
 80107c6:	677b      	str	r3, [r7, #116]	; 0x74
 80107c8:	e70d      	b.n	80105e6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 80107ca:	bf00      	nop
 80107cc:	377c      	adds	r7, #124	; 0x7c
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd90      	pop	{r4, r7, pc}

080107d2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80107d2:	b590      	push	{r4, r7, lr}
 80107d4:	b09f      	sub	sp, #124	; 0x7c
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	60f8      	str	r0, [r7, #12]
 80107da:	60b9      	str	r1, [r7, #8]
 80107dc:	607a      	str	r2, [r7, #4]
 80107de:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	689b      	ldr	r3, [r3, #8]
 80107e4:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	699b      	ldr	r3, [r3, #24]
 80107f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80107f2:	68b8      	ldr	r0, [r7, #8]
 80107f4:	f7fd fb6f 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80107f8:	4603      	mov	r3, r0
 80107fa:	3b01      	subs	r3, #1
 80107fc:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80107fe:	683a      	ldr	r2, [r7, #0]
 8010800:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010802:	68b8      	ldr	r0, [r7, #8]
 8010804:	f7fe fd9f 	bl	800f346 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8010808:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801080a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010810:	68b8      	ldr	r0, [r7, #8]
 8010812:	f7fd fe6d 	bl	800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010816:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8010818:	2300      	movs	r3, #0
 801081a:	677b      	str	r3, [r7, #116]	; 0x74
 801081c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801081e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010820:	429a      	cmp	r2, r3
 8010822:	f280 80f0 	bge.w	8010a06 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8010826:	2380      	movs	r3, #128	; 0x80
 8010828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801082c:	2300      	movs	r3, #0
 801082e:	673b      	str	r3, [r7, #112]	; 0x70
 8010830:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010834:	429a      	cmp	r2, r3
 8010836:	da17      	bge.n	8010868 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8010838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801083a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801083c:	fb02 f203 	mul.w	r2, r2, r3
 8010840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010842:	4413      	add	r3, r2
 8010844:	461a      	mov	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	441a      	add	r2, r3
 801084a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801084e:	4611      	mov	r1, r2
 8010850:	4618      	mov	r0, r3
 8010852:	f7ff fa9f 	bl	800fd94 <_ZSt3maxIaERKT_S2_S2_>
 8010856:	4603      	mov	r3, r0
 8010858:	f993 3000 	ldrsb.w	r3, [r3]
 801085c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8010860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010862:	3301      	adds	r3, #1
 8010864:	673b      	str	r3, [r7, #112]	; 0x70
 8010866:	e7e3      	b.n	8010830 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8010868:	f000 f9ef 	bl	8010c4a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801086c:	4603      	mov	r3, r0
 801086e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8010870:	2300      	movs	r3, #0
 8010872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010878:	429a      	cmp	r2, r3
 801087a:	da30      	bge.n	80108de <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801087c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801087e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010880:	fb02 f203 	mul.w	r2, r2, r3
 8010884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010886:	4413      	add	r3, r2
 8010888:	461a      	mov	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4413      	add	r3, r2
 801088e:	f993 3000 	ldrsb.w	r3, [r3]
 8010892:	461a      	mov	r2, r3
 8010894:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801089c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801089e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108a0:	429a      	cmp	r2, r3
 80108a2:	db18      	blt.n	80108d6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80108a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80108a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80108a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80108aa:	f7ff fa89 	bl	800fdc0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80108ae:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80108b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80108b2:	f000 f9d2 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80108b6:	4603      	mov	r3, r0
 80108b8:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80108ba:	69f8      	ldr	r0, [r7, #28]
 80108bc:	f000 f9fc 	bl	8010cb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80108c0:	4603      	mov	r3, r0
 80108c2:	4618      	mov	r0, r3
 80108c4:	f000 fb40 	bl	8010f48 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80108c8:	4603      	mov	r3, r0
 80108ca:	4619      	mov	r1, r3
 80108cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108ce:	f000 f9d5 	bl	8010c7c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80108d2:	4603      	mov	r3, r0
 80108d4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80108d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108d8:	3301      	adds	r3, #1
 80108da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80108dc:	e7ca      	b.n	8010874 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80108de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80108e2:	4618      	mov	r0, r3
 80108e4:	f000 fb4a 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80108e8:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80108f0:	210c      	movs	r1, #12
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7ff fa77 	bl	800fde6 <_ZN6tflite13GetReciprocalEliPi>
 80108f8:	4603      	mov	r3, r0
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fe fe75 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8010900:	4603      	mov	r3, r0
 8010902:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8010904:	2300      	movs	r3, #0
 8010906:	66bb      	str	r3, [r7, #104]	; 0x68
 8010908:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801090a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801090c:	429a      	cmp	r2, r3
 801090e:	da76      	bge.n	80109fe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8010910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010912:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010914:	fb02 f203 	mul.w	r2, r2, r3
 8010918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801091a:	4413      	add	r3, r2
 801091c:	461a      	mov	r2, r3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	4413      	add	r3, r2
 8010922:	f993 3000 	ldrsb.w	r3, [r3]
 8010926:	461a      	mov	r2, r3
 8010928:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801092c:	1ad3      	subs	r3, r2, r3
 801092e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8010930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010934:	429a      	cmp	r2, r3
 8010936:	db50      	blt.n	80109da <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8010938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801093a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801093c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801093e:	f7ff fa3f 	bl	800fdc0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8010942:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8010944:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010946:	f000 f988 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801094a:	4603      	mov	r3, r0
 801094c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801094e:	69b8      	ldr	r0, [r7, #24]
 8010950:	f000 f9b2 	bl	8010cb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8010954:	4603      	mov	r3, r0
 8010956:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8010958:	6979      	ldr	r1, [r7, #20]
 801095a:	6a38      	ldr	r0, [r7, #32]
 801095c:	f7ff f93e 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010960:	4603      	mov	r3, r0
 8010962:	633b      	str	r3, [r7, #48]	; 0x30
 8010964:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe fd2d 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801096e:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8010970:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8010972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010974:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8010976:	4611      	mov	r1, r2
 8010978:	4618      	mov	r0, r3
 801097a:	f7fd fc5d 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801097e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8010980:	f7f0 fc70 	bl	8001264 <_ZNSt14numeric_limitsIsE3minEv>
 8010984:	4603      	mov	r3, r0
 8010986:	461a      	mov	r2, r3
            unsat_output +
 8010988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801098a:	4413      	add	r3, r2
        const int32 shifted_output =
 801098c:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801098e:	f7f0 fc73 	bl	8001278 <_ZNSt14numeric_limitsIsE3maxEv>
 8010992:	4603      	mov	r3, r0
 8010994:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8010996:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801099a:	f107 0310 	add.w	r3, r7, #16
 801099e:	4611      	mov	r1, r2
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fd f9ff 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 80109a6:	4604      	mov	r4, r0
 80109a8:	f7f0 fc5c 	bl	8001264 <_ZNSt14numeric_limitsIsE3minEv>
 80109ac:	4603      	mov	r3, r0
 80109ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80109b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80109b4:	4619      	mov	r1, r3
 80109b6:	4620      	mov	r0, r4
 80109b8:	f7fd f9e0 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 80109bc:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80109be:	6819      	ldr	r1, [r3, #0]
 80109c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109c4:	fb02 f203 	mul.w	r2, r2, r3
 80109c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109ca:	4413      	add	r3, r2
 80109cc:	005b      	lsls	r3, r3, #1
 80109ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80109d2:	4413      	add	r3, r2
 80109d4:	b20a      	sxth	r2, r1
 80109d6:	801a      	strh	r2, [r3, #0]
 80109d8:	e00d      	b.n	80109f6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80109da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109de:	fb02 f203 	mul.w	r2, r2, r3
 80109e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109e4:	4413      	add	r3, r2
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80109ec:	18d4      	adds	r4, r2, r3
 80109ee:	f7f0 fc39 	bl	8001264 <_ZNSt14numeric_limitsIsE3minEv>
 80109f2:	4603      	mov	r3, r0
 80109f4:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80109f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109f8:	3301      	adds	r3, #1
 80109fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80109fc:	e784      	b.n	8010908 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80109fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a00:	3301      	adds	r3, #1
 8010a02:	677b      	str	r3, [r7, #116]	; 0x74
 8010a04:	e70a      	b.n	801081c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8010a06:	bf00      	nop
 8010a08:	377c      	adds	r7, #124	; 0x7c
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd90      	pop	{r4, r7, pc}

08010a0e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8010a0e:	b590      	push	{r4, r7, lr}
 8010a10:	b09f      	sub	sp, #124	; 0x7c
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	60f8      	str	r0, [r7, #12]
 8010a16:	60b9      	str	r1, [r7, #8]
 8010a18:	607a      	str	r2, [r7, #4]
 8010a1a:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	699b      	ldr	r3, [r3, #24]
 8010a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8010a2e:	68b8      	ldr	r0, [r7, #8]
 8010a30:	f7fd fa51 	bl	800ded6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010a34:	4603      	mov	r3, r0
 8010a36:	3b01      	subs	r3, #1
 8010a38:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8010a3a:	683a      	ldr	r2, [r7, #0]
 8010a3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010a3e:	68b8      	ldr	r0, [r7, #8]
 8010a40:	f7fe fc81 	bl	800f346 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8010a44:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8010a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a48:	683a      	ldr	r2, [r7, #0]
 8010a4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010a4c:	68b8      	ldr	r0, [r7, #8]
 8010a4e:	f7fd fd4f 	bl	800e4f0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010a52:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8010a54:	2300      	movs	r3, #0
 8010a56:	677b      	str	r3, [r7, #116]	; 0x74
 8010a58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	f280 80f0 	bge.w	8010c42 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8010a62:	2380      	movs	r3, #128	; 0x80
 8010a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8010a68:	2300      	movs	r3, #0
 8010a6a:	673b      	str	r3, [r7, #112]	; 0x70
 8010a6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a70:	429a      	cmp	r2, r3
 8010a72:	da17      	bge.n	8010aa4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8010a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a78:	fb02 f203 	mul.w	r2, r2, r3
 8010a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a7e:	4413      	add	r3, r2
 8010a80:	461a      	mov	r2, r3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	441a      	add	r2, r3
 8010a86:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8010a8a:	4611      	mov	r1, r2
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7ff f981 	bl	800fd94 <_ZSt3maxIaERKT_S2_S2_>
 8010a92:	4603      	mov	r3, r0
 8010a94:	f993 3000 	ldrsb.w	r3, [r3]
 8010a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8010a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	673b      	str	r3, [r7, #112]	; 0x70
 8010aa2:	e7e3      	b.n	8010a6c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8010aa4:	f000 f8d1 	bl	8010c4a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8010aac:	2300      	movs	r3, #0
 8010aae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	da30      	bge.n	8010b1a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8010ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010aba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010abc:	fb02 f203 	mul.w	r2, r2, r3
 8010ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ac2:	4413      	add	r3, r2
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4413      	add	r3, r2
 8010aca:	f993 3000 	ldrsb.w	r3, [r3]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8010ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010adc:	429a      	cmp	r2, r3
 8010ade:	db18      	blt.n	8010b12 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8010ae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ae2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010ae4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010ae6:	f7ff f96b 	bl	800fdc0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8010aea:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8010aec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010aee:	f000 f8b4 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8010af2:	4603      	mov	r3, r0
 8010af4:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8010af6:	69f8      	ldr	r0, [r7, #28]
 8010af8:	f000 f8de 	bl	8010cb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8010afc:	4603      	mov	r3, r0
 8010afe:	4618      	mov	r0, r3
 8010b00:	f000 fa22 	bl	8010f48 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8010b04:	4603      	mov	r3, r0
 8010b06:	4619      	mov	r1, r3
 8010b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b0a:	f000 f8b7 	bl	8010c7c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8010b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b14:	3301      	adds	r3, #1
 8010b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010b18:	e7ca      	b.n	8010ab0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8010b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f000 fa2c 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010b24:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010b2c:	210c      	movs	r1, #12
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7ff f959 	bl	800fde6 <_ZN6tflite13GetReciprocalEliPi>
 8010b34:	4603      	mov	r3, r0
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fe fd57 	bl	800f5ea <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8010b40:	2300      	movs	r3, #0
 8010b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	da76      	bge.n	8010c3a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8010b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b50:	fb02 f203 	mul.w	r2, r2, r3
 8010b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b56:	4413      	add	r3, r2
 8010b58:	461a      	mov	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	f993 3000 	ldrsb.w	r3, [r3]
 8010b62:	461a      	mov	r2, r3
 8010b64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8010b68:	1ad3      	subs	r3, r2, r3
 8010b6a:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8010b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b70:	429a      	cmp	r2, r3
 8010b72:	db50      	blt.n	8010c16 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8010b74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010b78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010b7a:	f7ff f921 	bl	800fdc0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8010b7e:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8010b80:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010b82:	f000 f86a 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8010b86:	4603      	mov	r3, r0
 8010b88:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8010b8a:	69b8      	ldr	r0, [r7, #24]
 8010b8c:	f000 f894 	bl	8010cb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8010b90:	4603      	mov	r3, r0
 8010b92:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8010b94:	6979      	ldr	r1, [r7, #20]
 8010b96:	6a38      	ldr	r0, [r7, #32]
 8010b98:	f7ff f820 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8010ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fe fc0f 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010baa:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8010bac:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8010bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bb0:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fd fb3f 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8010bba:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8010bbc:	f7fc febd 	bl	800d93a <_ZNSt14numeric_limitsIaE3minEv>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	461a      	mov	r2, r3
            unsat_output +
 8010bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bc6:	4413      	add	r3, r2
        const int32 shifted_output =
 8010bc8:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8010bca:	f7fc febf 	bl	800d94c <_ZNSt14numeric_limitsIaE3maxEv>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8010bd2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010bd6:	f107 0310 	add.w	r3, r7, #16
 8010bda:	4611      	mov	r1, r2
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fd f8e1 	bl	800dda4 <_ZSt3minIlERKT_S2_S2_>
 8010be2:	4604      	mov	r4, r0
 8010be4:	f7fc fea9 	bl	800d93a <_ZNSt14numeric_limitsIaE3minEv>
 8010be8:	4603      	mov	r3, r0
 8010bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f7fd f8c2 	bl	800dd7c <_ZSt3maxIlERKT_S2_S2_>
 8010bf8:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8010bfa:	6819      	ldr	r1, [r3, #0]
 8010bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c00:	fb02 f203 	mul.w	r2, r2, r3
 8010c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c06:	4413      	add	r3, r2
 8010c08:	461a      	mov	r2, r3
 8010c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c0e:	4413      	add	r3, r2
 8010c10:	b24a      	sxtb	r2, r1
 8010c12:	701a      	strb	r2, [r3, #0]
 8010c14:	e00d      	b.n	8010c32 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8010c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c1a:	fb02 f203 	mul.w	r2, r2, r3
 8010c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c20:	4413      	add	r3, r2
 8010c22:	461a      	mov	r2, r3
 8010c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c28:	189c      	adds	r4, r3, r2
 8010c2a:	f7fc fe86 	bl	800d93a <_ZNSt14numeric_limitsIaE3minEv>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8010c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c34:	3301      	adds	r3, #1
 8010c36:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c38:	e784      	b.n	8010b44 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8010c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	677b      	str	r3, [r7, #116]	; 0x74
 8010c40:	e70a      	b.n	8010a58 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8010c42:	bf00      	nop
 8010c44:	377c      	adds	r7, #124	; 0x7c
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd90      	pop	{r4, r7, pc}

08010c4a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	2000      	movs	r0, #0
 8010c50:	f000 f99f 	bl	8010f92 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8010c54:	4603      	mov	r3, r0
 8010c56:	4618      	mov	r0, r3
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8010c62:	f107 030c 	add.w	r3, r7, #12
 8010c66:	4618      	mov	r0, r3
 8010c68:	f000 f9a7 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6013      	str	r3, [r2, #0]
    return retval;
 8010c72:	68fb      	ldr	r3, [r7, #12]
  }
 8010c74:	4618      	mov	r0, r3
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8010c7c:	b590      	push	{r4, r7, lr}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
 8010c86:	1d3b      	adds	r3, r7, #4
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f000 f977 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	681c      	ldr	r4, [r3, #0]
 8010c92:	463b      	mov	r3, r7
 8010c94:	4618      	mov	r0, r3
 8010c96:	f000 f971 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f7fd fbbb 	bl	800e41c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 f991 	bl	8010fd0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd90      	pop	{r4, r7, pc}

08010cb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8010cb8:	b590      	push	{r4, r7, lr}
 8010cba:	b091      	sub	sp, #68	; 0x44
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8010cc0:	f000 f997 	bl	8010ff2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8010cc8:	2001      	movs	r0, #1
 8010cca:	f000 f99b 	bl	8011004 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010cd4:	f000 f9aa 	bl	801102c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8010cdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 f9c2 	bl	8011068 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f000 f99f 	bl	801102c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8010cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010cf4:	f000 f9d6 	bl	80110a4 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe ff0c 	bl	800fb18 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8010d00:	4603      	mov	r3, r0
 8010d02:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d08:	f000 f990 	bl	801102c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010d14:	4618      	mov	r0, r3
 8010d16:	f000 f950 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8010d20:	4883      	ldr	r0, [pc, #524]	; (8010f30 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8010d22:	f7fe fb70 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010d26:	4603      	mov	r3, r0
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7fe fb58 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	627b      	str	r3, [r7, #36]	; 0x24
 8010d32:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8010d36:	f7fd fb35 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d40:	f7fd fb3b 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010d44:	4603      	mov	r3, r0
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fd fb8a 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d52:	f7fe ff43 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010d56:	4603      	mov	r3, r0
 8010d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f7fe fddd 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010d62:	4603      	mov	r3, r0
 8010d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8010d66:	4873      	ldr	r0, [pc, #460]	; (8010f34 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8010d68:	f7fe fb4d 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fe fb35 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010d74:	4603      	mov	r3, r0
 8010d76:	623b      	str	r3, [r7, #32]
 8010d78:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8010d7c:	f7fd fb12 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010d80:	4603      	mov	r3, r0
 8010d82:	4619      	mov	r1, r3
 8010d84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d86:	f7fd fb18 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fd fb67 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010d92:	4604      	mov	r4, r0
 8010d94:	6a39      	ldr	r1, [r7, #32]
 8010d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d98:	f7fe ff20 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010da0:	4619      	mov	r1, r3
 8010da2:	4620      	mov	r0, r4
 8010da4:	f7fe fdba 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010da8:	4603      	mov	r3, r0
 8010daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8010dac:	4862      	ldr	r0, [pc, #392]	; (8010f38 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8010dae:	f7fe fb2a 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010db2:	4603      	mov	r3, r0
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fe fb12 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	61fb      	str	r3, [r7, #28]
 8010dbe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8010dc2:	f7fd faef 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	4619      	mov	r1, r3
 8010dca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dcc:	f7fd faf5 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fd fb44 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010dd8:	4604      	mov	r4, r0
 8010dda:	69f9      	ldr	r1, [r7, #28]
 8010ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dde:	f7fe fefd 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010de2:	4603      	mov	r3, r0
 8010de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010de6:	4619      	mov	r1, r3
 8010de8:	4620      	mov	r0, r4
 8010dea:	f7fe fd97 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010dee:	4603      	mov	r3, r0
 8010df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8010df2:	4852      	ldr	r0, [pc, #328]	; (8010f3c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8010df4:	f7fe fb07 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fe faef 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010e00:	4603      	mov	r3, r0
 8010e02:	61bb      	str	r3, [r7, #24]
 8010e04:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8010e08:	f7fd facc 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4619      	mov	r1, r3
 8010e10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e12:	f7fd fad2 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010e16:	4603      	mov	r3, r0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fd fb21 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010e1e:	4604      	mov	r4, r0
 8010e20:	69b9      	ldr	r1, [r7, #24]
 8010e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e24:	f7fe feda 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f7fe fd74 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010e34:	4603      	mov	r3, r0
 8010e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8010e38:	4841      	ldr	r0, [pc, #260]	; (8010f40 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8010e3a:	f7fe fae4 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fe facc 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010e46:	4603      	mov	r3, r0
 8010e48:	617b      	str	r3, [r7, #20]
 8010e4a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010e4e:	f7fd faa9 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010e52:	4603      	mov	r3, r0
 8010e54:	4619      	mov	r1, r3
 8010e56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e58:	f7fd faaf 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fd fafe 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010e64:	4604      	mov	r4, r0
 8010e66:	6979      	ldr	r1, [r7, #20]
 8010e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e6a:	f7fe feb7 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e72:	4619      	mov	r1, r3
 8010e74:	4620      	mov	r0, r4
 8010e76:	f7fe fd51 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8010e7e:	4831      	ldr	r0, [pc, #196]	; (8010f44 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8010e80:	f7fe fac1 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010e84:	4603      	mov	r3, r0
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fe faa9 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	613b      	str	r3, [r7, #16]
 8010e90:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8010e94:	f7fd fa86 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e9e:	f7fd fa8c 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fd fadb 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010eaa:	4604      	mov	r4, r0
 8010eac:	6939      	ldr	r1, [r7, #16]
 8010eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eb0:	f7fe fe94 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010eb8:	4619      	mov	r1, r3
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f7fe fd2e 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8010ec4:	20f2      	movs	r0, #242	; 0xf2
 8010ec6:	f7fe fa9e 	bl	800f406 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fa86 	bl	800f3de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	60fb      	str	r3, [r7, #12]
 8010ed6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8010eda:	f7fd fa63 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ee4:	f7fd fa69 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fd fab8 	bl	800e460 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	68f9      	ldr	r1, [r7, #12]
 8010ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ef6:	f7fe fe71 	bl	800fbdc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010efa:	4603      	mov	r3, r0
 8010efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010efe:	4619      	mov	r1, r3
 8010f00:	4620      	mov	r0, r4
 8010f02:	f7fe fd0b 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010f06:	4603      	mov	r3, r0
 8010f08:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 f8e4 	bl	80110d8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8010f10:	4604      	mov	r4, r0
 8010f12:	f7fe fbdb 	bl	800f6cc <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8010f16:	4603      	mov	r3, r0
 8010f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	f7fe fcfd 	bl	800f91c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010f22:	4603      	mov	r3, r0
 8010f24:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8010f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3744      	adds	r7, #68	; 0x44
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd90      	pop	{r4, r7, pc}
 8010f30:	63afbe7b 	.word	0x63afbe7b
 8010f34:	4da2cbf2 	.word	0x4da2cbf2
 8010f38:	2f16ac6c 	.word	0x2f16ac6c
 8010f3c:	1152aaa4 	.word	0x1152aaa4
 8010f40:	02582ab7 	.word	0x02582ab7
 8010f44:	000afe11 	.word	0x000afe11

08010f48 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8010f48:	b5b0      	push	{r4, r5, r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8010f50:	1d3b      	adds	r3, r7, #4
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7fe fa38 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	681d      	ldr	r5, [r3, #0]
 8010f5c:	f107 030c 	add.w	r3, r7, #12
 8010f60:	4618      	mov	r0, r3
 8010f62:	f000 f80b 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010f66:	4604      	mov	r4, r0
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f000 f8c7 	bl	80110fc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	6023      	str	r3, [r4, #0]
  return result;
 8010f72:	68fb      	ldr	r3, [r7, #12]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3710      	adds	r7, #16
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bdb0      	pop	{r4, r5, r7, pc}

08010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	4618      	mov	r0, r3
 8010f88:	370c      	adds	r7, #12
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr

08010f92 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8010f92:	b590      	push	{r4, r7, lr}
 8010f94:	b085      	sub	sp, #20
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8010f9a:	f107 030c 	add.w	r3, r7, #12
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7ff ffec 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7fd f9fc 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010fac:	4603      	mov	r3, r0
 8010fae:	6023      	str	r3, [r4, #0]
    return retval;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
  }
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3714      	adds	r7, #20
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd90      	pop	{r4, r7, pc}

08010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8010fba:	b480      	push	{r7}
 8010fbc:	b083      	sub	sp, #12
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8010fd8:	f107 030c 	add.w	r3, r7, #12
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff ffcd 	bl	8010f7c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6013      	str	r3, [r2, #0]
    return retval;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
  }
 8010fea:	4618      	mov	r0, r3
 8010fec:	3710      	adds	r7, #16
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8010ff6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8010ffa:	f000 f803 	bl	8011004 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8010ffe:	4603      	mov	r3, r0
  }
 8011000:	4618      	mov	r0, r3
 8011002:	bd80      	pop	{r7, pc}

08011004 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8011004:	b590      	push	{r4, r7, lr}
 8011006:	b085      	sub	sp, #20
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801100c:	f107 030c 	add.w	r3, r7, #12
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff ffd2 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8011016:	4604      	mov	r4, r0
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7fd f9c3 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801101e:	4603      	mov	r3, r0
 8011020:	6023      	str	r3, [r4, #0]
    return retval;
 8011022:	68fb      	ldr	r3, [r7, #12]
  }
 8011024:	4618      	mov	r0, r3
 8011026:	3714      	adds	r7, #20
 8011028:	46bd      	mov	sp, r7
 801102a:	bd90      	pop	{r4, r7, pc}

0801102c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
 8011036:	1d3b      	adds	r3, r7, #4
 8011038:	4618      	mov	r0, r3
 801103a:	f7ff ffbe 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801103e:	4603      	mov	r3, r0
 8011040:	681c      	ldr	r4, [r3, #0]
 8011042:	463b      	mov	r3, r7
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff ffb8 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801104a:	4603      	mov	r3, r0
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4619      	mov	r1, r3
 8011050:	4620      	mov	r0, r4
 8011052:	f7fe f9f1 	bl	800f438 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8011056:	4603      	mov	r3, r0
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff fdfe 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801105e:	4603      	mov	r3, r0
 8011060:	4618      	mov	r0, r3
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	bd90      	pop	{r4, r7, pc}

08011068 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
 8011072:	1d3b      	adds	r3, r7, #4
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff ffa0 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801107a:	4603      	mov	r3, r0
 801107c:	681c      	ldr	r4, [r3, #0]
 801107e:	463b      	mov	r3, r7
 8011080:	4618      	mov	r0, r3
 8011082:	f7ff ff9a 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8011086:	4603      	mov	r3, r0
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4619      	mov	r1, r3
 801108c:	4620      	mov	r0, r4
 801108e:	f7fd f994 	bl	800e3ba <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011092:	4603      	mov	r3, r0
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fde0 	bl	8010c5a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801109a:	4603      	mov	r3, r0
 801109c:	4618      	mov	r0, r3
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd90      	pop	{r4, r7, pc}

080110a4 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80110a4:	b5b0      	push	{r4, r5, r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80110ac:	1d3b      	adds	r3, r7, #4
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7ff ff83 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80110b4:	4603      	mov	r3, r0
 80110b6:	681d      	ldr	r5, [r3, #0]
 80110b8:	f107 030c 	add.w	r3, r7, #12
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fe f983 	bl	800f3c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80110c2:	4604      	mov	r4, r0
 80110c4:	4628      	mov	r0, r5
 80110c6:	f000 f825 	bl	8011114 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80110ca:	4603      	mov	r3, r0
 80110cc:	6023      	str	r3, [r4, #0]
  return result;
 80110ce:	68fb      	ldr	r3, [r7, #12]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bdb0      	pop	{r4, r5, r7, pc}

080110d8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	1d3b      	adds	r3, r7, #4
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7ff ff69 	bl	8010fba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80110e8:	4603      	mov	r3, r0
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fe fc7c 	bl	800f9ea <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 80110f2:	4603      	mov	r3, r0
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f000 f811 	bl	801112c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801110a:	4603      	mov	r3, r0
}
 801110c:	4618      	mov	r0, r3
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 f813 	bl	8011148 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8011122:	4603      	mov	r3, r0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8011134:	210c      	movs	r1, #12
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f7fd f87e 	bl	800e238 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801113c:	4603      	mov	r3, r0
  }
 801113e:	4618      	mov	r0, r3
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
	...

08011148 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8011148:	b580      	push	{r7, lr}
 801114a:	b08a      	sub	sp, #40	; 0x28
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8011150:	f7fc ffbf 	bl	800e0d2 <_ZNSt14numeric_limitsIlE3minEv>
 8011154:	4603      	mov	r3, r0
 8011156:	4618      	mov	r0, r3
 8011158:	f7fd f924 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801115c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801115e:	f7fc fa13 	bl	800d588 <_ZNSt14numeric_limitsIlE3maxEv>
 8011162:	4603      	mov	r3, r0
 8011164:	4618      	mov	r0, r3
 8011166:	f7fd f91d 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801116a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801116c:	2320      	movs	r3, #32
 801116e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8011170:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8011174:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8011176:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801117a:	f7fd f913 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801117e:	4603      	mov	r3, r0
 8011180:	4619      	mov	r1, r3
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7fd f958 	bl	800e438 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8011188:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801118a:	480f      	ldr	r0, [pc, #60]	; (80111c8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801118c:	f7fd f90a 	bl	800e3a4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011190:	4603      	mov	r3, r0
 8011192:	4619      	mov	r1, r3
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7fd f92d 	bl	800e3f4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801119a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801119c:	2105      	movs	r1, #5
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7fe f965 	bl	800f46e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80111a4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	6a39      	ldr	r1, [r7, #32]
 80111aa:	6978      	ldr	r0, [r7, #20]
 80111ac:	f7fe f9a5 	bl	800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80111b0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80111b2:	68fa      	ldr	r2, [r7, #12]
 80111b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111b6:	6938      	ldr	r0, [r7, #16]
 80111b8:	f7fe f99f 	bl	800f4fa <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80111bc:	60f8      	str	r0, [r7, #12]
    return result;
 80111be:	68fb      	ldr	r3, [r7, #12]
  }
 80111c0:	4618      	mov	r0, r3
 80111c2:	3728      	adds	r7, #40	; 0x28
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	fc000001 	.word	0xfc000001

080111cc <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fb1f 	bl	8011818 <_ZNSaIPvED1Ev>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 fb02 	bl	80117f8 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	4618      	mov	r0, r3
 80111f8:	3708      	adds	r7, #8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector() = default;
 80111fe:	b580      	push	{r7, lr}
 8011200:	b082      	sub	sp, #8
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4618      	mov	r0, r3
 801120a:	f7ff ffeb 	bl	80111e4 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>:
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
  if (current_location - bytes < tensor_boundary) {
 8011224:	4b18      	ldr	r3, [pc, #96]	; (8011288 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	425b      	negs	r3, r3
 801122c:	441a      	add	r2, r3
 801122e:	4b17      	ldr	r3, [pc, #92]	; (801128c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x74>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	429a      	cmp	r2, r3
 8011234:	d217      	bcs.n	8011266 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x4e>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
 8011236:	68b8      	ldr	r0, [r7, #8]
 8011238:	f004 fba4 	bl	8015984 <malloc>
 801123c:	4603      	mov	r3, r0
 801123e:	461a      	mov	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	601a      	str	r2, [r3, #0]
    if (*ptr == NULL) {
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d106      	bne.n	801125a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x42>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	4619      	mov	r1, r3
 8011250:	480f      	ldr	r0, [pc, #60]	; (8011290 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x78>)
 8011252:	f005 fc65 	bl	8016b20 <iprintf>
      return kTfLiteError;
 8011256:	2301      	movs	r3, #1
 8011258:	e011      	b.n	801127e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
    }
    overflow_buffers.push_back(*ptr);
 801125a:	6879      	ldr	r1, [r7, #4]
 801125c:	480d      	ldr	r0, [pc, #52]	; (8011294 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x7c>)
 801125e:	f000 fb00 	bl	8011862 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return kTfLiteOk;
 8011262:	2300      	movs	r3, #0
 8011264:	e00b      	b.n	801127e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
  }

  current_location -= bytes;
 8011266:	4b08      	ldr	r3, [pc, #32]	; (8011288 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	425b      	negs	r3, r3
 801126e:	4413      	add	r3, r2
 8011270:	4a05      	ldr	r2, [pc, #20]	; (8011288 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8011272:	6013      	str	r3, [r2, #0]

  *ptr = current_location;
 8011274:	4b04      	ldr	r3, [pc, #16]	; (8011288 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	20000518 	.word	0x20000518
 801128c:	20000514 	.word	0x20000514
 8011290:	0801b59c 	.word	0x0801b59c
 8011294:	200008fc 	.word	0x200008fc

08011298 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 fb13 	bl	80118cc <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f000 faf6 	bl	80118ac <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	4618      	mov	r0, r3
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b082      	sub	sp, #8
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7ff ffeb 	bl	80112b0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b088      	sub	sp, #32
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	617b      	str	r3, [r7, #20]

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
 80112f4:	6979      	ldr	r1, [r7, #20]
 80112f6:	f107 0314 	add.w	r3, r7, #20
 80112fa:	3304      	adds	r3, #4
 80112fc:	461a      	mov	r2, r3
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f7ff ff8a 	bl	8011218 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>
 8011304:	4603      	mov	r3, r0
 8011306:	77fb      	strb	r3, [r7, #31]
  if (s != kTfLiteOk) {
 8011308:	7ffb      	ldrb	r3, [r7, #31]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2e>
    return s;
 801130e:	7ffb      	ldrb	r3, [r7, #31]
 8011310:	e00e      	b.n	8011330 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x4c>
  }

  scratch_buffers.push_back(b);
 8011312:	f107 0314 	add.w	r3, r7, #20
 8011316:	4619      	mov	r1, r3
 8011318:	4807      	ldr	r0, [pc, #28]	; (8011338 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 801131a:	f000 fafc 	bl	8011916 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 801131e:	4806      	ldr	r0, [pc, #24]	; (8011338 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 8011320:	f000 fb1f 	bl	8011962 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8011324:	4603      	mov	r3, r0
 8011326:	3b01      	subs	r3, #1
 8011328:	461a      	mov	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3720      	adds	r7, #32
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	20000908 	.word	0x20000908

0801133c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 8011346:	480d      	ldr	r0, [pc, #52]	; (801137c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8011348:	f000 fb0b 	bl	8011962 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801134c:	4603      	mov	r3, r0
 801134e:	461a      	mov	r2, r3
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	4293      	cmp	r3, r2
 8011354:	bfac      	ite	ge
 8011356:	2301      	movge	r3, #1
 8011358:	2300      	movlt	r3, #0
 801135a:	b2db      	uxtb	r3, r3
 801135c:	2b00      	cmp	r3, #0
 801135e:	d001      	beq.n	8011364 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8011360:	2300      	movs	r3, #0
 8011362:	e006      	b.n	8011372 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	4619      	mov	r1, r3
 8011368:	4804      	ldr	r0, [pc, #16]	; (801137c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 801136a:	f000 fb0a 	bl	8011982 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 801136e:	4603      	mov	r3, r0
 8011370:	685b      	ldr	r3, [r3, #4]
}
 8011372:	4618      	mov	r0, r3
 8011374:	3708      	adds	r7, #8
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	20000908 	.word	0x20000908

08011380 <_Z18trained_model_initPFPvjjE>:
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8011380:	b5b0      	push	{r4, r5, r7, lr}
 8011382:	b088      	sub	sp, #32
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f44f 7190 	mov.w	r1, #288	; 0x120
 801138e:	2010      	movs	r0, #16
 8011390:	4798      	blx	r3
 8011392:	4603      	mov	r3, r0
 8011394:	4aa2      	ldr	r2, [pc, #648]	; (8011620 <_Z18trained_model_initPFPvjjE+0x2a0>)
 8011396:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8011398:	4ba1      	ldr	r3, [pc, #644]	; (8011620 <_Z18trained_model_initPFPvjjE+0x2a0>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d104      	bne.n	80113aa <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 80113a0:	48a0      	ldr	r0, [pc, #640]	; (8011624 <_Z18trained_model_initPFPvjjE+0x2a4>)
 80113a2:	f005 fc43 	bl	8016c2c <puts>
    return kTfLiteError;
 80113a6:	2301      	movs	r3, #1
 80113a8:	e189      	b.n	80116be <_Z18trained_model_initPFPvjjE+0x33e>
  }
#endif
  tensor_boundary = tensor_arena;
 80113aa:	4b9d      	ldr	r3, [pc, #628]	; (8011620 <_Z18trained_model_initPFPvjjE+0x2a0>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4a9e      	ldr	r2, [pc, #632]	; (8011628 <_Z18trained_model_initPFPvjjE+0x2a8>)
 80113b0:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 80113b2:	4b9b      	ldr	r3, [pc, #620]	; (8011620 <_Z18trained_model_initPFPvjjE+0x2a0>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80113ba:	4a9c      	ldr	r2, [pc, #624]	; (801162c <_Z18trained_model_initPFPvjjE+0x2ac>)
 80113bc:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 80113be:	4b9c      	ldr	r3, [pc, #624]	; (8011630 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80113c0:	4a9c      	ldr	r2, [pc, #624]	; (8011634 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80113c2:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 80113c4:	4b9a      	ldr	r3, [pc, #616]	; (8011630 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80113c6:	4a9c      	ldr	r2, [pc, #624]	; (8011638 <_Z18trained_model_initPFPvjjE+0x2b8>)
 80113c8:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 80113ca:	4b99      	ldr	r3, [pc, #612]	; (8011630 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80113cc:	4a9b      	ldr	r2, [pc, #620]	; (801163c <_Z18trained_model_initPFPvjjE+0x2bc>)
 80113ce:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.tensors = tflTensors;
 80113d0:	4b97      	ldr	r3, [pc, #604]	; (8011630 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80113d2:	4a9b      	ldr	r2, [pc, #620]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 80113d4:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 80113d6:	4b96      	ldr	r3, [pc, #600]	; (8011630 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80113d8:	220b      	movs	r2, #11
 80113da:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 11; ++i) {
 80113dc:	2300      	movs	r3, #0
 80113de:	61fb      	str	r3, [r7, #28]
 80113e0:	69fb      	ldr	r3, [r7, #28]
 80113e2:	2b0a      	cmp	r3, #10
 80113e4:	f200 8081 	bhi.w	80114ea <_Z18trained_model_initPFPvjjE+0x16a>
    tflTensors[i].type = kTfLiteFloat32;
 80113e8:	4a95      	ldr	r2, [pc, #596]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	019b      	lsls	r3, r3, #6
 80113ee:	4413      	add	r3, r2
 80113f0:	2201      	movs	r2, #1
 80113f2:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 80113f4:	4a92      	ldr	r2, [pc, #584]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	019b      	lsls	r3, r3, #6
 80113fa:	4413      	add	r3, r2
 80113fc:	332d      	adds	r3, #45	; 0x2d
 80113fe:	2200      	movs	r2, #0
 8011400:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 8011402:	4a90      	ldr	r2, [pc, #576]	; (8011644 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	4413      	add	r3, r2
 801140a:	7819      	ldrb	r1, [r3, #0]
 801140c:	4a8c      	ldr	r2, [pc, #560]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	019b      	lsls	r3, r3, #6
 8011412:	4413      	add	r3, r2
 8011414:	3314      	adds	r3, #20
 8011416:	460a      	mov	r2, r1
 8011418:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801141a:	4a8a      	ldr	r2, [pc, #552]	; (8011644 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	011b      	lsls	r3, r3, #4
 8011420:	4413      	add	r3, r2
 8011422:	330c      	adds	r3, #12
 8011424:	681a      	ldr	r2, [r3, #0]
 8011426:	4986      	ldr	r1, [pc, #536]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	019b      	lsls	r3, r3, #6
 801142c:	440b      	add	r3, r1
 801142e:	3318      	adds	r3, #24
 8011430:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8011432:	4a84      	ldr	r2, [pc, #528]	; (8011644 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	011b      	lsls	r3, r3, #4
 8011438:	4413      	add	r3, r2
 801143a:	3308      	adds	r3, #8
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	4980      	ldr	r1, [pc, #512]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	019b      	lsls	r3, r3, #6
 8011444:	440b      	add	r3, r1
 8011446:	3308      	adds	r3, #8
 8011448:	601a      	str	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801144a:	4a7d      	ldr	r2, [pc, #500]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	019b      	lsls	r3, r3, #6
 8011450:	4413      	add	r3, r2
 8011452:	3314      	adds	r3, #20
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	2b02      	cmp	r3, #2
 8011458:	d112      	bne.n	8011480 <_Z18trained_model_initPFPvjjE+0x100>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801145a:	4a7a      	ldr	r2, [pc, #488]	; (8011644 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	011b      	lsls	r3, r3, #4
 8011460:	4413      	add	r3, r2
 8011462:	3304      	adds	r3, #4
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	461a      	mov	r2, r3
 8011468:	4b6d      	ldr	r3, [pc, #436]	; (8011620 <_Z18trained_model_initPFPvjjE+0x2a0>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4413      	add	r3, r2
 801146e:	613b      	str	r3, [r7, #16]

     tflTensors[i].data.data =  start;
 8011470:	4a73      	ldr	r2, [pc, #460]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	019b      	lsls	r3, r3, #6
 8011476:	4413      	add	r3, r2
 8011478:	3304      	adds	r3, #4
 801147a:	693a      	ldr	r2, [r7, #16]
 801147c:	601a      	str	r2, [r3, #0]
 801147e:	e00b      	b.n	8011498 <_Z18trained_model_initPFPvjjE+0x118>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 8011480:	4a70      	ldr	r2, [pc, #448]	; (8011644 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8011482:	69fb      	ldr	r3, [r7, #28]
 8011484:	011b      	lsls	r3, r3, #4
 8011486:	4413      	add	r3, r2
 8011488:	3304      	adds	r3, #4
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	496c      	ldr	r1, [pc, #432]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	019b      	lsls	r3, r3, #6
 8011492:	440b      	add	r3, r1
 8011494:	3304      	adds	r3, #4
 8011496:	601a      	str	r2, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
 8011498:	4a69      	ldr	r2, [pc, #420]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	019b      	lsls	r3, r3, #6
 801149e:	4413      	add	r3, r2
 80114a0:	3330      	adds	r3, #48	; 0x30
 80114a2:	2200      	movs	r2, #0
 80114a4:	701a      	strb	r2, [r3, #0]
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 80114a6:	4a66      	ldr	r2, [pc, #408]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	019b      	lsls	r3, r3, #6
 80114ac:	4413      	add	r3, r2
 80114ae:	3314      	adds	r3, #20
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	2b02      	cmp	r3, #2
 80114b4:	d115      	bne.n	80114e2 <_Z18trained_model_initPFPvjjE+0x162>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 80114b6:	4a62      	ldr	r2, [pc, #392]	; (8011640 <_Z18trained_model_initPFPvjjE+0x2c0>)
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	019b      	lsls	r3, r3, #6
 80114bc:	4413      	add	r3, r2
 80114be:	3304      	adds	r3, #4
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	4960      	ldr	r1, [pc, #384]	; (8011644 <_Z18trained_model_initPFPvjjE+0x2c4>)
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	011b      	lsls	r3, r3, #4
 80114c8:	440b      	add	r3, r1
 80114ca:	330c      	adds	r3, #12
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4413      	add	r3, r2
 80114d0:	60fb      	str	r3, [r7, #12]
      if (data_end_ptr > tensor_boundary) {
 80114d2:	4b55      	ldr	r3, [pc, #340]	; (8011628 <_Z18trained_model_initPFPvjjE+0x2a8>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	68fa      	ldr	r2, [r7, #12]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d902      	bls.n	80114e2 <_Z18trained_model_initPFPvjjE+0x162>
        tensor_boundary = data_end_ptr;
 80114dc:	4a52      	ldr	r2, [pc, #328]	; (8011628 <_Z18trained_model_initPFPvjjE+0x2a8>)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 11; ++i) {
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	3301      	adds	r3, #1
 80114e6:	61fb      	str	r3, [r7, #28]
 80114e8:	e77a      	b.n	80113e0 <_Z18trained_model_initPFPvjjE+0x60>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 80114ea:	4b4f      	ldr	r3, [pc, #316]	; (8011628 <_Z18trained_model_initPFPvjjE+0x2a8>)
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	4b4f      	ldr	r3, [pc, #316]	; (801162c <_Z18trained_model_initPFPvjjE+0x2ac>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d904      	bls.n	8011500 <_Z18trained_model_initPFPvjjE+0x180>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 80114f6:	4854      	ldr	r0, [pc, #336]	; (8011648 <_Z18trained_model_initPFPvjjE+0x2c8>)
 80114f8:	f005 fb98 	bl	8016c2c <puts>
    return kTfLiteError;
 80114fc:	2301      	movs	r3, #1
 80114fe:	e0de      	b.n	80116be <_Z18trained_model_initPFPvjjE+0x33e>
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
 8011500:	f7fd ff06 	bl	800f310 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 8011504:	4603      	mov	r3, r0
 8011506:	4a51      	ldr	r2, [pc, #324]	; (801164c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011508:	4614      	mov	r4, r2
 801150a:	461d      	mov	r5, r3
 801150c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801150e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011510:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();
 8011518:	f7ff f836 	bl	8010588 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 801151c:	4602      	mov	r2, r0
 801151e:	4b4b      	ldr	r3, [pc, #300]	; (801164c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8011520:	f103 0420 	add.w	r4, r3, #32
 8011524:	4615      	mov	r5, r2
 8011526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801152a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801152e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 4; ++i) {
 8011532:	2300      	movs	r3, #0
 8011534:	61bb      	str	r3, [r7, #24]
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	2b03      	cmp	r3, #3
 801153a:	f200 808d 	bhi.w	8011658 <_Z18trained_model_initPFPvjjE+0x2d8>
    tflNodes[i].inputs = nodeData[i].inputs;
 801153e:	4a44      	ldr	r2, [pc, #272]	; (8011650 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	011b      	lsls	r3, r3, #4
 8011544:	4413      	add	r3, r2
 8011546:	6819      	ldr	r1, [r3, #0]
 8011548:	4842      	ldr	r0, [pc, #264]	; (8011654 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801154a:	69ba      	ldr	r2, [r7, #24]
 801154c:	4613      	mov	r3, r2
 801154e:	00db      	lsls	r3, r3, #3
 8011550:	4413      	add	r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	4403      	add	r3, r0
 8011556:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8011558:	4a3d      	ldr	r2, [pc, #244]	; (8011650 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	011b      	lsls	r3, r3, #4
 801155e:	4413      	add	r3, r2
 8011560:	3304      	adds	r3, #4
 8011562:	6819      	ldr	r1, [r3, #0]
 8011564:	483b      	ldr	r0, [pc, #236]	; (8011654 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8011566:	69ba      	ldr	r2, [r7, #24]
 8011568:	4613      	mov	r3, r2
 801156a:	00db      	lsls	r3, r3, #3
 801156c:	4413      	add	r3, r2
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	4403      	add	r3, r0
 8011572:	3304      	adds	r3, #4
 8011574:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 8011576:	4a36      	ldr	r2, [pc, #216]	; (8011650 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	011b      	lsls	r3, r3, #4
 801157c:	4413      	add	r3, r2
 801157e:	3308      	adds	r3, #8
 8011580:	6819      	ldr	r1, [r3, #0]
 8011582:	4834      	ldr	r0, [pc, #208]	; (8011654 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8011584:	69ba      	ldr	r2, [r7, #24]
 8011586:	4613      	mov	r3, r2
 8011588:	00db      	lsls	r3, r3, #3
 801158a:	4413      	add	r3, r2
 801158c:	009b      	lsls	r3, r3, #2
 801158e:	4403      	add	r3, r0
 8011590:	3314      	adds	r3, #20
 8011592:	6019      	str	r1, [r3, #0]
    tflNodes[i].custom_initial_data = nullptr;
 8011594:	492f      	ldr	r1, [pc, #188]	; (8011654 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8011596:	69ba      	ldr	r2, [r7, #24]
 8011598:	4613      	mov	r3, r2
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	4413      	add	r3, r2
 801159e:	009b      	lsls	r3, r3, #2
 80115a0:	440b      	add	r3, r1
 80115a2:	3318      	adds	r3, #24
 80115a4:	2200      	movs	r2, #0
 80115a6:	601a      	str	r2, [r3, #0]
    tflNodes[i].custom_initial_data_size = 0;
 80115a8:	492a      	ldr	r1, [pc, #168]	; (8011654 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80115aa:	69ba      	ldr	r2, [r7, #24]
 80115ac:	4613      	mov	r3, r2
 80115ae:	00db      	lsls	r3, r3, #3
 80115b0:	4413      	add	r3, r2
 80115b2:	009b      	lsls	r3, r3, #2
 80115b4:	440b      	add	r3, r1
 80115b6:	331c      	adds	r3, #28
 80115b8:	2200      	movs	r2, #0
 80115ba:	601a      	str	r2, [r3, #0]
    if (registrations[nodeData[i].used_op_index].init) {
 80115bc:	4a24      	ldr	r2, [pc, #144]	; (8011650 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	011b      	lsls	r3, r3, #4
 80115c2:	4413      	add	r3, r2
 80115c4:	330c      	adds	r3, #12
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	4a20      	ldr	r2, [pc, #128]	; (801164c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80115ca:	015b      	lsls	r3, r3, #5
 80115cc:	4413      	add	r3, r2
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d020      	beq.n	8011616 <_Z18trained_model_initPFPvjjE+0x296>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80115d4:	4a1e      	ldr	r2, [pc, #120]	; (8011650 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80115d6:	69bb      	ldr	r3, [r7, #24]
 80115d8:	011b      	lsls	r3, r3, #4
 80115da:	4413      	add	r3, r2
 80115dc:	330c      	adds	r3, #12
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	4a1a      	ldr	r2, [pc, #104]	; (801164c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80115e2:	015b      	lsls	r3, r3, #5
 80115e4:	4413      	add	r3, r2
 80115e6:	681c      	ldr	r4, [r3, #0]
 80115e8:	491a      	ldr	r1, [pc, #104]	; (8011654 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80115ea:	69ba      	ldr	r2, [r7, #24]
 80115ec:	4613      	mov	r3, r2
 80115ee:	00db      	lsls	r3, r3, #3
 80115f0:	4413      	add	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	440b      	add	r3, r1
 80115f6:	3314      	adds	r3, #20
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2200      	movs	r2, #0
 80115fc:	4619      	mov	r1, r3
 80115fe:	480c      	ldr	r0, [pc, #48]	; (8011630 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8011600:	47a0      	blx	r4
 8011602:	4601      	mov	r1, r0
 8011604:	4813      	ldr	r0, [pc, #76]	; (8011654 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8011606:	69ba      	ldr	r2, [r7, #24]
 8011608:	4613      	mov	r3, r2
 801160a:	00db      	lsls	r3, r3, #3
 801160c:	4413      	add	r3, r2
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	4403      	add	r3, r0
 8011612:	3310      	adds	r3, #16
 8011614:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 4; ++i) {
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	3301      	adds	r3, #1
 801161a:	61bb      	str	r3, [r7, #24]
 801161c:	e78b      	b.n	8011536 <_Z18trained_model_initPFPvjjE+0x1b6>
 801161e:	bf00      	nop
 8011620:	20000510 	.word	0x20000510
 8011624:	0801b5d4 	.word	0x0801b5d4
 8011628:	20000514 	.word	0x20000514
 801162c:	20000518 	.word	0x20000518
 8011630:	2000051c 	.word	0x2000051c
 8011634:	08011219 	.word	0x08011219
 8011638:	080112e5 	.word	0x080112e5
 801163c:	0801133d 	.word	0x0801133d
 8011640:	2000056c 	.word	0x2000056c
 8011644:	200000bc 	.word	0x200000bc
 8011648:	0801b5fc 	.word	0x0801b5fc
 801164c:	2000082c 	.word	0x2000082c
 8011650:	08039d14 	.word	0x08039d14
 8011654:	2000086c 	.word	0x2000086c
    }
  }
  for(size_t i = 0; i < 4; ++i) {
 8011658:	2300      	movs	r3, #0
 801165a:	617b      	str	r3, [r7, #20]
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	2b03      	cmp	r3, #3
 8011660:	d82c      	bhi.n	80116bc <_Z18trained_model_initPFPvjjE+0x33c>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8011662:	4a19      	ldr	r2, [pc, #100]	; (80116c8 <_Z18trained_model_initPFPvjjE+0x348>)
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	011b      	lsls	r3, r3, #4
 8011668:	4413      	add	r3, r2
 801166a:	330c      	adds	r3, #12
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	4a17      	ldr	r2, [pc, #92]	; (80116cc <_Z18trained_model_initPFPvjjE+0x34c>)
 8011670:	015b      	lsls	r3, r3, #5
 8011672:	4413      	add	r3, r2
 8011674:	3308      	adds	r3, #8
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d01b      	beq.n	80116b4 <_Z18trained_model_initPFPvjjE+0x334>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801167c:	4a12      	ldr	r2, [pc, #72]	; (80116c8 <_Z18trained_model_initPFPvjjE+0x348>)
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	011b      	lsls	r3, r3, #4
 8011682:	4413      	add	r3, r2
 8011684:	330c      	adds	r3, #12
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	4a10      	ldr	r2, [pc, #64]	; (80116cc <_Z18trained_model_initPFPvjjE+0x34c>)
 801168a:	015b      	lsls	r3, r3, #5
 801168c:	4413      	add	r3, r2
 801168e:	3308      	adds	r3, #8
 8011690:	681c      	ldr	r4, [r3, #0]
 8011692:	697a      	ldr	r2, [r7, #20]
 8011694:	4613      	mov	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	4413      	add	r3, r2
 801169a:	009b      	lsls	r3, r3, #2
 801169c:	4a0c      	ldr	r2, [pc, #48]	; (80116d0 <_Z18trained_model_initPFPvjjE+0x350>)
 801169e:	4413      	add	r3, r2
 80116a0:	4619      	mov	r1, r3
 80116a2:	480c      	ldr	r0, [pc, #48]	; (80116d4 <_Z18trained_model_initPFPvjjE+0x354>)
 80116a4:	47a0      	blx	r4
 80116a6:	4603      	mov	r3, r0
 80116a8:	72fb      	strb	r3, [r7, #11]
      if (status != kTfLiteOk) {
 80116aa:	7afb      	ldrb	r3, [r7, #11]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d001      	beq.n	80116b4 <_Z18trained_model_initPFPvjjE+0x334>
        return status;
 80116b0:	7afb      	ldrb	r3, [r7, #11]
 80116b2:	e004      	b.n	80116be <_Z18trained_model_initPFPvjjE+0x33e>
  for(size_t i = 0; i < 4; ++i) {
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	3301      	adds	r3, #1
 80116b8:	617b      	str	r3, [r7, #20]
 80116ba:	e7cf      	b.n	801165c <_Z18trained_model_initPFPvjjE+0x2dc>
      }
    }
  }
  return kTfLiteOk;
 80116bc:	2300      	movs	r3, #0
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3720      	adds	r7, #32
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bdb0      	pop	{r4, r5, r7, pc}
 80116c6:	bf00      	nop
 80116c8:	08039d14 	.word	0x08039d14
 80116cc:	2000082c 	.word	0x2000082c
 80116d0:	2000086c 	.word	0x2000086c
 80116d4:	2000051c 	.word	0x2000051c

080116d8 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 80116e0:	4b05      	ldr	r3, [pc, #20]	; (80116f8 <_Z19trained_model_inputi+0x20>)
 80116e2:	689a      	ldr	r2, [r3, #8]
 80116e4:	2300      	movs	r3, #0
 80116e6:	019b      	lsls	r3, r3, #6
 80116e8:	4413      	add	r3, r2
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop
 80116f8:	2000051c 	.word	0x2000051c

080116fc <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 8011704:	4b05      	ldr	r3, [pc, #20]	; (801171c <_Z20trained_model_outputi+0x20>)
 8011706:	689a      	ldr	r2, [r3, #8]
 8011708:	230a      	movs	r3, #10
 801170a:	019b      	lsls	r3, r3, #6
 801170c:	4413      	add	r3, r2
}
 801170e:	4618      	mov	r0, r3
 8011710:	370c      	adds	r7, #12
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
 801171a:	bf00      	nop
 801171c:	2000051c 	.word	0x2000051c

08011720 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8011720:	b590      	push	{r4, r7, lr}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 4; ++i) {
 8011726:	2300      	movs	r3, #0
 8011728:	607b      	str	r3, [r7, #4]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2b03      	cmp	r3, #3
 801172e:	d81f      	bhi.n	8011770 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8011730:	4a12      	ldr	r2, [pc, #72]	; (801177c <_Z20trained_model_invokev+0x5c>)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	4413      	add	r3, r2
 8011738:	330c      	adds	r3, #12
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	4a10      	ldr	r2, [pc, #64]	; (8011780 <_Z20trained_model_invokev+0x60>)
 801173e:	015b      	lsls	r3, r3, #5
 8011740:	4413      	add	r3, r2
 8011742:	330c      	adds	r3, #12
 8011744:	681c      	ldr	r4, [r3, #0]
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	4613      	mov	r3, r2
 801174a:	00db      	lsls	r3, r3, #3
 801174c:	4413      	add	r3, r2
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	4a0c      	ldr	r2, [pc, #48]	; (8011784 <_Z20trained_model_invokev+0x64>)
 8011752:	4413      	add	r3, r2
 8011754:	4619      	mov	r1, r3
 8011756:	480c      	ldr	r0, [pc, #48]	; (8011788 <_Z20trained_model_invokev+0x68>)
 8011758:	47a0      	blx	r4
 801175a:	4603      	mov	r3, r0
 801175c:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801175e:	78fb      	ldrb	r3, [r7, #3]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d001      	beq.n	8011768 <_Z20trained_model_invokev+0x48>
      return status;
 8011764:	78fb      	ldrb	r3, [r7, #3]
 8011766:	e004      	b.n	8011772 <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 4; ++i) {
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	3301      	adds	r3, #1
 801176c:	607b      	str	r3, [r7, #4]
 801176e:	e7dc      	b.n	801172a <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8011770:	2300      	movs	r3, #0
}
 8011772:	4618      	mov	r0, r3
 8011774:	370c      	adds	r7, #12
 8011776:	46bd      	mov	sp, r7
 8011778:	bd90      	pop	{r4, r7, pc}
 801177a:	bf00      	nop
 801177c:	08039d14 	.word	0x08039d14
 8011780:	2000082c 	.word	0x2000082c
 8011784:	2000086c 	.word	0x2000086c
 8011788:	2000051c 	.word	0x2000051c

0801178c <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8011794:	4b15      	ldr	r3, [pc, #84]	; (80117ec <_Z19trained_model_resetPFvPvE+0x60>)
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4610      	mov	r0, r2
 801179c:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 801179e:	4814      	ldr	r0, [pc, #80]	; (80117f0 <_Z19trained_model_resetPFvPvE+0x64>)
 80117a0:	f000 f8ff 	bl	80119a2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 80117a4:	2300      	movs	r3, #0
 80117a6:	60fb      	str	r3, [r7, #12]
 80117a8:	4812      	ldr	r0, [pc, #72]	; (80117f4 <_Z19trained_model_resetPFvPvE+0x68>)
 80117aa:	f000 f908 	bl	80119be <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80117ae:	4602      	mov	r2, r0
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	4293      	cmp	r3, r2
 80117b4:	bf34      	ite	cc
 80117b6:	2301      	movcc	r3, #1
 80117b8:	2300      	movcs	r3, #0
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d00c      	beq.n	80117da <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 80117c0:	68f9      	ldr	r1, [r7, #12]
 80117c2:	480c      	ldr	r0, [pc, #48]	; (80117f4 <_Z19trained_model_resetPFvPvE+0x68>)
 80117c4:	f000 f90b 	bl	80119de <_ZNSt6vectorIPvSaIS0_EEixEj>
 80117c8:	4603      	mov	r3, r0
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f004 f8e1 	bl	8015994 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	3301      	adds	r3, #1
 80117d6:	60fb      	str	r3, [r7, #12]
 80117d8:	e7e6      	b.n	80117a8 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 80117da:	4806      	ldr	r0, [pc, #24]	; (80117f4 <_Z19trained_model_resetPFvPvE+0x68>)
 80117dc:	f000 f90f 	bl	80119fe <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	20000510 	.word	0x20000510
 80117f0:	20000908 	.word	0x20000908
 80117f4:	200008fc 	.word	0x200008fc

080117f8 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 f90a 	bl	8011a1a <_ZNSaIPvEC1Ev>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4618      	mov	r0, r3
 801180a:	f000 f912 	bl	8011a32 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4618      	mov	r0, r3
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <_ZNSaIPvED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f000 f91a 	bl	8011a5a <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4618      	mov	r0, r3
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	689a      	ldr	r2, [r3, #8]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8011848:	461a      	mov	r2, r3
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f910 	bl	8011a70 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	4618      	mov	r0, r3
 8011854:	f7ff fcba 	bl	80111cc <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4618      	mov	r0, r3
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8011862:	b580      	push	{r7, lr}
 8011864:	b082      	sub	sp, #8
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
 801186a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	685a      	ldr	r2, [r3, #4]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	429a      	cmp	r2, r3
 8011876:	d00c      	beq.n	8011892 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	683a      	ldr	r2, [r7, #0]
 8011880:	4619      	mov	r1, r3
 8011882:	f000 f908 	bl	8011a96 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	1d1a      	adds	r2, r3, #4
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	605a      	str	r2, [r3, #4]
      }
 8011890:	e008      	b.n	80118a4 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f000 f912 	bl	8011abc <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8011898:	4603      	mov	r3, r0
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	4619      	mov	r1, r3
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 f934 	bl	8011b0c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80118a4:	bf00      	nop
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 f9e5 	bl	8011c84 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4618      	mov	r0, r3
 80118be:	f000 f9ed 	bl	8011c9c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4618      	mov	r0, r3
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 f9f5 	bl	8011cc4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4618      	mov	r0, r3
 80118de:	3708      	adds	r7, #8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}

080118e4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	689a      	ldr	r2, [r3, #8]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80118fc:	461a      	mov	r2, r3
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f9eb 	bl	8011cda <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	4618      	mov	r0, r3
 8011908:	f7ff fcc6 	bl	8011298 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	4618      	mov	r0, r3
 8011910:	3708      	adds	r7, #8
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8011916:	b580      	push	{r7, lr}
 8011918:	b082      	sub	sp, #8
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	685a      	ldr	r2, [r3, #4]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	429a      	cmp	r2, r3
 801192a:	d00d      	beq.n	8011948 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	683a      	ldr	r2, [r7, #0]
 8011934:	4619      	mov	r1, r3
 8011936:	f000 f9e3 	bl	8011d00 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	f103 0208 	add.w	r2, r3, #8
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	605a      	str	r2, [r3, #4]
      }
 8011946:	e008      	b.n	801195a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 f9ec 	bl	8011d26 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 801194e:	4603      	mov	r3, r0
 8011950:	683a      	ldr	r2, [r7, #0]
 8011952:	4619      	mov	r1, r3
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 fa0d 	bl	8011d74 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801195a:	bf00      	nop
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}

08011962 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8011962:	b480      	push	{r7}
 8011964:	b083      	sub	sp, #12
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	685a      	ldr	r2, [r3, #4]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	10db      	asrs	r3, r3, #3
 8011976:	4618      	mov	r0, r3
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr

08011982 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8011982:	b480      	push	{r7}
 8011984:	b083      	sub	sp, #12
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
 801198a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	00db      	lsls	r3, r3, #3
 8011994:	4413      	add	r3, r2
      }
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr

080119a2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b082      	sub	sp, #8
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4619      	mov	r1, r3
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f000 fa9b 	bl	8011eec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 80119b6:	bf00      	nop
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80119be:	b480      	push	{r7}
 80119c0:	b083      	sub	sp, #12
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685a      	ldr	r2, [r3, #4]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	109b      	asrs	r3, r3, #2
 80119d2:	4618      	mov	r0, r3
 80119d4:	370c      	adds	r7, #12
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80119de:	b480      	push	{r7}
 80119e0:	b083      	sub	sp, #12
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	4413      	add	r3, r2
      }
 80119f2:	4618      	mov	r0, r3
 80119f4:	370c      	adds	r7, #12
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr

080119fe <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b082      	sub	sp, #8
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 fa8e 	bl	8011f2e <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b082      	sub	sp, #8
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 faa4 	bl	8011f70 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011a32:	b480      	push	{r7}
 8011a34:	b083      	sub	sp, #12
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	601a      	str	r2, [r3, #0]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	605a      	str	r2, [r3, #4]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	609a      	str	r2, [r3, #8]
	{ }
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	370c      	adds	r7, #12
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr

08011a5a <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011a5a:	b480      	push	{r7}
 8011a5c:	b083      	sub	sp, #12
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4618      	mov	r0, r3
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
	if (__p)
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d005      	beq.n	8011a8e <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	68b9      	ldr	r1, [r7, #8]
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f000 fa7c 	bl	8011f86 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8011a8e:	bf00      	nop
 8011a90:	3710      	adds	r7, #16
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b084      	sub	sp, #16
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	60f8      	str	r0, [r7, #12]
 8011a9e:	60b9      	str	r1, [r7, #8]
 8011aa0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 fa7e 	bl	8011fa4 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	461a      	mov	r2, r3
 8011aac:	68b9      	ldr	r1, [r7, #8]
 8011aae:	68f8      	ldr	r0, [r7, #12]
 8011ab0:	f000 fa83 	bl	8011fba <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8011ab4:	bf00      	nop
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	1d1a      	adds	r2, r3, #4
 8011ac8:	f107 030c 	add.w	r3, r7, #12
 8011acc:	4611      	mov	r1, r2
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f000 fa89 	bl	8011fe6 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b082      	sub	sp, #8
 8011ae2:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f000 f805 	bl	8011af4 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8011aea:	4603      	mov	r3, r0
      }
 8011aec:	4618      	mov	r0, r3
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8011afc:	2301      	movs	r3, #1
      }
 8011afe:	4618      	mov	r0, r3
 8011b00:	370c      	adds	r7, #12
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr
	...

08011b0c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011b0c:	b5b0      	push	{r4, r5, r7, lr}
 8011b0e:	b08c      	sub	sp, #48	; 0x30
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011b18:	4a59      	ldr	r2, [pc, #356]	; (8011c80 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8011b1a:	2101      	movs	r1, #1
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	f000 fa72 	bl	8012006 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8011b22:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8011b30:	68f8      	ldr	r0, [r7, #12]
 8011b32:	f000 faaf 	bl	8012094 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8011b36:	4603      	mov	r3, r0
 8011b38:	617b      	str	r3, [r7, #20]
 8011b3a:	f107 0214 	add.w	r2, r7, #20
 8011b3e:	f107 0308 	add.w	r3, r7, #8
 8011b42:	4611      	mov	r1, r2
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 fab5 	bl	80120b4 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 fac3 	bl	80120de <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8011b58:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8011b5e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011b60:	69fb      	ldr	r3, [r7, #28]
 8011b62:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011b64:	69ba      	ldr	r2, [r7, #24]
 8011b66:	18d5      	adds	r5, r2, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f000 fa1b 	bl	8011fa4 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	461a      	mov	r2, r3
 8011b72:	4629      	mov	r1, r5
 8011b74:	4620      	mov	r0, r4
 8011b76:	f7ff ff8e 	bl	8011a96 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8011b7e:	f7ff ffae 	bl	8011ade <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d027      	beq.n	8011bd8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011b88:	f107 0308 	add.w	r3, r7, #8
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f000 face 	bl	801212e <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011b92:	4603      	mov	r3, r0
 8011b94:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 fad3 	bl	8012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011b9e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011ba0:	69ba      	ldr	r2, [r7, #24]
 8011ba2:	4621      	mov	r1, r4
 8011ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ba6:	f000 faae 	bl	8012106 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8011baa:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	3304      	adds	r3, #4
 8011bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011bb2:	f107 0308 	add.w	r3, r7, #8
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 fab9 	bl	801212e <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f000 fabe 	bl	8012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011bc8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bcc:	6a39      	ldr	r1, [r7, #32]
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f000 fa99 	bl	8012106 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8011bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011bd6:	e026      	b.n	8011c26 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8011bd8:	f107 0308 	add.w	r3, r7, #8
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f000 faa6 	bl	801212e <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011be2:	4603      	mov	r3, r0
 8011be4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	4618      	mov	r0, r3
 8011bea:	f000 faab 	bl	8012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011bee:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8011bf0:	69ba      	ldr	r2, [r7, #24]
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bf6:	f000 fab0 	bl	801215a <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8011bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfe:	3304      	adds	r3, #4
 8011c00:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8011c02:	f107 0308 	add.w	r3, r7, #8
 8011c06:	4618      	mov	r0, r3
 8011c08:	f000 fa91 	bl	801212e <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f000 fa96 	bl	8012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011c18:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8011c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c1c:	6a39      	ldr	r1, [r7, #32]
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f000 fa9b 	bl	801215a <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8011c24:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8011c26:	f7ff ff5a 	bl	8011ade <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	f083 0301 	eor.w	r3, r3, #1
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d009      	beq.n	8011c4a <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f000 fa83 	bl	8012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	461a      	mov	r2, r3
 8011c42:	6a39      	ldr	r1, [r7, #32]
 8011c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c46:	f000 faa1 	bl	801218c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8011c4a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	689a      	ldr	r2, [r3, #8]
 8011c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011c56:	461a      	mov	r2, r3
 8011c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c5a:	f7ff ff09 	bl	8011a70 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	69ba      	ldr	r2, [r7, #24]
 8011c62:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c68:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6c:	009b      	lsls	r3, r3, #2
 8011c6e:	69ba      	ldr	r2, [r7, #24]
 8011c70:	441a      	add	r2, r3
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	609a      	str	r2, [r3, #8]
    }
 8011c76:	bf00      	nop
 8011c78:	3730      	adds	r7, #48	; 0x30
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	0801b650 	.word	0x0801b650

08011c84 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f000 fa8b 	bl	80121a8 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	4618      	mov	r0, r3
 8011c96:	3708      	adds	r7, #8
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2200      	movs	r2, #0
 8011cae:	605a      	str	r2, [r3, #4]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	609a      	str	r2, [r3, #8]
	{ }
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	370c      	adds	r7, #12
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr

08011cda <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b084      	sub	sp, #16
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	60f8      	str	r0, [r7, #12]
 8011ce2:	60b9      	str	r1, [r7, #8]
 8011ce4:	607a      	str	r2, [r7, #4]
	if (__p)
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d005      	beq.n	8011cf8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	68b9      	ldr	r1, [r7, #8]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f000 fa63 	bl	80121be <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8011cf8:	bf00      	nop
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	60b9      	str	r1, [r7, #8]
 8011d0a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f000 fa65 	bl	80121dc <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011d12:	4603      	mov	r3, r0
 8011d14:	461a      	mov	r2, r3
 8011d16:	68b9      	ldr	r1, [r7, #8]
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f000 fa6a 	bl	80121f2 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8011d1e:	bf00      	nop
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b084      	sub	sp, #16
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	1d1a      	adds	r2, r3, #4
 8011d32:	f107 030c 	add.w	r3, r7, #12
 8011d36:	4611      	mov	r1, r2
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f000 fa73 	bl	8012224 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	4618      	mov	r0, r3
 8011d42:	3710      	adds	r7, #16
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 f805 	bl	8011d5e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8011d54:	4603      	mov	r3, r0
      }
 8011d56:	4618      	mov	r0, r3
 8011d58:	3708      	adds	r7, #8
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8011d5e:	b480      	push	{r7}
 8011d60:	b083      	sub	sp, #12
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8011d66:	2301      	movs	r3, #1
      }
 8011d68:	4618      	mov	r0, r3
 8011d6a:	370c      	adds	r7, #12
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011d74:	b5b0      	push	{r4, r5, r7, lr}
 8011d76:	b08c      	sub	sp, #48	; 0x30
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011d80:	4a59      	ldr	r2, [pc, #356]	; (8011ee8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8011d82:	2101      	movs	r1, #1
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	f000 fa5d 	bl	8012244 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8011d8a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f000 fa9a 	bl	80122d2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	617b      	str	r3, [r7, #20]
 8011da2:	f107 0214 	add.w	r2, r7, #20
 8011da6:	f107 0308 	add.w	r3, r7, #8
 8011daa:	4611      	mov	r1, r2
 8011dac:	4618      	mov	r0, r3
 8011dae:	f000 faa0 	bl	80122f2 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011db2:	4603      	mov	r3, r0
 8011db4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f000 faae 	bl	801231c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8011dc0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8011dc2:	69bb      	ldr	r3, [r7, #24]
 8011dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8011dc6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8011dcc:	69ba      	ldr	r2, [r7, #24]
 8011dce:	18d5      	adds	r5, r2, r3
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 fa03 	bl	80121dc <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	461a      	mov	r2, r3
 8011dda:	4629      	mov	r1, r5
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f7ff ff8f 	bl	8011d00 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011de2:	2300      	movs	r3, #0
 8011de4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8011de6:	f7ff ffaf 	bl	8011d48 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d027      	beq.n	8011e40 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011df0:	f107 0308 	add.w	r3, r7, #8
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 fab9 	bl	801236c <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	4618      	mov	r0, r3
 8011e02:	f000 fabe 	bl	8012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011e06:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011e08:	69ba      	ldr	r2, [r7, #24]
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e0e:	f000 fa99 	bl	8012344 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011e12:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8011e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e16:	3308      	adds	r3, #8
 8011e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011e1a:	f107 0308 	add.w	r3, r7, #8
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f000 faa4 	bl	801236c <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011e24:	4603      	mov	r3, r0
 8011e26:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f000 faa9 	bl	8012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011e30:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e34:	6a39      	ldr	r1, [r7, #32]
 8011e36:	4620      	mov	r0, r4
 8011e38:	f000 fa84 	bl	8012344 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011e3e:	e026      	b.n	8011e8e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8011e40:	f107 0308 	add.w	r3, r7, #8
 8011e44:	4618      	mov	r0, r3
 8011e46:	f000 fa91 	bl	801236c <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	4618      	mov	r0, r3
 8011e52:	f000 fa96 	bl	8012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011e56:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8011e58:	69ba      	ldr	r2, [r7, #24]
 8011e5a:	4621      	mov	r1, r4
 8011e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e5e:	f000 fa9b 	bl	8012398 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8011e62:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8011e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e66:	3308      	adds	r3, #8
 8011e68:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8011e6a:	f107 0308 	add.w	r3, r7, #8
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f000 fa7c 	bl	801236c <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011e74:	4603      	mov	r3, r0
 8011e76:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f000 fa81 	bl	8012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011e80:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8011e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e84:	6a39      	ldr	r1, [r7, #32]
 8011e86:	4620      	mov	r0, r4
 8011e88:	f000 fa86 	bl	8012398 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8011e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8011e8e:	f7ff ff5b 	bl	8011d48 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8011e92:	4603      	mov	r3, r0
 8011e94:	f083 0301 	eor.w	r3, r3, #1
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d009      	beq.n	8011eb2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f000 fa6e 	bl	8012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	6a39      	ldr	r1, [r7, #32]
 8011eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eae:	f000 fa8c 	bl	80123ca <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8011eb2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	689a      	ldr	r2, [r3, #8]
 8011eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eba:	1ad3      	subs	r3, r2, r3
 8011ebc:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ec2:	f7ff ff0a 	bl	8011cda <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	69ba      	ldr	r2, [r7, #24]
 8011eca:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ed0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed4:	00db      	lsls	r3, r3, #3
 8011ed6:	69ba      	ldr	r2, [r7, #24]
 8011ed8:	441a      	add	r2, r3
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	609a      	str	r2, [r3, #8]
    }
 8011ede:	bf00      	nop
 8011ee0:	3730      	adds	r7, #48	; 0x30
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	0801b650 	.word	0x0801b650

08011eec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8011eec:	b590      	push	{r4, r7, lr}
 8011eee:	b085      	sub	sp, #20
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	685a      	ldr	r2, [r3, #4]
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	10db      	asrs	r3, r3, #3
 8011f00:	60fb      	str	r3, [r7, #12]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d00e      	beq.n	8011f26 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f000 fa37 	bl	8012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011f14:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011f16:	461a      	mov	r2, r3
 8011f18:	4621      	mov	r1, r4
 8011f1a:	6838      	ldr	r0, [r7, #0]
 8011f1c:	f000 fa55 	bl	80123ca <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	683a      	ldr	r2, [r7, #0]
 8011f24:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8011f26:	bf00      	nop
 8011f28:	3714      	adds	r7, #20
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd90      	pop	{r4, r7, pc}

08011f2e <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8011f2e:	b590      	push	{r4, r7, lr}
 8011f30:	b085      	sub	sp, #20
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	685a      	ldr	r2, [r3, #4]
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	1ad3      	subs	r3, r2, r3
 8011f40:	109b      	asrs	r3, r3, #2
 8011f42:	60fb      	str	r3, [r7, #12]
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00e      	beq.n	8011f68 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f000 f8f7 	bl	8012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011f56:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8011f58:	461a      	mov	r2, r3
 8011f5a:	4621      	mov	r1, r4
 8011f5c:	6838      	ldr	r0, [r7, #0]
 8011f5e:	f000 f915 	bl	801218c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	683a      	ldr	r2, [r7, #0]
 8011f66:	605a      	str	r2, [r3, #4]
      }
 8011f68:	bf00      	nop
 8011f6a:	3714      	adds	r7, #20
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd90      	pop	{r4, r7, pc}

08011f70 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	370c      	adds	r7, #12
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr

08011f86 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011f86:	b580      	push	{r7, lr}
 8011f88:	b084      	sub	sp, #16
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	60f8      	str	r0, [r7, #12]
 8011f8e:	60b9      	str	r1, [r7, #8]
 8011f90:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	68b9      	ldr	r1, [r7, #8]
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f000 fa25 	bl	80123e6 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 8011f9c:	bf00      	nop
 8011f9e:	3710      	adds	r7, #16
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	370c      	adds	r7, #12
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr

08011fba <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011fba:	b590      	push	{r4, r7, lr}
 8011fbc:	b085      	sub	sp, #20
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	60f8      	str	r0, [r7, #12]
 8011fc2:	60b9      	str	r1, [r7, #8]
 8011fc4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f7ff ffec 	bl	8011fa4 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	681c      	ldr	r4, [r3, #0]
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	2004      	movs	r0, #4
 8011fd6:	f7ef f938 	bl	800124a <_ZnwjPv>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	601c      	str	r4, [r3, #0]
 8011fde:	bf00      	nop
 8011fe0:	3714      	adds	r7, #20
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd90      	pop	{r4, r7, pc}

08011fe6 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011fe6:	b480      	push	{r7}
 8011fe8:	b083      	sub	sp, #12
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	601a      	str	r2, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	370c      	adds	r7, #12
 8011ffe:	46bd      	mov	sp, r7
 8012000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012004:	4770      	bx	lr

08012006 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012006:	b590      	push	{r4, r7, lr}
 8012008:	b087      	sub	sp, #28
 801200a:	af00      	add	r7, sp, #0
 801200c:	60f8      	str	r0, [r7, #12]
 801200e:	60b9      	str	r1, [r7, #8]
 8012010:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f000 f9f4 	bl	8012400 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8012018:	4604      	mov	r4, r0
 801201a:	68f8      	ldr	r0, [r7, #12]
 801201c:	f7ff fccf 	bl	80119be <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8012020:	4603      	mov	r3, r0
 8012022:	1ae2      	subs	r2, r4, r3
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	429a      	cmp	r2, r3
 8012028:	bf34      	ite	cc
 801202a:	2301      	movcc	r3, #1
 801202c:	2300      	movcs	r3, #0
 801202e:	b2db      	uxtb	r3, r3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d002      	beq.n	801203a <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 fe4b 	bl	8012cd0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	f7ff fcbf 	bl	80119be <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8012040:	4604      	mov	r4, r0
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f7ff fcbb 	bl	80119be <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8012048:	4603      	mov	r3, r0
 801204a:	613b      	str	r3, [r7, #16]
 801204c:	f107 0208 	add.w	r2, r7, #8
 8012050:	f107 0310 	add.w	r3, r7, #16
 8012054:	4611      	mov	r1, r2
 8012056:	4618      	mov	r0, r3
 8012058:	f7f3 faf5 	bl	8005646 <_ZSt3maxIjERKT_S2_S2_>
 801205c:	4603      	mov	r3, r0
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4423      	add	r3, r4
 8012062:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f7ff fcaa 	bl	80119be <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801206a:	4602      	mov	r2, r0
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	4293      	cmp	r3, r2
 8012070:	d306      	bcc.n	8012080 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8012072:	68f8      	ldr	r0, [r7, #12]
 8012074:	f000 f9c4 	bl	8012400 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8012078:	4602      	mov	r2, r0
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	4293      	cmp	r3, r2
 801207e:	d904      	bls.n	801208a <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f000 f9bd 	bl	8012400 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8012086:	4603      	mov	r3, r0
 8012088:	e000      	b.n	801208c <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 801208a:	697b      	ldr	r3, [r7, #20]
      }
 801208c:	4618      	mov	r0, r3
 801208e:	371c      	adds	r7, #28
 8012090:	46bd      	mov	sp, r7
 8012092:	bd90      	pop	{r4, r7, pc}

08012094 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	f107 030c 	add.w	r3, r7, #12
 80120a2:	4611      	mov	r1, r2
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7ff ff9e 	bl	8011fe6 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80120b4:	b590      	push	{r4, r7, lr}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f000 f835 	bl	801212e <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80120c4:	4603      	mov	r3, r0
 80120c6:	681c      	ldr	r4, [r3, #0]
 80120c8:	6838      	ldr	r0, [r7, #0]
 80120ca:	f000 f830 	bl	801212e <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80120ce:	4603      	mov	r3, r0
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	1ae3      	subs	r3, r4, r3
 80120d4:	109b      	asrs	r3, r3, #2
 80120d6:	4618      	mov	r0, r3
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd90      	pop	{r4, r7, pc}

080120de <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80120de:	b580      	push	{r7, lr}
 80120e0:	b082      	sub	sp, #8
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
 80120e6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d006      	beq.n	80120fc <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 f995 	bl	8012422 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 80120f8:	4603      	mov	r3, r0
 80120fa:	e000      	b.n	80120fe <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 80120fc:	2300      	movs	r3, #0
      }
 80120fe:	4618      	mov	r0, r3
 8012100:	3708      	adds	r7, #8
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}

08012106 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012106:	b590      	push	{r4, r7, lr}
 8012108:	b089      	sub	sp, #36	; 0x24
 801210a:	af02      	add	r7, sp, #8
 801210c:	60f8      	str	r0, [r7, #12]
 801210e:	60b9      	str	r1, [r7, #8]
 8012110:	607a      	str	r2, [r7, #4]
 8012112:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012114:	f88d 4000 	strb.w	r4, [sp]
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	68b9      	ldr	r1, [r7, #8]
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f000 f98e 	bl	8012440 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8012124:	4603      	mov	r3, r0
      }
 8012126:	4618      	mov	r0, r3
 8012128:	371c      	adds	r7, #28
 801212a:	46bd      	mov	sp, r7
 801212c:	bd90      	pop	{r4, r7, pc}

0801212e <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801212e:	b480      	push	{r7}
 8012130:	b083      	sub	sp, #12
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4618      	mov	r0, r3
 801213a:	370c      	adds	r7, #12
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	4618      	mov	r0, r3
 8012150:	370c      	adds	r7, #12
 8012152:	46bd      	mov	sp, r7
 8012154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012158:	4770      	bx	lr

0801215a <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 801215a:	b590      	push	{r4, r7, lr}
 801215c:	b085      	sub	sp, #20
 801215e:	af00      	add	r7, sp, #0
 8012160:	60f8      	str	r0, [r7, #12]
 8012162:	60b9      	str	r1, [r7, #8]
 8012164:	607a      	str	r2, [r7, #4]
 8012166:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	f000 f97b 	bl	8012464 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 801216e:	4604      	mov	r4, r0
 8012170:	68b8      	ldr	r0, [r7, #8]
 8012172:	f000 f977 	bl	8012464 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8012176:	4601      	mov	r1, r0
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	687a      	ldr	r2, [r7, #4]
 801217c:	4620      	mov	r0, r4
 801217e:	f000 f980 	bl	8012482 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8012182:	4603      	mov	r3, r0
    }
 8012184:	4618      	mov	r0, r3
 8012186:	3714      	adds	r7, #20
 8012188:	46bd      	mov	sp, r7
 801218a:	bd90      	pop	{r4, r7, pc}

0801218c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8012198:	68b9      	ldr	r1, [r7, #8]
 801219a:	68f8      	ldr	r0, [r7, #12]
 801219c:	f000 f982 	bl	80124a4 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 80121a0:	bf00      	nop
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	4618      	mov	r0, r3
 80121b4:	370c      	adds	r7, #12
 80121b6:	46bd      	mov	sp, r7
 80121b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121bc:	4770      	bx	lr

080121be <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80121be:	b580      	push	{r7, lr}
 80121c0:	b084      	sub	sp, #16
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	60f8      	str	r0, [r7, #12]
 80121c6:	60b9      	str	r1, [r7, #8]
 80121c8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	68b9      	ldr	r1, [r7, #8]
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f000 f975 	bl	80124be <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 80121d4:	bf00      	nop
 80121d6:	3710      	adds	r7, #16
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	4618      	mov	r0, r3
 80121e8:	370c      	adds	r7, #12
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr

080121f2 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80121f2:	b590      	push	{r4, r7, lr}
 80121f4:	b085      	sub	sp, #20
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	60f8      	str	r0, [r7, #12]
 80121fa:	60b9      	str	r1, [r7, #8]
 80121fc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f7ff ffec 	bl	80121dc <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012204:	4604      	mov	r4, r0
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	4619      	mov	r1, r3
 801220a:	2008      	movs	r0, #8
 801220c:	f7ef f81d 	bl	800124a <_ZnwjPv>
 8012210:	4603      	mov	r3, r0
 8012212:	4622      	mov	r2, r4
 8012214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012218:	e883 0003 	stmia.w	r3, {r0, r1}
 801221c:	bf00      	nop
 801221e:	3714      	adds	r7, #20
 8012220:	46bd      	mov	sp, r7
 8012222:	bd90      	pop	{r4, r7, pc}

08012224 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012224:	b480      	push	{r7}
 8012226:	b083      	sub	sp, #12
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	601a      	str	r2, [r3, #0]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012244:	b590      	push	{r4, r7, lr}
 8012246:	b087      	sub	sp, #28
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012250:	68f8      	ldr	r0, [r7, #12]
 8012252:	f000 f941 	bl	80124d8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8012256:	4604      	mov	r4, r0
 8012258:	68f8      	ldr	r0, [r7, #12]
 801225a:	f7ff fb82 	bl	8011962 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801225e:	4603      	mov	r3, r0
 8012260:	1ae2      	subs	r2, r4, r3
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	429a      	cmp	r2, r3
 8012266:	bf34      	ite	cc
 8012268:	2301      	movcc	r3, #1
 801226a:	2300      	movcs	r3, #0
 801226c:	b2db      	uxtb	r3, r3
 801226e:	2b00      	cmp	r3, #0
 8012270:	d002      	beq.n	8012278 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 fd2c 	bl	8012cd0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012278:	68f8      	ldr	r0, [r7, #12]
 801227a:	f7ff fb72 	bl	8011962 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801227e:	4604      	mov	r4, r0
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	f7ff fb6e 	bl	8011962 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8012286:	4603      	mov	r3, r0
 8012288:	613b      	str	r3, [r7, #16]
 801228a:	f107 0208 	add.w	r2, r7, #8
 801228e:	f107 0310 	add.w	r3, r7, #16
 8012292:	4611      	mov	r1, r2
 8012294:	4618      	mov	r0, r3
 8012296:	f7f3 f9d6 	bl	8005646 <_ZSt3maxIjERKT_S2_S2_>
 801229a:	4603      	mov	r3, r0
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4423      	add	r3, r4
 80122a0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80122a2:	68f8      	ldr	r0, [r7, #12]
 80122a4:	f7ff fb5d 	bl	8011962 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80122a8:	4602      	mov	r2, r0
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d306      	bcc.n	80122be <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 80122b0:	68f8      	ldr	r0, [r7, #12]
 80122b2:	f000 f911 	bl	80124d8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80122b6:	4602      	mov	r2, r0
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d904      	bls.n	80122c8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f000 f90a 	bl	80124d8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80122c4:	4603      	mov	r3, r0
 80122c6:	e000      	b.n	80122ca <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 80122c8:	697b      	ldr	r3, [r7, #20]
      }
 80122ca:	4618      	mov	r0, r3
 80122cc:	371c      	adds	r7, #28
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd90      	pop	{r4, r7, pc}

080122d2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b084      	sub	sp, #16
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	f107 030c 	add.w	r3, r7, #12
 80122e0:	4611      	mov	r1, r2
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff ff9e 	bl	8012224 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	4618      	mov	r0, r3
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80122f2:	b590      	push	{r4, r7, lr}
 80122f4:	b083      	sub	sp, #12
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 f835 	bl	801236c <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8012302:	4603      	mov	r3, r0
 8012304:	681c      	ldr	r4, [r3, #0]
 8012306:	6838      	ldr	r0, [r7, #0]
 8012308:	f000 f830 	bl	801236c <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801230c:	4603      	mov	r3, r0
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	1ae3      	subs	r3, r4, r3
 8012312:	10db      	asrs	r3, r3, #3
 8012314:	4618      	mov	r0, r3
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	bd90      	pop	{r4, r7, pc}

0801231c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d006      	beq.n	801233a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	4618      	mov	r0, r3
 8012332:	f000 f8e2 	bl	80124fa <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 8012336:	4603      	mov	r3, r0
 8012338:	e000      	b.n	801233c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 801233a:	2300      	movs	r3, #0
      }
 801233c:	4618      	mov	r0, r3
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012344:	b590      	push	{r4, r7, lr}
 8012346:	b089      	sub	sp, #36	; 0x24
 8012348:	af02      	add	r7, sp, #8
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
 8012350:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012352:	f88d 4000 	strb.w	r4, [sp]
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	687a      	ldr	r2, [r7, #4]
 801235a:	68b9      	ldr	r1, [r7, #8]
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f000 f8db 	bl	8012518 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012362:	4603      	mov	r3, r0
      }
 8012364:	4618      	mov	r0, r3
 8012366:	371c      	adds	r7, #28
 8012368:	46bd      	mov	sp, r7
 801236a:	bd90      	pop	{r4, r7, pc}

0801236c <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8012382:	b480      	push	{r7}
 8012384:	b083      	sub	sp, #12
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4618      	mov	r0, r3
 801238e:	370c      	adds	r7, #12
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr

08012398 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8012398:	b590      	push	{r4, r7, lr}
 801239a:	b085      	sub	sp, #20
 801239c:	af00      	add	r7, sp, #0
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	607a      	str	r2, [r7, #4]
 80123a4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f000 f8c8 	bl	801253c <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 80123ac:	4604      	mov	r4, r0
 80123ae:	68b8      	ldr	r0, [r7, #8]
 80123b0:	f000 f8c4 	bl	801253c <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 80123b4:	4601      	mov	r1, r0
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	4620      	mov	r0, r4
 80123bc:	f000 f8cd 	bl	801255a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80123c0:	4603      	mov	r3, r0
    }
 80123c2:	4618      	mov	r0, r3
 80123c4:	3714      	adds	r7, #20
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd90      	pop	{r4, r7, pc}

080123ca <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b084      	sub	sp, #16
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	60f8      	str	r0, [r7, #12]
 80123d2:	60b9      	str	r1, [r7, #8]
 80123d4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80123d6:	68b9      	ldr	r1, [r7, #8]
 80123d8:	68f8      	ldr	r0, [r7, #12]
 80123da:	f000 f8cf 	bl	801257c <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 80123de:	bf00      	nop
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b084      	sub	sp, #16
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	60f8      	str	r0, [r7, #12]
 80123ee:	60b9      	str	r1, [r7, #8]
 80123f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80123f2:	68b8      	ldr	r0, [r7, #8]
 80123f4:	f000 fc52 	bl	8012c9c <_ZdlPv>
      }
 80123f8:	bf00      	nop
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	f000 f8dd 	bl	80125ca <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8012410:	4603      	mov	r3, r0
 8012412:	4618      	mov	r0, r3
 8012414:	f000 f8bf 	bl	8012596 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 8012418:	4603      	mov	r3, r0
 801241a:	4618      	mov	r0, r3
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8012422:	b580      	push	{r7, lr}
 8012424:	b082      	sub	sp, #8
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801242c:	2200      	movs	r2, #0
 801242e:	6839      	ldr	r1, [r7, #0]
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f000 f8d5 	bl	80125e0 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 8012436:	4603      	mov	r3, r0
 8012438:	4618      	mov	r0, r3
 801243a:	3708      	adds	r7, #8
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	607a      	str	r2, [r7, #4]
 801244c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	68b9      	ldr	r1, [r7, #8]
 8012454:	68f8      	ldr	r0, [r7, #12]
 8012456:	f000 f8e1 	bl	801261c <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 801245a:	4603      	mov	r3, r0
      }
 801245c:	4618      	mov	r0, r3
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 801246c:	f107 030c 	add.w	r3, r7, #12
 8012470:	6879      	ldr	r1, [r7, #4]
 8012472:	4618      	mov	r0, r3
 8012474:	f000 f8ef 	bl	8012656 <_ZNSt13move_iteratorIPPvEC1ES1_>
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	4618      	mov	r0, r3
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8012482:	b580      	push	{r7, lr}
 8012484:	b084      	sub	sp, #16
 8012486:	af00      	add	r7, sp, #0
 8012488:	60f8      	str	r0, [r7, #12]
 801248a:	60b9      	str	r1, [r7, #8]
 801248c:	607a      	str	r2, [r7, #4]
 801248e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	68b9      	ldr	r1, [r7, #8]
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f000 f8ed 	bl	8012674 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801249a:	4603      	mov	r3, r0
 801249c:	4618      	mov	r0, r3
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80124ae:	6839      	ldr	r1, [r7, #0]
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f000 f8f1 	bl	8012698 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 80124b6:	bf00      	nop
 80124b8:	3708      	adds	r7, #8
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}

080124be <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80124be:	b580      	push	{r7, lr}
 80124c0:	b084      	sub	sp, #16
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	60f8      	str	r0, [r7, #12]
 80124c6:	60b9      	str	r1, [r7, #8]
 80124c8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80124ca:	68b8      	ldr	r0, [r7, #8]
 80124cc:	f000 fbe6 	bl	8012c9c <_ZdlPv>
      }
 80124d0:	bf00      	nop
 80124d2:	3710      	adds	r7, #16
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 f8fd 	bl	80126e2 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80124e8:	4603      	mov	r3, r0
 80124ea:	4618      	mov	r0, r3
 80124ec:	f000 f8df 	bl	80126ae <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 80124f0:	4603      	mov	r3, r0
 80124f2:	4618      	mov	r0, r3
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b082      	sub	sp, #8
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012504:	2200      	movs	r2, #0
 8012506:	6839      	ldr	r1, [r7, #0]
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f000 f8f5 	bl	80126f8 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 801250e:	4603      	mov	r3, r0
 8012510:	4618      	mov	r0, r3
 8012512:	3708      	adds	r7, #8
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
 8012524:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	68b9      	ldr	r1, [r7, #8]
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f000 f901 	bl	8012734 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8012532:	4603      	mov	r3, r0
      }
 8012534:	4618      	mov	r0, r3
 8012536:	3710      	adds	r7, #16
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8012544:	f107 030c 	add.w	r3, r7, #12
 8012548:	6879      	ldr	r1, [r7, #4]
 801254a:	4618      	mov	r0, r3
 801254c:	f000 f90f 	bl	801276e <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	4618      	mov	r0, r3
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801255a:	b580      	push	{r7, lr}
 801255c:	b084      	sub	sp, #16
 801255e:	af00      	add	r7, sp, #0
 8012560:	60f8      	str	r0, [r7, #12]
 8012562:	60b9      	str	r1, [r7, #8]
 8012564:	607a      	str	r2, [r7, #4]
 8012566:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	68b9      	ldr	r1, [r7, #8]
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f000 f90d 	bl	801278c <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8012572:	4603      	mov	r3, r0
 8012574:	4618      	mov	r0, r3
 8012576:	3710      	adds	r7, #16
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8012586:	6839      	ldr	r1, [r7, #0]
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f000 f911 	bl	80127b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 801258e:	bf00      	nop
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012596:	b580      	push	{r7, lr}
 8012598:	b084      	sub	sp, #16
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801259e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80125a2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f000 f90e 	bl	80127c6 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 80125aa:	4603      	mov	r3, r0
 80125ac:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80125ae:	f107 0208 	add.w	r2, r7, #8
 80125b2:	f107 030c 	add.w	r3, r7, #12
 80125b6:	4611      	mov	r1, r2
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7f3 fa50 	bl	8005a5e <_ZSt3minIjERKT_S2_S2_>
 80125be:	4603      	mov	r3, r0
 80125c0:	681b      	ldr	r3, [r3, #0]
      }
 80125c2:	4618      	mov	r0, r3
 80125c4:	3710      	adds	r7, #16
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}

080125ca <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80125ca:	b480      	push	{r7}
 80125cc:	b083      	sub	sp, #12
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	370c      	adds	r7, #12
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	f000 f8f6 	bl	80127de <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 80125f2:	4602      	mov	r2, r0
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	4293      	cmp	r3, r2
 80125f8:	bf8c      	ite	hi
 80125fa:	2301      	movhi	r3, #1
 80125fc:	2300      	movls	r3, #0
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	2b00      	cmp	r3, #0
 8012602:	d001      	beq.n	8012608 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012604:	f000 fb61 	bl	8012cca <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	4618      	mov	r0, r3
 801260e:	f000 fb49 	bl	8012ca4 <_Znwj>
 8012612:	4603      	mov	r3, r0
      }
 8012614:	4618      	mov	r0, r3
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801261c:	b5b0      	push	{r4, r5, r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
 8012628:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801262a:	68f8      	ldr	r0, [r7, #12]
 801262c:	f000 f8e3 	bl	80127f6 <_ZSt12__niter_baseIPPvET_S2_>
 8012630:	4604      	mov	r4, r0
 8012632:	68b8      	ldr	r0, [r7, #8]
 8012634:	f000 f8df 	bl	80127f6 <_ZSt12__niter_baseIPPvET_S2_>
 8012638:	4605      	mov	r5, r0
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 f8db 	bl	80127f6 <_ZSt12__niter_baseIPPvET_S2_>
 8012640:	4602      	mov	r2, r0
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	4629      	mov	r1, r5
 8012646:	4620      	mov	r0, r4
 8012648:	f000 f8e0 	bl	801280c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 801264c:	4603      	mov	r3, r0
    }
 801264e:	4618      	mov	r0, r3
 8012650:	3710      	adds	r7, #16
 8012652:	46bd      	mov	sp, r7
 8012654:	bdb0      	pop	{r4, r5, r7, pc}

08012656 <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 8012656:	b480      	push	{r7}
 8012658:	b083      	sub	sp, #12
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
 801265e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	683a      	ldr	r2, [r7, #0]
 8012664:	601a      	str	r2, [r3, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr

08012674 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8012674:	b580      	push	{r7, lr}
 8012676:	b086      	sub	sp, #24
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8012680:	2301      	movs	r3, #1
 8012682:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	68b9      	ldr	r1, [r7, #8]
 8012688:	68f8      	ldr	r0, [r7, #12]
 801268a:	f000 f8dd 	bl	8012848 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 801268e:	4603      	mov	r3, r0
    }
 8012690:	4618      	mov	r0, r3
 8012692:	3718      	adds	r7, #24
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
 80126a2:	bf00      	nop
 80126a4:	370c      	adds	r7, #12
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr

080126ae <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80126ae:	b580      	push	{r7, lr}
 80126b0:	b084      	sub	sp, #16
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80126b6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80126ba:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f8d3 	bl	8012868 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 80126c2:	4603      	mov	r3, r0
 80126c4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80126c6:	f107 0208 	add.w	r2, r7, #8
 80126ca:	f107 030c 	add.w	r3, r7, #12
 80126ce:	4611      	mov	r1, r2
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7f3 f9c4 	bl	8005a5e <_ZSt3minIjERKT_S2_S2_>
 80126d6:	4603      	mov	r3, r0
 80126d8:	681b      	ldr	r3, [r3, #0]
      }
 80126da:	4618      	mov	r0, r3
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}

080126e2 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80126e2:	b480      	push	{r7}
 80126e4:	b083      	sub	sp, #12
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4618      	mov	r0, r3
 80126ee:	370c      	adds	r7, #12
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr

080126f8 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f000 f8bb 	bl	8012880 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 801270a:	4602      	mov	r2, r0
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	4293      	cmp	r3, r2
 8012710:	bf8c      	ite	hi
 8012712:	2301      	movhi	r3, #1
 8012714:	2300      	movls	r3, #0
 8012716:	b2db      	uxtb	r3, r3
 8012718:	2b00      	cmp	r3, #0
 801271a:	d001      	beq.n	8012720 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801271c:	f000 fad5 	bl	8012cca <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	00db      	lsls	r3, r3, #3
 8012724:	4618      	mov	r0, r3
 8012726:	f000 fabd 	bl	8012ca4 <_Znwj>
 801272a:	4603      	mov	r3, r0
      }
 801272c:	4618      	mov	r0, r3
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012734:	b5b0      	push	{r4, r5, r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
 8012740:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012742:	68f8      	ldr	r0, [r7, #12]
 8012744:	f000 f8a8 	bl	8012898 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012748:	4604      	mov	r4, r0
 801274a:	68b8      	ldr	r0, [r7, #8]
 801274c:	f000 f8a4 	bl	8012898 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012750:	4605      	mov	r5, r0
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f000 f8a0 	bl	8012898 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012758:	4602      	mov	r2, r0
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	4629      	mov	r1, r5
 801275e:	4620      	mov	r0, r4
 8012760:	f000 f8a5 	bl	80128ae <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012764:	4603      	mov	r3, r0
    }
 8012766:	4618      	mov	r0, r3
 8012768:	3710      	adds	r7, #16
 801276a:	46bd      	mov	sp, r7
 801276c:	bdb0      	pop	{r4, r5, r7, pc}

0801276e <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 801276e:	b480      	push	{r7}
 8012770:	b083      	sub	sp, #12
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
 8012776:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	683a      	ldr	r2, [r7, #0]
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801278c:	b580      	push	{r7, lr}
 801278e:	b086      	sub	sp, #24
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8012798:	2301      	movs	r3, #1
 801279a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	68b9      	ldr	r1, [r7, #8]
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f000 f8a2 	bl	80128ea <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 80127a6:	4603      	mov	r3, r0
    }
 80127a8:	4618      	mov	r0, r3
 80127aa:	3718      	adds	r7, #24
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
 80127ba:	bf00      	nop
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr

080127c6 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b082      	sub	sp, #8
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 f805 	bl	80127de <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 80127d4:	4603      	mov	r3, r0
 80127d6:	4618      	mov	r0, r3
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80127de:	b480      	push	{r7}
 80127e0:	b083      	sub	sp, #12
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80127e6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80127ea:	4618      	mov	r0, r3
 80127ec:	370c      	adds	r7, #12
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr

080127f6 <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 80127f6:	b480      	push	{r7}
 80127f8:	b083      	sub	sp, #12
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4618      	mov	r0, r3
 8012802:	370c      	adds	r7, #12
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr

0801280c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801280c:	b580      	push	{r7, lr}
 801280e:	b086      	sub	sp, #24
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	1ad3      	subs	r3, r2, r3
 8012820:	109b      	asrs	r3, r3, #2
 8012822:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	2b00      	cmp	r3, #0
 8012828:	dd06      	ble.n	8012838 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	461a      	mov	r2, r3
 8012830:	68f9      	ldr	r1, [r7, #12]
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f003 f8c4 	bl	80159c0 <memmove>
      return __result + __count;
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	4413      	add	r3, r2
    }
 8012840:	4618      	mov	r0, r3
 8012842:	3718      	adds	r7, #24
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	68b9      	ldr	r1, [r7, #8]
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f000 f856 	bl	801290a <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801285e:	4603      	mov	r3, r0
 8012860:	4618      	mov	r0, r3
 8012862:	3710      	adds	r7, #16
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f000 f805 	bl	8012880 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8012876:	4603      	mov	r3, r0
 8012878:	4618      	mov	r0, r3
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8012880:	b480      	push	{r7}
 8012882:	b083      	sub	sp, #12
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012888:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 801288c:	4618      	mov	r0, r3
 801288e:	370c      	adds	r7, #12
 8012890:	46bd      	mov	sp, r7
 8012892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012896:	4770      	bx	lr

08012898 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	4618      	mov	r0, r3
 80128a4:	370c      	adds	r7, #12
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr

080128ae <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b086      	sub	sp, #24
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	60f8      	str	r0, [r7, #12]
 80128b6:	60b9      	str	r1, [r7, #8]
 80128b8:	607a      	str	r2, [r7, #4]
 80128ba:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	10db      	asrs	r3, r3, #3
 80128c4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	dd06      	ble.n	80128da <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	00db      	lsls	r3, r3, #3
 80128d0:	461a      	mov	r2, r3
 80128d2:	68f9      	ldr	r1, [r7, #12]
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f003 f873 	bl	80159c0 <memmove>
      return __result + __count;
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	00db      	lsls	r3, r3, #3
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	4413      	add	r3, r2
    }
 80128e2:	4618      	mov	r0, r3
 80128e4:	3718      	adds	r7, #24
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}

080128ea <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80128ea:	b580      	push	{r7, lr}
 80128ec:	b084      	sub	sp, #16
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	60f8      	str	r0, [r7, #12]
 80128f2:	60b9      	str	r1, [r7, #8]
 80128f4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	68b9      	ldr	r1, [r7, #8]
 80128fa:	68f8      	ldr	r0, [r7, #12]
 80128fc:	f000 f81d 	bl	801293a <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8012900:	4603      	mov	r3, r0
 8012902:	4618      	mov	r0, r3
 8012904:	3710      	adds	r7, #16
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 801290a:	b590      	push	{r4, r7, lr}
 801290c:	b085      	sub	sp, #20
 801290e:	af00      	add	r7, sp, #0
 8012910:	60f8      	str	r0, [r7, #12]
 8012912:	60b9      	str	r1, [r7, #8]
 8012914:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	f000 f827 	bl	801296a <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801291c:	4604      	mov	r4, r0
 801291e:	68b8      	ldr	r0, [r7, #8]
 8012920:	f000 f823 	bl	801296a <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8012924:	4603      	mov	r3, r0
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	4619      	mov	r1, r3
 801292a:	4620      	mov	r0, r4
 801292c:	f000 f82e 	bl	801298c <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 8012930:	4603      	mov	r3, r0
    }
 8012932:	4618      	mov	r0, r3
 8012934:	3714      	adds	r7, #20
 8012936:	46bd      	mov	sp, r7
 8012938:	bd90      	pop	{r4, r7, pc}

0801293a <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 801293a:	b590      	push	{r4, r7, lr}
 801293c:	b085      	sub	sp, #20
 801293e:	af00      	add	r7, sp, #0
 8012940:	60f8      	str	r0, [r7, #12]
 8012942:	60b9      	str	r1, [r7, #8]
 8012944:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f000 f843 	bl	80129d2 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801294c:	4604      	mov	r4, r0
 801294e:	68b8      	ldr	r0, [r7, #8]
 8012950:	f000 f83f 	bl	80129d2 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8012954:	4603      	mov	r3, r0
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	4619      	mov	r1, r3
 801295a:	4620      	mov	r0, r4
 801295c:	f000 f84a 	bl	80129f4 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8012960:	4603      	mov	r3, r0
    }
 8012962:	4618      	mov	r0, r3
 8012964:	3714      	adds	r7, #20
 8012966:	46bd      	mov	sp, r7
 8012968:	bd90      	pop	{r4, r7, pc}

0801296a <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 801296a:	b580      	push	{r7, lr}
 801296c:	b082      	sub	sp, #8
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8012972:	1d3b      	adds	r3, r7, #4
 8012974:	4618      	mov	r0, r3
 8012976:	f000 f860 	bl	8012a3a <_ZNKSt13move_iteratorIPPvE4baseEv>
 801297a:	4603      	mov	r3, r0
 801297c:	4618      	mov	r0, r3
 801297e:	f000 f868 	bl	8012a52 <_ZSt12__miter_baseIPPvET_S2_>
 8012982:	4603      	mov	r3, r0
 8012984:	4618      	mov	r0, r3
 8012986:	3708      	adds	r7, #8
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801298c:	b5b0      	push	{r4, r5, r7, lr}
 801298e:	b084      	sub	sp, #16
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	60b9      	str	r1, [r7, #8]
 8012996:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8012998:	68f8      	ldr	r0, [r7, #12]
 801299a:	f7ff ff2c 	bl	80127f6 <_ZSt12__niter_baseIPPvET_S2_>
 801299e:	4604      	mov	r4, r0
 80129a0:	68b8      	ldr	r0, [r7, #8]
 80129a2:	f7ff ff28 	bl	80127f6 <_ZSt12__niter_baseIPPvET_S2_>
 80129a6:	4605      	mov	r5, r0
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff ff23 	bl	80127f6 <_ZSt12__niter_baseIPPvET_S2_>
 80129b0:	4603      	mov	r3, r0
 80129b2:	461a      	mov	r2, r3
 80129b4:	4629      	mov	r1, r5
 80129b6:	4620      	mov	r0, r4
 80129b8:	f000 f856 	bl	8012a68 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 80129bc:	4602      	mov	r2, r0
 80129be:	1d3b      	adds	r3, r7, #4
 80129c0:	4611      	mov	r1, r2
 80129c2:	4618      	mov	r0, r3
 80129c4:	f000 f862 	bl	8012a8c <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 80129c8:	4603      	mov	r3, r0
    }
 80129ca:	4618      	mov	r0, r3
 80129cc:	3710      	adds	r7, #16
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bdb0      	pop	{r4, r5, r7, pc}

080129d2 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b082      	sub	sp, #8
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 80129da:	1d3b      	adds	r3, r7, #4
 80129dc:	4618      	mov	r0, r3
 80129de:	f000 f861 	bl	8012aa4 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 80129e2:	4603      	mov	r3, r0
 80129e4:	4618      	mov	r0, r3
 80129e6:	f000 f869 	bl	8012abc <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 80129ea:	4603      	mov	r3, r0
 80129ec:	4618      	mov	r0, r3
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80129f4:	b5b0      	push	{r4, r5, r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8012a00:	68f8      	ldr	r0, [r7, #12]
 8012a02:	f7ff ff49 	bl	8012898 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012a06:	4604      	mov	r4, r0
 8012a08:	68b8      	ldr	r0, [r7, #8]
 8012a0a:	f7ff ff45 	bl	8012898 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012a0e:	4605      	mov	r5, r0
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7ff ff40 	bl	8012898 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	4620      	mov	r0, r4
 8012a20:	f000 f857 	bl	8012ad2 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8012a24:	4602      	mov	r2, r0
 8012a26:	1d3b      	adds	r3, r7, #4
 8012a28:	4611      	mov	r1, r2
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f000 f863 	bl	8012af6 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8012a30:	4603      	mov	r3, r0
    }
 8012a32:	4618      	mov	r0, r3
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bdb0      	pop	{r4, r5, r7, pc}

08012a3a <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	4618      	mov	r0, r3
 8012a48:	370c      	adds	r7, #12
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a50:	4770      	bx	lr

08012a52 <_ZSt12__miter_baseIPPvET_S2_>:
    __miter_base(_Iterator __it)
 8012a52:	b480      	push	{r7}
 8012a54:	b083      	sub	sp, #12
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	370c      	adds	r7, #12
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b086      	sub	sp, #24
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8012a74:	2301      	movs	r3, #1
 8012a76:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	68b9      	ldr	r1, [r7, #8]
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	f000 f846 	bl	8012b0e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8012a82:	4603      	mov	r3, r0
    }
 8012a84:	4618      	mov	r0, r3
 8012a86:	3718      	adds	r7, #24
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
    { return __res; }
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	370c      	adds	r7, #12
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr

08012aa4 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr

08012abc <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	370c      	adds	r7, #12
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr

08012ad2 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8012ad2:	b580      	push	{r7, lr}
 8012ad4:	b086      	sub	sp, #24
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	60f8      	str	r0, [r7, #12]
 8012ada:	60b9      	str	r1, [r7, #8]
 8012adc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8012ade:	2301      	movs	r3, #1
 8012ae0:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	68b9      	ldr	r1, [r7, #8]
 8012ae6:	68f8      	ldr	r0, [r7, #12]
 8012ae8:	f000 f82e 	bl	8012b48 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8012aec:	4603      	mov	r3, r0
    }
 8012aee:	4618      	mov	r0, r3
 8012af0:	3718      	adds	r7, #24
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8012af6:	b480      	push	{r7}
 8012af8:	b083      	sub	sp, #12
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	6039      	str	r1, [r7, #0]
    { return __res; }
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	4618      	mov	r0, r3
 8012b04:	370c      	adds	r7, #12
 8012b06:	46bd      	mov	sp, r7
 8012b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0c:	4770      	bx	lr

08012b0e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012b0e:	b580      	push	{r7, lr}
 8012b10:	b086      	sub	sp, #24
 8012b12:	af00      	add	r7, sp, #0
 8012b14:	60f8      	str	r0, [r7, #12]
 8012b16:	60b9      	str	r1, [r7, #8]
 8012b18:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	1ad3      	subs	r3, r2, r3
 8012b20:	109b      	asrs	r3, r3, #2
 8012b22:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d006      	beq.n	8012b38 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	461a      	mov	r2, r3
 8012b30:	68f9      	ldr	r1, [r7, #12]
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f002 ff44 	bl	80159c0 <memmove>
	  return __result + _Num;
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	4413      	add	r3, r2
	}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3718      	adds	r7, #24
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b086      	sub	sp, #24
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8012b54:	68ba      	ldr	r2, [r7, #8]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	1ad3      	subs	r3, r2, r3
 8012b5a:	10db      	asrs	r3, r3, #3
 8012b5c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d006      	beq.n	8012b72 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	00db      	lsls	r3, r3, #3
 8012b68:	461a      	mov	r2, r3
 8012b6a:	68f9      	ldr	r1, [r7, #12]
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f002 ff27 	bl	80159c0 <memmove>
	  return __result + _Num;
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	4413      	add	r3, r2
	}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3718      	adds	r7, #24
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
	...

08012b84 <_Z41__static_initialization_and_destruction_0ii>:
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d123      	bne.n	8012bdc <_Z41__static_initialization_and_destruction_0ii+0x58>
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b9a:	4293      	cmp	r3, r2
 8012b9c:	d11e      	bne.n	8012bdc <_Z41__static_initialization_and_destruction_0ii+0x58>
};const NodeInfo_t nodeData[] = {
 8012b9e:	4b18      	ldr	r3, [pc, #96]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	4a18      	ldr	r2, [pc, #96]	; (8012c04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012ba4:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
 8012ba6:	4b16      	ldr	r3, [pc, #88]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	3390      	adds	r3, #144	; 0x90
};const NodeInfo_t nodeData[] = {
 8012bac:	4a15      	ldr	r2, [pc, #84]	; (8012c04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012bae:	6753      	str	r3, [r2, #116]	; 0x74
 8012bb0:	4b13      	ldr	r3, [pc, #76]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a13      	ldr	r2, [pc, #76]	; (8012c04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012bb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 28, },
 8012bba:	4b11      	ldr	r3, [pc, #68]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 8012bc0:	4a10      	ldr	r2, [pc, #64]	; (8012c04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8012bc6:	4b0e      	ldr	r3, [pc, #56]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	4a0e      	ldr	r2, [pc, #56]	; (8012c04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012bcc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
static std::vector<void*> overflow_buffers;
 8012bd0:	480d      	ldr	r0, [pc, #52]	; (8012c08 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012bd2:	f7fe fb14 	bl	80111fe <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8012bd6:	480d      	ldr	r0, [pc, #52]	; (8012c0c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012bd8:	f7fe fb77 	bl	80112ca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d10a      	bne.n	8012bf8 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012be8:	4293      	cmp	r3, r2
 8012bea:	d105      	bne.n	8012bf8 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8012bec:	4807      	ldr	r0, [pc, #28]	; (8012c0c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012bee:	f000 f80f 	bl	8012c10 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8012bf2:	4805      	ldr	r0, [pc, #20]	; (8012c08 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012bf4:	f000 f827 	bl	8012c46 <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8012bf8:	bf00      	nop
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	20000510 	.word	0x20000510
 8012c04:	200000bc 	.word	0x200000bc
 8012c08:	200008fc 	.word	0x200008fc
 8012c0c:	20000908 	.word	0x20000908

08012c10 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012c10:	b5b0      	push	{r4, r5, r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681c      	ldr	r4, [r3, #0]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7ff fbad 	bl	8012382 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8012c28:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f7ff fbcb 	bl	80123ca <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fe fe54 	bl	80118e4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3708      	adds	r7, #8
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bdb0      	pop	{r4, r5, r7, pc}

08012c46 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012c46:	b5b0      	push	{r4, r5, r7, lr}
 8012c48:	b082      	sub	sp, #8
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681c      	ldr	r4, [r3, #0]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7ff fa73 	bl	8012144 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8012c5e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012c60:	461a      	mov	r2, r3
 8012c62:	4629      	mov	r1, r5
 8012c64:	4620      	mov	r0, r4
 8012c66:	f7ff fa91 	bl	801218c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7fe fddf 	bl	8011830 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bdb0      	pop	{r4, r5, r7, pc}

08012c7c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012c84:	2001      	movs	r0, #1
 8012c86:	f7ff ff7d 	bl	8012b84 <_Z41__static_initialization_and_destruction_0ii>
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012c94:	2000      	movs	r0, #0
 8012c96:	f7ff ff75 	bl	8012b84 <_Z41__static_initialization_and_destruction_0ii>
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <_ZdlPv>:
 8012c9c:	f002 be7a 	b.w	8015994 <free>

08012ca0 <_ZdaPv>:
 8012ca0:	f7ff bffc 	b.w	8012c9c <_ZdlPv>

08012ca4 <_Znwj>:
 8012ca4:	2801      	cmp	r0, #1
 8012ca6:	bf38      	it	cc
 8012ca8:	2001      	movcc	r0, #1
 8012caa:	b510      	push	{r4, lr}
 8012cac:	4604      	mov	r4, r0
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f002 fe68 	bl	8015984 <malloc>
 8012cb4:	b930      	cbnz	r0, 8012cc4 <_Znwj+0x20>
 8012cb6:	f000 f80f 	bl	8012cd8 <_ZSt15get_new_handlerv>
 8012cba:	b908      	cbnz	r0, 8012cc0 <_Znwj+0x1c>
 8012cbc:	f002 fd6e 	bl	801579c <abort>
 8012cc0:	4780      	blx	r0
 8012cc2:	e7f4      	b.n	8012cae <_Znwj+0xa>
 8012cc4:	bd10      	pop	{r4, pc}

08012cc6 <_Znaj>:
 8012cc6:	f7ff bfed 	b.w	8012ca4 <_Znwj>

08012cca <_ZSt17__throw_bad_allocv>:
 8012cca:	b508      	push	{r3, lr}
 8012ccc:	f002 fd66 	bl	801579c <abort>

08012cd0 <_ZSt20__throw_length_errorPKc>:
 8012cd0:	b508      	push	{r3, lr}
 8012cd2:	f002 fd63 	bl	801579c <abort>
	...

08012cd8 <_ZSt15get_new_handlerv>:
 8012cd8:	4b02      	ldr	r3, [pc, #8]	; (8012ce4 <_ZSt15get_new_handlerv+0xc>)
 8012cda:	6818      	ldr	r0, [r3, #0]
 8012cdc:	f3bf 8f5b 	dmb	ish
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop
 8012ce4:	20000914 	.word	0x20000914

08012ce8 <cos>:
 8012ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cea:	ec53 2b10 	vmov	r2, r3, d0
 8012cee:	4824      	ldr	r0, [pc, #144]	; (8012d80 <cos+0x98>)
 8012cf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012cf4:	4281      	cmp	r1, r0
 8012cf6:	dc06      	bgt.n	8012d06 <cos+0x1e>
 8012cf8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8012d78 <cos+0x90>
 8012cfc:	f001 fd70 	bl	80147e0 <__kernel_cos>
 8012d00:	ec51 0b10 	vmov	r0, r1, d0
 8012d04:	e007      	b.n	8012d16 <cos+0x2e>
 8012d06:	481f      	ldr	r0, [pc, #124]	; (8012d84 <cos+0x9c>)
 8012d08:	4281      	cmp	r1, r0
 8012d0a:	dd09      	ble.n	8012d20 <cos+0x38>
 8012d0c:	ee10 0a10 	vmov	r0, s0
 8012d10:	4619      	mov	r1, r3
 8012d12:	f7ed fae9 	bl	80002e8 <__aeabi_dsub>
 8012d16:	ec41 0b10 	vmov	d0, r0, r1
 8012d1a:	b005      	add	sp, #20
 8012d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d20:	4668      	mov	r0, sp
 8012d22:	f001 f87d 	bl	8013e20 <__ieee754_rem_pio2>
 8012d26:	f000 0003 	and.w	r0, r0, #3
 8012d2a:	2801      	cmp	r0, #1
 8012d2c:	d007      	beq.n	8012d3e <cos+0x56>
 8012d2e:	2802      	cmp	r0, #2
 8012d30:	d012      	beq.n	8012d58 <cos+0x70>
 8012d32:	b9c0      	cbnz	r0, 8012d66 <cos+0x7e>
 8012d34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d38:	ed9d 0b00 	vldr	d0, [sp]
 8012d3c:	e7de      	b.n	8012cfc <cos+0x14>
 8012d3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d42:	ed9d 0b00 	vldr	d0, [sp]
 8012d46:	f002 f953 	bl	8014ff0 <__kernel_sin>
 8012d4a:	ec53 2b10 	vmov	r2, r3, d0
 8012d4e:	ee10 0a10 	vmov	r0, s0
 8012d52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012d56:	e7de      	b.n	8012d16 <cos+0x2e>
 8012d58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d5c:	ed9d 0b00 	vldr	d0, [sp]
 8012d60:	f001 fd3e 	bl	80147e0 <__kernel_cos>
 8012d64:	e7f1      	b.n	8012d4a <cos+0x62>
 8012d66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d6a:	ed9d 0b00 	vldr	d0, [sp]
 8012d6e:	2001      	movs	r0, #1
 8012d70:	f002 f93e 	bl	8014ff0 <__kernel_sin>
 8012d74:	e7c4      	b.n	8012d00 <cos+0x18>
 8012d76:	bf00      	nop
	...
 8012d80:	3fe921fb 	.word	0x3fe921fb
 8012d84:	7fefffff 	.word	0x7fefffff

08012d88 <floor>:
 8012d88:	ec51 0b10 	vmov	r0, r1, d0
 8012d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012d94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012d98:	2e13      	cmp	r6, #19
 8012d9a:	ee10 5a10 	vmov	r5, s0
 8012d9e:	ee10 8a10 	vmov	r8, s0
 8012da2:	460c      	mov	r4, r1
 8012da4:	dc32      	bgt.n	8012e0c <floor+0x84>
 8012da6:	2e00      	cmp	r6, #0
 8012da8:	da14      	bge.n	8012dd4 <floor+0x4c>
 8012daa:	a333      	add	r3, pc, #204	; (adr r3, 8012e78 <floor+0xf0>)
 8012dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db0:	f7ed fa9c 	bl	80002ec <__adddf3>
 8012db4:	2200      	movs	r2, #0
 8012db6:	2300      	movs	r3, #0
 8012db8:	f7ed fede 	bl	8000b78 <__aeabi_dcmpgt>
 8012dbc:	b138      	cbz	r0, 8012dce <floor+0x46>
 8012dbe:	2c00      	cmp	r4, #0
 8012dc0:	da57      	bge.n	8012e72 <floor+0xea>
 8012dc2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012dc6:	431d      	orrs	r5, r3
 8012dc8:	d001      	beq.n	8012dce <floor+0x46>
 8012dca:	4c2d      	ldr	r4, [pc, #180]	; (8012e80 <floor+0xf8>)
 8012dcc:	2500      	movs	r5, #0
 8012dce:	4621      	mov	r1, r4
 8012dd0:	4628      	mov	r0, r5
 8012dd2:	e025      	b.n	8012e20 <floor+0x98>
 8012dd4:	4f2b      	ldr	r7, [pc, #172]	; (8012e84 <floor+0xfc>)
 8012dd6:	4137      	asrs	r7, r6
 8012dd8:	ea01 0307 	and.w	r3, r1, r7
 8012ddc:	4303      	orrs	r3, r0
 8012dde:	d01f      	beq.n	8012e20 <floor+0x98>
 8012de0:	a325      	add	r3, pc, #148	; (adr r3, 8012e78 <floor+0xf0>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	f7ed fa81 	bl	80002ec <__adddf3>
 8012dea:	2200      	movs	r2, #0
 8012dec:	2300      	movs	r3, #0
 8012dee:	f7ed fec3 	bl	8000b78 <__aeabi_dcmpgt>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	d0eb      	beq.n	8012dce <floor+0x46>
 8012df6:	2c00      	cmp	r4, #0
 8012df8:	bfbe      	ittt	lt
 8012dfa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012dfe:	fa43 f606 	asrlt.w	r6, r3, r6
 8012e02:	19a4      	addlt	r4, r4, r6
 8012e04:	ea24 0407 	bic.w	r4, r4, r7
 8012e08:	2500      	movs	r5, #0
 8012e0a:	e7e0      	b.n	8012dce <floor+0x46>
 8012e0c:	2e33      	cmp	r6, #51	; 0x33
 8012e0e:	dd0b      	ble.n	8012e28 <floor+0xa0>
 8012e10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012e14:	d104      	bne.n	8012e20 <floor+0x98>
 8012e16:	ee10 2a10 	vmov	r2, s0
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	f7ed fa66 	bl	80002ec <__adddf3>
 8012e20:	ec41 0b10 	vmov	d0, r0, r1
 8012e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e30:	fa23 f707 	lsr.w	r7, r3, r7
 8012e34:	4207      	tst	r7, r0
 8012e36:	d0f3      	beq.n	8012e20 <floor+0x98>
 8012e38:	a30f      	add	r3, pc, #60	; (adr r3, 8012e78 <floor+0xf0>)
 8012e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3e:	f7ed fa55 	bl	80002ec <__adddf3>
 8012e42:	2200      	movs	r2, #0
 8012e44:	2300      	movs	r3, #0
 8012e46:	f7ed fe97 	bl	8000b78 <__aeabi_dcmpgt>
 8012e4a:	2800      	cmp	r0, #0
 8012e4c:	d0bf      	beq.n	8012dce <floor+0x46>
 8012e4e:	2c00      	cmp	r4, #0
 8012e50:	da02      	bge.n	8012e58 <floor+0xd0>
 8012e52:	2e14      	cmp	r6, #20
 8012e54:	d103      	bne.n	8012e5e <floor+0xd6>
 8012e56:	3401      	adds	r4, #1
 8012e58:	ea25 0507 	bic.w	r5, r5, r7
 8012e5c:	e7b7      	b.n	8012dce <floor+0x46>
 8012e5e:	2301      	movs	r3, #1
 8012e60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012e64:	fa03 f606 	lsl.w	r6, r3, r6
 8012e68:	4435      	add	r5, r6
 8012e6a:	4545      	cmp	r5, r8
 8012e6c:	bf38      	it	cc
 8012e6e:	18e4      	addcc	r4, r4, r3
 8012e70:	e7f2      	b.n	8012e58 <floor+0xd0>
 8012e72:	2500      	movs	r5, #0
 8012e74:	462c      	mov	r4, r5
 8012e76:	e7aa      	b.n	8012dce <floor+0x46>
 8012e78:	8800759c 	.word	0x8800759c
 8012e7c:	7e37e43c 	.word	0x7e37e43c
 8012e80:	bff00000 	.word	0xbff00000
 8012e84:	000fffff 	.word	0x000fffff

08012e88 <frexp>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	ec55 4b10 	vmov	r4, r5, d0
 8012e90:	6001      	str	r1, [r0, #0]
 8012e92:	4916      	ldr	r1, [pc, #88]	; (8012eec <frexp+0x64>)
 8012e94:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8012e98:	428a      	cmp	r2, r1
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	462b      	mov	r3, r5
 8012e9e:	dc22      	bgt.n	8012ee6 <frexp+0x5e>
 8012ea0:	ee10 1a10 	vmov	r1, s0
 8012ea4:	4311      	orrs	r1, r2
 8012ea6:	d01e      	beq.n	8012ee6 <frexp+0x5e>
 8012ea8:	4911      	ldr	r1, [pc, #68]	; (8012ef0 <frexp+0x68>)
 8012eaa:	4029      	ands	r1, r5
 8012eac:	b969      	cbnz	r1, 8012eca <frexp+0x42>
 8012eae:	4b11      	ldr	r3, [pc, #68]	; (8012ef4 <frexp+0x6c>)
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	ee10 0a10 	vmov	r0, s0
 8012eb6:	4629      	mov	r1, r5
 8012eb8:	f7ed fbce 	bl	8000658 <__aeabi_dmul>
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012ec2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	6031      	str	r1, [r6, #0]
 8012eca:	6831      	ldr	r1, [r6, #0]
 8012ecc:	1512      	asrs	r2, r2, #20
 8012ece:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ed2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8012ed6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012eda:	440a      	add	r2, r1
 8012edc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8012ee0:	6032      	str	r2, [r6, #0]
 8012ee2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8012ee6:	ec45 4b10 	vmov	d0, r4, r5
 8012eea:	bd70      	pop	{r4, r5, r6, pc}
 8012eec:	7fefffff 	.word	0x7fefffff
 8012ef0:	7ff00000 	.word	0x7ff00000
 8012ef4:	43500000 	.word	0x43500000

08012ef8 <round>:
 8012ef8:	ec51 0b10 	vmov	r0, r1, d0
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8012f02:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8012f06:	2c13      	cmp	r4, #19
 8012f08:	ee10 2a10 	vmov	r2, s0
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	dc19      	bgt.n	8012f44 <round+0x4c>
 8012f10:	2c00      	cmp	r4, #0
 8012f12:	da09      	bge.n	8012f28 <round+0x30>
 8012f14:	3401      	adds	r4, #1
 8012f16:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012f1a:	d103      	bne.n	8012f24 <round+0x2c>
 8012f1c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012f20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012f24:	2100      	movs	r1, #0
 8012f26:	e028      	b.n	8012f7a <round+0x82>
 8012f28:	4d15      	ldr	r5, [pc, #84]	; (8012f80 <round+0x88>)
 8012f2a:	4125      	asrs	r5, r4
 8012f2c:	ea01 0605 	and.w	r6, r1, r5
 8012f30:	4332      	orrs	r2, r6
 8012f32:	d00e      	beq.n	8012f52 <round+0x5a>
 8012f34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012f38:	fa42 f404 	asr.w	r4, r2, r4
 8012f3c:	4423      	add	r3, r4
 8012f3e:	ea23 0305 	bic.w	r3, r3, r5
 8012f42:	e7ef      	b.n	8012f24 <round+0x2c>
 8012f44:	2c33      	cmp	r4, #51	; 0x33
 8012f46:	dd07      	ble.n	8012f58 <round+0x60>
 8012f48:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012f4c:	d101      	bne.n	8012f52 <round+0x5a>
 8012f4e:	f7ed f9cd 	bl	80002ec <__adddf3>
 8012f52:	ec41 0b10 	vmov	d0, r0, r1
 8012f56:	bd70      	pop	{r4, r5, r6, pc}
 8012f58:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8012f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8012f60:	40f5      	lsrs	r5, r6
 8012f62:	4228      	tst	r0, r5
 8012f64:	d0f5      	beq.n	8012f52 <round+0x5a>
 8012f66:	2101      	movs	r1, #1
 8012f68:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8012f6c:	fa01 f404 	lsl.w	r4, r1, r4
 8012f70:	1912      	adds	r2, r2, r4
 8012f72:	bf28      	it	cs
 8012f74:	185b      	addcs	r3, r3, r1
 8012f76:	ea22 0105 	bic.w	r1, r2, r5
 8012f7a:	4608      	mov	r0, r1
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	e7e8      	b.n	8012f52 <round+0x5a>
 8012f80:	000fffff 	.word	0x000fffff
 8012f84:	00000000 	.word	0x00000000

08012f88 <sin>:
 8012f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f8a:	ec53 2b10 	vmov	r2, r3, d0
 8012f8e:	4826      	ldr	r0, [pc, #152]	; (8013028 <sin+0xa0>)
 8012f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012f94:	4281      	cmp	r1, r0
 8012f96:	dc07      	bgt.n	8012fa8 <sin+0x20>
 8012f98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8013020 <sin+0x98>
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	f002 f827 	bl	8014ff0 <__kernel_sin>
 8012fa2:	ec51 0b10 	vmov	r0, r1, d0
 8012fa6:	e007      	b.n	8012fb8 <sin+0x30>
 8012fa8:	4820      	ldr	r0, [pc, #128]	; (801302c <sin+0xa4>)
 8012faa:	4281      	cmp	r1, r0
 8012fac:	dd09      	ble.n	8012fc2 <sin+0x3a>
 8012fae:	ee10 0a10 	vmov	r0, s0
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	f7ed f998 	bl	80002e8 <__aeabi_dsub>
 8012fb8:	ec41 0b10 	vmov	d0, r0, r1
 8012fbc:	b005      	add	sp, #20
 8012fbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fc2:	4668      	mov	r0, sp
 8012fc4:	f000 ff2c 	bl	8013e20 <__ieee754_rem_pio2>
 8012fc8:	f000 0003 	and.w	r0, r0, #3
 8012fcc:	2801      	cmp	r0, #1
 8012fce:	d008      	beq.n	8012fe2 <sin+0x5a>
 8012fd0:	2802      	cmp	r0, #2
 8012fd2:	d00d      	beq.n	8012ff0 <sin+0x68>
 8012fd4:	b9d0      	cbnz	r0, 801300c <sin+0x84>
 8012fd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fda:	ed9d 0b00 	vldr	d0, [sp]
 8012fde:	2001      	movs	r0, #1
 8012fe0:	e7dd      	b.n	8012f9e <sin+0x16>
 8012fe2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fe6:	ed9d 0b00 	vldr	d0, [sp]
 8012fea:	f001 fbf9 	bl	80147e0 <__kernel_cos>
 8012fee:	e7d8      	b.n	8012fa2 <sin+0x1a>
 8012ff0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ff4:	ed9d 0b00 	vldr	d0, [sp]
 8012ff8:	2001      	movs	r0, #1
 8012ffa:	f001 fff9 	bl	8014ff0 <__kernel_sin>
 8012ffe:	ec53 2b10 	vmov	r2, r3, d0
 8013002:	ee10 0a10 	vmov	r0, s0
 8013006:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801300a:	e7d5      	b.n	8012fb8 <sin+0x30>
 801300c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013010:	ed9d 0b00 	vldr	d0, [sp]
 8013014:	f001 fbe4 	bl	80147e0 <__kernel_cos>
 8013018:	e7f1      	b.n	8012ffe <sin+0x76>
 801301a:	bf00      	nop
 801301c:	f3af 8000 	nop.w
	...
 8013028:	3fe921fb 	.word	0x3fe921fb
 801302c:	7fefffff 	.word	0x7fefffff

08013030 <tan>:
 8013030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013032:	ec53 2b10 	vmov	r2, r3, d0
 8013036:	4814      	ldr	r0, [pc, #80]	; (8013088 <tan+0x58>)
 8013038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801303c:	4281      	cmp	r1, r0
 801303e:	dc05      	bgt.n	801304c <tan+0x1c>
 8013040:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8013080 <tan+0x50>
 8013044:	2001      	movs	r0, #1
 8013046:	f002 f893 	bl	8015170 <__kernel_tan>
 801304a:	e009      	b.n	8013060 <tan+0x30>
 801304c:	480f      	ldr	r0, [pc, #60]	; (801308c <tan+0x5c>)
 801304e:	4281      	cmp	r1, r0
 8013050:	dd09      	ble.n	8013066 <tan+0x36>
 8013052:	ee10 0a10 	vmov	r0, s0
 8013056:	4619      	mov	r1, r3
 8013058:	f7ed f946 	bl	80002e8 <__aeabi_dsub>
 801305c:	ec41 0b10 	vmov	d0, r0, r1
 8013060:	b005      	add	sp, #20
 8013062:	f85d fb04 	ldr.w	pc, [sp], #4
 8013066:	4668      	mov	r0, sp
 8013068:	f000 feda 	bl	8013e20 <__ieee754_rem_pio2>
 801306c:	0040      	lsls	r0, r0, #1
 801306e:	f000 0002 	and.w	r0, r0, #2
 8013072:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013076:	ed9d 0b00 	vldr	d0, [sp]
 801307a:	f1c0 0001 	rsb	r0, r0, #1
 801307e:	e7e2      	b.n	8013046 <tan+0x16>
	...
 8013088:	3fe921fb 	.word	0x3fe921fb
 801308c:	7fefffff 	.word	0x7fefffff

08013090 <roundf>:
 8013090:	ee10 0a10 	vmov	r0, s0
 8013094:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013098:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801309c:	2a16      	cmp	r2, #22
 801309e:	dc15      	bgt.n	80130cc <roundf+0x3c>
 80130a0:	2a00      	cmp	r2, #0
 80130a2:	da08      	bge.n	80130b6 <roundf+0x26>
 80130a4:	3201      	adds	r2, #1
 80130a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80130aa:	d101      	bne.n	80130b0 <roundf+0x20>
 80130ac:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80130b0:	ee00 3a10 	vmov	s0, r3
 80130b4:	4770      	bx	lr
 80130b6:	4908      	ldr	r1, [pc, #32]	; (80130d8 <roundf+0x48>)
 80130b8:	4111      	asrs	r1, r2
 80130ba:	4208      	tst	r0, r1
 80130bc:	d0fa      	beq.n	80130b4 <roundf+0x24>
 80130be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80130c2:	4113      	asrs	r3, r2
 80130c4:	4403      	add	r3, r0
 80130c6:	ea23 0301 	bic.w	r3, r3, r1
 80130ca:	e7f1      	b.n	80130b0 <roundf+0x20>
 80130cc:	2a80      	cmp	r2, #128	; 0x80
 80130ce:	d1f1      	bne.n	80130b4 <roundf+0x24>
 80130d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop
 80130d8:	007fffff 	.word	0x007fffff

080130dc <pow>:
 80130dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e0:	ec59 8b10 	vmov	r8, r9, d0
 80130e4:	ec57 6b11 	vmov	r6, r7, d1
 80130e8:	f000 f976 	bl	80133d8 <__ieee754_pow>
 80130ec:	4b4e      	ldr	r3, [pc, #312]	; (8013228 <pow+0x14c>)
 80130ee:	f993 3000 	ldrsb.w	r3, [r3]
 80130f2:	3301      	adds	r3, #1
 80130f4:	ec55 4b10 	vmov	r4, r5, d0
 80130f8:	d015      	beq.n	8013126 <pow+0x4a>
 80130fa:	4632      	mov	r2, r6
 80130fc:	463b      	mov	r3, r7
 80130fe:	4630      	mov	r0, r6
 8013100:	4639      	mov	r1, r7
 8013102:	f7ed fd43 	bl	8000b8c <__aeabi_dcmpun>
 8013106:	b970      	cbnz	r0, 8013126 <pow+0x4a>
 8013108:	4642      	mov	r2, r8
 801310a:	464b      	mov	r3, r9
 801310c:	4640      	mov	r0, r8
 801310e:	4649      	mov	r1, r9
 8013110:	f7ed fd3c 	bl	8000b8c <__aeabi_dcmpun>
 8013114:	2200      	movs	r2, #0
 8013116:	2300      	movs	r3, #0
 8013118:	b148      	cbz	r0, 801312e <pow+0x52>
 801311a:	4630      	mov	r0, r6
 801311c:	4639      	mov	r1, r7
 801311e:	f7ed fd03 	bl	8000b28 <__aeabi_dcmpeq>
 8013122:	2800      	cmp	r0, #0
 8013124:	d17d      	bne.n	8013222 <pow+0x146>
 8013126:	ec45 4b10 	vmov	d0, r4, r5
 801312a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801312e:	4640      	mov	r0, r8
 8013130:	4649      	mov	r1, r9
 8013132:	f7ed fcf9 	bl	8000b28 <__aeabi_dcmpeq>
 8013136:	b1e0      	cbz	r0, 8013172 <pow+0x96>
 8013138:	2200      	movs	r2, #0
 801313a:	2300      	movs	r3, #0
 801313c:	4630      	mov	r0, r6
 801313e:	4639      	mov	r1, r7
 8013140:	f7ed fcf2 	bl	8000b28 <__aeabi_dcmpeq>
 8013144:	2800      	cmp	r0, #0
 8013146:	d16c      	bne.n	8013222 <pow+0x146>
 8013148:	ec47 6b10 	vmov	d0, r6, r7
 801314c:	f002 f9ed 	bl	801552a <finite>
 8013150:	2800      	cmp	r0, #0
 8013152:	d0e8      	beq.n	8013126 <pow+0x4a>
 8013154:	2200      	movs	r2, #0
 8013156:	2300      	movs	r3, #0
 8013158:	4630      	mov	r0, r6
 801315a:	4639      	mov	r1, r7
 801315c:	f7ed fcee 	bl	8000b3c <__aeabi_dcmplt>
 8013160:	2800      	cmp	r0, #0
 8013162:	d0e0      	beq.n	8013126 <pow+0x4a>
 8013164:	f002 fb4c 	bl	8015800 <__errno>
 8013168:	2321      	movs	r3, #33	; 0x21
 801316a:	6003      	str	r3, [r0, #0]
 801316c:	2400      	movs	r4, #0
 801316e:	4d2f      	ldr	r5, [pc, #188]	; (801322c <pow+0x150>)
 8013170:	e7d9      	b.n	8013126 <pow+0x4a>
 8013172:	ec45 4b10 	vmov	d0, r4, r5
 8013176:	f002 f9d8 	bl	801552a <finite>
 801317a:	bbb8      	cbnz	r0, 80131ec <pow+0x110>
 801317c:	ec49 8b10 	vmov	d0, r8, r9
 8013180:	f002 f9d3 	bl	801552a <finite>
 8013184:	b390      	cbz	r0, 80131ec <pow+0x110>
 8013186:	ec47 6b10 	vmov	d0, r6, r7
 801318a:	f002 f9ce 	bl	801552a <finite>
 801318e:	b368      	cbz	r0, 80131ec <pow+0x110>
 8013190:	4622      	mov	r2, r4
 8013192:	462b      	mov	r3, r5
 8013194:	4620      	mov	r0, r4
 8013196:	4629      	mov	r1, r5
 8013198:	f7ed fcf8 	bl	8000b8c <__aeabi_dcmpun>
 801319c:	b160      	cbz	r0, 80131b8 <pow+0xdc>
 801319e:	f002 fb2f 	bl	8015800 <__errno>
 80131a2:	2321      	movs	r3, #33	; 0x21
 80131a4:	6003      	str	r3, [r0, #0]
 80131a6:	2200      	movs	r2, #0
 80131a8:	2300      	movs	r3, #0
 80131aa:	4610      	mov	r0, r2
 80131ac:	4619      	mov	r1, r3
 80131ae:	f7ed fb7d 	bl	80008ac <__aeabi_ddiv>
 80131b2:	4604      	mov	r4, r0
 80131b4:	460d      	mov	r5, r1
 80131b6:	e7b6      	b.n	8013126 <pow+0x4a>
 80131b8:	f002 fb22 	bl	8015800 <__errno>
 80131bc:	2322      	movs	r3, #34	; 0x22
 80131be:	6003      	str	r3, [r0, #0]
 80131c0:	2200      	movs	r2, #0
 80131c2:	2300      	movs	r3, #0
 80131c4:	4640      	mov	r0, r8
 80131c6:	4649      	mov	r1, r9
 80131c8:	f7ed fcb8 	bl	8000b3c <__aeabi_dcmplt>
 80131cc:	2400      	movs	r4, #0
 80131ce:	b158      	cbz	r0, 80131e8 <pow+0x10c>
 80131d0:	ec47 6b10 	vmov	d0, r6, r7
 80131d4:	f002 f9bc 	bl	8015550 <rint>
 80131d8:	4632      	mov	r2, r6
 80131da:	ec51 0b10 	vmov	r0, r1, d0
 80131de:	463b      	mov	r3, r7
 80131e0:	f7ed fca2 	bl	8000b28 <__aeabi_dcmpeq>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d0c2      	beq.n	801316e <pow+0x92>
 80131e8:	4d11      	ldr	r5, [pc, #68]	; (8013230 <pow+0x154>)
 80131ea:	e79c      	b.n	8013126 <pow+0x4a>
 80131ec:	2200      	movs	r2, #0
 80131ee:	2300      	movs	r3, #0
 80131f0:	4620      	mov	r0, r4
 80131f2:	4629      	mov	r1, r5
 80131f4:	f7ed fc98 	bl	8000b28 <__aeabi_dcmpeq>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d094      	beq.n	8013126 <pow+0x4a>
 80131fc:	ec49 8b10 	vmov	d0, r8, r9
 8013200:	f002 f993 	bl	801552a <finite>
 8013204:	2800      	cmp	r0, #0
 8013206:	d08e      	beq.n	8013126 <pow+0x4a>
 8013208:	ec47 6b10 	vmov	d0, r6, r7
 801320c:	f002 f98d 	bl	801552a <finite>
 8013210:	2800      	cmp	r0, #0
 8013212:	d088      	beq.n	8013126 <pow+0x4a>
 8013214:	f002 faf4 	bl	8015800 <__errno>
 8013218:	2322      	movs	r3, #34	; 0x22
 801321a:	6003      	str	r3, [r0, #0]
 801321c:	2400      	movs	r4, #0
 801321e:	2500      	movs	r5, #0
 8013220:	e781      	b.n	8013126 <pow+0x4a>
 8013222:	4d04      	ldr	r5, [pc, #16]	; (8013234 <pow+0x158>)
 8013224:	2400      	movs	r4, #0
 8013226:	e77e      	b.n	8013126 <pow+0x4a>
 8013228:	2000016c 	.word	0x2000016c
 801322c:	fff00000 	.word	0xfff00000
 8013230:	7ff00000 	.word	0x7ff00000
 8013234:	3ff00000 	.word	0x3ff00000

08013238 <sqrt>:
 8013238:	b538      	push	{r3, r4, r5, lr}
 801323a:	ed2d 8b02 	vpush	{d8}
 801323e:	ec55 4b10 	vmov	r4, r5, d0
 8013242:	f000 fff7 	bl	8014234 <__ieee754_sqrt>
 8013246:	4b15      	ldr	r3, [pc, #84]	; (801329c <sqrt+0x64>)
 8013248:	eeb0 8a40 	vmov.f32	s16, s0
 801324c:	eef0 8a60 	vmov.f32	s17, s1
 8013250:	f993 3000 	ldrsb.w	r3, [r3]
 8013254:	3301      	adds	r3, #1
 8013256:	d019      	beq.n	801328c <sqrt+0x54>
 8013258:	4622      	mov	r2, r4
 801325a:	462b      	mov	r3, r5
 801325c:	4620      	mov	r0, r4
 801325e:	4629      	mov	r1, r5
 8013260:	f7ed fc94 	bl	8000b8c <__aeabi_dcmpun>
 8013264:	b990      	cbnz	r0, 801328c <sqrt+0x54>
 8013266:	2200      	movs	r2, #0
 8013268:	2300      	movs	r3, #0
 801326a:	4620      	mov	r0, r4
 801326c:	4629      	mov	r1, r5
 801326e:	f7ed fc65 	bl	8000b3c <__aeabi_dcmplt>
 8013272:	b158      	cbz	r0, 801328c <sqrt+0x54>
 8013274:	f002 fac4 	bl	8015800 <__errno>
 8013278:	2321      	movs	r3, #33	; 0x21
 801327a:	6003      	str	r3, [r0, #0]
 801327c:	2200      	movs	r2, #0
 801327e:	2300      	movs	r3, #0
 8013280:	4610      	mov	r0, r2
 8013282:	4619      	mov	r1, r3
 8013284:	f7ed fb12 	bl	80008ac <__aeabi_ddiv>
 8013288:	ec41 0b18 	vmov	d8, r0, r1
 801328c:	eeb0 0a48 	vmov.f32	s0, s16
 8013290:	eef0 0a68 	vmov.f32	s1, s17
 8013294:	ecbd 8b02 	vpop	{d8}
 8013298:	bd38      	pop	{r3, r4, r5, pc}
 801329a:	bf00      	nop
 801329c:	2000016c 	.word	0x2000016c

080132a0 <expf>:
 80132a0:	b508      	push	{r3, lr}
 80132a2:	ed2d 8b02 	vpush	{d8}
 80132a6:	eef0 8a40 	vmov.f32	s17, s0
 80132aa:	f001 f877 	bl	801439c <__ieee754_expf>
 80132ae:	4b16      	ldr	r3, [pc, #88]	; (8013308 <expf+0x68>)
 80132b0:	f993 3000 	ldrsb.w	r3, [r3]
 80132b4:	3301      	adds	r3, #1
 80132b6:	eeb0 8a40 	vmov.f32	s16, s0
 80132ba:	d011      	beq.n	80132e0 <expf+0x40>
 80132bc:	eeb0 0a68 	vmov.f32	s0, s17
 80132c0:	f002 fa58 	bl	8015774 <finitef>
 80132c4:	b160      	cbz	r0, 80132e0 <expf+0x40>
 80132c6:	eddf 7a11 	vldr	s15, [pc, #68]	; 801330c <expf+0x6c>
 80132ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 80132ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d2:	dd0a      	ble.n	80132ea <expf+0x4a>
 80132d4:	f002 fa94 	bl	8015800 <__errno>
 80132d8:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8013310 <expf+0x70>
 80132dc:	2322      	movs	r3, #34	; 0x22
 80132de:	6003      	str	r3, [r0, #0]
 80132e0:	eeb0 0a48 	vmov.f32	s0, s16
 80132e4:	ecbd 8b02 	vpop	{d8}
 80132e8:	bd08      	pop	{r3, pc}
 80132ea:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013314 <expf+0x74>
 80132ee:	eef4 8ae7 	vcmpe.f32	s17, s15
 80132f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f6:	d5f3      	bpl.n	80132e0 <expf+0x40>
 80132f8:	f002 fa82 	bl	8015800 <__errno>
 80132fc:	2322      	movs	r3, #34	; 0x22
 80132fe:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8013318 <expf+0x78>
 8013302:	6003      	str	r3, [r0, #0]
 8013304:	e7ec      	b.n	80132e0 <expf+0x40>
 8013306:	bf00      	nop
 8013308:	2000016c 	.word	0x2000016c
 801330c:	42b17180 	.word	0x42b17180
 8013310:	7f800000 	.word	0x7f800000
 8013314:	c2cff1b5 	.word	0xc2cff1b5
 8013318:	00000000 	.word	0x00000000

0801331c <log10f>:
 801331c:	b508      	push	{r3, lr}
 801331e:	ed2d 8b02 	vpush	{d8}
 8013322:	eeb0 8a40 	vmov.f32	s16, s0
 8013326:	f001 f9fd 	bl	8014724 <__ieee754_log10f>
 801332a:	4b14      	ldr	r3, [pc, #80]	; (801337c <log10f+0x60>)
 801332c:	f993 3000 	ldrsb.w	r3, [r3]
 8013330:	3301      	adds	r3, #1
 8013332:	d014      	beq.n	801335e <log10f+0x42>
 8013334:	eeb4 8a48 	vcmp.f32	s16, s16
 8013338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333c:	d60f      	bvs.n	801335e <log10f+0x42>
 801333e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013346:	d80a      	bhi.n	801335e <log10f+0x42>
 8013348:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013350:	d108      	bne.n	8013364 <log10f+0x48>
 8013352:	f002 fa55 	bl	8015800 <__errno>
 8013356:	2322      	movs	r3, #34	; 0x22
 8013358:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8013380 <log10f+0x64>
 801335c:	6003      	str	r3, [r0, #0]
 801335e:	ecbd 8b02 	vpop	{d8}
 8013362:	bd08      	pop	{r3, pc}
 8013364:	f002 fa4c 	bl	8015800 <__errno>
 8013368:	ecbd 8b02 	vpop	{d8}
 801336c:	2321      	movs	r3, #33	; 0x21
 801336e:	6003      	str	r3, [r0, #0]
 8013370:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013374:	4803      	ldr	r0, [pc, #12]	; (8013384 <log10f+0x68>)
 8013376:	f002 ba0b 	b.w	8015790 <nanf>
 801337a:	bf00      	nop
 801337c:	2000016c 	.word	0x2000016c
 8013380:	ff800000 	.word	0xff800000
 8013384:	08039fc3 	.word	0x08039fc3

08013388 <sqrtf>:
 8013388:	b508      	push	{r3, lr}
 801338a:	ed2d 8b02 	vpush	{d8}
 801338e:	eeb0 8a40 	vmov.f32	s16, s0
 8013392:	f001 fa1f 	bl	80147d4 <__ieee754_sqrtf>
 8013396:	4b0d      	ldr	r3, [pc, #52]	; (80133cc <sqrtf+0x44>)
 8013398:	f993 3000 	ldrsb.w	r3, [r3]
 801339c:	3301      	adds	r3, #1
 801339e:	d011      	beq.n	80133c4 <sqrtf+0x3c>
 80133a0:	eeb4 8a48 	vcmp.f32	s16, s16
 80133a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a8:	d60c      	bvs.n	80133c4 <sqrtf+0x3c>
 80133aa:	eddf 8a09 	vldr	s17, [pc, #36]	; 80133d0 <sqrtf+0x48>
 80133ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80133b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b6:	d505      	bpl.n	80133c4 <sqrtf+0x3c>
 80133b8:	f002 fa22 	bl	8015800 <__errno>
 80133bc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80133c0:	2321      	movs	r3, #33	; 0x21
 80133c2:	6003      	str	r3, [r0, #0]
 80133c4:	ecbd 8b02 	vpop	{d8}
 80133c8:	bd08      	pop	{r3, pc}
 80133ca:	bf00      	nop
 80133cc:	2000016c 	.word	0x2000016c
	...

080133d8 <__ieee754_pow>:
 80133d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133dc:	ed2d 8b06 	vpush	{d8-d10}
 80133e0:	b08d      	sub	sp, #52	; 0x34
 80133e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80133e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80133ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80133ee:	ea56 0100 	orrs.w	r1, r6, r0
 80133f2:	ec53 2b10 	vmov	r2, r3, d0
 80133f6:	f000 84d1 	beq.w	8013d9c <__ieee754_pow+0x9c4>
 80133fa:	497f      	ldr	r1, [pc, #508]	; (80135f8 <__ieee754_pow+0x220>)
 80133fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013400:	428c      	cmp	r4, r1
 8013402:	ee10 8a10 	vmov	r8, s0
 8013406:	4699      	mov	r9, r3
 8013408:	dc09      	bgt.n	801341e <__ieee754_pow+0x46>
 801340a:	d103      	bne.n	8013414 <__ieee754_pow+0x3c>
 801340c:	b97a      	cbnz	r2, 801342e <__ieee754_pow+0x56>
 801340e:	42a6      	cmp	r6, r4
 8013410:	dd02      	ble.n	8013418 <__ieee754_pow+0x40>
 8013412:	e00c      	b.n	801342e <__ieee754_pow+0x56>
 8013414:	428e      	cmp	r6, r1
 8013416:	dc02      	bgt.n	801341e <__ieee754_pow+0x46>
 8013418:	428e      	cmp	r6, r1
 801341a:	d110      	bne.n	801343e <__ieee754_pow+0x66>
 801341c:	b178      	cbz	r0, 801343e <__ieee754_pow+0x66>
 801341e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013422:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013426:	ea54 0308 	orrs.w	r3, r4, r8
 801342a:	f000 84b7 	beq.w	8013d9c <__ieee754_pow+0x9c4>
 801342e:	4873      	ldr	r0, [pc, #460]	; (80135fc <__ieee754_pow+0x224>)
 8013430:	b00d      	add	sp, #52	; 0x34
 8013432:	ecbd 8b06 	vpop	{d8-d10}
 8013436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801343a:	f002 b881 	b.w	8015540 <nan>
 801343e:	f1b9 0f00 	cmp.w	r9, #0
 8013442:	da36      	bge.n	80134b2 <__ieee754_pow+0xda>
 8013444:	496e      	ldr	r1, [pc, #440]	; (8013600 <__ieee754_pow+0x228>)
 8013446:	428e      	cmp	r6, r1
 8013448:	dc51      	bgt.n	80134ee <__ieee754_pow+0x116>
 801344a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801344e:	428e      	cmp	r6, r1
 8013450:	f340 84af 	ble.w	8013db2 <__ieee754_pow+0x9da>
 8013454:	1531      	asrs	r1, r6, #20
 8013456:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801345a:	2914      	cmp	r1, #20
 801345c:	dd0f      	ble.n	801347e <__ieee754_pow+0xa6>
 801345e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8013462:	fa20 fc01 	lsr.w	ip, r0, r1
 8013466:	fa0c f101 	lsl.w	r1, ip, r1
 801346a:	4281      	cmp	r1, r0
 801346c:	f040 84a1 	bne.w	8013db2 <__ieee754_pow+0x9da>
 8013470:	f00c 0c01 	and.w	ip, ip, #1
 8013474:	f1cc 0102 	rsb	r1, ip, #2
 8013478:	9100      	str	r1, [sp, #0]
 801347a:	b180      	cbz	r0, 801349e <__ieee754_pow+0xc6>
 801347c:	e059      	b.n	8013532 <__ieee754_pow+0x15a>
 801347e:	2800      	cmp	r0, #0
 8013480:	d155      	bne.n	801352e <__ieee754_pow+0x156>
 8013482:	f1c1 0114 	rsb	r1, r1, #20
 8013486:	fa46 fc01 	asr.w	ip, r6, r1
 801348a:	fa0c f101 	lsl.w	r1, ip, r1
 801348e:	42b1      	cmp	r1, r6
 8013490:	f040 848c 	bne.w	8013dac <__ieee754_pow+0x9d4>
 8013494:	f00c 0c01 	and.w	ip, ip, #1
 8013498:	f1cc 0102 	rsb	r1, ip, #2
 801349c:	9100      	str	r1, [sp, #0]
 801349e:	4959      	ldr	r1, [pc, #356]	; (8013604 <__ieee754_pow+0x22c>)
 80134a0:	428e      	cmp	r6, r1
 80134a2:	d12d      	bne.n	8013500 <__ieee754_pow+0x128>
 80134a4:	2f00      	cmp	r7, #0
 80134a6:	da79      	bge.n	801359c <__ieee754_pow+0x1c4>
 80134a8:	4956      	ldr	r1, [pc, #344]	; (8013604 <__ieee754_pow+0x22c>)
 80134aa:	2000      	movs	r0, #0
 80134ac:	f7ed f9fe 	bl	80008ac <__aeabi_ddiv>
 80134b0:	e016      	b.n	80134e0 <__ieee754_pow+0x108>
 80134b2:	2100      	movs	r1, #0
 80134b4:	9100      	str	r1, [sp, #0]
 80134b6:	2800      	cmp	r0, #0
 80134b8:	d13b      	bne.n	8013532 <__ieee754_pow+0x15a>
 80134ba:	494f      	ldr	r1, [pc, #316]	; (80135f8 <__ieee754_pow+0x220>)
 80134bc:	428e      	cmp	r6, r1
 80134be:	d1ee      	bne.n	801349e <__ieee754_pow+0xc6>
 80134c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80134c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80134c8:	ea53 0308 	orrs.w	r3, r3, r8
 80134cc:	f000 8466 	beq.w	8013d9c <__ieee754_pow+0x9c4>
 80134d0:	4b4d      	ldr	r3, [pc, #308]	; (8013608 <__ieee754_pow+0x230>)
 80134d2:	429c      	cmp	r4, r3
 80134d4:	dd0d      	ble.n	80134f2 <__ieee754_pow+0x11a>
 80134d6:	2f00      	cmp	r7, #0
 80134d8:	f280 8464 	bge.w	8013da4 <__ieee754_pow+0x9cc>
 80134dc:	2000      	movs	r0, #0
 80134de:	2100      	movs	r1, #0
 80134e0:	ec41 0b10 	vmov	d0, r0, r1
 80134e4:	b00d      	add	sp, #52	; 0x34
 80134e6:	ecbd 8b06 	vpop	{d8-d10}
 80134ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ee:	2102      	movs	r1, #2
 80134f0:	e7e0      	b.n	80134b4 <__ieee754_pow+0xdc>
 80134f2:	2f00      	cmp	r7, #0
 80134f4:	daf2      	bge.n	80134dc <__ieee754_pow+0x104>
 80134f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80134fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80134fe:	e7ef      	b.n	80134e0 <__ieee754_pow+0x108>
 8013500:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8013504:	d104      	bne.n	8013510 <__ieee754_pow+0x138>
 8013506:	4610      	mov	r0, r2
 8013508:	4619      	mov	r1, r3
 801350a:	f7ed f8a5 	bl	8000658 <__aeabi_dmul>
 801350e:	e7e7      	b.n	80134e0 <__ieee754_pow+0x108>
 8013510:	493e      	ldr	r1, [pc, #248]	; (801360c <__ieee754_pow+0x234>)
 8013512:	428f      	cmp	r7, r1
 8013514:	d10d      	bne.n	8013532 <__ieee754_pow+0x15a>
 8013516:	f1b9 0f00 	cmp.w	r9, #0
 801351a:	db0a      	blt.n	8013532 <__ieee754_pow+0x15a>
 801351c:	ec43 2b10 	vmov	d0, r2, r3
 8013520:	b00d      	add	sp, #52	; 0x34
 8013522:	ecbd 8b06 	vpop	{d8-d10}
 8013526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352a:	f000 be83 	b.w	8014234 <__ieee754_sqrt>
 801352e:	2100      	movs	r1, #0
 8013530:	9100      	str	r1, [sp, #0]
 8013532:	ec43 2b10 	vmov	d0, r2, r3
 8013536:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801353a:	f001 ffed 	bl	8015518 <fabs>
 801353e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013542:	ec51 0b10 	vmov	r0, r1, d0
 8013546:	f1b8 0f00 	cmp.w	r8, #0
 801354a:	d12a      	bne.n	80135a2 <__ieee754_pow+0x1ca>
 801354c:	b12c      	cbz	r4, 801355a <__ieee754_pow+0x182>
 801354e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8013604 <__ieee754_pow+0x22c>
 8013552:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8013556:	45e6      	cmp	lr, ip
 8013558:	d123      	bne.n	80135a2 <__ieee754_pow+0x1ca>
 801355a:	2f00      	cmp	r7, #0
 801355c:	da05      	bge.n	801356a <__ieee754_pow+0x192>
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	2000      	movs	r0, #0
 8013564:	4927      	ldr	r1, [pc, #156]	; (8013604 <__ieee754_pow+0x22c>)
 8013566:	f7ed f9a1 	bl	80008ac <__aeabi_ddiv>
 801356a:	f1b9 0f00 	cmp.w	r9, #0
 801356e:	dab7      	bge.n	80134e0 <__ieee754_pow+0x108>
 8013570:	9b00      	ldr	r3, [sp, #0]
 8013572:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013576:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801357a:	4323      	orrs	r3, r4
 801357c:	d108      	bne.n	8013590 <__ieee754_pow+0x1b8>
 801357e:	4602      	mov	r2, r0
 8013580:	460b      	mov	r3, r1
 8013582:	4610      	mov	r0, r2
 8013584:	4619      	mov	r1, r3
 8013586:	f7ec feaf 	bl	80002e8 <__aeabi_dsub>
 801358a:	4602      	mov	r2, r0
 801358c:	460b      	mov	r3, r1
 801358e:	e78d      	b.n	80134ac <__ieee754_pow+0xd4>
 8013590:	9b00      	ldr	r3, [sp, #0]
 8013592:	2b01      	cmp	r3, #1
 8013594:	d1a4      	bne.n	80134e0 <__ieee754_pow+0x108>
 8013596:	4602      	mov	r2, r0
 8013598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801359c:	4610      	mov	r0, r2
 801359e:	4619      	mov	r1, r3
 80135a0:	e79e      	b.n	80134e0 <__ieee754_pow+0x108>
 80135a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80135a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80135aa:	950a      	str	r5, [sp, #40]	; 0x28
 80135ac:	9d00      	ldr	r5, [sp, #0]
 80135ae:	46ac      	mov	ip, r5
 80135b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80135b2:	ea5c 0505 	orrs.w	r5, ip, r5
 80135b6:	d0e4      	beq.n	8013582 <__ieee754_pow+0x1aa>
 80135b8:	4b15      	ldr	r3, [pc, #84]	; (8013610 <__ieee754_pow+0x238>)
 80135ba:	429e      	cmp	r6, r3
 80135bc:	f340 80fc 	ble.w	80137b8 <__ieee754_pow+0x3e0>
 80135c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80135c4:	429e      	cmp	r6, r3
 80135c6:	4b10      	ldr	r3, [pc, #64]	; (8013608 <__ieee754_pow+0x230>)
 80135c8:	dd07      	ble.n	80135da <__ieee754_pow+0x202>
 80135ca:	429c      	cmp	r4, r3
 80135cc:	dc0a      	bgt.n	80135e4 <__ieee754_pow+0x20c>
 80135ce:	2f00      	cmp	r7, #0
 80135d0:	da84      	bge.n	80134dc <__ieee754_pow+0x104>
 80135d2:	a307      	add	r3, pc, #28	; (adr r3, 80135f0 <__ieee754_pow+0x218>)
 80135d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d8:	e795      	b.n	8013506 <__ieee754_pow+0x12e>
 80135da:	429c      	cmp	r4, r3
 80135dc:	dbf7      	blt.n	80135ce <__ieee754_pow+0x1f6>
 80135de:	4b09      	ldr	r3, [pc, #36]	; (8013604 <__ieee754_pow+0x22c>)
 80135e0:	429c      	cmp	r4, r3
 80135e2:	dd17      	ble.n	8013614 <__ieee754_pow+0x23c>
 80135e4:	2f00      	cmp	r7, #0
 80135e6:	dcf4      	bgt.n	80135d2 <__ieee754_pow+0x1fa>
 80135e8:	e778      	b.n	80134dc <__ieee754_pow+0x104>
 80135ea:	bf00      	nop
 80135ec:	f3af 8000 	nop.w
 80135f0:	8800759c 	.word	0x8800759c
 80135f4:	7e37e43c 	.word	0x7e37e43c
 80135f8:	7ff00000 	.word	0x7ff00000
 80135fc:	08039fc3 	.word	0x08039fc3
 8013600:	433fffff 	.word	0x433fffff
 8013604:	3ff00000 	.word	0x3ff00000
 8013608:	3fefffff 	.word	0x3fefffff
 801360c:	3fe00000 	.word	0x3fe00000
 8013610:	41e00000 	.word	0x41e00000
 8013614:	4b64      	ldr	r3, [pc, #400]	; (80137a8 <__ieee754_pow+0x3d0>)
 8013616:	2200      	movs	r2, #0
 8013618:	f7ec fe66 	bl	80002e8 <__aeabi_dsub>
 801361c:	a356      	add	r3, pc, #344	; (adr r3, 8013778 <__ieee754_pow+0x3a0>)
 801361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013622:	4604      	mov	r4, r0
 8013624:	460d      	mov	r5, r1
 8013626:	f7ed f817 	bl	8000658 <__aeabi_dmul>
 801362a:	a355      	add	r3, pc, #340	; (adr r3, 8013780 <__ieee754_pow+0x3a8>)
 801362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013630:	4606      	mov	r6, r0
 8013632:	460f      	mov	r7, r1
 8013634:	4620      	mov	r0, r4
 8013636:	4629      	mov	r1, r5
 8013638:	f7ed f80e 	bl	8000658 <__aeabi_dmul>
 801363c:	4b5b      	ldr	r3, [pc, #364]	; (80137ac <__ieee754_pow+0x3d4>)
 801363e:	4682      	mov	sl, r0
 8013640:	468b      	mov	fp, r1
 8013642:	2200      	movs	r2, #0
 8013644:	4620      	mov	r0, r4
 8013646:	4629      	mov	r1, r5
 8013648:	f7ed f806 	bl	8000658 <__aeabi_dmul>
 801364c:	4602      	mov	r2, r0
 801364e:	460b      	mov	r3, r1
 8013650:	a14d      	add	r1, pc, #308	; (adr r1, 8013788 <__ieee754_pow+0x3b0>)
 8013652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013656:	f7ec fe47 	bl	80002e8 <__aeabi_dsub>
 801365a:	4622      	mov	r2, r4
 801365c:	462b      	mov	r3, r5
 801365e:	f7ec fffb 	bl	8000658 <__aeabi_dmul>
 8013662:	4602      	mov	r2, r0
 8013664:	460b      	mov	r3, r1
 8013666:	2000      	movs	r0, #0
 8013668:	4951      	ldr	r1, [pc, #324]	; (80137b0 <__ieee754_pow+0x3d8>)
 801366a:	f7ec fe3d 	bl	80002e8 <__aeabi_dsub>
 801366e:	4622      	mov	r2, r4
 8013670:	4680      	mov	r8, r0
 8013672:	4689      	mov	r9, r1
 8013674:	462b      	mov	r3, r5
 8013676:	4620      	mov	r0, r4
 8013678:	4629      	mov	r1, r5
 801367a:	f7ec ffed 	bl	8000658 <__aeabi_dmul>
 801367e:	4602      	mov	r2, r0
 8013680:	460b      	mov	r3, r1
 8013682:	4640      	mov	r0, r8
 8013684:	4649      	mov	r1, r9
 8013686:	f7ec ffe7 	bl	8000658 <__aeabi_dmul>
 801368a:	a341      	add	r3, pc, #260	; (adr r3, 8013790 <__ieee754_pow+0x3b8>)
 801368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013690:	f7ec ffe2 	bl	8000658 <__aeabi_dmul>
 8013694:	4602      	mov	r2, r0
 8013696:	460b      	mov	r3, r1
 8013698:	4650      	mov	r0, sl
 801369a:	4659      	mov	r1, fp
 801369c:	f7ec fe24 	bl	80002e8 <__aeabi_dsub>
 80136a0:	4602      	mov	r2, r0
 80136a2:	460b      	mov	r3, r1
 80136a4:	4680      	mov	r8, r0
 80136a6:	4689      	mov	r9, r1
 80136a8:	4630      	mov	r0, r6
 80136aa:	4639      	mov	r1, r7
 80136ac:	f7ec fe1e 	bl	80002ec <__adddf3>
 80136b0:	2400      	movs	r4, #0
 80136b2:	4632      	mov	r2, r6
 80136b4:	463b      	mov	r3, r7
 80136b6:	4620      	mov	r0, r4
 80136b8:	460d      	mov	r5, r1
 80136ba:	f7ec fe15 	bl	80002e8 <__aeabi_dsub>
 80136be:	4602      	mov	r2, r0
 80136c0:	460b      	mov	r3, r1
 80136c2:	4640      	mov	r0, r8
 80136c4:	4649      	mov	r1, r9
 80136c6:	f7ec fe0f 	bl	80002e8 <__aeabi_dsub>
 80136ca:	9b00      	ldr	r3, [sp, #0]
 80136cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ce:	3b01      	subs	r3, #1
 80136d0:	4313      	orrs	r3, r2
 80136d2:	4682      	mov	sl, r0
 80136d4:	468b      	mov	fp, r1
 80136d6:	f040 81f1 	bne.w	8013abc <__ieee754_pow+0x6e4>
 80136da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013798 <__ieee754_pow+0x3c0>
 80136de:	eeb0 8a47 	vmov.f32	s16, s14
 80136e2:	eef0 8a67 	vmov.f32	s17, s15
 80136e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80136ea:	2600      	movs	r6, #0
 80136ec:	4632      	mov	r2, r6
 80136ee:	463b      	mov	r3, r7
 80136f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136f4:	f7ec fdf8 	bl	80002e8 <__aeabi_dsub>
 80136f8:	4622      	mov	r2, r4
 80136fa:	462b      	mov	r3, r5
 80136fc:	f7ec ffac 	bl	8000658 <__aeabi_dmul>
 8013700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013704:	4680      	mov	r8, r0
 8013706:	4689      	mov	r9, r1
 8013708:	4650      	mov	r0, sl
 801370a:	4659      	mov	r1, fp
 801370c:	f7ec ffa4 	bl	8000658 <__aeabi_dmul>
 8013710:	4602      	mov	r2, r0
 8013712:	460b      	mov	r3, r1
 8013714:	4640      	mov	r0, r8
 8013716:	4649      	mov	r1, r9
 8013718:	f7ec fde8 	bl	80002ec <__adddf3>
 801371c:	4632      	mov	r2, r6
 801371e:	463b      	mov	r3, r7
 8013720:	4680      	mov	r8, r0
 8013722:	4689      	mov	r9, r1
 8013724:	4620      	mov	r0, r4
 8013726:	4629      	mov	r1, r5
 8013728:	f7ec ff96 	bl	8000658 <__aeabi_dmul>
 801372c:	460b      	mov	r3, r1
 801372e:	4604      	mov	r4, r0
 8013730:	460d      	mov	r5, r1
 8013732:	4602      	mov	r2, r0
 8013734:	4649      	mov	r1, r9
 8013736:	4640      	mov	r0, r8
 8013738:	f7ec fdd8 	bl	80002ec <__adddf3>
 801373c:	4b1d      	ldr	r3, [pc, #116]	; (80137b4 <__ieee754_pow+0x3dc>)
 801373e:	4299      	cmp	r1, r3
 8013740:	ec45 4b19 	vmov	d9, r4, r5
 8013744:	4606      	mov	r6, r0
 8013746:	460f      	mov	r7, r1
 8013748:	468b      	mov	fp, r1
 801374a:	f340 82fe 	ble.w	8013d4a <__ieee754_pow+0x972>
 801374e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013752:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013756:	4303      	orrs	r3, r0
 8013758:	f000 81f0 	beq.w	8013b3c <__ieee754_pow+0x764>
 801375c:	a310      	add	r3, pc, #64	; (adr r3, 80137a0 <__ieee754_pow+0x3c8>)
 801375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013762:	ec51 0b18 	vmov	r0, r1, d8
 8013766:	f7ec ff77 	bl	8000658 <__aeabi_dmul>
 801376a:	a30d      	add	r3, pc, #52	; (adr r3, 80137a0 <__ieee754_pow+0x3c8>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	e6cb      	b.n	801350a <__ieee754_pow+0x132>
 8013772:	bf00      	nop
 8013774:	f3af 8000 	nop.w
 8013778:	60000000 	.word	0x60000000
 801377c:	3ff71547 	.word	0x3ff71547
 8013780:	f85ddf44 	.word	0xf85ddf44
 8013784:	3e54ae0b 	.word	0x3e54ae0b
 8013788:	55555555 	.word	0x55555555
 801378c:	3fd55555 	.word	0x3fd55555
 8013790:	652b82fe 	.word	0x652b82fe
 8013794:	3ff71547 	.word	0x3ff71547
 8013798:	00000000 	.word	0x00000000
 801379c:	bff00000 	.word	0xbff00000
 80137a0:	8800759c 	.word	0x8800759c
 80137a4:	7e37e43c 	.word	0x7e37e43c
 80137a8:	3ff00000 	.word	0x3ff00000
 80137ac:	3fd00000 	.word	0x3fd00000
 80137b0:	3fe00000 	.word	0x3fe00000
 80137b4:	408fffff 	.word	0x408fffff
 80137b8:	4bd7      	ldr	r3, [pc, #860]	; (8013b18 <__ieee754_pow+0x740>)
 80137ba:	ea03 0309 	and.w	r3, r3, r9
 80137be:	2200      	movs	r2, #0
 80137c0:	b92b      	cbnz	r3, 80137ce <__ieee754_pow+0x3f6>
 80137c2:	4bd6      	ldr	r3, [pc, #856]	; (8013b1c <__ieee754_pow+0x744>)
 80137c4:	f7ec ff48 	bl	8000658 <__aeabi_dmul>
 80137c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80137cc:	460c      	mov	r4, r1
 80137ce:	1523      	asrs	r3, r4, #20
 80137d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80137d4:	4413      	add	r3, r2
 80137d6:	9309      	str	r3, [sp, #36]	; 0x24
 80137d8:	4bd1      	ldr	r3, [pc, #836]	; (8013b20 <__ieee754_pow+0x748>)
 80137da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80137de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80137e2:	429c      	cmp	r4, r3
 80137e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80137e8:	dd08      	ble.n	80137fc <__ieee754_pow+0x424>
 80137ea:	4bce      	ldr	r3, [pc, #824]	; (8013b24 <__ieee754_pow+0x74c>)
 80137ec:	429c      	cmp	r4, r3
 80137ee:	f340 8163 	ble.w	8013ab8 <__ieee754_pow+0x6e0>
 80137f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137f4:	3301      	adds	r3, #1
 80137f6:	9309      	str	r3, [sp, #36]	; 0x24
 80137f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80137fc:	2400      	movs	r4, #0
 80137fe:	00e3      	lsls	r3, r4, #3
 8013800:	930b      	str	r3, [sp, #44]	; 0x2c
 8013802:	4bc9      	ldr	r3, [pc, #804]	; (8013b28 <__ieee754_pow+0x750>)
 8013804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013808:	ed93 7b00 	vldr	d7, [r3]
 801380c:	4629      	mov	r1, r5
 801380e:	ec53 2b17 	vmov	r2, r3, d7
 8013812:	eeb0 8a47 	vmov.f32	s16, s14
 8013816:	eef0 8a67 	vmov.f32	s17, s15
 801381a:	4682      	mov	sl, r0
 801381c:	f7ec fd64 	bl	80002e8 <__aeabi_dsub>
 8013820:	4652      	mov	r2, sl
 8013822:	4606      	mov	r6, r0
 8013824:	460f      	mov	r7, r1
 8013826:	462b      	mov	r3, r5
 8013828:	ec51 0b18 	vmov	r0, r1, d8
 801382c:	f7ec fd5e 	bl	80002ec <__adddf3>
 8013830:	4602      	mov	r2, r0
 8013832:	460b      	mov	r3, r1
 8013834:	2000      	movs	r0, #0
 8013836:	49bd      	ldr	r1, [pc, #756]	; (8013b2c <__ieee754_pow+0x754>)
 8013838:	f7ed f838 	bl	80008ac <__aeabi_ddiv>
 801383c:	ec41 0b19 	vmov	d9, r0, r1
 8013840:	4602      	mov	r2, r0
 8013842:	460b      	mov	r3, r1
 8013844:	4630      	mov	r0, r6
 8013846:	4639      	mov	r1, r7
 8013848:	f7ec ff06 	bl	8000658 <__aeabi_dmul>
 801384c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013854:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013858:	2300      	movs	r3, #0
 801385a:	9304      	str	r3, [sp, #16]
 801385c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013860:	46ab      	mov	fp, r5
 8013862:	106d      	asrs	r5, r5, #1
 8013864:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013868:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801386c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013870:	2200      	movs	r2, #0
 8013872:	4640      	mov	r0, r8
 8013874:	4649      	mov	r1, r9
 8013876:	4614      	mov	r4, r2
 8013878:	461d      	mov	r5, r3
 801387a:	f7ec feed 	bl	8000658 <__aeabi_dmul>
 801387e:	4602      	mov	r2, r0
 8013880:	460b      	mov	r3, r1
 8013882:	4630      	mov	r0, r6
 8013884:	4639      	mov	r1, r7
 8013886:	f7ec fd2f 	bl	80002e8 <__aeabi_dsub>
 801388a:	ec53 2b18 	vmov	r2, r3, d8
 801388e:	4606      	mov	r6, r0
 8013890:	460f      	mov	r7, r1
 8013892:	4620      	mov	r0, r4
 8013894:	4629      	mov	r1, r5
 8013896:	f7ec fd27 	bl	80002e8 <__aeabi_dsub>
 801389a:	4602      	mov	r2, r0
 801389c:	460b      	mov	r3, r1
 801389e:	4650      	mov	r0, sl
 80138a0:	4659      	mov	r1, fp
 80138a2:	f7ec fd21 	bl	80002e8 <__aeabi_dsub>
 80138a6:	4642      	mov	r2, r8
 80138a8:	464b      	mov	r3, r9
 80138aa:	f7ec fed5 	bl	8000658 <__aeabi_dmul>
 80138ae:	4602      	mov	r2, r0
 80138b0:	460b      	mov	r3, r1
 80138b2:	4630      	mov	r0, r6
 80138b4:	4639      	mov	r1, r7
 80138b6:	f7ec fd17 	bl	80002e8 <__aeabi_dsub>
 80138ba:	ec53 2b19 	vmov	r2, r3, d9
 80138be:	f7ec fecb 	bl	8000658 <__aeabi_dmul>
 80138c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80138c6:	ec41 0b18 	vmov	d8, r0, r1
 80138ca:	4610      	mov	r0, r2
 80138cc:	4619      	mov	r1, r3
 80138ce:	f7ec fec3 	bl	8000658 <__aeabi_dmul>
 80138d2:	a37d      	add	r3, pc, #500	; (adr r3, 8013ac8 <__ieee754_pow+0x6f0>)
 80138d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d8:	4604      	mov	r4, r0
 80138da:	460d      	mov	r5, r1
 80138dc:	f7ec febc 	bl	8000658 <__aeabi_dmul>
 80138e0:	a37b      	add	r3, pc, #492	; (adr r3, 8013ad0 <__ieee754_pow+0x6f8>)
 80138e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e6:	f7ec fd01 	bl	80002ec <__adddf3>
 80138ea:	4622      	mov	r2, r4
 80138ec:	462b      	mov	r3, r5
 80138ee:	f7ec feb3 	bl	8000658 <__aeabi_dmul>
 80138f2:	a379      	add	r3, pc, #484	; (adr r3, 8013ad8 <__ieee754_pow+0x700>)
 80138f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f8:	f7ec fcf8 	bl	80002ec <__adddf3>
 80138fc:	4622      	mov	r2, r4
 80138fe:	462b      	mov	r3, r5
 8013900:	f7ec feaa 	bl	8000658 <__aeabi_dmul>
 8013904:	a376      	add	r3, pc, #472	; (adr r3, 8013ae0 <__ieee754_pow+0x708>)
 8013906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801390a:	f7ec fcef 	bl	80002ec <__adddf3>
 801390e:	4622      	mov	r2, r4
 8013910:	462b      	mov	r3, r5
 8013912:	f7ec fea1 	bl	8000658 <__aeabi_dmul>
 8013916:	a374      	add	r3, pc, #464	; (adr r3, 8013ae8 <__ieee754_pow+0x710>)
 8013918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391c:	f7ec fce6 	bl	80002ec <__adddf3>
 8013920:	4622      	mov	r2, r4
 8013922:	462b      	mov	r3, r5
 8013924:	f7ec fe98 	bl	8000658 <__aeabi_dmul>
 8013928:	a371      	add	r3, pc, #452	; (adr r3, 8013af0 <__ieee754_pow+0x718>)
 801392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392e:	f7ec fcdd 	bl	80002ec <__adddf3>
 8013932:	4622      	mov	r2, r4
 8013934:	4606      	mov	r6, r0
 8013936:	460f      	mov	r7, r1
 8013938:	462b      	mov	r3, r5
 801393a:	4620      	mov	r0, r4
 801393c:	4629      	mov	r1, r5
 801393e:	f7ec fe8b 	bl	8000658 <__aeabi_dmul>
 8013942:	4602      	mov	r2, r0
 8013944:	460b      	mov	r3, r1
 8013946:	4630      	mov	r0, r6
 8013948:	4639      	mov	r1, r7
 801394a:	f7ec fe85 	bl	8000658 <__aeabi_dmul>
 801394e:	4642      	mov	r2, r8
 8013950:	4604      	mov	r4, r0
 8013952:	460d      	mov	r5, r1
 8013954:	464b      	mov	r3, r9
 8013956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801395a:	f7ec fcc7 	bl	80002ec <__adddf3>
 801395e:	ec53 2b18 	vmov	r2, r3, d8
 8013962:	f7ec fe79 	bl	8000658 <__aeabi_dmul>
 8013966:	4622      	mov	r2, r4
 8013968:	462b      	mov	r3, r5
 801396a:	f7ec fcbf 	bl	80002ec <__adddf3>
 801396e:	4642      	mov	r2, r8
 8013970:	4682      	mov	sl, r0
 8013972:	468b      	mov	fp, r1
 8013974:	464b      	mov	r3, r9
 8013976:	4640      	mov	r0, r8
 8013978:	4649      	mov	r1, r9
 801397a:	f7ec fe6d 	bl	8000658 <__aeabi_dmul>
 801397e:	4b6c      	ldr	r3, [pc, #432]	; (8013b30 <__ieee754_pow+0x758>)
 8013980:	2200      	movs	r2, #0
 8013982:	4606      	mov	r6, r0
 8013984:	460f      	mov	r7, r1
 8013986:	f7ec fcb1 	bl	80002ec <__adddf3>
 801398a:	4652      	mov	r2, sl
 801398c:	465b      	mov	r3, fp
 801398e:	f7ec fcad 	bl	80002ec <__adddf3>
 8013992:	9c04      	ldr	r4, [sp, #16]
 8013994:	460d      	mov	r5, r1
 8013996:	4622      	mov	r2, r4
 8013998:	460b      	mov	r3, r1
 801399a:	4640      	mov	r0, r8
 801399c:	4649      	mov	r1, r9
 801399e:	f7ec fe5b 	bl	8000658 <__aeabi_dmul>
 80139a2:	4b63      	ldr	r3, [pc, #396]	; (8013b30 <__ieee754_pow+0x758>)
 80139a4:	4680      	mov	r8, r0
 80139a6:	4689      	mov	r9, r1
 80139a8:	2200      	movs	r2, #0
 80139aa:	4620      	mov	r0, r4
 80139ac:	4629      	mov	r1, r5
 80139ae:	f7ec fc9b 	bl	80002e8 <__aeabi_dsub>
 80139b2:	4632      	mov	r2, r6
 80139b4:	463b      	mov	r3, r7
 80139b6:	f7ec fc97 	bl	80002e8 <__aeabi_dsub>
 80139ba:	4602      	mov	r2, r0
 80139bc:	460b      	mov	r3, r1
 80139be:	4650      	mov	r0, sl
 80139c0:	4659      	mov	r1, fp
 80139c2:	f7ec fc91 	bl	80002e8 <__aeabi_dsub>
 80139c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139ca:	f7ec fe45 	bl	8000658 <__aeabi_dmul>
 80139ce:	4622      	mov	r2, r4
 80139d0:	4606      	mov	r6, r0
 80139d2:	460f      	mov	r7, r1
 80139d4:	462b      	mov	r3, r5
 80139d6:	ec51 0b18 	vmov	r0, r1, d8
 80139da:	f7ec fe3d 	bl	8000658 <__aeabi_dmul>
 80139de:	4602      	mov	r2, r0
 80139e0:	460b      	mov	r3, r1
 80139e2:	4630      	mov	r0, r6
 80139e4:	4639      	mov	r1, r7
 80139e6:	f7ec fc81 	bl	80002ec <__adddf3>
 80139ea:	4606      	mov	r6, r0
 80139ec:	460f      	mov	r7, r1
 80139ee:	4602      	mov	r2, r0
 80139f0:	460b      	mov	r3, r1
 80139f2:	4640      	mov	r0, r8
 80139f4:	4649      	mov	r1, r9
 80139f6:	f7ec fc79 	bl	80002ec <__adddf3>
 80139fa:	9c04      	ldr	r4, [sp, #16]
 80139fc:	a33e      	add	r3, pc, #248	; (adr r3, 8013af8 <__ieee754_pow+0x720>)
 80139fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a02:	4620      	mov	r0, r4
 8013a04:	460d      	mov	r5, r1
 8013a06:	f7ec fe27 	bl	8000658 <__aeabi_dmul>
 8013a0a:	4642      	mov	r2, r8
 8013a0c:	ec41 0b18 	vmov	d8, r0, r1
 8013a10:	464b      	mov	r3, r9
 8013a12:	4620      	mov	r0, r4
 8013a14:	4629      	mov	r1, r5
 8013a16:	f7ec fc67 	bl	80002e8 <__aeabi_dsub>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	4630      	mov	r0, r6
 8013a20:	4639      	mov	r1, r7
 8013a22:	f7ec fc61 	bl	80002e8 <__aeabi_dsub>
 8013a26:	a336      	add	r3, pc, #216	; (adr r3, 8013b00 <__ieee754_pow+0x728>)
 8013a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2c:	f7ec fe14 	bl	8000658 <__aeabi_dmul>
 8013a30:	a335      	add	r3, pc, #212	; (adr r3, 8013b08 <__ieee754_pow+0x730>)
 8013a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a36:	4606      	mov	r6, r0
 8013a38:	460f      	mov	r7, r1
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	4629      	mov	r1, r5
 8013a3e:	f7ec fe0b 	bl	8000658 <__aeabi_dmul>
 8013a42:	4602      	mov	r2, r0
 8013a44:	460b      	mov	r3, r1
 8013a46:	4630      	mov	r0, r6
 8013a48:	4639      	mov	r1, r7
 8013a4a:	f7ec fc4f 	bl	80002ec <__adddf3>
 8013a4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a50:	4b38      	ldr	r3, [pc, #224]	; (8013b34 <__ieee754_pow+0x75c>)
 8013a52:	4413      	add	r3, r2
 8013a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a58:	f7ec fc48 	bl	80002ec <__adddf3>
 8013a5c:	4682      	mov	sl, r0
 8013a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a60:	468b      	mov	fp, r1
 8013a62:	f7ec fd8f 	bl	8000584 <__aeabi_i2d>
 8013a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a68:	4b33      	ldr	r3, [pc, #204]	; (8013b38 <__ieee754_pow+0x760>)
 8013a6a:	4413      	add	r3, r2
 8013a6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a70:	4606      	mov	r6, r0
 8013a72:	460f      	mov	r7, r1
 8013a74:	4652      	mov	r2, sl
 8013a76:	465b      	mov	r3, fp
 8013a78:	ec51 0b18 	vmov	r0, r1, d8
 8013a7c:	f7ec fc36 	bl	80002ec <__adddf3>
 8013a80:	4642      	mov	r2, r8
 8013a82:	464b      	mov	r3, r9
 8013a84:	f7ec fc32 	bl	80002ec <__adddf3>
 8013a88:	4632      	mov	r2, r6
 8013a8a:	463b      	mov	r3, r7
 8013a8c:	f7ec fc2e 	bl	80002ec <__adddf3>
 8013a90:	9c04      	ldr	r4, [sp, #16]
 8013a92:	4632      	mov	r2, r6
 8013a94:	463b      	mov	r3, r7
 8013a96:	4620      	mov	r0, r4
 8013a98:	460d      	mov	r5, r1
 8013a9a:	f7ec fc25 	bl	80002e8 <__aeabi_dsub>
 8013a9e:	4642      	mov	r2, r8
 8013aa0:	464b      	mov	r3, r9
 8013aa2:	f7ec fc21 	bl	80002e8 <__aeabi_dsub>
 8013aa6:	ec53 2b18 	vmov	r2, r3, d8
 8013aaa:	f7ec fc1d 	bl	80002e8 <__aeabi_dsub>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	4650      	mov	r0, sl
 8013ab4:	4659      	mov	r1, fp
 8013ab6:	e606      	b.n	80136c6 <__ieee754_pow+0x2ee>
 8013ab8:	2401      	movs	r4, #1
 8013aba:	e6a0      	b.n	80137fe <__ieee754_pow+0x426>
 8013abc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013b10 <__ieee754_pow+0x738>
 8013ac0:	e60d      	b.n	80136de <__ieee754_pow+0x306>
 8013ac2:	bf00      	nop
 8013ac4:	f3af 8000 	nop.w
 8013ac8:	4a454eef 	.word	0x4a454eef
 8013acc:	3fca7e28 	.word	0x3fca7e28
 8013ad0:	93c9db65 	.word	0x93c9db65
 8013ad4:	3fcd864a 	.word	0x3fcd864a
 8013ad8:	a91d4101 	.word	0xa91d4101
 8013adc:	3fd17460 	.word	0x3fd17460
 8013ae0:	518f264d 	.word	0x518f264d
 8013ae4:	3fd55555 	.word	0x3fd55555
 8013ae8:	db6fabff 	.word	0xdb6fabff
 8013aec:	3fdb6db6 	.word	0x3fdb6db6
 8013af0:	33333303 	.word	0x33333303
 8013af4:	3fe33333 	.word	0x3fe33333
 8013af8:	e0000000 	.word	0xe0000000
 8013afc:	3feec709 	.word	0x3feec709
 8013b00:	dc3a03fd 	.word	0xdc3a03fd
 8013b04:	3feec709 	.word	0x3feec709
 8013b08:	145b01f5 	.word	0x145b01f5
 8013b0c:	be3e2fe0 	.word	0xbe3e2fe0
 8013b10:	00000000 	.word	0x00000000
 8013b14:	3ff00000 	.word	0x3ff00000
 8013b18:	7ff00000 	.word	0x7ff00000
 8013b1c:	43400000 	.word	0x43400000
 8013b20:	0003988e 	.word	0x0003988e
 8013b24:	000bb679 	.word	0x000bb679
 8013b28:	08039d58 	.word	0x08039d58
 8013b2c:	3ff00000 	.word	0x3ff00000
 8013b30:	40080000 	.word	0x40080000
 8013b34:	08039d78 	.word	0x08039d78
 8013b38:	08039d68 	.word	0x08039d68
 8013b3c:	a3b5      	add	r3, pc, #724	; (adr r3, 8013e14 <__ieee754_pow+0xa3c>)
 8013b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b42:	4640      	mov	r0, r8
 8013b44:	4649      	mov	r1, r9
 8013b46:	f7ec fbd1 	bl	80002ec <__adddf3>
 8013b4a:	4622      	mov	r2, r4
 8013b4c:	ec41 0b1a 	vmov	d10, r0, r1
 8013b50:	462b      	mov	r3, r5
 8013b52:	4630      	mov	r0, r6
 8013b54:	4639      	mov	r1, r7
 8013b56:	f7ec fbc7 	bl	80002e8 <__aeabi_dsub>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	ec51 0b1a 	vmov	r0, r1, d10
 8013b62:	f7ed f809 	bl	8000b78 <__aeabi_dcmpgt>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	f47f adf8 	bne.w	801375c <__ieee754_pow+0x384>
 8013b6c:	4aa4      	ldr	r2, [pc, #656]	; (8013e00 <__ieee754_pow+0xa28>)
 8013b6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b72:	4293      	cmp	r3, r2
 8013b74:	f340 810b 	ble.w	8013d8e <__ieee754_pow+0x9b6>
 8013b78:	151b      	asrs	r3, r3, #20
 8013b7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013b7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013b82:	fa4a f303 	asr.w	r3, sl, r3
 8013b86:	445b      	add	r3, fp
 8013b88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013b8c:	4e9d      	ldr	r6, [pc, #628]	; (8013e04 <__ieee754_pow+0xa2c>)
 8013b8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013b92:	4116      	asrs	r6, r2
 8013b94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013b98:	2000      	movs	r0, #0
 8013b9a:	ea23 0106 	bic.w	r1, r3, r6
 8013b9e:	f1c2 0214 	rsb	r2, r2, #20
 8013ba2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013ba6:	fa4a fa02 	asr.w	sl, sl, r2
 8013baa:	f1bb 0f00 	cmp.w	fp, #0
 8013bae:	4602      	mov	r2, r0
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	bfb8      	it	lt
 8013bb8:	f1ca 0a00 	rsblt	sl, sl, #0
 8013bbc:	f7ec fb94 	bl	80002e8 <__aeabi_dsub>
 8013bc0:	ec41 0b19 	vmov	d9, r0, r1
 8013bc4:	4642      	mov	r2, r8
 8013bc6:	464b      	mov	r3, r9
 8013bc8:	ec51 0b19 	vmov	r0, r1, d9
 8013bcc:	f7ec fb8e 	bl	80002ec <__adddf3>
 8013bd0:	2400      	movs	r4, #0
 8013bd2:	a379      	add	r3, pc, #484	; (adr r3, 8013db8 <__ieee754_pow+0x9e0>)
 8013bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd8:	4620      	mov	r0, r4
 8013bda:	460d      	mov	r5, r1
 8013bdc:	f7ec fd3c 	bl	8000658 <__aeabi_dmul>
 8013be0:	ec53 2b19 	vmov	r2, r3, d9
 8013be4:	4606      	mov	r6, r0
 8013be6:	460f      	mov	r7, r1
 8013be8:	4620      	mov	r0, r4
 8013bea:	4629      	mov	r1, r5
 8013bec:	f7ec fb7c 	bl	80002e8 <__aeabi_dsub>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	4640      	mov	r0, r8
 8013bf6:	4649      	mov	r1, r9
 8013bf8:	f7ec fb76 	bl	80002e8 <__aeabi_dsub>
 8013bfc:	a370      	add	r3, pc, #448	; (adr r3, 8013dc0 <__ieee754_pow+0x9e8>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	f7ec fd29 	bl	8000658 <__aeabi_dmul>
 8013c06:	a370      	add	r3, pc, #448	; (adr r3, 8013dc8 <__ieee754_pow+0x9f0>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	4680      	mov	r8, r0
 8013c0e:	4689      	mov	r9, r1
 8013c10:	4620      	mov	r0, r4
 8013c12:	4629      	mov	r1, r5
 8013c14:	f7ec fd20 	bl	8000658 <__aeabi_dmul>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	4640      	mov	r0, r8
 8013c1e:	4649      	mov	r1, r9
 8013c20:	f7ec fb64 	bl	80002ec <__adddf3>
 8013c24:	4604      	mov	r4, r0
 8013c26:	460d      	mov	r5, r1
 8013c28:	4602      	mov	r2, r0
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	4639      	mov	r1, r7
 8013c30:	f7ec fb5c 	bl	80002ec <__adddf3>
 8013c34:	4632      	mov	r2, r6
 8013c36:	463b      	mov	r3, r7
 8013c38:	4680      	mov	r8, r0
 8013c3a:	4689      	mov	r9, r1
 8013c3c:	f7ec fb54 	bl	80002e8 <__aeabi_dsub>
 8013c40:	4602      	mov	r2, r0
 8013c42:	460b      	mov	r3, r1
 8013c44:	4620      	mov	r0, r4
 8013c46:	4629      	mov	r1, r5
 8013c48:	f7ec fb4e 	bl	80002e8 <__aeabi_dsub>
 8013c4c:	4642      	mov	r2, r8
 8013c4e:	4606      	mov	r6, r0
 8013c50:	460f      	mov	r7, r1
 8013c52:	464b      	mov	r3, r9
 8013c54:	4640      	mov	r0, r8
 8013c56:	4649      	mov	r1, r9
 8013c58:	f7ec fcfe 	bl	8000658 <__aeabi_dmul>
 8013c5c:	a35c      	add	r3, pc, #368	; (adr r3, 8013dd0 <__ieee754_pow+0x9f8>)
 8013c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c62:	4604      	mov	r4, r0
 8013c64:	460d      	mov	r5, r1
 8013c66:	f7ec fcf7 	bl	8000658 <__aeabi_dmul>
 8013c6a:	a35b      	add	r3, pc, #364	; (adr r3, 8013dd8 <__ieee754_pow+0xa00>)
 8013c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c70:	f7ec fb3a 	bl	80002e8 <__aeabi_dsub>
 8013c74:	4622      	mov	r2, r4
 8013c76:	462b      	mov	r3, r5
 8013c78:	f7ec fcee 	bl	8000658 <__aeabi_dmul>
 8013c7c:	a358      	add	r3, pc, #352	; (adr r3, 8013de0 <__ieee754_pow+0xa08>)
 8013c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c82:	f7ec fb33 	bl	80002ec <__adddf3>
 8013c86:	4622      	mov	r2, r4
 8013c88:	462b      	mov	r3, r5
 8013c8a:	f7ec fce5 	bl	8000658 <__aeabi_dmul>
 8013c8e:	a356      	add	r3, pc, #344	; (adr r3, 8013de8 <__ieee754_pow+0xa10>)
 8013c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c94:	f7ec fb28 	bl	80002e8 <__aeabi_dsub>
 8013c98:	4622      	mov	r2, r4
 8013c9a:	462b      	mov	r3, r5
 8013c9c:	f7ec fcdc 	bl	8000658 <__aeabi_dmul>
 8013ca0:	a353      	add	r3, pc, #332	; (adr r3, 8013df0 <__ieee754_pow+0xa18>)
 8013ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca6:	f7ec fb21 	bl	80002ec <__adddf3>
 8013caa:	4622      	mov	r2, r4
 8013cac:	462b      	mov	r3, r5
 8013cae:	f7ec fcd3 	bl	8000658 <__aeabi_dmul>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	4640      	mov	r0, r8
 8013cb8:	4649      	mov	r1, r9
 8013cba:	f7ec fb15 	bl	80002e8 <__aeabi_dsub>
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	460d      	mov	r5, r1
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	460b      	mov	r3, r1
 8013cc6:	4640      	mov	r0, r8
 8013cc8:	4649      	mov	r1, r9
 8013cca:	f7ec fcc5 	bl	8000658 <__aeabi_dmul>
 8013cce:	2200      	movs	r2, #0
 8013cd0:	ec41 0b19 	vmov	d9, r0, r1
 8013cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013cd8:	4620      	mov	r0, r4
 8013cda:	4629      	mov	r1, r5
 8013cdc:	f7ec fb04 	bl	80002e8 <__aeabi_dsub>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	460b      	mov	r3, r1
 8013ce4:	ec51 0b19 	vmov	r0, r1, d9
 8013ce8:	f7ec fde0 	bl	80008ac <__aeabi_ddiv>
 8013cec:	4632      	mov	r2, r6
 8013cee:	4604      	mov	r4, r0
 8013cf0:	460d      	mov	r5, r1
 8013cf2:	463b      	mov	r3, r7
 8013cf4:	4640      	mov	r0, r8
 8013cf6:	4649      	mov	r1, r9
 8013cf8:	f7ec fcae 	bl	8000658 <__aeabi_dmul>
 8013cfc:	4632      	mov	r2, r6
 8013cfe:	463b      	mov	r3, r7
 8013d00:	f7ec faf4 	bl	80002ec <__adddf3>
 8013d04:	4602      	mov	r2, r0
 8013d06:	460b      	mov	r3, r1
 8013d08:	4620      	mov	r0, r4
 8013d0a:	4629      	mov	r1, r5
 8013d0c:	f7ec faec 	bl	80002e8 <__aeabi_dsub>
 8013d10:	4642      	mov	r2, r8
 8013d12:	464b      	mov	r3, r9
 8013d14:	f7ec fae8 	bl	80002e8 <__aeabi_dsub>
 8013d18:	460b      	mov	r3, r1
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	493a      	ldr	r1, [pc, #232]	; (8013e08 <__ieee754_pow+0xa30>)
 8013d1e:	2000      	movs	r0, #0
 8013d20:	f7ec fae2 	bl	80002e8 <__aeabi_dsub>
 8013d24:	e9cd 0100 	strd	r0, r1, [sp]
 8013d28:	9b01      	ldr	r3, [sp, #4]
 8013d2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013d32:	da2f      	bge.n	8013d94 <__ieee754_pow+0x9bc>
 8013d34:	4650      	mov	r0, sl
 8013d36:	ed9d 0b00 	vldr	d0, [sp]
 8013d3a:	f001 fc95 	bl	8015668 <scalbn>
 8013d3e:	ec51 0b10 	vmov	r0, r1, d0
 8013d42:	ec53 2b18 	vmov	r2, r3, d8
 8013d46:	f7ff bbe0 	b.w	801350a <__ieee754_pow+0x132>
 8013d4a:	4b30      	ldr	r3, [pc, #192]	; (8013e0c <__ieee754_pow+0xa34>)
 8013d4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013d50:	429e      	cmp	r6, r3
 8013d52:	f77f af0b 	ble.w	8013b6c <__ieee754_pow+0x794>
 8013d56:	4b2e      	ldr	r3, [pc, #184]	; (8013e10 <__ieee754_pow+0xa38>)
 8013d58:	440b      	add	r3, r1
 8013d5a:	4303      	orrs	r3, r0
 8013d5c:	d00b      	beq.n	8013d76 <__ieee754_pow+0x99e>
 8013d5e:	a326      	add	r3, pc, #152	; (adr r3, 8013df8 <__ieee754_pow+0xa20>)
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	ec51 0b18 	vmov	r0, r1, d8
 8013d68:	f7ec fc76 	bl	8000658 <__aeabi_dmul>
 8013d6c:	a322      	add	r3, pc, #136	; (adr r3, 8013df8 <__ieee754_pow+0xa20>)
 8013d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d72:	f7ff bbca 	b.w	801350a <__ieee754_pow+0x132>
 8013d76:	4622      	mov	r2, r4
 8013d78:	462b      	mov	r3, r5
 8013d7a:	f7ec fab5 	bl	80002e8 <__aeabi_dsub>
 8013d7e:	4642      	mov	r2, r8
 8013d80:	464b      	mov	r3, r9
 8013d82:	f7ec feef 	bl	8000b64 <__aeabi_dcmpge>
 8013d86:	2800      	cmp	r0, #0
 8013d88:	f43f aef0 	beq.w	8013b6c <__ieee754_pow+0x794>
 8013d8c:	e7e7      	b.n	8013d5e <__ieee754_pow+0x986>
 8013d8e:	f04f 0a00 	mov.w	sl, #0
 8013d92:	e717      	b.n	8013bc4 <__ieee754_pow+0x7ec>
 8013d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d98:	4619      	mov	r1, r3
 8013d9a:	e7d2      	b.n	8013d42 <__ieee754_pow+0x96a>
 8013d9c:	491a      	ldr	r1, [pc, #104]	; (8013e08 <__ieee754_pow+0xa30>)
 8013d9e:	2000      	movs	r0, #0
 8013da0:	f7ff bb9e 	b.w	80134e0 <__ieee754_pow+0x108>
 8013da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013da8:	f7ff bb9a 	b.w	80134e0 <__ieee754_pow+0x108>
 8013dac:	9000      	str	r0, [sp, #0]
 8013dae:	f7ff bb76 	b.w	801349e <__ieee754_pow+0xc6>
 8013db2:	2100      	movs	r1, #0
 8013db4:	f7ff bb60 	b.w	8013478 <__ieee754_pow+0xa0>
 8013db8:	00000000 	.word	0x00000000
 8013dbc:	3fe62e43 	.word	0x3fe62e43
 8013dc0:	fefa39ef 	.word	0xfefa39ef
 8013dc4:	3fe62e42 	.word	0x3fe62e42
 8013dc8:	0ca86c39 	.word	0x0ca86c39
 8013dcc:	be205c61 	.word	0xbe205c61
 8013dd0:	72bea4d0 	.word	0x72bea4d0
 8013dd4:	3e663769 	.word	0x3e663769
 8013dd8:	c5d26bf1 	.word	0xc5d26bf1
 8013ddc:	3ebbbd41 	.word	0x3ebbbd41
 8013de0:	af25de2c 	.word	0xaf25de2c
 8013de4:	3f11566a 	.word	0x3f11566a
 8013de8:	16bebd93 	.word	0x16bebd93
 8013dec:	3f66c16c 	.word	0x3f66c16c
 8013df0:	5555553e 	.word	0x5555553e
 8013df4:	3fc55555 	.word	0x3fc55555
 8013df8:	c2f8f359 	.word	0xc2f8f359
 8013dfc:	01a56e1f 	.word	0x01a56e1f
 8013e00:	3fe00000 	.word	0x3fe00000
 8013e04:	000fffff 	.word	0x000fffff
 8013e08:	3ff00000 	.word	0x3ff00000
 8013e0c:	4090cbff 	.word	0x4090cbff
 8013e10:	3f6f3400 	.word	0x3f6f3400
 8013e14:	652b82fe 	.word	0x652b82fe
 8013e18:	3c971547 	.word	0x3c971547
 8013e1c:	00000000 	.word	0x00000000

08013e20 <__ieee754_rem_pio2>:
 8013e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e24:	ed2d 8b02 	vpush	{d8}
 8013e28:	ec55 4b10 	vmov	r4, r5, d0
 8013e2c:	4bca      	ldr	r3, [pc, #808]	; (8014158 <__ieee754_rem_pio2+0x338>)
 8013e2e:	b08b      	sub	sp, #44	; 0x2c
 8013e30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8013e34:	4598      	cmp	r8, r3
 8013e36:	4682      	mov	sl, r0
 8013e38:	9502      	str	r5, [sp, #8]
 8013e3a:	dc08      	bgt.n	8013e4e <__ieee754_rem_pio2+0x2e>
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	2300      	movs	r3, #0
 8013e40:	ed80 0b00 	vstr	d0, [r0]
 8013e44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013e48:	f04f 0b00 	mov.w	fp, #0
 8013e4c:	e028      	b.n	8013ea0 <__ieee754_rem_pio2+0x80>
 8013e4e:	4bc3      	ldr	r3, [pc, #780]	; (801415c <__ieee754_rem_pio2+0x33c>)
 8013e50:	4598      	cmp	r8, r3
 8013e52:	dc78      	bgt.n	8013f46 <__ieee754_rem_pio2+0x126>
 8013e54:	9b02      	ldr	r3, [sp, #8]
 8013e56:	4ec2      	ldr	r6, [pc, #776]	; (8014160 <__ieee754_rem_pio2+0x340>)
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	ee10 0a10 	vmov	r0, s0
 8013e5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8014120 <__ieee754_rem_pio2+0x300>)
 8013e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e64:	4629      	mov	r1, r5
 8013e66:	dd39      	ble.n	8013edc <__ieee754_rem_pio2+0xbc>
 8013e68:	f7ec fa3e 	bl	80002e8 <__aeabi_dsub>
 8013e6c:	45b0      	cmp	r8, r6
 8013e6e:	4604      	mov	r4, r0
 8013e70:	460d      	mov	r5, r1
 8013e72:	d01b      	beq.n	8013eac <__ieee754_rem_pio2+0x8c>
 8013e74:	a3ac      	add	r3, pc, #688	; (adr r3, 8014128 <__ieee754_rem_pio2+0x308>)
 8013e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7a:	f7ec fa35 	bl	80002e8 <__aeabi_dsub>
 8013e7e:	4602      	mov	r2, r0
 8013e80:	460b      	mov	r3, r1
 8013e82:	e9ca 2300 	strd	r2, r3, [sl]
 8013e86:	4620      	mov	r0, r4
 8013e88:	4629      	mov	r1, r5
 8013e8a:	f7ec fa2d 	bl	80002e8 <__aeabi_dsub>
 8013e8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014128 <__ieee754_rem_pio2+0x308>)
 8013e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e94:	f7ec fa28 	bl	80002e8 <__aeabi_dsub>
 8013e98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013e9c:	f04f 0b01 	mov.w	fp, #1
 8013ea0:	4658      	mov	r0, fp
 8013ea2:	b00b      	add	sp, #44	; 0x2c
 8013ea4:	ecbd 8b02 	vpop	{d8}
 8013ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eac:	a3a0      	add	r3, pc, #640	; (adr r3, 8014130 <__ieee754_rem_pio2+0x310>)
 8013eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb2:	f7ec fa19 	bl	80002e8 <__aeabi_dsub>
 8013eb6:	a3a0      	add	r3, pc, #640	; (adr r3, 8014138 <__ieee754_rem_pio2+0x318>)
 8013eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ebc:	4604      	mov	r4, r0
 8013ebe:	460d      	mov	r5, r1
 8013ec0:	f7ec fa12 	bl	80002e8 <__aeabi_dsub>
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	e9ca 2300 	strd	r2, r3, [sl]
 8013ecc:	4620      	mov	r0, r4
 8013ece:	4629      	mov	r1, r5
 8013ed0:	f7ec fa0a 	bl	80002e8 <__aeabi_dsub>
 8013ed4:	a398      	add	r3, pc, #608	; (adr r3, 8014138 <__ieee754_rem_pio2+0x318>)
 8013ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eda:	e7db      	b.n	8013e94 <__ieee754_rem_pio2+0x74>
 8013edc:	f7ec fa06 	bl	80002ec <__adddf3>
 8013ee0:	45b0      	cmp	r8, r6
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	460d      	mov	r5, r1
 8013ee6:	d016      	beq.n	8013f16 <__ieee754_rem_pio2+0xf6>
 8013ee8:	a38f      	add	r3, pc, #572	; (adr r3, 8014128 <__ieee754_rem_pio2+0x308>)
 8013eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eee:	f7ec f9fd 	bl	80002ec <__adddf3>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	e9ca 2300 	strd	r2, r3, [sl]
 8013efa:	4620      	mov	r0, r4
 8013efc:	4629      	mov	r1, r5
 8013efe:	f7ec f9f3 	bl	80002e8 <__aeabi_dsub>
 8013f02:	a389      	add	r3, pc, #548	; (adr r3, 8014128 <__ieee754_rem_pio2+0x308>)
 8013f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f08:	f7ec f9f0 	bl	80002ec <__adddf3>
 8013f0c:	f04f 3bff 	mov.w	fp, #4294967295
 8013f10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013f14:	e7c4      	b.n	8013ea0 <__ieee754_rem_pio2+0x80>
 8013f16:	a386      	add	r3, pc, #536	; (adr r3, 8014130 <__ieee754_rem_pio2+0x310>)
 8013f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1c:	f7ec f9e6 	bl	80002ec <__adddf3>
 8013f20:	a385      	add	r3, pc, #532	; (adr r3, 8014138 <__ieee754_rem_pio2+0x318>)
 8013f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f26:	4604      	mov	r4, r0
 8013f28:	460d      	mov	r5, r1
 8013f2a:	f7ec f9df 	bl	80002ec <__adddf3>
 8013f2e:	4602      	mov	r2, r0
 8013f30:	460b      	mov	r3, r1
 8013f32:	e9ca 2300 	strd	r2, r3, [sl]
 8013f36:	4620      	mov	r0, r4
 8013f38:	4629      	mov	r1, r5
 8013f3a:	f7ec f9d5 	bl	80002e8 <__aeabi_dsub>
 8013f3e:	a37e      	add	r3, pc, #504	; (adr r3, 8014138 <__ieee754_rem_pio2+0x318>)
 8013f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f44:	e7e0      	b.n	8013f08 <__ieee754_rem_pio2+0xe8>
 8013f46:	4b87      	ldr	r3, [pc, #540]	; (8014164 <__ieee754_rem_pio2+0x344>)
 8013f48:	4598      	cmp	r8, r3
 8013f4a:	f300 80d9 	bgt.w	8014100 <__ieee754_rem_pio2+0x2e0>
 8013f4e:	f001 fae3 	bl	8015518 <fabs>
 8013f52:	ec55 4b10 	vmov	r4, r5, d0
 8013f56:	ee10 0a10 	vmov	r0, s0
 8013f5a:	a379      	add	r3, pc, #484	; (adr r3, 8014140 <__ieee754_rem_pio2+0x320>)
 8013f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f60:	4629      	mov	r1, r5
 8013f62:	f7ec fb79 	bl	8000658 <__aeabi_dmul>
 8013f66:	4b80      	ldr	r3, [pc, #512]	; (8014168 <__ieee754_rem_pio2+0x348>)
 8013f68:	2200      	movs	r2, #0
 8013f6a:	f7ec f9bf 	bl	80002ec <__adddf3>
 8013f6e:	f7ec fe23 	bl	8000bb8 <__aeabi_d2iz>
 8013f72:	4683      	mov	fp, r0
 8013f74:	f7ec fb06 	bl	8000584 <__aeabi_i2d>
 8013f78:	4602      	mov	r2, r0
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	ec43 2b18 	vmov	d8, r2, r3
 8013f80:	a367      	add	r3, pc, #412	; (adr r3, 8014120 <__ieee754_rem_pio2+0x300>)
 8013f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f86:	f7ec fb67 	bl	8000658 <__aeabi_dmul>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	4620      	mov	r0, r4
 8013f90:	4629      	mov	r1, r5
 8013f92:	f7ec f9a9 	bl	80002e8 <__aeabi_dsub>
 8013f96:	a364      	add	r3, pc, #400	; (adr r3, 8014128 <__ieee754_rem_pio2+0x308>)
 8013f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9c:	4606      	mov	r6, r0
 8013f9e:	460f      	mov	r7, r1
 8013fa0:	ec51 0b18 	vmov	r0, r1, d8
 8013fa4:	f7ec fb58 	bl	8000658 <__aeabi_dmul>
 8013fa8:	f1bb 0f1f 	cmp.w	fp, #31
 8013fac:	4604      	mov	r4, r0
 8013fae:	460d      	mov	r5, r1
 8013fb0:	dc0d      	bgt.n	8013fce <__ieee754_rem_pio2+0x1ae>
 8013fb2:	4b6e      	ldr	r3, [pc, #440]	; (801416c <__ieee754_rem_pio2+0x34c>)
 8013fb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fbc:	4543      	cmp	r3, r8
 8013fbe:	d006      	beq.n	8013fce <__ieee754_rem_pio2+0x1ae>
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	462b      	mov	r3, r5
 8013fc4:	4630      	mov	r0, r6
 8013fc6:	4639      	mov	r1, r7
 8013fc8:	f7ec f98e 	bl	80002e8 <__aeabi_dsub>
 8013fcc:	e00f      	b.n	8013fee <__ieee754_rem_pio2+0x1ce>
 8013fce:	462b      	mov	r3, r5
 8013fd0:	4622      	mov	r2, r4
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	4639      	mov	r1, r7
 8013fd6:	f7ec f987 	bl	80002e8 <__aeabi_dsub>
 8013fda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013fde:	9303      	str	r3, [sp, #12]
 8013fe0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013fe4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013fe8:	f1b8 0f10 	cmp.w	r8, #16
 8013fec:	dc02      	bgt.n	8013ff4 <__ieee754_rem_pio2+0x1d4>
 8013fee:	e9ca 0100 	strd	r0, r1, [sl]
 8013ff2:	e039      	b.n	8014068 <__ieee754_rem_pio2+0x248>
 8013ff4:	a34e      	add	r3, pc, #312	; (adr r3, 8014130 <__ieee754_rem_pio2+0x310>)
 8013ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ffa:	ec51 0b18 	vmov	r0, r1, d8
 8013ffe:	f7ec fb2b 	bl	8000658 <__aeabi_dmul>
 8014002:	4604      	mov	r4, r0
 8014004:	460d      	mov	r5, r1
 8014006:	4602      	mov	r2, r0
 8014008:	460b      	mov	r3, r1
 801400a:	4630      	mov	r0, r6
 801400c:	4639      	mov	r1, r7
 801400e:	f7ec f96b 	bl	80002e8 <__aeabi_dsub>
 8014012:	4602      	mov	r2, r0
 8014014:	460b      	mov	r3, r1
 8014016:	4680      	mov	r8, r0
 8014018:	4689      	mov	r9, r1
 801401a:	4630      	mov	r0, r6
 801401c:	4639      	mov	r1, r7
 801401e:	f7ec f963 	bl	80002e8 <__aeabi_dsub>
 8014022:	4622      	mov	r2, r4
 8014024:	462b      	mov	r3, r5
 8014026:	f7ec f95f 	bl	80002e8 <__aeabi_dsub>
 801402a:	a343      	add	r3, pc, #268	; (adr r3, 8014138 <__ieee754_rem_pio2+0x318>)
 801402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014030:	4604      	mov	r4, r0
 8014032:	460d      	mov	r5, r1
 8014034:	ec51 0b18 	vmov	r0, r1, d8
 8014038:	f7ec fb0e 	bl	8000658 <__aeabi_dmul>
 801403c:	4622      	mov	r2, r4
 801403e:	462b      	mov	r3, r5
 8014040:	f7ec f952 	bl	80002e8 <__aeabi_dsub>
 8014044:	4602      	mov	r2, r0
 8014046:	460b      	mov	r3, r1
 8014048:	4604      	mov	r4, r0
 801404a:	460d      	mov	r5, r1
 801404c:	4640      	mov	r0, r8
 801404e:	4649      	mov	r1, r9
 8014050:	f7ec f94a 	bl	80002e8 <__aeabi_dsub>
 8014054:	9a03      	ldr	r2, [sp, #12]
 8014056:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801405a:	1ad3      	subs	r3, r2, r3
 801405c:	2b31      	cmp	r3, #49	; 0x31
 801405e:	dc24      	bgt.n	80140aa <__ieee754_rem_pio2+0x28a>
 8014060:	e9ca 0100 	strd	r0, r1, [sl]
 8014064:	4646      	mov	r6, r8
 8014066:	464f      	mov	r7, r9
 8014068:	e9da 8900 	ldrd	r8, r9, [sl]
 801406c:	4630      	mov	r0, r6
 801406e:	4642      	mov	r2, r8
 8014070:	464b      	mov	r3, r9
 8014072:	4639      	mov	r1, r7
 8014074:	f7ec f938 	bl	80002e8 <__aeabi_dsub>
 8014078:	462b      	mov	r3, r5
 801407a:	4622      	mov	r2, r4
 801407c:	f7ec f934 	bl	80002e8 <__aeabi_dsub>
 8014080:	9b02      	ldr	r3, [sp, #8]
 8014082:	2b00      	cmp	r3, #0
 8014084:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014088:	f6bf af0a 	bge.w	8013ea0 <__ieee754_rem_pio2+0x80>
 801408c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014090:	f8ca 3004 	str.w	r3, [sl, #4]
 8014094:	f8ca 8000 	str.w	r8, [sl]
 8014098:	f8ca 0008 	str.w	r0, [sl, #8]
 801409c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80140a4:	f1cb 0b00 	rsb	fp, fp, #0
 80140a8:	e6fa      	b.n	8013ea0 <__ieee754_rem_pio2+0x80>
 80140aa:	a327      	add	r3, pc, #156	; (adr r3, 8014148 <__ieee754_rem_pio2+0x328>)
 80140ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b0:	ec51 0b18 	vmov	r0, r1, d8
 80140b4:	f7ec fad0 	bl	8000658 <__aeabi_dmul>
 80140b8:	4604      	mov	r4, r0
 80140ba:	460d      	mov	r5, r1
 80140bc:	4602      	mov	r2, r0
 80140be:	460b      	mov	r3, r1
 80140c0:	4640      	mov	r0, r8
 80140c2:	4649      	mov	r1, r9
 80140c4:	f7ec f910 	bl	80002e8 <__aeabi_dsub>
 80140c8:	4602      	mov	r2, r0
 80140ca:	460b      	mov	r3, r1
 80140cc:	4606      	mov	r6, r0
 80140ce:	460f      	mov	r7, r1
 80140d0:	4640      	mov	r0, r8
 80140d2:	4649      	mov	r1, r9
 80140d4:	f7ec f908 	bl	80002e8 <__aeabi_dsub>
 80140d8:	4622      	mov	r2, r4
 80140da:	462b      	mov	r3, r5
 80140dc:	f7ec f904 	bl	80002e8 <__aeabi_dsub>
 80140e0:	a31b      	add	r3, pc, #108	; (adr r3, 8014150 <__ieee754_rem_pio2+0x330>)
 80140e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e6:	4604      	mov	r4, r0
 80140e8:	460d      	mov	r5, r1
 80140ea:	ec51 0b18 	vmov	r0, r1, d8
 80140ee:	f7ec fab3 	bl	8000658 <__aeabi_dmul>
 80140f2:	4622      	mov	r2, r4
 80140f4:	462b      	mov	r3, r5
 80140f6:	f7ec f8f7 	bl	80002e8 <__aeabi_dsub>
 80140fa:	4604      	mov	r4, r0
 80140fc:	460d      	mov	r5, r1
 80140fe:	e75f      	b.n	8013fc0 <__ieee754_rem_pio2+0x1a0>
 8014100:	4b1b      	ldr	r3, [pc, #108]	; (8014170 <__ieee754_rem_pio2+0x350>)
 8014102:	4598      	cmp	r8, r3
 8014104:	dd36      	ble.n	8014174 <__ieee754_rem_pio2+0x354>
 8014106:	ee10 2a10 	vmov	r2, s0
 801410a:	462b      	mov	r3, r5
 801410c:	4620      	mov	r0, r4
 801410e:	4629      	mov	r1, r5
 8014110:	f7ec f8ea 	bl	80002e8 <__aeabi_dsub>
 8014114:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014118:	e9ca 0100 	strd	r0, r1, [sl]
 801411c:	e694      	b.n	8013e48 <__ieee754_rem_pio2+0x28>
 801411e:	bf00      	nop
 8014120:	54400000 	.word	0x54400000
 8014124:	3ff921fb 	.word	0x3ff921fb
 8014128:	1a626331 	.word	0x1a626331
 801412c:	3dd0b461 	.word	0x3dd0b461
 8014130:	1a600000 	.word	0x1a600000
 8014134:	3dd0b461 	.word	0x3dd0b461
 8014138:	2e037073 	.word	0x2e037073
 801413c:	3ba3198a 	.word	0x3ba3198a
 8014140:	6dc9c883 	.word	0x6dc9c883
 8014144:	3fe45f30 	.word	0x3fe45f30
 8014148:	2e000000 	.word	0x2e000000
 801414c:	3ba3198a 	.word	0x3ba3198a
 8014150:	252049c1 	.word	0x252049c1
 8014154:	397b839a 	.word	0x397b839a
 8014158:	3fe921fb 	.word	0x3fe921fb
 801415c:	4002d97b 	.word	0x4002d97b
 8014160:	3ff921fb 	.word	0x3ff921fb
 8014164:	413921fb 	.word	0x413921fb
 8014168:	3fe00000 	.word	0x3fe00000
 801416c:	08039d88 	.word	0x08039d88
 8014170:	7fefffff 	.word	0x7fefffff
 8014174:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014178:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801417c:	ee10 0a10 	vmov	r0, s0
 8014180:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8014184:	ee10 6a10 	vmov	r6, s0
 8014188:	460f      	mov	r7, r1
 801418a:	f7ec fd15 	bl	8000bb8 <__aeabi_d2iz>
 801418e:	f7ec f9f9 	bl	8000584 <__aeabi_i2d>
 8014192:	4602      	mov	r2, r0
 8014194:	460b      	mov	r3, r1
 8014196:	4630      	mov	r0, r6
 8014198:	4639      	mov	r1, r7
 801419a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801419e:	f7ec f8a3 	bl	80002e8 <__aeabi_dsub>
 80141a2:	4b22      	ldr	r3, [pc, #136]	; (801422c <__ieee754_rem_pio2+0x40c>)
 80141a4:	2200      	movs	r2, #0
 80141a6:	f7ec fa57 	bl	8000658 <__aeabi_dmul>
 80141aa:	460f      	mov	r7, r1
 80141ac:	4606      	mov	r6, r0
 80141ae:	f7ec fd03 	bl	8000bb8 <__aeabi_d2iz>
 80141b2:	f7ec f9e7 	bl	8000584 <__aeabi_i2d>
 80141b6:	4602      	mov	r2, r0
 80141b8:	460b      	mov	r3, r1
 80141ba:	4630      	mov	r0, r6
 80141bc:	4639      	mov	r1, r7
 80141be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80141c2:	f7ec f891 	bl	80002e8 <__aeabi_dsub>
 80141c6:	4b19      	ldr	r3, [pc, #100]	; (801422c <__ieee754_rem_pio2+0x40c>)
 80141c8:	2200      	movs	r2, #0
 80141ca:	f7ec fa45 	bl	8000658 <__aeabi_dmul>
 80141ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80141d2:	ad04      	add	r5, sp, #16
 80141d4:	f04f 0803 	mov.w	r8, #3
 80141d8:	46a9      	mov	r9, r5
 80141da:	2600      	movs	r6, #0
 80141dc:	2700      	movs	r7, #0
 80141de:	4632      	mov	r2, r6
 80141e0:	463b      	mov	r3, r7
 80141e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80141e6:	46c3      	mov	fp, r8
 80141e8:	3d08      	subs	r5, #8
 80141ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80141ee:	f7ec fc9b 	bl	8000b28 <__aeabi_dcmpeq>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d1f3      	bne.n	80141de <__ieee754_rem_pio2+0x3be>
 80141f6:	4b0e      	ldr	r3, [pc, #56]	; (8014230 <__ieee754_rem_pio2+0x410>)
 80141f8:	9301      	str	r3, [sp, #4]
 80141fa:	2302      	movs	r3, #2
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	4622      	mov	r2, r4
 8014200:	465b      	mov	r3, fp
 8014202:	4651      	mov	r1, sl
 8014204:	4648      	mov	r0, r9
 8014206:	f000 fbb3 	bl	8014970 <__kernel_rem_pio2>
 801420a:	9b02      	ldr	r3, [sp, #8]
 801420c:	2b00      	cmp	r3, #0
 801420e:	4683      	mov	fp, r0
 8014210:	f6bf ae46 	bge.w	8013ea0 <__ieee754_rem_pio2+0x80>
 8014214:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014218:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801421c:	f8ca 3004 	str.w	r3, [sl, #4]
 8014220:	f8da 300c 	ldr.w	r3, [sl, #12]
 8014224:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014228:	e73a      	b.n	80140a0 <__ieee754_rem_pio2+0x280>
 801422a:	bf00      	nop
 801422c:	41700000 	.word	0x41700000
 8014230:	08039e08 	.word	0x08039e08

08014234 <__ieee754_sqrt>:
 8014234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014238:	ec55 4b10 	vmov	r4, r5, d0
 801423c:	4e56      	ldr	r6, [pc, #344]	; (8014398 <__ieee754_sqrt+0x164>)
 801423e:	43ae      	bics	r6, r5
 8014240:	ee10 0a10 	vmov	r0, s0
 8014244:	ee10 3a10 	vmov	r3, s0
 8014248:	4629      	mov	r1, r5
 801424a:	462a      	mov	r2, r5
 801424c:	d110      	bne.n	8014270 <__ieee754_sqrt+0x3c>
 801424e:	ee10 2a10 	vmov	r2, s0
 8014252:	462b      	mov	r3, r5
 8014254:	f7ec fa00 	bl	8000658 <__aeabi_dmul>
 8014258:	4602      	mov	r2, r0
 801425a:	460b      	mov	r3, r1
 801425c:	4620      	mov	r0, r4
 801425e:	4629      	mov	r1, r5
 8014260:	f7ec f844 	bl	80002ec <__adddf3>
 8014264:	4604      	mov	r4, r0
 8014266:	460d      	mov	r5, r1
 8014268:	ec45 4b10 	vmov	d0, r4, r5
 801426c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014270:	2d00      	cmp	r5, #0
 8014272:	dc10      	bgt.n	8014296 <__ieee754_sqrt+0x62>
 8014274:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014278:	4330      	orrs	r0, r6
 801427a:	d0f5      	beq.n	8014268 <__ieee754_sqrt+0x34>
 801427c:	b15d      	cbz	r5, 8014296 <__ieee754_sqrt+0x62>
 801427e:	ee10 2a10 	vmov	r2, s0
 8014282:	462b      	mov	r3, r5
 8014284:	ee10 0a10 	vmov	r0, s0
 8014288:	f7ec f82e 	bl	80002e8 <__aeabi_dsub>
 801428c:	4602      	mov	r2, r0
 801428e:	460b      	mov	r3, r1
 8014290:	f7ec fb0c 	bl	80008ac <__aeabi_ddiv>
 8014294:	e7e6      	b.n	8014264 <__ieee754_sqrt+0x30>
 8014296:	1509      	asrs	r1, r1, #20
 8014298:	d076      	beq.n	8014388 <__ieee754_sqrt+0x154>
 801429a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801429e:	07ce      	lsls	r6, r1, #31
 80142a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80142a4:	bf5e      	ittt	pl
 80142a6:	0fda      	lsrpl	r2, r3, #31
 80142a8:	005b      	lslpl	r3, r3, #1
 80142aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80142ae:	0fda      	lsrs	r2, r3, #31
 80142b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80142b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80142b8:	2000      	movs	r0, #0
 80142ba:	106d      	asrs	r5, r5, #1
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	f04f 0e16 	mov.w	lr, #22
 80142c2:	4684      	mov	ip, r0
 80142c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80142c8:	eb0c 0401 	add.w	r4, ip, r1
 80142cc:	4294      	cmp	r4, r2
 80142ce:	bfde      	ittt	le
 80142d0:	1b12      	suble	r2, r2, r4
 80142d2:	eb04 0c01 	addle.w	ip, r4, r1
 80142d6:	1840      	addle	r0, r0, r1
 80142d8:	0052      	lsls	r2, r2, #1
 80142da:	f1be 0e01 	subs.w	lr, lr, #1
 80142de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80142e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80142e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80142ea:	d1ed      	bne.n	80142c8 <__ieee754_sqrt+0x94>
 80142ec:	4671      	mov	r1, lr
 80142ee:	2720      	movs	r7, #32
 80142f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80142f4:	4562      	cmp	r2, ip
 80142f6:	eb04 060e 	add.w	r6, r4, lr
 80142fa:	dc02      	bgt.n	8014302 <__ieee754_sqrt+0xce>
 80142fc:	d113      	bne.n	8014326 <__ieee754_sqrt+0xf2>
 80142fe:	429e      	cmp	r6, r3
 8014300:	d811      	bhi.n	8014326 <__ieee754_sqrt+0xf2>
 8014302:	2e00      	cmp	r6, #0
 8014304:	eb06 0e04 	add.w	lr, r6, r4
 8014308:	da43      	bge.n	8014392 <__ieee754_sqrt+0x15e>
 801430a:	f1be 0f00 	cmp.w	lr, #0
 801430e:	db40      	blt.n	8014392 <__ieee754_sqrt+0x15e>
 8014310:	f10c 0801 	add.w	r8, ip, #1
 8014314:	eba2 020c 	sub.w	r2, r2, ip
 8014318:	429e      	cmp	r6, r3
 801431a:	bf88      	it	hi
 801431c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014320:	1b9b      	subs	r3, r3, r6
 8014322:	4421      	add	r1, r4
 8014324:	46c4      	mov	ip, r8
 8014326:	0052      	lsls	r2, r2, #1
 8014328:	3f01      	subs	r7, #1
 801432a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801432e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014336:	d1dd      	bne.n	80142f4 <__ieee754_sqrt+0xc0>
 8014338:	4313      	orrs	r3, r2
 801433a:	d006      	beq.n	801434a <__ieee754_sqrt+0x116>
 801433c:	1c4c      	adds	r4, r1, #1
 801433e:	bf13      	iteet	ne
 8014340:	3101      	addne	r1, #1
 8014342:	3001      	addeq	r0, #1
 8014344:	4639      	moveq	r1, r7
 8014346:	f021 0101 	bicne.w	r1, r1, #1
 801434a:	1043      	asrs	r3, r0, #1
 801434c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014350:	0849      	lsrs	r1, r1, #1
 8014352:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014356:	07c2      	lsls	r2, r0, #31
 8014358:	bf48      	it	mi
 801435a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801435e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014362:	460c      	mov	r4, r1
 8014364:	463d      	mov	r5, r7
 8014366:	e77f      	b.n	8014268 <__ieee754_sqrt+0x34>
 8014368:	0ada      	lsrs	r2, r3, #11
 801436a:	3815      	subs	r0, #21
 801436c:	055b      	lsls	r3, r3, #21
 801436e:	2a00      	cmp	r2, #0
 8014370:	d0fa      	beq.n	8014368 <__ieee754_sqrt+0x134>
 8014372:	02d7      	lsls	r7, r2, #11
 8014374:	d50a      	bpl.n	801438c <__ieee754_sqrt+0x158>
 8014376:	f1c1 0420 	rsb	r4, r1, #32
 801437a:	fa23 f404 	lsr.w	r4, r3, r4
 801437e:	1e4d      	subs	r5, r1, #1
 8014380:	408b      	lsls	r3, r1
 8014382:	4322      	orrs	r2, r4
 8014384:	1b41      	subs	r1, r0, r5
 8014386:	e788      	b.n	801429a <__ieee754_sqrt+0x66>
 8014388:	4608      	mov	r0, r1
 801438a:	e7f0      	b.n	801436e <__ieee754_sqrt+0x13a>
 801438c:	0052      	lsls	r2, r2, #1
 801438e:	3101      	adds	r1, #1
 8014390:	e7ef      	b.n	8014372 <__ieee754_sqrt+0x13e>
 8014392:	46e0      	mov	r8, ip
 8014394:	e7be      	b.n	8014314 <__ieee754_sqrt+0xe0>
 8014396:	bf00      	nop
 8014398:	7ff00000 	.word	0x7ff00000

0801439c <__ieee754_expf>:
 801439c:	ee10 2a10 	vmov	r2, s0
 80143a0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80143a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80143a8:	d902      	bls.n	80143b0 <__ieee754_expf+0x14>
 80143aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80143ae:	4770      	bx	lr
 80143b0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80143b4:	d106      	bne.n	80143c4 <__ieee754_expf+0x28>
 80143b6:	eddf 7a51 	vldr	s15, [pc, #324]	; 80144fc <__ieee754_expf+0x160>
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	bf18      	it	ne
 80143be:	eeb0 0a67 	vmovne.f32	s0, s15
 80143c2:	4770      	bx	lr
 80143c4:	484e      	ldr	r0, [pc, #312]	; (8014500 <__ieee754_expf+0x164>)
 80143c6:	4282      	cmp	r2, r0
 80143c8:	dd04      	ble.n	80143d4 <__ieee754_expf+0x38>
 80143ca:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8014504 <__ieee754_expf+0x168>
 80143ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80143d2:	4770      	bx	lr
 80143d4:	2a00      	cmp	r2, #0
 80143d6:	da03      	bge.n	80143e0 <__ieee754_expf+0x44>
 80143d8:	4a4b      	ldr	r2, [pc, #300]	; (8014508 <__ieee754_expf+0x16c>)
 80143da:	4291      	cmp	r1, r2
 80143dc:	f200 808a 	bhi.w	80144f4 <__ieee754_expf+0x158>
 80143e0:	4a4a      	ldr	r2, [pc, #296]	; (801450c <__ieee754_expf+0x170>)
 80143e2:	4291      	cmp	r1, r2
 80143e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80143e8:	d954      	bls.n	8014494 <__ieee754_expf+0xf8>
 80143ea:	4a49      	ldr	r2, [pc, #292]	; (8014510 <__ieee754_expf+0x174>)
 80143ec:	4291      	cmp	r1, r2
 80143ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80143f2:	d836      	bhi.n	8014462 <__ieee754_expf+0xc6>
 80143f4:	4947      	ldr	r1, [pc, #284]	; (8014514 <__ieee754_expf+0x178>)
 80143f6:	4411      	add	r1, r2
 80143f8:	ed91 7a00 	vldr	s14, [r1]
 80143fc:	4946      	ldr	r1, [pc, #280]	; (8014518 <__ieee754_expf+0x17c>)
 80143fe:	440a      	add	r2, r1
 8014400:	edd2 7a00 	vldr	s15, [r2]
 8014404:	ee30 7a47 	vsub.f32	s14, s0, s14
 8014408:	f1c3 0201 	rsb	r2, r3, #1
 801440c:	1ad2      	subs	r2, r2, r3
 801440e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014412:	ee60 6a00 	vmul.f32	s13, s0, s0
 8014416:	eddf 5a41 	vldr	s11, [pc, #260]	; 801451c <__ieee754_expf+0x180>
 801441a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8014520 <__ieee754_expf+0x184>
 801441e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8014422:	eddf 5a40 	vldr	s11, [pc, #256]	; 8014524 <__ieee754_expf+0x188>
 8014426:	eee5 5a26 	vfma.f32	s11, s10, s13
 801442a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8014528 <__ieee754_expf+0x18c>
 801442e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8014432:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801452c <__ieee754_expf+0x190>
 8014436:	eee5 5a26 	vfma.f32	s11, s10, s13
 801443a:	eeb0 5a40 	vmov.f32	s10, s0
 801443e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8014442:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8014446:	eef0 6a45 	vmov.f32	s13, s10
 801444a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801444e:	bb92      	cbnz	r2, 80144b6 <__ieee754_expf+0x11a>
 8014450:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8014454:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8014458:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801445c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8014460:	4770      	bx	lr
 8014462:	4b33      	ldr	r3, [pc, #204]	; (8014530 <__ieee754_expf+0x194>)
 8014464:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014534 <__ieee754_expf+0x198>
 8014468:	4413      	add	r3, r2
 801446a:	edd3 7a00 	vldr	s15, [r3]
 801446e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014472:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014538 <__ieee754_expf+0x19c>
 8014476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801447a:	ee17 2a90 	vmov	r2, s15
 801447e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014482:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014486:	eeb0 7a40 	vmov.f32	s14, s0
 801448a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801453c <__ieee754_expf+0x1a0>
 801448e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014492:	e7bc      	b.n	801440e <__ieee754_expf+0x72>
 8014494:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8014498:	d20b      	bcs.n	80144b2 <__ieee754_expf+0x116>
 801449a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8014504 <__ieee754_expf+0x168>
 801449e:	ee70 6a26 	vadd.f32	s13, s0, s13
 80144a2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80144a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144aa:	dd02      	ble.n	80144b2 <__ieee754_expf+0x116>
 80144ac:	ee30 0a06 	vadd.f32	s0, s0, s12
 80144b0:	4770      	bx	lr
 80144b2:	2200      	movs	r2, #0
 80144b4:	e7ad      	b.n	8014412 <__ieee754_expf+0x76>
 80144b6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80144ba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80144be:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80144c2:	bfb8      	it	lt
 80144c4:	3264      	addlt	r2, #100	; 0x64
 80144c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80144ca:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80144ce:	ee76 7a40 	vsub.f32	s15, s12, s0
 80144d2:	ee17 3a90 	vmov	r3, s15
 80144d6:	bfab      	itete	ge
 80144d8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80144dc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80144e0:	ee00 3a10 	vmovge	s0, r3
 80144e4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8014540 <__ieee754_expf+0x1a4>
 80144e8:	bfbc      	itt	lt
 80144ea:	ee00 3a10 	vmovlt	s0, r3
 80144ee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80144f2:	4770      	bx	lr
 80144f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80144fc <__ieee754_expf+0x160>
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop
 80144fc:	00000000 	.word	0x00000000
 8014500:	42b17217 	.word	0x42b17217
 8014504:	7149f2ca 	.word	0x7149f2ca
 8014508:	42cff1b5 	.word	0x42cff1b5
 801450c:	3eb17218 	.word	0x3eb17218
 8014510:	3f851591 	.word	0x3f851591
 8014514:	08039f18 	.word	0x08039f18
 8014518:	08039f20 	.word	0x08039f20
 801451c:	3331bb4c 	.word	0x3331bb4c
 8014520:	b5ddea0e 	.word	0xb5ddea0e
 8014524:	388ab355 	.word	0x388ab355
 8014528:	bb360b61 	.word	0xbb360b61
 801452c:	3e2aaaab 	.word	0x3e2aaaab
 8014530:	08039f10 	.word	0x08039f10
 8014534:	3fb8aa3b 	.word	0x3fb8aa3b
 8014538:	3f317180 	.word	0x3f317180
 801453c:	3717f7d1 	.word	0x3717f7d1
 8014540:	0d800000 	.word	0x0d800000

08014544 <__ieee754_logf>:
 8014544:	ee10 3a10 	vmov	r3, s0
 8014548:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801454c:	d106      	bne.n	801455c <__ieee754_logf+0x18>
 801454e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80146e4 <__ieee754_logf+0x1a0>
 8014552:	eddf 7a65 	vldr	s15, [pc, #404]	; 80146e8 <__ieee754_logf+0x1a4>
 8014556:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801455a:	4770      	bx	lr
 801455c:	2b00      	cmp	r3, #0
 801455e:	da02      	bge.n	8014566 <__ieee754_logf+0x22>
 8014560:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014564:	e7f5      	b.n	8014552 <__ieee754_logf+0xe>
 8014566:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801456a:	db02      	blt.n	8014572 <__ieee754_logf+0x2e>
 801456c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014570:	4770      	bx	lr
 8014572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014576:	bfb8      	it	lt
 8014578:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80146ec <__ieee754_logf+0x1a8>
 801457c:	485c      	ldr	r0, [pc, #368]	; (80146f0 <__ieee754_logf+0x1ac>)
 801457e:	bfbe      	ittt	lt
 8014580:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014584:	f06f 0118 	mvnlt.w	r1, #24
 8014588:	ee17 3a90 	vmovlt	r3, s15
 801458c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8014590:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014594:	4418      	add	r0, r3
 8014596:	bfa8      	it	ge
 8014598:	2100      	movge	r1, #0
 801459a:	3a7f      	subs	r2, #127	; 0x7f
 801459c:	440a      	add	r2, r1
 801459e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80145a2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80145a6:	4319      	orrs	r1, r3
 80145a8:	ee00 1a10 	vmov	s0, r1
 80145ac:	4951      	ldr	r1, [pc, #324]	; (80146f4 <__ieee754_logf+0x1b0>)
 80145ae:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80145b2:	f103 000f 	add.w	r0, r3, #15
 80145b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80145ba:	4001      	ands	r1, r0
 80145bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80145c0:	bb89      	cbnz	r1, 8014626 <__ieee754_logf+0xe2>
 80145c2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80145c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ca:	d10f      	bne.n	80145ec <__ieee754_logf+0xa8>
 80145cc:	2a00      	cmp	r2, #0
 80145ce:	f000 8085 	beq.w	80146dc <__ieee754_logf+0x198>
 80145d2:	ee07 2a90 	vmov	s15, r2
 80145d6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80146f8 <__ieee754_logf+0x1b4>
 80145da:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80146fc <__ieee754_logf+0x1b8>
 80145de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80145e6:	eea7 0a87 	vfma.f32	s0, s15, s14
 80145ea:	4770      	bx	lr
 80145ec:	eddf 6a44 	vldr	s13, [pc, #272]	; 8014700 <__ieee754_logf+0x1bc>
 80145f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80145f4:	eee0 7a66 	vfms.f32	s15, s0, s13
 80145f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80145fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014600:	b912      	cbnz	r2, 8014608 <__ieee754_logf+0xc4>
 8014602:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014606:	4770      	bx	lr
 8014608:	ee07 2a90 	vmov	s15, r2
 801460c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80146f8 <__ieee754_logf+0x1b4>
 8014610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014614:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8014618:	ee37 0a40 	vsub.f32	s0, s14, s0
 801461c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80146fc <__ieee754_logf+0x1b8>
 8014620:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8014624:	4770      	bx	lr
 8014626:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801462a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801462e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014704 <__ieee754_logf+0x1c0>
 8014632:	eddf 4a35 	vldr	s9, [pc, #212]	; 8014708 <__ieee754_logf+0x1c4>
 8014636:	4935      	ldr	r1, [pc, #212]	; (801470c <__ieee754_logf+0x1c8>)
 8014638:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801463c:	4419      	add	r1, r3
 801463e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8014642:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8014646:	430b      	orrs	r3, r1
 8014648:	2b00      	cmp	r3, #0
 801464a:	ee07 2a90 	vmov	s15, r2
 801464e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8014652:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014656:	ee25 7a05 	vmul.f32	s14, s10, s10
 801465a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8014710 <__ieee754_logf+0x1cc>
 801465e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014662:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8014714 <__ieee754_logf+0x1d0>
 8014666:	eee7 5a87 	vfma.f32	s11, s15, s14
 801466a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014718 <__ieee754_logf+0x1d4>
 801466e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8014672:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801471c <__ieee754_logf+0x1d8>
 8014676:	eee7 4a87 	vfma.f32	s9, s15, s14
 801467a:	eddf 7a29 	vldr	s15, [pc, #164]	; 8014720 <__ieee754_logf+0x1dc>
 801467e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8014682:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014686:	eee5 7a87 	vfma.f32	s15, s11, s14
 801468a:	dd1c      	ble.n	80146c6 <__ieee754_logf+0x182>
 801468c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014690:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014694:	ee27 7a00 	vmul.f32	s14, s14, s0
 8014698:	ee77 7a87 	vadd.f32	s15, s15, s14
 801469c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80146a0:	b922      	cbnz	r2, 80146ac <__ieee754_logf+0x168>
 80146a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80146aa:	4770      	bx	lr
 80146ac:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80146f8 <__ieee754_logf+0x1b4>
 80146b0:	eee6 7a86 	vfma.f32	s15, s13, s12
 80146b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80146bc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80146fc <__ieee754_logf+0x1b8>
 80146c0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80146c4:	4770      	bx	lr
 80146c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80146ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80146ce:	2a00      	cmp	r2, #0
 80146d0:	d0e9      	beq.n	80146a6 <__ieee754_logf+0x162>
 80146d2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80146f8 <__ieee754_logf+0x1b4>
 80146d6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80146da:	e7ed      	b.n	80146b8 <__ieee754_logf+0x174>
 80146dc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80146e8 <__ieee754_logf+0x1a4>
 80146e0:	4770      	bx	lr
 80146e2:	bf00      	nop
 80146e4:	cc000000 	.word	0xcc000000
 80146e8:	00000000 	.word	0x00000000
 80146ec:	4c000000 	.word	0x4c000000
 80146f0:	004afb20 	.word	0x004afb20
 80146f4:	007ffff0 	.word	0x007ffff0
 80146f8:	3717f7d1 	.word	0x3717f7d1
 80146fc:	3f317180 	.word	0x3f317180
 8014700:	3eaaaaab 	.word	0x3eaaaaab
 8014704:	3e1cd04f 	.word	0x3e1cd04f
 8014708:	3e178897 	.word	0x3e178897
 801470c:	ffcf5c30 	.word	0xffcf5c30
 8014710:	3e638e29 	.word	0x3e638e29
 8014714:	3ecccccd 	.word	0x3ecccccd
 8014718:	3e3a3325 	.word	0x3e3a3325
 801471c:	3e924925 	.word	0x3e924925
 8014720:	3f2aaaab 	.word	0x3f2aaaab

08014724 <__ieee754_log10f>:
 8014724:	b508      	push	{r3, lr}
 8014726:	ee10 2a10 	vmov	r2, s0
 801472a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801472e:	ed2d 8b02 	vpush	{d8}
 8014732:	d108      	bne.n	8014746 <__ieee754_log10f+0x22>
 8014734:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80147bc <__ieee754_log10f+0x98>
 8014738:	eddf 7a21 	vldr	s15, [pc, #132]	; 80147c0 <__ieee754_log10f+0x9c>
 801473c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014740:	ecbd 8b02 	vpop	{d8}
 8014744:	bd08      	pop	{r3, pc}
 8014746:	2a00      	cmp	r2, #0
 8014748:	da02      	bge.n	8014750 <__ieee754_log10f+0x2c>
 801474a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801474e:	e7f3      	b.n	8014738 <__ieee754_log10f+0x14>
 8014750:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014754:	db02      	blt.n	801475c <__ieee754_log10f+0x38>
 8014756:	ee30 0a00 	vadd.f32	s0, s0, s0
 801475a:	e7f1      	b.n	8014740 <__ieee754_log10f+0x1c>
 801475c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8014760:	bfbf      	itttt	lt
 8014762:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80147c4 <__ieee754_log10f+0xa0>
 8014766:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801476a:	f06f 0118 	mvnlt.w	r1, #24
 801476e:	ee17 2a90 	vmovlt	r2, s15
 8014772:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8014776:	bfa8      	it	ge
 8014778:	2100      	movge	r1, #0
 801477a:	3b7f      	subs	r3, #127	; 0x7f
 801477c:	440b      	add	r3, r1
 801477e:	0fd9      	lsrs	r1, r3, #31
 8014780:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8014784:	ee07 3a90 	vmov	s15, r3
 8014788:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801478c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8014790:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014794:	ee00 3a10 	vmov	s0, r3
 8014798:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801479c:	f7ff fed2 	bl	8014544 <__ieee754_logf>
 80147a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80147c8 <__ieee754_log10f+0xa4>
 80147a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80147a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80147cc <__ieee754_log10f+0xa8>
 80147ac:	eea8 0a27 	vfma.f32	s0, s16, s15
 80147b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80147d0 <__ieee754_log10f+0xac>
 80147b4:	eea8 0a27 	vfma.f32	s0, s16, s15
 80147b8:	e7c2      	b.n	8014740 <__ieee754_log10f+0x1c>
 80147ba:	bf00      	nop
 80147bc:	cc000000 	.word	0xcc000000
 80147c0:	00000000 	.word	0x00000000
 80147c4:	4c000000 	.word	0x4c000000
 80147c8:	3ede5bd9 	.word	0x3ede5bd9
 80147cc:	355427db 	.word	0x355427db
 80147d0:	3e9a2080 	.word	0x3e9a2080

080147d4 <__ieee754_sqrtf>:
 80147d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80147d8:	4770      	bx	lr
 80147da:	0000      	movs	r0, r0
 80147dc:	0000      	movs	r0, r0
	...

080147e0 <__kernel_cos>:
 80147e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e4:	ec57 6b10 	vmov	r6, r7, d0
 80147e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80147ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80147f0:	ed8d 1b00 	vstr	d1, [sp]
 80147f4:	da07      	bge.n	8014806 <__kernel_cos+0x26>
 80147f6:	ee10 0a10 	vmov	r0, s0
 80147fa:	4639      	mov	r1, r7
 80147fc:	f7ec f9dc 	bl	8000bb8 <__aeabi_d2iz>
 8014800:	2800      	cmp	r0, #0
 8014802:	f000 8088 	beq.w	8014916 <__kernel_cos+0x136>
 8014806:	4632      	mov	r2, r6
 8014808:	463b      	mov	r3, r7
 801480a:	4630      	mov	r0, r6
 801480c:	4639      	mov	r1, r7
 801480e:	f7eb ff23 	bl	8000658 <__aeabi_dmul>
 8014812:	4b51      	ldr	r3, [pc, #324]	; (8014958 <__kernel_cos+0x178>)
 8014814:	2200      	movs	r2, #0
 8014816:	4604      	mov	r4, r0
 8014818:	460d      	mov	r5, r1
 801481a:	f7eb ff1d 	bl	8000658 <__aeabi_dmul>
 801481e:	a340      	add	r3, pc, #256	; (adr r3, 8014920 <__kernel_cos+0x140>)
 8014820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014824:	4682      	mov	sl, r0
 8014826:	468b      	mov	fp, r1
 8014828:	4620      	mov	r0, r4
 801482a:	4629      	mov	r1, r5
 801482c:	f7eb ff14 	bl	8000658 <__aeabi_dmul>
 8014830:	a33d      	add	r3, pc, #244	; (adr r3, 8014928 <__kernel_cos+0x148>)
 8014832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014836:	f7eb fd59 	bl	80002ec <__adddf3>
 801483a:	4622      	mov	r2, r4
 801483c:	462b      	mov	r3, r5
 801483e:	f7eb ff0b 	bl	8000658 <__aeabi_dmul>
 8014842:	a33b      	add	r3, pc, #236	; (adr r3, 8014930 <__kernel_cos+0x150>)
 8014844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014848:	f7eb fd4e 	bl	80002e8 <__aeabi_dsub>
 801484c:	4622      	mov	r2, r4
 801484e:	462b      	mov	r3, r5
 8014850:	f7eb ff02 	bl	8000658 <__aeabi_dmul>
 8014854:	a338      	add	r3, pc, #224	; (adr r3, 8014938 <__kernel_cos+0x158>)
 8014856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485a:	f7eb fd47 	bl	80002ec <__adddf3>
 801485e:	4622      	mov	r2, r4
 8014860:	462b      	mov	r3, r5
 8014862:	f7eb fef9 	bl	8000658 <__aeabi_dmul>
 8014866:	a336      	add	r3, pc, #216	; (adr r3, 8014940 <__kernel_cos+0x160>)
 8014868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486c:	f7eb fd3c 	bl	80002e8 <__aeabi_dsub>
 8014870:	4622      	mov	r2, r4
 8014872:	462b      	mov	r3, r5
 8014874:	f7eb fef0 	bl	8000658 <__aeabi_dmul>
 8014878:	a333      	add	r3, pc, #204	; (adr r3, 8014948 <__kernel_cos+0x168>)
 801487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487e:	f7eb fd35 	bl	80002ec <__adddf3>
 8014882:	4622      	mov	r2, r4
 8014884:	462b      	mov	r3, r5
 8014886:	f7eb fee7 	bl	8000658 <__aeabi_dmul>
 801488a:	4622      	mov	r2, r4
 801488c:	462b      	mov	r3, r5
 801488e:	f7eb fee3 	bl	8000658 <__aeabi_dmul>
 8014892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014896:	4604      	mov	r4, r0
 8014898:	460d      	mov	r5, r1
 801489a:	4630      	mov	r0, r6
 801489c:	4639      	mov	r1, r7
 801489e:	f7eb fedb 	bl	8000658 <__aeabi_dmul>
 80148a2:	460b      	mov	r3, r1
 80148a4:	4602      	mov	r2, r0
 80148a6:	4629      	mov	r1, r5
 80148a8:	4620      	mov	r0, r4
 80148aa:	f7eb fd1d 	bl	80002e8 <__aeabi_dsub>
 80148ae:	4b2b      	ldr	r3, [pc, #172]	; (801495c <__kernel_cos+0x17c>)
 80148b0:	4598      	cmp	r8, r3
 80148b2:	4606      	mov	r6, r0
 80148b4:	460f      	mov	r7, r1
 80148b6:	dc10      	bgt.n	80148da <__kernel_cos+0xfa>
 80148b8:	4602      	mov	r2, r0
 80148ba:	460b      	mov	r3, r1
 80148bc:	4650      	mov	r0, sl
 80148be:	4659      	mov	r1, fp
 80148c0:	f7eb fd12 	bl	80002e8 <__aeabi_dsub>
 80148c4:	460b      	mov	r3, r1
 80148c6:	4926      	ldr	r1, [pc, #152]	; (8014960 <__kernel_cos+0x180>)
 80148c8:	4602      	mov	r2, r0
 80148ca:	2000      	movs	r0, #0
 80148cc:	f7eb fd0c 	bl	80002e8 <__aeabi_dsub>
 80148d0:	ec41 0b10 	vmov	d0, r0, r1
 80148d4:	b003      	add	sp, #12
 80148d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148da:	4b22      	ldr	r3, [pc, #136]	; (8014964 <__kernel_cos+0x184>)
 80148dc:	4920      	ldr	r1, [pc, #128]	; (8014960 <__kernel_cos+0x180>)
 80148de:	4598      	cmp	r8, r3
 80148e0:	bfcc      	ite	gt
 80148e2:	4d21      	ldrgt	r5, [pc, #132]	; (8014968 <__kernel_cos+0x188>)
 80148e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80148e8:	2400      	movs	r4, #0
 80148ea:	4622      	mov	r2, r4
 80148ec:	462b      	mov	r3, r5
 80148ee:	2000      	movs	r0, #0
 80148f0:	f7eb fcfa 	bl	80002e8 <__aeabi_dsub>
 80148f4:	4622      	mov	r2, r4
 80148f6:	4680      	mov	r8, r0
 80148f8:	4689      	mov	r9, r1
 80148fa:	462b      	mov	r3, r5
 80148fc:	4650      	mov	r0, sl
 80148fe:	4659      	mov	r1, fp
 8014900:	f7eb fcf2 	bl	80002e8 <__aeabi_dsub>
 8014904:	4632      	mov	r2, r6
 8014906:	463b      	mov	r3, r7
 8014908:	f7eb fcee 	bl	80002e8 <__aeabi_dsub>
 801490c:	4602      	mov	r2, r0
 801490e:	460b      	mov	r3, r1
 8014910:	4640      	mov	r0, r8
 8014912:	4649      	mov	r1, r9
 8014914:	e7da      	b.n	80148cc <__kernel_cos+0xec>
 8014916:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8014950 <__kernel_cos+0x170>
 801491a:	e7db      	b.n	80148d4 <__kernel_cos+0xf4>
 801491c:	f3af 8000 	nop.w
 8014920:	be8838d4 	.word	0xbe8838d4
 8014924:	bda8fae9 	.word	0xbda8fae9
 8014928:	bdb4b1c4 	.word	0xbdb4b1c4
 801492c:	3e21ee9e 	.word	0x3e21ee9e
 8014930:	809c52ad 	.word	0x809c52ad
 8014934:	3e927e4f 	.word	0x3e927e4f
 8014938:	19cb1590 	.word	0x19cb1590
 801493c:	3efa01a0 	.word	0x3efa01a0
 8014940:	16c15177 	.word	0x16c15177
 8014944:	3f56c16c 	.word	0x3f56c16c
 8014948:	5555554c 	.word	0x5555554c
 801494c:	3fa55555 	.word	0x3fa55555
 8014950:	00000000 	.word	0x00000000
 8014954:	3ff00000 	.word	0x3ff00000
 8014958:	3fe00000 	.word	0x3fe00000
 801495c:	3fd33332 	.word	0x3fd33332
 8014960:	3ff00000 	.word	0x3ff00000
 8014964:	3fe90000 	.word	0x3fe90000
 8014968:	3fd20000 	.word	0x3fd20000
 801496c:	00000000 	.word	0x00000000

08014970 <__kernel_rem_pio2>:
 8014970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014974:	ed2d 8b02 	vpush	{d8}
 8014978:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801497c:	f112 0f14 	cmn.w	r2, #20
 8014980:	9308      	str	r3, [sp, #32]
 8014982:	9101      	str	r1, [sp, #4]
 8014984:	4bc6      	ldr	r3, [pc, #792]	; (8014ca0 <__kernel_rem_pio2+0x330>)
 8014986:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014988:	9009      	str	r0, [sp, #36]	; 0x24
 801498a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801498e:	9304      	str	r3, [sp, #16]
 8014990:	9b08      	ldr	r3, [sp, #32]
 8014992:	f103 33ff 	add.w	r3, r3, #4294967295
 8014996:	bfa8      	it	ge
 8014998:	1ed4      	subge	r4, r2, #3
 801499a:	9306      	str	r3, [sp, #24]
 801499c:	bfb2      	itee	lt
 801499e:	2400      	movlt	r4, #0
 80149a0:	2318      	movge	r3, #24
 80149a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80149a6:	f06f 0317 	mvn.w	r3, #23
 80149aa:	fb04 3303 	mla	r3, r4, r3, r3
 80149ae:	eb03 0a02 	add.w	sl, r3, r2
 80149b2:	9b04      	ldr	r3, [sp, #16]
 80149b4:	9a06      	ldr	r2, [sp, #24]
 80149b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014c90 <__kernel_rem_pio2+0x320>
 80149ba:	eb03 0802 	add.w	r8, r3, r2
 80149be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80149c0:	1aa7      	subs	r7, r4, r2
 80149c2:	ae20      	add	r6, sp, #128	; 0x80
 80149c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80149c8:	2500      	movs	r5, #0
 80149ca:	4545      	cmp	r5, r8
 80149cc:	dd18      	ble.n	8014a00 <__kernel_rem_pio2+0x90>
 80149ce:	9b08      	ldr	r3, [sp, #32]
 80149d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80149d4:	aa20      	add	r2, sp, #128	; 0x80
 80149d6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8014c90 <__kernel_rem_pio2+0x320>
 80149da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80149de:	f1c3 0301 	rsb	r3, r3, #1
 80149e2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80149e6:	9307      	str	r3, [sp, #28]
 80149e8:	9b07      	ldr	r3, [sp, #28]
 80149ea:	9a04      	ldr	r2, [sp, #16]
 80149ec:	4443      	add	r3, r8
 80149ee:	429a      	cmp	r2, r3
 80149f0:	db2f      	blt.n	8014a52 <__kernel_rem_pio2+0xe2>
 80149f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80149f6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80149fa:	462f      	mov	r7, r5
 80149fc:	2600      	movs	r6, #0
 80149fe:	e01b      	b.n	8014a38 <__kernel_rem_pio2+0xc8>
 8014a00:	42ef      	cmn	r7, r5
 8014a02:	d407      	bmi.n	8014a14 <__kernel_rem_pio2+0xa4>
 8014a04:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014a08:	f7eb fdbc 	bl	8000584 <__aeabi_i2d>
 8014a0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014a10:	3501      	adds	r5, #1
 8014a12:	e7da      	b.n	80149ca <__kernel_rem_pio2+0x5a>
 8014a14:	ec51 0b18 	vmov	r0, r1, d8
 8014a18:	e7f8      	b.n	8014a0c <__kernel_rem_pio2+0x9c>
 8014a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a1e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014a22:	f7eb fe19 	bl	8000658 <__aeabi_dmul>
 8014a26:	4602      	mov	r2, r0
 8014a28:	460b      	mov	r3, r1
 8014a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a2e:	f7eb fc5d 	bl	80002ec <__adddf3>
 8014a32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a36:	3601      	adds	r6, #1
 8014a38:	9b06      	ldr	r3, [sp, #24]
 8014a3a:	429e      	cmp	r6, r3
 8014a3c:	f1a7 0708 	sub.w	r7, r7, #8
 8014a40:	ddeb      	ble.n	8014a1a <__kernel_rem_pio2+0xaa>
 8014a42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a46:	3508      	adds	r5, #8
 8014a48:	ecab 7b02 	vstmia	fp!, {d7}
 8014a4c:	f108 0801 	add.w	r8, r8, #1
 8014a50:	e7ca      	b.n	80149e8 <__kernel_rem_pio2+0x78>
 8014a52:	9b04      	ldr	r3, [sp, #16]
 8014a54:	aa0c      	add	r2, sp, #48	; 0x30
 8014a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a5c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014a5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014a62:	9c04      	ldr	r4, [sp, #16]
 8014a64:	930a      	str	r3, [sp, #40]	; 0x28
 8014a66:	ab98      	add	r3, sp, #608	; 0x260
 8014a68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014a6c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8014a70:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8014a74:	f8cd b008 	str.w	fp, [sp, #8]
 8014a78:	4625      	mov	r5, r4
 8014a7a:	2d00      	cmp	r5, #0
 8014a7c:	dc78      	bgt.n	8014b70 <__kernel_rem_pio2+0x200>
 8014a7e:	ec47 6b10 	vmov	d0, r6, r7
 8014a82:	4650      	mov	r0, sl
 8014a84:	f000 fdf0 	bl	8015668 <scalbn>
 8014a88:	ec57 6b10 	vmov	r6, r7, d0
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014a92:	ee10 0a10 	vmov	r0, s0
 8014a96:	4639      	mov	r1, r7
 8014a98:	f7eb fdde 	bl	8000658 <__aeabi_dmul>
 8014a9c:	ec41 0b10 	vmov	d0, r0, r1
 8014aa0:	f7fe f972 	bl	8012d88 <floor>
 8014aa4:	4b7f      	ldr	r3, [pc, #508]	; (8014ca4 <__kernel_rem_pio2+0x334>)
 8014aa6:	ec51 0b10 	vmov	r0, r1, d0
 8014aaa:	2200      	movs	r2, #0
 8014aac:	f7eb fdd4 	bl	8000658 <__aeabi_dmul>
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	460b      	mov	r3, r1
 8014ab4:	4630      	mov	r0, r6
 8014ab6:	4639      	mov	r1, r7
 8014ab8:	f7eb fc16 	bl	80002e8 <__aeabi_dsub>
 8014abc:	460f      	mov	r7, r1
 8014abe:	4606      	mov	r6, r0
 8014ac0:	f7ec f87a 	bl	8000bb8 <__aeabi_d2iz>
 8014ac4:	9007      	str	r0, [sp, #28]
 8014ac6:	f7eb fd5d 	bl	8000584 <__aeabi_i2d>
 8014aca:	4602      	mov	r2, r0
 8014acc:	460b      	mov	r3, r1
 8014ace:	4630      	mov	r0, r6
 8014ad0:	4639      	mov	r1, r7
 8014ad2:	f7eb fc09 	bl	80002e8 <__aeabi_dsub>
 8014ad6:	f1ba 0f00 	cmp.w	sl, #0
 8014ada:	4606      	mov	r6, r0
 8014adc:	460f      	mov	r7, r1
 8014ade:	dd70      	ble.n	8014bc2 <__kernel_rem_pio2+0x252>
 8014ae0:	1e62      	subs	r2, r4, #1
 8014ae2:	ab0c      	add	r3, sp, #48	; 0x30
 8014ae4:	9d07      	ldr	r5, [sp, #28]
 8014ae6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014aea:	f1ca 0118 	rsb	r1, sl, #24
 8014aee:	fa40 f301 	asr.w	r3, r0, r1
 8014af2:	441d      	add	r5, r3
 8014af4:	408b      	lsls	r3, r1
 8014af6:	1ac0      	subs	r0, r0, r3
 8014af8:	ab0c      	add	r3, sp, #48	; 0x30
 8014afa:	9507      	str	r5, [sp, #28]
 8014afc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014b00:	f1ca 0317 	rsb	r3, sl, #23
 8014b04:	fa40 f303 	asr.w	r3, r0, r3
 8014b08:	9302      	str	r3, [sp, #8]
 8014b0a:	9b02      	ldr	r3, [sp, #8]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	dd66      	ble.n	8014bde <__kernel_rem_pio2+0x26e>
 8014b10:	9b07      	ldr	r3, [sp, #28]
 8014b12:	2200      	movs	r2, #0
 8014b14:	3301      	adds	r3, #1
 8014b16:	9307      	str	r3, [sp, #28]
 8014b18:	4615      	mov	r5, r2
 8014b1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014b1e:	4294      	cmp	r4, r2
 8014b20:	f300 8099 	bgt.w	8014c56 <__kernel_rem_pio2+0x2e6>
 8014b24:	f1ba 0f00 	cmp.w	sl, #0
 8014b28:	dd07      	ble.n	8014b3a <__kernel_rem_pio2+0x1ca>
 8014b2a:	f1ba 0f01 	cmp.w	sl, #1
 8014b2e:	f000 80a5 	beq.w	8014c7c <__kernel_rem_pio2+0x30c>
 8014b32:	f1ba 0f02 	cmp.w	sl, #2
 8014b36:	f000 80c1 	beq.w	8014cbc <__kernel_rem_pio2+0x34c>
 8014b3a:	9b02      	ldr	r3, [sp, #8]
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d14e      	bne.n	8014bde <__kernel_rem_pio2+0x26e>
 8014b40:	4632      	mov	r2, r6
 8014b42:	463b      	mov	r3, r7
 8014b44:	4958      	ldr	r1, [pc, #352]	; (8014ca8 <__kernel_rem_pio2+0x338>)
 8014b46:	2000      	movs	r0, #0
 8014b48:	f7eb fbce 	bl	80002e8 <__aeabi_dsub>
 8014b4c:	4606      	mov	r6, r0
 8014b4e:	460f      	mov	r7, r1
 8014b50:	2d00      	cmp	r5, #0
 8014b52:	d044      	beq.n	8014bde <__kernel_rem_pio2+0x26e>
 8014b54:	4650      	mov	r0, sl
 8014b56:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014c98 <__kernel_rem_pio2+0x328>
 8014b5a:	f000 fd85 	bl	8015668 <scalbn>
 8014b5e:	4630      	mov	r0, r6
 8014b60:	4639      	mov	r1, r7
 8014b62:	ec53 2b10 	vmov	r2, r3, d0
 8014b66:	f7eb fbbf 	bl	80002e8 <__aeabi_dsub>
 8014b6a:	4606      	mov	r6, r0
 8014b6c:	460f      	mov	r7, r1
 8014b6e:	e036      	b.n	8014bde <__kernel_rem_pio2+0x26e>
 8014b70:	4b4e      	ldr	r3, [pc, #312]	; (8014cac <__kernel_rem_pio2+0x33c>)
 8014b72:	2200      	movs	r2, #0
 8014b74:	4630      	mov	r0, r6
 8014b76:	4639      	mov	r1, r7
 8014b78:	f7eb fd6e 	bl	8000658 <__aeabi_dmul>
 8014b7c:	f7ec f81c 	bl	8000bb8 <__aeabi_d2iz>
 8014b80:	f7eb fd00 	bl	8000584 <__aeabi_i2d>
 8014b84:	4b4a      	ldr	r3, [pc, #296]	; (8014cb0 <__kernel_rem_pio2+0x340>)
 8014b86:	2200      	movs	r2, #0
 8014b88:	4680      	mov	r8, r0
 8014b8a:	4689      	mov	r9, r1
 8014b8c:	f7eb fd64 	bl	8000658 <__aeabi_dmul>
 8014b90:	4602      	mov	r2, r0
 8014b92:	460b      	mov	r3, r1
 8014b94:	4630      	mov	r0, r6
 8014b96:	4639      	mov	r1, r7
 8014b98:	f7eb fba6 	bl	80002e8 <__aeabi_dsub>
 8014b9c:	f7ec f80c 	bl	8000bb8 <__aeabi_d2iz>
 8014ba0:	9b02      	ldr	r3, [sp, #8]
 8014ba2:	f843 0b04 	str.w	r0, [r3], #4
 8014ba6:	3d01      	subs	r5, #1
 8014ba8:	9302      	str	r3, [sp, #8]
 8014baa:	ab70      	add	r3, sp, #448	; 0x1c0
 8014bac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb4:	4640      	mov	r0, r8
 8014bb6:	4649      	mov	r1, r9
 8014bb8:	f7eb fb98 	bl	80002ec <__adddf3>
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	460f      	mov	r7, r1
 8014bc0:	e75b      	b.n	8014a7a <__kernel_rem_pio2+0x10a>
 8014bc2:	d105      	bne.n	8014bd0 <__kernel_rem_pio2+0x260>
 8014bc4:	1e63      	subs	r3, r4, #1
 8014bc6:	aa0c      	add	r2, sp, #48	; 0x30
 8014bc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014bcc:	15c3      	asrs	r3, r0, #23
 8014bce:	e79b      	b.n	8014b08 <__kernel_rem_pio2+0x198>
 8014bd0:	4b38      	ldr	r3, [pc, #224]	; (8014cb4 <__kernel_rem_pio2+0x344>)
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	f7eb ffc6 	bl	8000b64 <__aeabi_dcmpge>
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	d139      	bne.n	8014c50 <__kernel_rem_pio2+0x2e0>
 8014bdc:	9002      	str	r0, [sp, #8]
 8014bde:	2200      	movs	r2, #0
 8014be0:	2300      	movs	r3, #0
 8014be2:	4630      	mov	r0, r6
 8014be4:	4639      	mov	r1, r7
 8014be6:	f7eb ff9f 	bl	8000b28 <__aeabi_dcmpeq>
 8014bea:	2800      	cmp	r0, #0
 8014bec:	f000 80b4 	beq.w	8014d58 <__kernel_rem_pio2+0x3e8>
 8014bf0:	f104 3bff 	add.w	fp, r4, #4294967295
 8014bf4:	465b      	mov	r3, fp
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	9904      	ldr	r1, [sp, #16]
 8014bfa:	428b      	cmp	r3, r1
 8014bfc:	da65      	bge.n	8014cca <__kernel_rem_pio2+0x35a>
 8014bfe:	2a00      	cmp	r2, #0
 8014c00:	d07b      	beq.n	8014cfa <__kernel_rem_pio2+0x38a>
 8014c02:	ab0c      	add	r3, sp, #48	; 0x30
 8014c04:	f1aa 0a18 	sub.w	sl, sl, #24
 8014c08:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	f000 80a0 	beq.w	8014d52 <__kernel_rem_pio2+0x3e2>
 8014c12:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8014c98 <__kernel_rem_pio2+0x328>
 8014c16:	4650      	mov	r0, sl
 8014c18:	f000 fd26 	bl	8015668 <scalbn>
 8014c1c:	4f23      	ldr	r7, [pc, #140]	; (8014cac <__kernel_rem_pio2+0x33c>)
 8014c1e:	ec55 4b10 	vmov	r4, r5, d0
 8014c22:	46d8      	mov	r8, fp
 8014c24:	2600      	movs	r6, #0
 8014c26:	f1b8 0f00 	cmp.w	r8, #0
 8014c2a:	f280 80cf 	bge.w	8014dcc <__kernel_rem_pio2+0x45c>
 8014c2e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8014c90 <__kernel_rem_pio2+0x320>
 8014c32:	465f      	mov	r7, fp
 8014c34:	f04f 0800 	mov.w	r8, #0
 8014c38:	2f00      	cmp	r7, #0
 8014c3a:	f2c0 80fd 	blt.w	8014e38 <__kernel_rem_pio2+0x4c8>
 8014c3e:	ab70      	add	r3, sp, #448	; 0x1c0
 8014c40:	f8df a074 	ldr.w	sl, [pc, #116]	; 8014cb8 <__kernel_rem_pio2+0x348>
 8014c44:	ec55 4b18 	vmov	r4, r5, d8
 8014c48:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8014c4c:	2600      	movs	r6, #0
 8014c4e:	e0e5      	b.n	8014e1c <__kernel_rem_pio2+0x4ac>
 8014c50:	2302      	movs	r3, #2
 8014c52:	9302      	str	r3, [sp, #8]
 8014c54:	e75c      	b.n	8014b10 <__kernel_rem_pio2+0x1a0>
 8014c56:	f8db 3000 	ldr.w	r3, [fp]
 8014c5a:	b955      	cbnz	r5, 8014c72 <__kernel_rem_pio2+0x302>
 8014c5c:	b123      	cbz	r3, 8014c68 <__kernel_rem_pio2+0x2f8>
 8014c5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014c62:	f8cb 3000 	str.w	r3, [fp]
 8014c66:	2301      	movs	r3, #1
 8014c68:	3201      	adds	r2, #1
 8014c6a:	f10b 0b04 	add.w	fp, fp, #4
 8014c6e:	461d      	mov	r5, r3
 8014c70:	e755      	b.n	8014b1e <__kernel_rem_pio2+0x1ae>
 8014c72:	1acb      	subs	r3, r1, r3
 8014c74:	f8cb 3000 	str.w	r3, [fp]
 8014c78:	462b      	mov	r3, r5
 8014c7a:	e7f5      	b.n	8014c68 <__kernel_rem_pio2+0x2f8>
 8014c7c:	1e62      	subs	r2, r4, #1
 8014c7e:	ab0c      	add	r3, sp, #48	; 0x30
 8014c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014c88:	a90c      	add	r1, sp, #48	; 0x30
 8014c8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014c8e:	e754      	b.n	8014b3a <__kernel_rem_pio2+0x1ca>
	...
 8014c9c:	3ff00000 	.word	0x3ff00000
 8014ca0:	08039f68 	.word	0x08039f68
 8014ca4:	40200000 	.word	0x40200000
 8014ca8:	3ff00000 	.word	0x3ff00000
 8014cac:	3e700000 	.word	0x3e700000
 8014cb0:	41700000 	.word	0x41700000
 8014cb4:	3fe00000 	.word	0x3fe00000
 8014cb8:	08039f28 	.word	0x08039f28
 8014cbc:	1e62      	subs	r2, r4, #1
 8014cbe:	ab0c      	add	r3, sp, #48	; 0x30
 8014cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cc4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014cc8:	e7de      	b.n	8014c88 <__kernel_rem_pio2+0x318>
 8014cca:	a90c      	add	r1, sp, #48	; 0x30
 8014ccc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014cd0:	3b01      	subs	r3, #1
 8014cd2:	430a      	orrs	r2, r1
 8014cd4:	e790      	b.n	8014bf8 <__kernel_rem_pio2+0x288>
 8014cd6:	3301      	adds	r3, #1
 8014cd8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014cdc:	2900      	cmp	r1, #0
 8014cde:	d0fa      	beq.n	8014cd6 <__kernel_rem_pio2+0x366>
 8014ce0:	9a08      	ldr	r2, [sp, #32]
 8014ce2:	18e3      	adds	r3, r4, r3
 8014ce4:	18a6      	adds	r6, r4, r2
 8014ce6:	aa20      	add	r2, sp, #128	; 0x80
 8014ce8:	1c65      	adds	r5, r4, #1
 8014cea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014cee:	9302      	str	r3, [sp, #8]
 8014cf0:	9b02      	ldr	r3, [sp, #8]
 8014cf2:	42ab      	cmp	r3, r5
 8014cf4:	da04      	bge.n	8014d00 <__kernel_rem_pio2+0x390>
 8014cf6:	461c      	mov	r4, r3
 8014cf8:	e6b5      	b.n	8014a66 <__kernel_rem_pio2+0xf6>
 8014cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014cfc:	2301      	movs	r3, #1
 8014cfe:	e7eb      	b.n	8014cd8 <__kernel_rem_pio2+0x368>
 8014d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014d06:	f7eb fc3d 	bl	8000584 <__aeabi_i2d>
 8014d0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d10:	46b3      	mov	fp, r6
 8014d12:	461c      	mov	r4, r3
 8014d14:	2700      	movs	r7, #0
 8014d16:	f04f 0800 	mov.w	r8, #0
 8014d1a:	f04f 0900 	mov.w	r9, #0
 8014d1e:	9b06      	ldr	r3, [sp, #24]
 8014d20:	429f      	cmp	r7, r3
 8014d22:	dd06      	ble.n	8014d32 <__kernel_rem_pio2+0x3c2>
 8014d24:	ab70      	add	r3, sp, #448	; 0x1c0
 8014d26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014d2a:	e9c3 8900 	strd	r8, r9, [r3]
 8014d2e:	3501      	adds	r5, #1
 8014d30:	e7de      	b.n	8014cf0 <__kernel_rem_pio2+0x380>
 8014d32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014d36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014d3a:	f7eb fc8d 	bl	8000658 <__aeabi_dmul>
 8014d3e:	4602      	mov	r2, r0
 8014d40:	460b      	mov	r3, r1
 8014d42:	4640      	mov	r0, r8
 8014d44:	4649      	mov	r1, r9
 8014d46:	f7eb fad1 	bl	80002ec <__adddf3>
 8014d4a:	3701      	adds	r7, #1
 8014d4c:	4680      	mov	r8, r0
 8014d4e:	4689      	mov	r9, r1
 8014d50:	e7e5      	b.n	8014d1e <__kernel_rem_pio2+0x3ae>
 8014d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014d56:	e754      	b.n	8014c02 <__kernel_rem_pio2+0x292>
 8014d58:	ec47 6b10 	vmov	d0, r6, r7
 8014d5c:	f1ca 0000 	rsb	r0, sl, #0
 8014d60:	f000 fc82 	bl	8015668 <scalbn>
 8014d64:	ec57 6b10 	vmov	r6, r7, d0
 8014d68:	4b9f      	ldr	r3, [pc, #636]	; (8014fe8 <__kernel_rem_pio2+0x678>)
 8014d6a:	ee10 0a10 	vmov	r0, s0
 8014d6e:	2200      	movs	r2, #0
 8014d70:	4639      	mov	r1, r7
 8014d72:	f7eb fef7 	bl	8000b64 <__aeabi_dcmpge>
 8014d76:	b300      	cbz	r0, 8014dba <__kernel_rem_pio2+0x44a>
 8014d78:	4b9c      	ldr	r3, [pc, #624]	; (8014fec <__kernel_rem_pio2+0x67c>)
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	4639      	mov	r1, r7
 8014d80:	f7eb fc6a 	bl	8000658 <__aeabi_dmul>
 8014d84:	f7eb ff18 	bl	8000bb8 <__aeabi_d2iz>
 8014d88:	4605      	mov	r5, r0
 8014d8a:	f7eb fbfb 	bl	8000584 <__aeabi_i2d>
 8014d8e:	4b96      	ldr	r3, [pc, #600]	; (8014fe8 <__kernel_rem_pio2+0x678>)
 8014d90:	2200      	movs	r2, #0
 8014d92:	f7eb fc61 	bl	8000658 <__aeabi_dmul>
 8014d96:	460b      	mov	r3, r1
 8014d98:	4602      	mov	r2, r0
 8014d9a:	4639      	mov	r1, r7
 8014d9c:	4630      	mov	r0, r6
 8014d9e:	f7eb faa3 	bl	80002e8 <__aeabi_dsub>
 8014da2:	f7eb ff09 	bl	8000bb8 <__aeabi_d2iz>
 8014da6:	f104 0b01 	add.w	fp, r4, #1
 8014daa:	ab0c      	add	r3, sp, #48	; 0x30
 8014dac:	f10a 0a18 	add.w	sl, sl, #24
 8014db0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014db4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8014db8:	e72b      	b.n	8014c12 <__kernel_rem_pio2+0x2a2>
 8014dba:	4630      	mov	r0, r6
 8014dbc:	4639      	mov	r1, r7
 8014dbe:	f7eb fefb 	bl	8000bb8 <__aeabi_d2iz>
 8014dc2:	ab0c      	add	r3, sp, #48	; 0x30
 8014dc4:	46a3      	mov	fp, r4
 8014dc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014dca:	e722      	b.n	8014c12 <__kernel_rem_pio2+0x2a2>
 8014dcc:	ab70      	add	r3, sp, #448	; 0x1c0
 8014dce:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8014dd2:	ab0c      	add	r3, sp, #48	; 0x30
 8014dd4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014dd8:	f7eb fbd4 	bl	8000584 <__aeabi_i2d>
 8014ddc:	4622      	mov	r2, r4
 8014dde:	462b      	mov	r3, r5
 8014de0:	f7eb fc3a 	bl	8000658 <__aeabi_dmul>
 8014de4:	4632      	mov	r2, r6
 8014de6:	e9c9 0100 	strd	r0, r1, [r9]
 8014dea:	463b      	mov	r3, r7
 8014dec:	4620      	mov	r0, r4
 8014dee:	4629      	mov	r1, r5
 8014df0:	f7eb fc32 	bl	8000658 <__aeabi_dmul>
 8014df4:	f108 38ff 	add.w	r8, r8, #4294967295
 8014df8:	4604      	mov	r4, r0
 8014dfa:	460d      	mov	r5, r1
 8014dfc:	e713      	b.n	8014c26 <__kernel_rem_pio2+0x2b6>
 8014dfe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8014e02:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8014e06:	f7eb fc27 	bl	8000658 <__aeabi_dmul>
 8014e0a:	4602      	mov	r2, r0
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	4620      	mov	r0, r4
 8014e10:	4629      	mov	r1, r5
 8014e12:	f7eb fa6b 	bl	80002ec <__adddf3>
 8014e16:	3601      	adds	r6, #1
 8014e18:	4604      	mov	r4, r0
 8014e1a:	460d      	mov	r5, r1
 8014e1c:	9b04      	ldr	r3, [sp, #16]
 8014e1e:	429e      	cmp	r6, r3
 8014e20:	dc01      	bgt.n	8014e26 <__kernel_rem_pio2+0x4b6>
 8014e22:	45b0      	cmp	r8, r6
 8014e24:	daeb      	bge.n	8014dfe <__kernel_rem_pio2+0x48e>
 8014e26:	ab48      	add	r3, sp, #288	; 0x120
 8014e28:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014e2c:	e9c3 4500 	strd	r4, r5, [r3]
 8014e30:	3f01      	subs	r7, #1
 8014e32:	f108 0801 	add.w	r8, r8, #1
 8014e36:	e6ff      	b.n	8014c38 <__kernel_rem_pio2+0x2c8>
 8014e38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014e3a:	2b02      	cmp	r3, #2
 8014e3c:	dc0b      	bgt.n	8014e56 <__kernel_rem_pio2+0x4e6>
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	dc6e      	bgt.n	8014f20 <__kernel_rem_pio2+0x5b0>
 8014e42:	d045      	beq.n	8014ed0 <__kernel_rem_pio2+0x560>
 8014e44:	9b07      	ldr	r3, [sp, #28]
 8014e46:	f003 0007 	and.w	r0, r3, #7
 8014e4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8014e4e:	ecbd 8b02 	vpop	{d8}
 8014e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014e58:	2b03      	cmp	r3, #3
 8014e5a:	d1f3      	bne.n	8014e44 <__kernel_rem_pio2+0x4d4>
 8014e5c:	ab48      	add	r3, sp, #288	; 0x120
 8014e5e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8014e62:	46d0      	mov	r8, sl
 8014e64:	46d9      	mov	r9, fp
 8014e66:	f1b9 0f00 	cmp.w	r9, #0
 8014e6a:	f1a8 0808 	sub.w	r8, r8, #8
 8014e6e:	dc64      	bgt.n	8014f3a <__kernel_rem_pio2+0x5ca>
 8014e70:	465c      	mov	r4, fp
 8014e72:	2c01      	cmp	r4, #1
 8014e74:	f1aa 0a08 	sub.w	sl, sl, #8
 8014e78:	dc7e      	bgt.n	8014f78 <__kernel_rem_pio2+0x608>
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	2100      	movs	r1, #0
 8014e7e:	f1bb 0f01 	cmp.w	fp, #1
 8014e82:	f300 8097 	bgt.w	8014fb4 <__kernel_rem_pio2+0x644>
 8014e86:	9b02      	ldr	r3, [sp, #8]
 8014e88:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8014e8c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f040 8099 	bne.w	8014fc8 <__kernel_rem_pio2+0x658>
 8014e96:	9b01      	ldr	r3, [sp, #4]
 8014e98:	e9c3 5600 	strd	r5, r6, [r3]
 8014e9c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8014ea0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014ea4:	e7ce      	b.n	8014e44 <__kernel_rem_pio2+0x4d4>
 8014ea6:	ab48      	add	r3, sp, #288	; 0x120
 8014ea8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb0:	f7eb fa1c 	bl	80002ec <__adddf3>
 8014eb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014eb8:	f1bb 0f00 	cmp.w	fp, #0
 8014ebc:	daf3      	bge.n	8014ea6 <__kernel_rem_pio2+0x536>
 8014ebe:	9b02      	ldr	r3, [sp, #8]
 8014ec0:	b113      	cbz	r3, 8014ec8 <__kernel_rem_pio2+0x558>
 8014ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	9b01      	ldr	r3, [sp, #4]
 8014eca:	e9c3 0100 	strd	r0, r1, [r3]
 8014ece:	e7b9      	b.n	8014e44 <__kernel_rem_pio2+0x4d4>
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	2100      	movs	r1, #0
 8014ed4:	e7f0      	b.n	8014eb8 <__kernel_rem_pio2+0x548>
 8014ed6:	ab48      	add	r3, sp, #288	; 0x120
 8014ed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee0:	f7eb fa04 	bl	80002ec <__adddf3>
 8014ee4:	3c01      	subs	r4, #1
 8014ee6:	2c00      	cmp	r4, #0
 8014ee8:	daf5      	bge.n	8014ed6 <__kernel_rem_pio2+0x566>
 8014eea:	9b02      	ldr	r3, [sp, #8]
 8014eec:	b1e3      	cbz	r3, 8014f28 <__kernel_rem_pio2+0x5b8>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ef4:	9c01      	ldr	r4, [sp, #4]
 8014ef6:	e9c4 2300 	strd	r2, r3, [r4]
 8014efa:	4602      	mov	r2, r0
 8014efc:	460b      	mov	r3, r1
 8014efe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8014f02:	f7eb f9f1 	bl	80002e8 <__aeabi_dsub>
 8014f06:	ad4a      	add	r5, sp, #296	; 0x128
 8014f08:	2401      	movs	r4, #1
 8014f0a:	45a3      	cmp	fp, r4
 8014f0c:	da0f      	bge.n	8014f2e <__kernel_rem_pio2+0x5be>
 8014f0e:	9b02      	ldr	r3, [sp, #8]
 8014f10:	b113      	cbz	r3, 8014f18 <__kernel_rem_pio2+0x5a8>
 8014f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f16:	4619      	mov	r1, r3
 8014f18:	9b01      	ldr	r3, [sp, #4]
 8014f1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014f1e:	e791      	b.n	8014e44 <__kernel_rem_pio2+0x4d4>
 8014f20:	465c      	mov	r4, fp
 8014f22:	2000      	movs	r0, #0
 8014f24:	2100      	movs	r1, #0
 8014f26:	e7de      	b.n	8014ee6 <__kernel_rem_pio2+0x576>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	e7e2      	b.n	8014ef4 <__kernel_rem_pio2+0x584>
 8014f2e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014f32:	f7eb f9db 	bl	80002ec <__adddf3>
 8014f36:	3401      	adds	r4, #1
 8014f38:	e7e7      	b.n	8014f0a <__kernel_rem_pio2+0x59a>
 8014f3a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8014f3e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8014f42:	4620      	mov	r0, r4
 8014f44:	4632      	mov	r2, r6
 8014f46:	463b      	mov	r3, r7
 8014f48:	4629      	mov	r1, r5
 8014f4a:	f7eb f9cf 	bl	80002ec <__adddf3>
 8014f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f52:	4602      	mov	r2, r0
 8014f54:	460b      	mov	r3, r1
 8014f56:	4620      	mov	r0, r4
 8014f58:	4629      	mov	r1, r5
 8014f5a:	f7eb f9c5 	bl	80002e8 <__aeabi_dsub>
 8014f5e:	4632      	mov	r2, r6
 8014f60:	463b      	mov	r3, r7
 8014f62:	f7eb f9c3 	bl	80002ec <__adddf3>
 8014f66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014f6a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8014f6e:	ed88 7b00 	vstr	d7, [r8]
 8014f72:	f109 39ff 	add.w	r9, r9, #4294967295
 8014f76:	e776      	b.n	8014e66 <__kernel_rem_pio2+0x4f6>
 8014f78:	e9da 8900 	ldrd	r8, r9, [sl]
 8014f7c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8014f80:	4640      	mov	r0, r8
 8014f82:	4632      	mov	r2, r6
 8014f84:	463b      	mov	r3, r7
 8014f86:	4649      	mov	r1, r9
 8014f88:	f7eb f9b0 	bl	80002ec <__adddf3>
 8014f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f90:	4602      	mov	r2, r0
 8014f92:	460b      	mov	r3, r1
 8014f94:	4640      	mov	r0, r8
 8014f96:	4649      	mov	r1, r9
 8014f98:	f7eb f9a6 	bl	80002e8 <__aeabi_dsub>
 8014f9c:	4632      	mov	r2, r6
 8014f9e:	463b      	mov	r3, r7
 8014fa0:	f7eb f9a4 	bl	80002ec <__adddf3>
 8014fa4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014fa8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014fac:	ed8a 7b00 	vstr	d7, [sl]
 8014fb0:	3c01      	subs	r4, #1
 8014fb2:	e75e      	b.n	8014e72 <__kernel_rem_pio2+0x502>
 8014fb4:	ab48      	add	r3, sp, #288	; 0x120
 8014fb6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fbe:	f7eb f995 	bl	80002ec <__adddf3>
 8014fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014fc6:	e75a      	b.n	8014e7e <__kernel_rem_pio2+0x50e>
 8014fc8:	9b01      	ldr	r3, [sp, #4]
 8014fca:	9a01      	ldr	r2, [sp, #4]
 8014fcc:	601d      	str	r5, [r3, #0]
 8014fce:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8014fd2:	605c      	str	r4, [r3, #4]
 8014fd4:	609f      	str	r7, [r3, #8]
 8014fd6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8014fda:	60d3      	str	r3, [r2, #12]
 8014fdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fe0:	6110      	str	r0, [r2, #16]
 8014fe2:	6153      	str	r3, [r2, #20]
 8014fe4:	e72e      	b.n	8014e44 <__kernel_rem_pio2+0x4d4>
 8014fe6:	bf00      	nop
 8014fe8:	41700000 	.word	0x41700000
 8014fec:	3e700000 	.word	0x3e700000

08014ff0 <__kernel_sin>:
 8014ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff4:	ed2d 8b04 	vpush	{d8-d9}
 8014ff8:	eeb0 8a41 	vmov.f32	s16, s2
 8014ffc:	eef0 8a61 	vmov.f32	s17, s3
 8015000:	ec55 4b10 	vmov	r4, r5, d0
 8015004:	b083      	sub	sp, #12
 8015006:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801500a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801500e:	9001      	str	r0, [sp, #4]
 8015010:	da06      	bge.n	8015020 <__kernel_sin+0x30>
 8015012:	ee10 0a10 	vmov	r0, s0
 8015016:	4629      	mov	r1, r5
 8015018:	f7eb fdce 	bl	8000bb8 <__aeabi_d2iz>
 801501c:	2800      	cmp	r0, #0
 801501e:	d051      	beq.n	80150c4 <__kernel_sin+0xd4>
 8015020:	4622      	mov	r2, r4
 8015022:	462b      	mov	r3, r5
 8015024:	4620      	mov	r0, r4
 8015026:	4629      	mov	r1, r5
 8015028:	f7eb fb16 	bl	8000658 <__aeabi_dmul>
 801502c:	4682      	mov	sl, r0
 801502e:	468b      	mov	fp, r1
 8015030:	4602      	mov	r2, r0
 8015032:	460b      	mov	r3, r1
 8015034:	4620      	mov	r0, r4
 8015036:	4629      	mov	r1, r5
 8015038:	f7eb fb0e 	bl	8000658 <__aeabi_dmul>
 801503c:	a341      	add	r3, pc, #260	; (adr r3, 8015144 <__kernel_sin+0x154>)
 801503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015042:	4680      	mov	r8, r0
 8015044:	4689      	mov	r9, r1
 8015046:	4650      	mov	r0, sl
 8015048:	4659      	mov	r1, fp
 801504a:	f7eb fb05 	bl	8000658 <__aeabi_dmul>
 801504e:	a33f      	add	r3, pc, #252	; (adr r3, 801514c <__kernel_sin+0x15c>)
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	f7eb f948 	bl	80002e8 <__aeabi_dsub>
 8015058:	4652      	mov	r2, sl
 801505a:	465b      	mov	r3, fp
 801505c:	f7eb fafc 	bl	8000658 <__aeabi_dmul>
 8015060:	a33c      	add	r3, pc, #240	; (adr r3, 8015154 <__kernel_sin+0x164>)
 8015062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015066:	f7eb f941 	bl	80002ec <__adddf3>
 801506a:	4652      	mov	r2, sl
 801506c:	465b      	mov	r3, fp
 801506e:	f7eb faf3 	bl	8000658 <__aeabi_dmul>
 8015072:	a33a      	add	r3, pc, #232	; (adr r3, 801515c <__kernel_sin+0x16c>)
 8015074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015078:	f7eb f936 	bl	80002e8 <__aeabi_dsub>
 801507c:	4652      	mov	r2, sl
 801507e:	465b      	mov	r3, fp
 8015080:	f7eb faea 	bl	8000658 <__aeabi_dmul>
 8015084:	a337      	add	r3, pc, #220	; (adr r3, 8015164 <__kernel_sin+0x174>)
 8015086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508a:	f7eb f92f 	bl	80002ec <__adddf3>
 801508e:	9b01      	ldr	r3, [sp, #4]
 8015090:	4606      	mov	r6, r0
 8015092:	460f      	mov	r7, r1
 8015094:	b9eb      	cbnz	r3, 80150d2 <__kernel_sin+0xe2>
 8015096:	4602      	mov	r2, r0
 8015098:	460b      	mov	r3, r1
 801509a:	4650      	mov	r0, sl
 801509c:	4659      	mov	r1, fp
 801509e:	f7eb fadb 	bl	8000658 <__aeabi_dmul>
 80150a2:	a325      	add	r3, pc, #148	; (adr r3, 8015138 <__kernel_sin+0x148>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	f7eb f91e 	bl	80002e8 <__aeabi_dsub>
 80150ac:	4642      	mov	r2, r8
 80150ae:	464b      	mov	r3, r9
 80150b0:	f7eb fad2 	bl	8000658 <__aeabi_dmul>
 80150b4:	4602      	mov	r2, r0
 80150b6:	460b      	mov	r3, r1
 80150b8:	4620      	mov	r0, r4
 80150ba:	4629      	mov	r1, r5
 80150bc:	f7eb f916 	bl	80002ec <__adddf3>
 80150c0:	4604      	mov	r4, r0
 80150c2:	460d      	mov	r5, r1
 80150c4:	ec45 4b10 	vmov	d0, r4, r5
 80150c8:	b003      	add	sp, #12
 80150ca:	ecbd 8b04 	vpop	{d8-d9}
 80150ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d2:	4b1b      	ldr	r3, [pc, #108]	; (8015140 <__kernel_sin+0x150>)
 80150d4:	ec51 0b18 	vmov	r0, r1, d8
 80150d8:	2200      	movs	r2, #0
 80150da:	f7eb fabd 	bl	8000658 <__aeabi_dmul>
 80150de:	4632      	mov	r2, r6
 80150e0:	ec41 0b19 	vmov	d9, r0, r1
 80150e4:	463b      	mov	r3, r7
 80150e6:	4640      	mov	r0, r8
 80150e8:	4649      	mov	r1, r9
 80150ea:	f7eb fab5 	bl	8000658 <__aeabi_dmul>
 80150ee:	4602      	mov	r2, r0
 80150f0:	460b      	mov	r3, r1
 80150f2:	ec51 0b19 	vmov	r0, r1, d9
 80150f6:	f7eb f8f7 	bl	80002e8 <__aeabi_dsub>
 80150fa:	4652      	mov	r2, sl
 80150fc:	465b      	mov	r3, fp
 80150fe:	f7eb faab 	bl	8000658 <__aeabi_dmul>
 8015102:	ec53 2b18 	vmov	r2, r3, d8
 8015106:	f7eb f8ef 	bl	80002e8 <__aeabi_dsub>
 801510a:	a30b      	add	r3, pc, #44	; (adr r3, 8015138 <__kernel_sin+0x148>)
 801510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015110:	4606      	mov	r6, r0
 8015112:	460f      	mov	r7, r1
 8015114:	4640      	mov	r0, r8
 8015116:	4649      	mov	r1, r9
 8015118:	f7eb fa9e 	bl	8000658 <__aeabi_dmul>
 801511c:	4602      	mov	r2, r0
 801511e:	460b      	mov	r3, r1
 8015120:	4630      	mov	r0, r6
 8015122:	4639      	mov	r1, r7
 8015124:	f7eb f8e2 	bl	80002ec <__adddf3>
 8015128:	4602      	mov	r2, r0
 801512a:	460b      	mov	r3, r1
 801512c:	4620      	mov	r0, r4
 801512e:	4629      	mov	r1, r5
 8015130:	f7eb f8da 	bl	80002e8 <__aeabi_dsub>
 8015134:	e7c4      	b.n	80150c0 <__kernel_sin+0xd0>
 8015136:	bf00      	nop
 8015138:	55555549 	.word	0x55555549
 801513c:	3fc55555 	.word	0x3fc55555
 8015140:	3fe00000 	.word	0x3fe00000
 8015144:	5acfd57c 	.word	0x5acfd57c
 8015148:	3de5d93a 	.word	0x3de5d93a
 801514c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015150:	3e5ae5e6 	.word	0x3e5ae5e6
 8015154:	57b1fe7d 	.word	0x57b1fe7d
 8015158:	3ec71de3 	.word	0x3ec71de3
 801515c:	19c161d5 	.word	0x19c161d5
 8015160:	3f2a01a0 	.word	0x3f2a01a0
 8015164:	1110f8a6 	.word	0x1110f8a6
 8015168:	3f811111 	.word	0x3f811111
 801516c:	00000000 	.word	0x00000000

08015170 <__kernel_tan>:
 8015170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015174:	ed2d 8b04 	vpush	{d8-d9}
 8015178:	ec5b ab10 	vmov	sl, fp, d0
 801517c:	4be2      	ldr	r3, [pc, #904]	; (8015508 <__kernel_tan+0x398>)
 801517e:	b085      	sub	sp, #20
 8015180:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8015184:	429f      	cmp	r7, r3
 8015186:	ed8d 1b00 	vstr	d1, [sp]
 801518a:	4606      	mov	r6, r0
 801518c:	f8cd b00c 	str.w	fp, [sp, #12]
 8015190:	dc24      	bgt.n	80151dc <__kernel_tan+0x6c>
 8015192:	ee10 0a10 	vmov	r0, s0
 8015196:	4659      	mov	r1, fp
 8015198:	f7eb fd0e 	bl	8000bb8 <__aeabi_d2iz>
 801519c:	2800      	cmp	r0, #0
 801519e:	d148      	bne.n	8015232 <__kernel_tan+0xc2>
 80151a0:	1c73      	adds	r3, r6, #1
 80151a2:	4652      	mov	r2, sl
 80151a4:	4313      	orrs	r3, r2
 80151a6:	433b      	orrs	r3, r7
 80151a8:	d112      	bne.n	80151d0 <__kernel_tan+0x60>
 80151aa:	ec4b ab10 	vmov	d0, sl, fp
 80151ae:	f000 f9b3 	bl	8015518 <fabs>
 80151b2:	49d6      	ldr	r1, [pc, #856]	; (801550c <__kernel_tan+0x39c>)
 80151b4:	ec53 2b10 	vmov	r2, r3, d0
 80151b8:	2000      	movs	r0, #0
 80151ba:	f7eb fb77 	bl	80008ac <__aeabi_ddiv>
 80151be:	4682      	mov	sl, r0
 80151c0:	468b      	mov	fp, r1
 80151c2:	ec4b ab10 	vmov	d0, sl, fp
 80151c6:	b005      	add	sp, #20
 80151c8:	ecbd 8b04 	vpop	{d8-d9}
 80151cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d0:	2e01      	cmp	r6, #1
 80151d2:	d0f6      	beq.n	80151c2 <__kernel_tan+0x52>
 80151d4:	49ce      	ldr	r1, [pc, #824]	; (8015510 <__kernel_tan+0x3a0>)
 80151d6:	465b      	mov	r3, fp
 80151d8:	2000      	movs	r0, #0
 80151da:	e7ee      	b.n	80151ba <__kernel_tan+0x4a>
 80151dc:	4bcd      	ldr	r3, [pc, #820]	; (8015514 <__kernel_tan+0x3a4>)
 80151de:	429f      	cmp	r7, r3
 80151e0:	dd27      	ble.n	8015232 <__kernel_tan+0xc2>
 80151e2:	9b03      	ldr	r3, [sp, #12]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	da0a      	bge.n	80151fe <__kernel_tan+0x8e>
 80151e8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80151ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80151f0:	469b      	mov	fp, r3
 80151f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80151f6:	e9cd 2300 	strd	r2, r3, [sp]
 80151fa:	ee10 aa10 	vmov	sl, s0
 80151fe:	4652      	mov	r2, sl
 8015200:	465b      	mov	r3, fp
 8015202:	a1a1      	add	r1, pc, #644	; (adr r1, 8015488 <__kernel_tan+0x318>)
 8015204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015208:	f7eb f86e 	bl	80002e8 <__aeabi_dsub>
 801520c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015210:	4604      	mov	r4, r0
 8015212:	460d      	mov	r5, r1
 8015214:	a19e      	add	r1, pc, #632	; (adr r1, 8015490 <__kernel_tan+0x320>)
 8015216:	e9d1 0100 	ldrd	r0, r1, [r1]
 801521a:	f7eb f865 	bl	80002e8 <__aeabi_dsub>
 801521e:	4622      	mov	r2, r4
 8015220:	462b      	mov	r3, r5
 8015222:	f7eb f863 	bl	80002ec <__adddf3>
 8015226:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8015498 <__kernel_tan+0x328>
 801522a:	ed8d 7b00 	vstr	d7, [sp]
 801522e:	4682      	mov	sl, r0
 8015230:	468b      	mov	fp, r1
 8015232:	4652      	mov	r2, sl
 8015234:	465b      	mov	r3, fp
 8015236:	4650      	mov	r0, sl
 8015238:	4659      	mov	r1, fp
 801523a:	f7eb fa0d 	bl	8000658 <__aeabi_dmul>
 801523e:	4602      	mov	r2, r0
 8015240:	460b      	mov	r3, r1
 8015242:	4680      	mov	r8, r0
 8015244:	4689      	mov	r9, r1
 8015246:	f7eb fa07 	bl	8000658 <__aeabi_dmul>
 801524a:	4642      	mov	r2, r8
 801524c:	4604      	mov	r4, r0
 801524e:	460d      	mov	r5, r1
 8015250:	464b      	mov	r3, r9
 8015252:	4650      	mov	r0, sl
 8015254:	4659      	mov	r1, fp
 8015256:	f7eb f9ff 	bl	8000658 <__aeabi_dmul>
 801525a:	a391      	add	r3, pc, #580	; (adr r3, 80154a0 <__kernel_tan+0x330>)
 801525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015260:	ec41 0b18 	vmov	d8, r0, r1
 8015264:	4620      	mov	r0, r4
 8015266:	4629      	mov	r1, r5
 8015268:	f7eb f9f6 	bl	8000658 <__aeabi_dmul>
 801526c:	a38e      	add	r3, pc, #568	; (adr r3, 80154a8 <__kernel_tan+0x338>)
 801526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015272:	f7eb f83b 	bl	80002ec <__adddf3>
 8015276:	4622      	mov	r2, r4
 8015278:	462b      	mov	r3, r5
 801527a:	f7eb f9ed 	bl	8000658 <__aeabi_dmul>
 801527e:	a38c      	add	r3, pc, #560	; (adr r3, 80154b0 <__kernel_tan+0x340>)
 8015280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015284:	f7eb f832 	bl	80002ec <__adddf3>
 8015288:	4622      	mov	r2, r4
 801528a:	462b      	mov	r3, r5
 801528c:	f7eb f9e4 	bl	8000658 <__aeabi_dmul>
 8015290:	a389      	add	r3, pc, #548	; (adr r3, 80154b8 <__kernel_tan+0x348>)
 8015292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015296:	f7eb f829 	bl	80002ec <__adddf3>
 801529a:	4622      	mov	r2, r4
 801529c:	462b      	mov	r3, r5
 801529e:	f7eb f9db 	bl	8000658 <__aeabi_dmul>
 80152a2:	a387      	add	r3, pc, #540	; (adr r3, 80154c0 <__kernel_tan+0x350>)
 80152a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a8:	f7eb f820 	bl	80002ec <__adddf3>
 80152ac:	4622      	mov	r2, r4
 80152ae:	462b      	mov	r3, r5
 80152b0:	f7eb f9d2 	bl	8000658 <__aeabi_dmul>
 80152b4:	a384      	add	r3, pc, #528	; (adr r3, 80154c8 <__kernel_tan+0x358>)
 80152b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ba:	f7eb f817 	bl	80002ec <__adddf3>
 80152be:	4642      	mov	r2, r8
 80152c0:	464b      	mov	r3, r9
 80152c2:	f7eb f9c9 	bl	8000658 <__aeabi_dmul>
 80152c6:	a382      	add	r3, pc, #520	; (adr r3, 80154d0 <__kernel_tan+0x360>)
 80152c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152cc:	ec41 0b19 	vmov	d9, r0, r1
 80152d0:	4620      	mov	r0, r4
 80152d2:	4629      	mov	r1, r5
 80152d4:	f7eb f9c0 	bl	8000658 <__aeabi_dmul>
 80152d8:	a37f      	add	r3, pc, #508	; (adr r3, 80154d8 <__kernel_tan+0x368>)
 80152da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152de:	f7eb f805 	bl	80002ec <__adddf3>
 80152e2:	4622      	mov	r2, r4
 80152e4:	462b      	mov	r3, r5
 80152e6:	f7eb f9b7 	bl	8000658 <__aeabi_dmul>
 80152ea:	a37d      	add	r3, pc, #500	; (adr r3, 80154e0 <__kernel_tan+0x370>)
 80152ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152f0:	f7ea fffc 	bl	80002ec <__adddf3>
 80152f4:	4622      	mov	r2, r4
 80152f6:	462b      	mov	r3, r5
 80152f8:	f7eb f9ae 	bl	8000658 <__aeabi_dmul>
 80152fc:	a37a      	add	r3, pc, #488	; (adr r3, 80154e8 <__kernel_tan+0x378>)
 80152fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015302:	f7ea fff3 	bl	80002ec <__adddf3>
 8015306:	4622      	mov	r2, r4
 8015308:	462b      	mov	r3, r5
 801530a:	f7eb f9a5 	bl	8000658 <__aeabi_dmul>
 801530e:	a378      	add	r3, pc, #480	; (adr r3, 80154f0 <__kernel_tan+0x380>)
 8015310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015314:	f7ea ffea 	bl	80002ec <__adddf3>
 8015318:	4622      	mov	r2, r4
 801531a:	462b      	mov	r3, r5
 801531c:	f7eb f99c 	bl	8000658 <__aeabi_dmul>
 8015320:	a375      	add	r3, pc, #468	; (adr r3, 80154f8 <__kernel_tan+0x388>)
 8015322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015326:	f7ea ffe1 	bl	80002ec <__adddf3>
 801532a:	4602      	mov	r2, r0
 801532c:	460b      	mov	r3, r1
 801532e:	ec51 0b19 	vmov	r0, r1, d9
 8015332:	f7ea ffdb 	bl	80002ec <__adddf3>
 8015336:	ec53 2b18 	vmov	r2, r3, d8
 801533a:	f7eb f98d 	bl	8000658 <__aeabi_dmul>
 801533e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015342:	f7ea ffd3 	bl	80002ec <__adddf3>
 8015346:	4642      	mov	r2, r8
 8015348:	464b      	mov	r3, r9
 801534a:	f7eb f985 	bl	8000658 <__aeabi_dmul>
 801534e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015352:	f7ea ffcb 	bl	80002ec <__adddf3>
 8015356:	a36a      	add	r3, pc, #424	; (adr r3, 8015500 <__kernel_tan+0x390>)
 8015358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801535c:	4604      	mov	r4, r0
 801535e:	460d      	mov	r5, r1
 8015360:	ec51 0b18 	vmov	r0, r1, d8
 8015364:	f7eb f978 	bl	8000658 <__aeabi_dmul>
 8015368:	4622      	mov	r2, r4
 801536a:	462b      	mov	r3, r5
 801536c:	f7ea ffbe 	bl	80002ec <__adddf3>
 8015370:	460b      	mov	r3, r1
 8015372:	ec41 0b18 	vmov	d8, r0, r1
 8015376:	4602      	mov	r2, r0
 8015378:	4659      	mov	r1, fp
 801537a:	4650      	mov	r0, sl
 801537c:	f7ea ffb6 	bl	80002ec <__adddf3>
 8015380:	4b64      	ldr	r3, [pc, #400]	; (8015514 <__kernel_tan+0x3a4>)
 8015382:	429f      	cmp	r7, r3
 8015384:	4604      	mov	r4, r0
 8015386:	460d      	mov	r5, r1
 8015388:	dd3e      	ble.n	8015408 <__kernel_tan+0x298>
 801538a:	4630      	mov	r0, r6
 801538c:	f7eb f8fa 	bl	8000584 <__aeabi_i2d>
 8015390:	4622      	mov	r2, r4
 8015392:	4680      	mov	r8, r0
 8015394:	4689      	mov	r9, r1
 8015396:	462b      	mov	r3, r5
 8015398:	4620      	mov	r0, r4
 801539a:	4629      	mov	r1, r5
 801539c:	f7eb f95c 	bl	8000658 <__aeabi_dmul>
 80153a0:	4642      	mov	r2, r8
 80153a2:	4606      	mov	r6, r0
 80153a4:	460f      	mov	r7, r1
 80153a6:	464b      	mov	r3, r9
 80153a8:	4620      	mov	r0, r4
 80153aa:	4629      	mov	r1, r5
 80153ac:	f7ea ff9e 	bl	80002ec <__adddf3>
 80153b0:	4602      	mov	r2, r0
 80153b2:	460b      	mov	r3, r1
 80153b4:	4630      	mov	r0, r6
 80153b6:	4639      	mov	r1, r7
 80153b8:	f7eb fa78 	bl	80008ac <__aeabi_ddiv>
 80153bc:	ec53 2b18 	vmov	r2, r3, d8
 80153c0:	f7ea ff92 	bl	80002e8 <__aeabi_dsub>
 80153c4:	4602      	mov	r2, r0
 80153c6:	460b      	mov	r3, r1
 80153c8:	4650      	mov	r0, sl
 80153ca:	4659      	mov	r1, fp
 80153cc:	f7ea ff8c 	bl	80002e8 <__aeabi_dsub>
 80153d0:	4602      	mov	r2, r0
 80153d2:	460b      	mov	r3, r1
 80153d4:	f7ea ff8a 	bl	80002ec <__adddf3>
 80153d8:	4602      	mov	r2, r0
 80153da:	460b      	mov	r3, r1
 80153dc:	4640      	mov	r0, r8
 80153de:	4649      	mov	r1, r9
 80153e0:	f7ea ff82 	bl	80002e8 <__aeabi_dsub>
 80153e4:	9b03      	ldr	r3, [sp, #12]
 80153e6:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80153ea:	f00a 0a02 	and.w	sl, sl, #2
 80153ee:	4604      	mov	r4, r0
 80153f0:	f1ca 0001 	rsb	r0, sl, #1
 80153f4:	460d      	mov	r5, r1
 80153f6:	f7eb f8c5 	bl	8000584 <__aeabi_i2d>
 80153fa:	4602      	mov	r2, r0
 80153fc:	460b      	mov	r3, r1
 80153fe:	4620      	mov	r0, r4
 8015400:	4629      	mov	r1, r5
 8015402:	f7eb f929 	bl	8000658 <__aeabi_dmul>
 8015406:	e6da      	b.n	80151be <__kernel_tan+0x4e>
 8015408:	2e01      	cmp	r6, #1
 801540a:	d038      	beq.n	801547e <__kernel_tan+0x30e>
 801540c:	460f      	mov	r7, r1
 801540e:	4689      	mov	r9, r1
 8015410:	4602      	mov	r2, r0
 8015412:	460b      	mov	r3, r1
 8015414:	2000      	movs	r0, #0
 8015416:	493e      	ldr	r1, [pc, #248]	; (8015510 <__kernel_tan+0x3a0>)
 8015418:	f7eb fa48 	bl	80008ac <__aeabi_ddiv>
 801541c:	2600      	movs	r6, #0
 801541e:	e9cd 0100 	strd	r0, r1, [sp]
 8015422:	4652      	mov	r2, sl
 8015424:	465b      	mov	r3, fp
 8015426:	4630      	mov	r0, r6
 8015428:	4639      	mov	r1, r7
 801542a:	f7ea ff5d 	bl	80002e8 <__aeabi_dsub>
 801542e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8015432:	4602      	mov	r2, r0
 8015434:	460b      	mov	r3, r1
 8015436:	ec51 0b18 	vmov	r0, r1, d8
 801543a:	f7ea ff55 	bl	80002e8 <__aeabi_dsub>
 801543e:	4632      	mov	r2, r6
 8015440:	462b      	mov	r3, r5
 8015442:	f7eb f909 	bl	8000658 <__aeabi_dmul>
 8015446:	46b0      	mov	r8, r6
 8015448:	460f      	mov	r7, r1
 801544a:	4606      	mov	r6, r0
 801544c:	4642      	mov	r2, r8
 801544e:	462b      	mov	r3, r5
 8015450:	4640      	mov	r0, r8
 8015452:	4649      	mov	r1, r9
 8015454:	f7eb f900 	bl	8000658 <__aeabi_dmul>
 8015458:	4b2c      	ldr	r3, [pc, #176]	; (801550c <__kernel_tan+0x39c>)
 801545a:	2200      	movs	r2, #0
 801545c:	f7ea ff46 	bl	80002ec <__adddf3>
 8015460:	4602      	mov	r2, r0
 8015462:	460b      	mov	r3, r1
 8015464:	4630      	mov	r0, r6
 8015466:	4639      	mov	r1, r7
 8015468:	f7ea ff40 	bl	80002ec <__adddf3>
 801546c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015470:	f7eb f8f2 	bl	8000658 <__aeabi_dmul>
 8015474:	4642      	mov	r2, r8
 8015476:	462b      	mov	r3, r5
 8015478:	f7ea ff38 	bl	80002ec <__adddf3>
 801547c:	e69f      	b.n	80151be <__kernel_tan+0x4e>
 801547e:	4682      	mov	sl, r0
 8015480:	468b      	mov	fp, r1
 8015482:	e69e      	b.n	80151c2 <__kernel_tan+0x52>
 8015484:	f3af 8000 	nop.w
 8015488:	54442d18 	.word	0x54442d18
 801548c:	3fe921fb 	.word	0x3fe921fb
 8015490:	33145c07 	.word	0x33145c07
 8015494:	3c81a626 	.word	0x3c81a626
	...
 80154a0:	74bf7ad4 	.word	0x74bf7ad4
 80154a4:	3efb2a70 	.word	0x3efb2a70
 80154a8:	32f0a7e9 	.word	0x32f0a7e9
 80154ac:	3f12b80f 	.word	0x3f12b80f
 80154b0:	1a8d1068 	.word	0x1a8d1068
 80154b4:	3f3026f7 	.word	0x3f3026f7
 80154b8:	fee08315 	.word	0xfee08315
 80154bc:	3f57dbc8 	.word	0x3f57dbc8
 80154c0:	e96e8493 	.word	0xe96e8493
 80154c4:	3f8226e3 	.word	0x3f8226e3
 80154c8:	1bb341fe 	.word	0x1bb341fe
 80154cc:	3faba1ba 	.word	0x3faba1ba
 80154d0:	db605373 	.word	0xdb605373
 80154d4:	bef375cb 	.word	0xbef375cb
 80154d8:	a03792a6 	.word	0xa03792a6
 80154dc:	3f147e88 	.word	0x3f147e88
 80154e0:	f2f26501 	.word	0xf2f26501
 80154e4:	3f4344d8 	.word	0x3f4344d8
 80154e8:	c9560328 	.word	0xc9560328
 80154ec:	3f6d6d22 	.word	0x3f6d6d22
 80154f0:	8406d637 	.word	0x8406d637
 80154f4:	3f9664f4 	.word	0x3f9664f4
 80154f8:	1110fe7a 	.word	0x1110fe7a
 80154fc:	3fc11111 	.word	0x3fc11111
 8015500:	55555563 	.word	0x55555563
 8015504:	3fd55555 	.word	0x3fd55555
 8015508:	3e2fffff 	.word	0x3e2fffff
 801550c:	3ff00000 	.word	0x3ff00000
 8015510:	bff00000 	.word	0xbff00000
 8015514:	3fe59427 	.word	0x3fe59427

08015518 <fabs>:
 8015518:	ec51 0b10 	vmov	r0, r1, d0
 801551c:	ee10 2a10 	vmov	r2, s0
 8015520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015524:	ec43 2b10 	vmov	d0, r2, r3
 8015528:	4770      	bx	lr

0801552a <finite>:
 801552a:	b082      	sub	sp, #8
 801552c:	ed8d 0b00 	vstr	d0, [sp]
 8015530:	9801      	ldr	r0, [sp, #4]
 8015532:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015536:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801553a:	0fc0      	lsrs	r0, r0, #31
 801553c:	b002      	add	sp, #8
 801553e:	4770      	bx	lr

08015540 <nan>:
 8015540:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015548 <nan+0x8>
 8015544:	4770      	bx	lr
 8015546:	bf00      	nop
 8015548:	00000000 	.word	0x00000000
 801554c:	7ff80000 	.word	0x7ff80000

08015550 <rint>:
 8015550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015552:	ec51 0b10 	vmov	r0, r1, d0
 8015556:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801555a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801555e:	2e13      	cmp	r6, #19
 8015560:	ee10 4a10 	vmov	r4, s0
 8015564:	460b      	mov	r3, r1
 8015566:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801556a:	dc58      	bgt.n	801561e <rint+0xce>
 801556c:	2e00      	cmp	r6, #0
 801556e:	da2b      	bge.n	80155c8 <rint+0x78>
 8015570:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015574:	4302      	orrs	r2, r0
 8015576:	d023      	beq.n	80155c0 <rint+0x70>
 8015578:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801557c:	4302      	orrs	r2, r0
 801557e:	4254      	negs	r4, r2
 8015580:	4314      	orrs	r4, r2
 8015582:	0c4b      	lsrs	r3, r1, #17
 8015584:	0b24      	lsrs	r4, r4, #12
 8015586:	045b      	lsls	r3, r3, #17
 8015588:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801558c:	ea44 0103 	orr.w	r1, r4, r3
 8015590:	4b32      	ldr	r3, [pc, #200]	; (801565c <rint+0x10c>)
 8015592:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015596:	e9d3 6700 	ldrd	r6, r7, [r3]
 801559a:	4602      	mov	r2, r0
 801559c:	460b      	mov	r3, r1
 801559e:	4630      	mov	r0, r6
 80155a0:	4639      	mov	r1, r7
 80155a2:	f7ea fea3 	bl	80002ec <__adddf3>
 80155a6:	e9cd 0100 	strd	r0, r1, [sp]
 80155aa:	463b      	mov	r3, r7
 80155ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155b0:	4632      	mov	r2, r6
 80155b2:	f7ea fe99 	bl	80002e8 <__aeabi_dsub>
 80155b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80155be:	4639      	mov	r1, r7
 80155c0:	ec41 0b10 	vmov	d0, r0, r1
 80155c4:	b003      	add	sp, #12
 80155c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155c8:	4a25      	ldr	r2, [pc, #148]	; (8015660 <rint+0x110>)
 80155ca:	4132      	asrs	r2, r6
 80155cc:	ea01 0702 	and.w	r7, r1, r2
 80155d0:	4307      	orrs	r7, r0
 80155d2:	d0f5      	beq.n	80155c0 <rint+0x70>
 80155d4:	0851      	lsrs	r1, r2, #1
 80155d6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80155da:	4314      	orrs	r4, r2
 80155dc:	d00c      	beq.n	80155f8 <rint+0xa8>
 80155de:	ea23 0201 	bic.w	r2, r3, r1
 80155e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80155e6:	2e13      	cmp	r6, #19
 80155e8:	fa43 f606 	asr.w	r6, r3, r6
 80155ec:	bf0c      	ite	eq
 80155ee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80155f2:	2400      	movne	r4, #0
 80155f4:	ea42 0306 	orr.w	r3, r2, r6
 80155f8:	4918      	ldr	r1, [pc, #96]	; (801565c <rint+0x10c>)
 80155fa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80155fe:	4622      	mov	r2, r4
 8015600:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015604:	4620      	mov	r0, r4
 8015606:	4629      	mov	r1, r5
 8015608:	f7ea fe70 	bl	80002ec <__adddf3>
 801560c:	e9cd 0100 	strd	r0, r1, [sp]
 8015610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015614:	4622      	mov	r2, r4
 8015616:	462b      	mov	r3, r5
 8015618:	f7ea fe66 	bl	80002e8 <__aeabi_dsub>
 801561c:	e7d0      	b.n	80155c0 <rint+0x70>
 801561e:	2e33      	cmp	r6, #51	; 0x33
 8015620:	dd07      	ble.n	8015632 <rint+0xe2>
 8015622:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015626:	d1cb      	bne.n	80155c0 <rint+0x70>
 8015628:	ee10 2a10 	vmov	r2, s0
 801562c:	f7ea fe5e 	bl	80002ec <__adddf3>
 8015630:	e7c6      	b.n	80155c0 <rint+0x70>
 8015632:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015636:	f04f 36ff 	mov.w	r6, #4294967295
 801563a:	40d6      	lsrs	r6, r2
 801563c:	4230      	tst	r0, r6
 801563e:	d0bf      	beq.n	80155c0 <rint+0x70>
 8015640:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015644:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015648:	bf1f      	itttt	ne
 801564a:	ea24 0101 	bicne.w	r1, r4, r1
 801564e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015652:	fa44 f202 	asrne.w	r2, r4, r2
 8015656:	ea41 0402 	orrne.w	r4, r1, r2
 801565a:	e7cd      	b.n	80155f8 <rint+0xa8>
 801565c:	08039f78 	.word	0x08039f78
 8015660:	000fffff 	.word	0x000fffff
 8015664:	00000000 	.word	0x00000000

08015668 <scalbn>:
 8015668:	b570      	push	{r4, r5, r6, lr}
 801566a:	ec55 4b10 	vmov	r4, r5, d0
 801566e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015672:	4606      	mov	r6, r0
 8015674:	462b      	mov	r3, r5
 8015676:	b99a      	cbnz	r2, 80156a0 <scalbn+0x38>
 8015678:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801567c:	4323      	orrs	r3, r4
 801567e:	d036      	beq.n	80156ee <scalbn+0x86>
 8015680:	4b39      	ldr	r3, [pc, #228]	; (8015768 <scalbn+0x100>)
 8015682:	4629      	mov	r1, r5
 8015684:	ee10 0a10 	vmov	r0, s0
 8015688:	2200      	movs	r2, #0
 801568a:	f7ea ffe5 	bl	8000658 <__aeabi_dmul>
 801568e:	4b37      	ldr	r3, [pc, #220]	; (801576c <scalbn+0x104>)
 8015690:	429e      	cmp	r6, r3
 8015692:	4604      	mov	r4, r0
 8015694:	460d      	mov	r5, r1
 8015696:	da10      	bge.n	80156ba <scalbn+0x52>
 8015698:	a32b      	add	r3, pc, #172	; (adr r3, 8015748 <scalbn+0xe0>)
 801569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569e:	e03a      	b.n	8015716 <scalbn+0xae>
 80156a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80156a4:	428a      	cmp	r2, r1
 80156a6:	d10c      	bne.n	80156c2 <scalbn+0x5a>
 80156a8:	ee10 2a10 	vmov	r2, s0
 80156ac:	4620      	mov	r0, r4
 80156ae:	4629      	mov	r1, r5
 80156b0:	f7ea fe1c 	bl	80002ec <__adddf3>
 80156b4:	4604      	mov	r4, r0
 80156b6:	460d      	mov	r5, r1
 80156b8:	e019      	b.n	80156ee <scalbn+0x86>
 80156ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80156be:	460b      	mov	r3, r1
 80156c0:	3a36      	subs	r2, #54	; 0x36
 80156c2:	4432      	add	r2, r6
 80156c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80156c8:	428a      	cmp	r2, r1
 80156ca:	dd08      	ble.n	80156de <scalbn+0x76>
 80156cc:	2d00      	cmp	r5, #0
 80156ce:	a120      	add	r1, pc, #128	; (adr r1, 8015750 <scalbn+0xe8>)
 80156d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156d4:	da1c      	bge.n	8015710 <scalbn+0xa8>
 80156d6:	a120      	add	r1, pc, #128	; (adr r1, 8015758 <scalbn+0xf0>)
 80156d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156dc:	e018      	b.n	8015710 <scalbn+0xa8>
 80156de:	2a00      	cmp	r2, #0
 80156e0:	dd08      	ble.n	80156f4 <scalbn+0x8c>
 80156e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80156ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80156ee:	ec45 4b10 	vmov	d0, r4, r5
 80156f2:	bd70      	pop	{r4, r5, r6, pc}
 80156f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80156f8:	da19      	bge.n	801572e <scalbn+0xc6>
 80156fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80156fe:	429e      	cmp	r6, r3
 8015700:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015704:	dd0a      	ble.n	801571c <scalbn+0xb4>
 8015706:	a112      	add	r1, pc, #72	; (adr r1, 8015750 <scalbn+0xe8>)
 8015708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d1e2      	bne.n	80156d6 <scalbn+0x6e>
 8015710:	a30f      	add	r3, pc, #60	; (adr r3, 8015750 <scalbn+0xe8>)
 8015712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015716:	f7ea ff9f 	bl	8000658 <__aeabi_dmul>
 801571a:	e7cb      	b.n	80156b4 <scalbn+0x4c>
 801571c:	a10a      	add	r1, pc, #40	; (adr r1, 8015748 <scalbn+0xe0>)
 801571e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d0b8      	beq.n	8015698 <scalbn+0x30>
 8015726:	a10e      	add	r1, pc, #56	; (adr r1, 8015760 <scalbn+0xf8>)
 8015728:	e9d1 0100 	ldrd	r0, r1, [r1]
 801572c:	e7b4      	b.n	8015698 <scalbn+0x30>
 801572e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015732:	3236      	adds	r2, #54	; 0x36
 8015734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015738:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801573c:	4620      	mov	r0, r4
 801573e:	4b0c      	ldr	r3, [pc, #48]	; (8015770 <scalbn+0x108>)
 8015740:	2200      	movs	r2, #0
 8015742:	e7e8      	b.n	8015716 <scalbn+0xae>
 8015744:	f3af 8000 	nop.w
 8015748:	c2f8f359 	.word	0xc2f8f359
 801574c:	01a56e1f 	.word	0x01a56e1f
 8015750:	8800759c 	.word	0x8800759c
 8015754:	7e37e43c 	.word	0x7e37e43c
 8015758:	8800759c 	.word	0x8800759c
 801575c:	fe37e43c 	.word	0xfe37e43c
 8015760:	c2f8f359 	.word	0xc2f8f359
 8015764:	81a56e1f 	.word	0x81a56e1f
 8015768:	43500000 	.word	0x43500000
 801576c:	ffff3cb0 	.word	0xffff3cb0
 8015770:	3c900000 	.word	0x3c900000

08015774 <finitef>:
 8015774:	b082      	sub	sp, #8
 8015776:	ed8d 0a01 	vstr	s0, [sp, #4]
 801577a:	9801      	ldr	r0, [sp, #4]
 801577c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015780:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015784:	bfac      	ite	ge
 8015786:	2000      	movge	r0, #0
 8015788:	2001      	movlt	r0, #1
 801578a:	b002      	add	sp, #8
 801578c:	4770      	bx	lr
	...

08015790 <nanf>:
 8015790:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015798 <nanf+0x8>
 8015794:	4770      	bx	lr
 8015796:	bf00      	nop
 8015798:	7fc00000 	.word	0x7fc00000

0801579c <abort>:
 801579c:	b508      	push	{r3, lr}
 801579e:	2006      	movs	r0, #6
 80157a0:	f001 fa84 	bl	8016cac <raise>
 80157a4:	2001      	movs	r0, #1
 80157a6:	f7f1 f9c3 	bl	8006b30 <_exit>
	...

080157ac <__assert_func>:
 80157ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80157ae:	4614      	mov	r4, r2
 80157b0:	461a      	mov	r2, r3
 80157b2:	4b09      	ldr	r3, [pc, #36]	; (80157d8 <__assert_func+0x2c>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	4605      	mov	r5, r0
 80157b8:	68d8      	ldr	r0, [r3, #12]
 80157ba:	b14c      	cbz	r4, 80157d0 <__assert_func+0x24>
 80157bc:	4b07      	ldr	r3, [pc, #28]	; (80157dc <__assert_func+0x30>)
 80157be:	9100      	str	r1, [sp, #0]
 80157c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80157c4:	4906      	ldr	r1, [pc, #24]	; (80157e0 <__assert_func+0x34>)
 80157c6:	462b      	mov	r3, r5
 80157c8:	f000 f834 	bl	8015834 <fiprintf>
 80157cc:	f7ff ffe6 	bl	801579c <abort>
 80157d0:	4b04      	ldr	r3, [pc, #16]	; (80157e4 <__assert_func+0x38>)
 80157d2:	461c      	mov	r4, r3
 80157d4:	e7f3      	b.n	80157be <__assert_func+0x12>
 80157d6:	bf00      	nop
 80157d8:	20000170 	.word	0x20000170
 80157dc:	08039f88 	.word	0x08039f88
 80157e0:	08039f95 	.word	0x08039f95
 80157e4:	08039fc3 	.word	0x08039fc3

080157e8 <atof>:
 80157e8:	2100      	movs	r1, #0
 80157ea:	f002 b8e1 	b.w	80179b0 <strtod>
	...

080157f0 <calloc>:
 80157f0:	4b02      	ldr	r3, [pc, #8]	; (80157fc <calloc+0xc>)
 80157f2:	460a      	mov	r2, r1
 80157f4:	4601      	mov	r1, r0
 80157f6:	6818      	ldr	r0, [r3, #0]
 80157f8:	f000 b904 	b.w	8015a04 <_calloc_r>
 80157fc:	20000170 	.word	0x20000170

08015800 <__errno>:
 8015800:	4b01      	ldr	r3, [pc, #4]	; (8015808 <__errno+0x8>)
 8015802:	6818      	ldr	r0, [r3, #0]
 8015804:	4770      	bx	lr
 8015806:	bf00      	nop
 8015808:	20000170 	.word	0x20000170

0801580c <exit>:
 801580c:	b508      	push	{r3, lr}
 801580e:	4b07      	ldr	r3, [pc, #28]	; (801582c <exit+0x20>)
 8015810:	4604      	mov	r4, r0
 8015812:	b113      	cbz	r3, 801581a <exit+0xe>
 8015814:	2100      	movs	r1, #0
 8015816:	f002 fa3d 	bl	8017c94 <__call_exitprocs>
 801581a:	4b05      	ldr	r3, [pc, #20]	; (8015830 <exit+0x24>)
 801581c:	6818      	ldr	r0, [r3, #0]
 801581e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015820:	b103      	cbz	r3, 8015824 <exit+0x18>
 8015822:	4798      	blx	r3
 8015824:	4620      	mov	r0, r4
 8015826:	f7f1 f983 	bl	8006b30 <_exit>
 801582a:	bf00      	nop
 801582c:	08017c95 	.word	0x08017c95
 8015830:	08039fc4 	.word	0x08039fc4

08015834 <fiprintf>:
 8015834:	b40e      	push	{r1, r2, r3}
 8015836:	b503      	push	{r0, r1, lr}
 8015838:	4601      	mov	r1, r0
 801583a:	ab03      	add	r3, sp, #12
 801583c:	4805      	ldr	r0, [pc, #20]	; (8015854 <fiprintf+0x20>)
 801583e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015842:	6800      	ldr	r0, [r0, #0]
 8015844:	9301      	str	r3, [sp, #4]
 8015846:	f000 f9c1 	bl	8015bcc <_vfiprintf_r>
 801584a:	b002      	add	sp, #8
 801584c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015850:	b003      	add	sp, #12
 8015852:	4770      	bx	lr
 8015854:	20000170 	.word	0x20000170

08015858 <_fwrite_r>:
 8015858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801585c:	9c08      	ldr	r4, [sp, #32]
 801585e:	4689      	mov	r9, r1
 8015860:	4617      	mov	r7, r2
 8015862:	fb02 f803 	mul.w	r8, r2, r3
 8015866:	4605      	mov	r5, r0
 8015868:	b118      	cbz	r0, 8015872 <_fwrite_r+0x1a>
 801586a:	6983      	ldr	r3, [r0, #24]
 801586c:	b90b      	cbnz	r3, 8015872 <_fwrite_r+0x1a>
 801586e:	f003 fa01 	bl	8018c74 <__sinit>
 8015872:	4b26      	ldr	r3, [pc, #152]	; (801590c <_fwrite_r+0xb4>)
 8015874:	429c      	cmp	r4, r3
 8015876:	d123      	bne.n	80158c0 <_fwrite_r+0x68>
 8015878:	686c      	ldr	r4, [r5, #4]
 801587a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801587c:	07de      	lsls	r6, r3, #31
 801587e:	d405      	bmi.n	801588c <_fwrite_r+0x34>
 8015880:	89a3      	ldrh	r3, [r4, #12]
 8015882:	0598      	lsls	r0, r3, #22
 8015884:	d402      	bmi.n	801588c <_fwrite_r+0x34>
 8015886:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015888:	f000 f879 	bl	801597e <__retarget_lock_acquire_recursive>
 801588c:	89a3      	ldrh	r3, [r4, #12]
 801588e:	0719      	lsls	r1, r3, #28
 8015890:	d520      	bpl.n	80158d4 <_fwrite_r+0x7c>
 8015892:	6923      	ldr	r3, [r4, #16]
 8015894:	b1f3      	cbz	r3, 80158d4 <_fwrite_r+0x7c>
 8015896:	2600      	movs	r6, #0
 8015898:	4546      	cmp	r6, r8
 801589a:	d029      	beq.n	80158f0 <_fwrite_r+0x98>
 801589c:	68a0      	ldr	r0, [r4, #8]
 801589e:	f819 1006 	ldrb.w	r1, [r9, r6]
 80158a2:	3801      	subs	r0, #1
 80158a4:	2800      	cmp	r0, #0
 80158a6:	60a0      	str	r0, [r4, #8]
 80158a8:	da04      	bge.n	80158b4 <_fwrite_r+0x5c>
 80158aa:	69a3      	ldr	r3, [r4, #24]
 80158ac:	4298      	cmp	r0, r3
 80158ae:	db19      	blt.n	80158e4 <_fwrite_r+0x8c>
 80158b0:	290a      	cmp	r1, #10
 80158b2:	d017      	beq.n	80158e4 <_fwrite_r+0x8c>
 80158b4:	6823      	ldr	r3, [r4, #0]
 80158b6:	1c5a      	adds	r2, r3, #1
 80158b8:	6022      	str	r2, [r4, #0]
 80158ba:	7019      	strb	r1, [r3, #0]
 80158bc:	3601      	adds	r6, #1
 80158be:	e7eb      	b.n	8015898 <_fwrite_r+0x40>
 80158c0:	4b13      	ldr	r3, [pc, #76]	; (8015910 <_fwrite_r+0xb8>)
 80158c2:	429c      	cmp	r4, r3
 80158c4:	d101      	bne.n	80158ca <_fwrite_r+0x72>
 80158c6:	68ac      	ldr	r4, [r5, #8]
 80158c8:	e7d7      	b.n	801587a <_fwrite_r+0x22>
 80158ca:	4b12      	ldr	r3, [pc, #72]	; (8015914 <_fwrite_r+0xbc>)
 80158cc:	429c      	cmp	r4, r3
 80158ce:	bf08      	it	eq
 80158d0:	68ec      	ldreq	r4, [r5, #12]
 80158d2:	e7d2      	b.n	801587a <_fwrite_r+0x22>
 80158d4:	4621      	mov	r1, r4
 80158d6:	4628      	mov	r0, r5
 80158d8:	f002 f96e 	bl	8017bb8 <__swsetup_r>
 80158dc:	2800      	cmp	r0, #0
 80158de:	d0da      	beq.n	8015896 <_fwrite_r+0x3e>
 80158e0:	2600      	movs	r6, #0
 80158e2:	e005      	b.n	80158f0 <_fwrite_r+0x98>
 80158e4:	4622      	mov	r2, r4
 80158e6:	4628      	mov	r0, r5
 80158e8:	f002 f914 	bl	8017b14 <__swbuf_r>
 80158ec:	3001      	adds	r0, #1
 80158ee:	d1e5      	bne.n	80158bc <_fwrite_r+0x64>
 80158f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80158f2:	07da      	lsls	r2, r3, #31
 80158f4:	d405      	bmi.n	8015902 <_fwrite_r+0xaa>
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	059b      	lsls	r3, r3, #22
 80158fa:	d402      	bmi.n	8015902 <_fwrite_r+0xaa>
 80158fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80158fe:	f000 f83f 	bl	8015980 <__retarget_lock_release_recursive>
 8015902:	fbb6 f0f7 	udiv	r0, r6, r7
 8015906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801590a:	bf00      	nop
 801590c:	0803a220 	.word	0x0803a220
 8015910:	0803a240 	.word	0x0803a240
 8015914:	0803a200 	.word	0x0803a200

08015918 <fwrite>:
 8015918:	b507      	push	{r0, r1, r2, lr}
 801591a:	9300      	str	r3, [sp, #0]
 801591c:	4613      	mov	r3, r2
 801591e:	460a      	mov	r2, r1
 8015920:	4601      	mov	r1, r0
 8015922:	4803      	ldr	r0, [pc, #12]	; (8015930 <fwrite+0x18>)
 8015924:	6800      	ldr	r0, [r0, #0]
 8015926:	f7ff ff97 	bl	8015858 <_fwrite_r>
 801592a:	b003      	add	sp, #12
 801592c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015930:	20000170 	.word	0x20000170

08015934 <__libc_init_array>:
 8015934:	b570      	push	{r4, r5, r6, lr}
 8015936:	4d0d      	ldr	r5, [pc, #52]	; (801596c <__libc_init_array+0x38>)
 8015938:	4c0d      	ldr	r4, [pc, #52]	; (8015970 <__libc_init_array+0x3c>)
 801593a:	1b64      	subs	r4, r4, r5
 801593c:	10a4      	asrs	r4, r4, #2
 801593e:	2600      	movs	r6, #0
 8015940:	42a6      	cmp	r6, r4
 8015942:	d109      	bne.n	8015958 <__libc_init_array+0x24>
 8015944:	4d0b      	ldr	r5, [pc, #44]	; (8015974 <__libc_init_array+0x40>)
 8015946:	4c0c      	ldr	r4, [pc, #48]	; (8015978 <__libc_init_array+0x44>)
 8015948:	f004 fd22 	bl	801a390 <_init>
 801594c:	1b64      	subs	r4, r4, r5
 801594e:	10a4      	asrs	r4, r4, #2
 8015950:	2600      	movs	r6, #0
 8015952:	42a6      	cmp	r6, r4
 8015954:	d105      	bne.n	8015962 <__libc_init_array+0x2e>
 8015956:	bd70      	pop	{r4, r5, r6, pc}
 8015958:	f855 3b04 	ldr.w	r3, [r5], #4
 801595c:	4798      	blx	r3
 801595e:	3601      	adds	r6, #1
 8015960:	e7ee      	b.n	8015940 <__libc_init_array+0xc>
 8015962:	f855 3b04 	ldr.w	r3, [r5], #4
 8015966:	4798      	blx	r3
 8015968:	3601      	adds	r6, #1
 801596a:	e7f2      	b.n	8015952 <__libc_init_array+0x1e>
 801596c:	0803a444 	.word	0x0803a444
 8015970:	0803a444 	.word	0x0803a444
 8015974:	0803a444 	.word	0x0803a444
 8015978:	0803a44c 	.word	0x0803a44c

0801597c <__retarget_lock_init_recursive>:
 801597c:	4770      	bx	lr

0801597e <__retarget_lock_acquire_recursive>:
 801597e:	4770      	bx	lr

08015980 <__retarget_lock_release_recursive>:
 8015980:	4770      	bx	lr
	...

08015984 <malloc>:
 8015984:	4b02      	ldr	r3, [pc, #8]	; (8015990 <malloc+0xc>)
 8015986:	4601      	mov	r1, r0
 8015988:	6818      	ldr	r0, [r3, #0]
 801598a:	f000 b89b 	b.w	8015ac4 <_malloc_r>
 801598e:	bf00      	nop
 8015990:	20000170 	.word	0x20000170

08015994 <free>:
 8015994:	4b02      	ldr	r3, [pc, #8]	; (80159a0 <free+0xc>)
 8015996:	4601      	mov	r1, r0
 8015998:	6818      	ldr	r0, [r3, #0]
 801599a:	f000 b843 	b.w	8015a24 <_free_r>
 801599e:	bf00      	nop
 80159a0:	20000170 	.word	0x20000170

080159a4 <memcpy>:
 80159a4:	440a      	add	r2, r1
 80159a6:	4291      	cmp	r1, r2
 80159a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80159ac:	d100      	bne.n	80159b0 <memcpy+0xc>
 80159ae:	4770      	bx	lr
 80159b0:	b510      	push	{r4, lr}
 80159b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159ba:	4291      	cmp	r1, r2
 80159bc:	d1f9      	bne.n	80159b2 <memcpy+0xe>
 80159be:	bd10      	pop	{r4, pc}

080159c0 <memmove>:
 80159c0:	4288      	cmp	r0, r1
 80159c2:	b510      	push	{r4, lr}
 80159c4:	eb01 0402 	add.w	r4, r1, r2
 80159c8:	d902      	bls.n	80159d0 <memmove+0x10>
 80159ca:	4284      	cmp	r4, r0
 80159cc:	4623      	mov	r3, r4
 80159ce:	d807      	bhi.n	80159e0 <memmove+0x20>
 80159d0:	1e43      	subs	r3, r0, #1
 80159d2:	42a1      	cmp	r1, r4
 80159d4:	d008      	beq.n	80159e8 <memmove+0x28>
 80159d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80159de:	e7f8      	b.n	80159d2 <memmove+0x12>
 80159e0:	4402      	add	r2, r0
 80159e2:	4601      	mov	r1, r0
 80159e4:	428a      	cmp	r2, r1
 80159e6:	d100      	bne.n	80159ea <memmove+0x2a>
 80159e8:	bd10      	pop	{r4, pc}
 80159ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80159ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80159f2:	e7f7      	b.n	80159e4 <memmove+0x24>

080159f4 <memset>:
 80159f4:	4402      	add	r2, r0
 80159f6:	4603      	mov	r3, r0
 80159f8:	4293      	cmp	r3, r2
 80159fa:	d100      	bne.n	80159fe <memset+0xa>
 80159fc:	4770      	bx	lr
 80159fe:	f803 1b01 	strb.w	r1, [r3], #1
 8015a02:	e7f9      	b.n	80159f8 <memset+0x4>

08015a04 <_calloc_r>:
 8015a04:	b513      	push	{r0, r1, r4, lr}
 8015a06:	434a      	muls	r2, r1
 8015a08:	4611      	mov	r1, r2
 8015a0a:	9201      	str	r2, [sp, #4]
 8015a0c:	f000 f85a 	bl	8015ac4 <_malloc_r>
 8015a10:	4604      	mov	r4, r0
 8015a12:	b118      	cbz	r0, 8015a1c <_calloc_r+0x18>
 8015a14:	9a01      	ldr	r2, [sp, #4]
 8015a16:	2100      	movs	r1, #0
 8015a18:	f7ff ffec 	bl	80159f4 <memset>
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	b002      	add	sp, #8
 8015a20:	bd10      	pop	{r4, pc}
	...

08015a24 <_free_r>:
 8015a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a26:	2900      	cmp	r1, #0
 8015a28:	d048      	beq.n	8015abc <_free_r+0x98>
 8015a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a2e:	9001      	str	r0, [sp, #4]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f1a1 0404 	sub.w	r4, r1, #4
 8015a36:	bfb8      	it	lt
 8015a38:	18e4      	addlt	r4, r4, r3
 8015a3a:	f003 fda1 	bl	8019580 <__malloc_lock>
 8015a3e:	4a20      	ldr	r2, [pc, #128]	; (8015ac0 <_free_r+0x9c>)
 8015a40:	9801      	ldr	r0, [sp, #4]
 8015a42:	6813      	ldr	r3, [r2, #0]
 8015a44:	4615      	mov	r5, r2
 8015a46:	b933      	cbnz	r3, 8015a56 <_free_r+0x32>
 8015a48:	6063      	str	r3, [r4, #4]
 8015a4a:	6014      	str	r4, [r2, #0]
 8015a4c:	b003      	add	sp, #12
 8015a4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a52:	f003 bd9b 	b.w	801958c <__malloc_unlock>
 8015a56:	42a3      	cmp	r3, r4
 8015a58:	d90b      	bls.n	8015a72 <_free_r+0x4e>
 8015a5a:	6821      	ldr	r1, [r4, #0]
 8015a5c:	1862      	adds	r2, r4, r1
 8015a5e:	4293      	cmp	r3, r2
 8015a60:	bf04      	itt	eq
 8015a62:	681a      	ldreq	r2, [r3, #0]
 8015a64:	685b      	ldreq	r3, [r3, #4]
 8015a66:	6063      	str	r3, [r4, #4]
 8015a68:	bf04      	itt	eq
 8015a6a:	1852      	addeq	r2, r2, r1
 8015a6c:	6022      	streq	r2, [r4, #0]
 8015a6e:	602c      	str	r4, [r5, #0]
 8015a70:	e7ec      	b.n	8015a4c <_free_r+0x28>
 8015a72:	461a      	mov	r2, r3
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	b10b      	cbz	r3, 8015a7c <_free_r+0x58>
 8015a78:	42a3      	cmp	r3, r4
 8015a7a:	d9fa      	bls.n	8015a72 <_free_r+0x4e>
 8015a7c:	6811      	ldr	r1, [r2, #0]
 8015a7e:	1855      	adds	r5, r2, r1
 8015a80:	42a5      	cmp	r5, r4
 8015a82:	d10b      	bne.n	8015a9c <_free_r+0x78>
 8015a84:	6824      	ldr	r4, [r4, #0]
 8015a86:	4421      	add	r1, r4
 8015a88:	1854      	adds	r4, r2, r1
 8015a8a:	42a3      	cmp	r3, r4
 8015a8c:	6011      	str	r1, [r2, #0]
 8015a8e:	d1dd      	bne.n	8015a4c <_free_r+0x28>
 8015a90:	681c      	ldr	r4, [r3, #0]
 8015a92:	685b      	ldr	r3, [r3, #4]
 8015a94:	6053      	str	r3, [r2, #4]
 8015a96:	4421      	add	r1, r4
 8015a98:	6011      	str	r1, [r2, #0]
 8015a9a:	e7d7      	b.n	8015a4c <_free_r+0x28>
 8015a9c:	d902      	bls.n	8015aa4 <_free_r+0x80>
 8015a9e:	230c      	movs	r3, #12
 8015aa0:	6003      	str	r3, [r0, #0]
 8015aa2:	e7d3      	b.n	8015a4c <_free_r+0x28>
 8015aa4:	6825      	ldr	r5, [r4, #0]
 8015aa6:	1961      	adds	r1, r4, r5
 8015aa8:	428b      	cmp	r3, r1
 8015aaa:	bf04      	itt	eq
 8015aac:	6819      	ldreq	r1, [r3, #0]
 8015aae:	685b      	ldreq	r3, [r3, #4]
 8015ab0:	6063      	str	r3, [r4, #4]
 8015ab2:	bf04      	itt	eq
 8015ab4:	1949      	addeq	r1, r1, r5
 8015ab6:	6021      	streq	r1, [r4, #0]
 8015ab8:	6054      	str	r4, [r2, #4]
 8015aba:	e7c7      	b.n	8015a4c <_free_r+0x28>
 8015abc:	b003      	add	sp, #12
 8015abe:	bd30      	pop	{r4, r5, pc}
 8015ac0:	20000918 	.word	0x20000918

08015ac4 <_malloc_r>:
 8015ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ac6:	1ccd      	adds	r5, r1, #3
 8015ac8:	f025 0503 	bic.w	r5, r5, #3
 8015acc:	3508      	adds	r5, #8
 8015ace:	2d0c      	cmp	r5, #12
 8015ad0:	bf38      	it	cc
 8015ad2:	250c      	movcc	r5, #12
 8015ad4:	2d00      	cmp	r5, #0
 8015ad6:	4606      	mov	r6, r0
 8015ad8:	db01      	blt.n	8015ade <_malloc_r+0x1a>
 8015ada:	42a9      	cmp	r1, r5
 8015adc:	d903      	bls.n	8015ae6 <_malloc_r+0x22>
 8015ade:	230c      	movs	r3, #12
 8015ae0:	6033      	str	r3, [r6, #0]
 8015ae2:	2000      	movs	r0, #0
 8015ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ae6:	f003 fd4b 	bl	8019580 <__malloc_lock>
 8015aea:	4921      	ldr	r1, [pc, #132]	; (8015b70 <_malloc_r+0xac>)
 8015aec:	680a      	ldr	r2, [r1, #0]
 8015aee:	4614      	mov	r4, r2
 8015af0:	b99c      	cbnz	r4, 8015b1a <_malloc_r+0x56>
 8015af2:	4f20      	ldr	r7, [pc, #128]	; (8015b74 <_malloc_r+0xb0>)
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	b923      	cbnz	r3, 8015b02 <_malloc_r+0x3e>
 8015af8:	4621      	mov	r1, r4
 8015afa:	4630      	mov	r0, r6
 8015afc:	f001 f89e 	bl	8016c3c <_sbrk_r>
 8015b00:	6038      	str	r0, [r7, #0]
 8015b02:	4629      	mov	r1, r5
 8015b04:	4630      	mov	r0, r6
 8015b06:	f001 f899 	bl	8016c3c <_sbrk_r>
 8015b0a:	1c43      	adds	r3, r0, #1
 8015b0c:	d123      	bne.n	8015b56 <_malloc_r+0x92>
 8015b0e:	230c      	movs	r3, #12
 8015b10:	6033      	str	r3, [r6, #0]
 8015b12:	4630      	mov	r0, r6
 8015b14:	f003 fd3a 	bl	801958c <__malloc_unlock>
 8015b18:	e7e3      	b.n	8015ae2 <_malloc_r+0x1e>
 8015b1a:	6823      	ldr	r3, [r4, #0]
 8015b1c:	1b5b      	subs	r3, r3, r5
 8015b1e:	d417      	bmi.n	8015b50 <_malloc_r+0x8c>
 8015b20:	2b0b      	cmp	r3, #11
 8015b22:	d903      	bls.n	8015b2c <_malloc_r+0x68>
 8015b24:	6023      	str	r3, [r4, #0]
 8015b26:	441c      	add	r4, r3
 8015b28:	6025      	str	r5, [r4, #0]
 8015b2a:	e004      	b.n	8015b36 <_malloc_r+0x72>
 8015b2c:	6863      	ldr	r3, [r4, #4]
 8015b2e:	42a2      	cmp	r2, r4
 8015b30:	bf0c      	ite	eq
 8015b32:	600b      	streq	r3, [r1, #0]
 8015b34:	6053      	strne	r3, [r2, #4]
 8015b36:	4630      	mov	r0, r6
 8015b38:	f003 fd28 	bl	801958c <__malloc_unlock>
 8015b3c:	f104 000b 	add.w	r0, r4, #11
 8015b40:	1d23      	adds	r3, r4, #4
 8015b42:	f020 0007 	bic.w	r0, r0, #7
 8015b46:	1ac2      	subs	r2, r0, r3
 8015b48:	d0cc      	beq.n	8015ae4 <_malloc_r+0x20>
 8015b4a:	1a1b      	subs	r3, r3, r0
 8015b4c:	50a3      	str	r3, [r4, r2]
 8015b4e:	e7c9      	b.n	8015ae4 <_malloc_r+0x20>
 8015b50:	4622      	mov	r2, r4
 8015b52:	6864      	ldr	r4, [r4, #4]
 8015b54:	e7cc      	b.n	8015af0 <_malloc_r+0x2c>
 8015b56:	1cc4      	adds	r4, r0, #3
 8015b58:	f024 0403 	bic.w	r4, r4, #3
 8015b5c:	42a0      	cmp	r0, r4
 8015b5e:	d0e3      	beq.n	8015b28 <_malloc_r+0x64>
 8015b60:	1a21      	subs	r1, r4, r0
 8015b62:	4630      	mov	r0, r6
 8015b64:	f001 f86a 	bl	8016c3c <_sbrk_r>
 8015b68:	3001      	adds	r0, #1
 8015b6a:	d1dd      	bne.n	8015b28 <_malloc_r+0x64>
 8015b6c:	e7cf      	b.n	8015b0e <_malloc_r+0x4a>
 8015b6e:	bf00      	nop
 8015b70:	20000918 	.word	0x20000918
 8015b74:	2000091c 	.word	0x2000091c

08015b78 <__sfputc_r>:
 8015b78:	6893      	ldr	r3, [r2, #8]
 8015b7a:	3b01      	subs	r3, #1
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	b410      	push	{r4}
 8015b80:	6093      	str	r3, [r2, #8]
 8015b82:	da08      	bge.n	8015b96 <__sfputc_r+0x1e>
 8015b84:	6994      	ldr	r4, [r2, #24]
 8015b86:	42a3      	cmp	r3, r4
 8015b88:	db01      	blt.n	8015b8e <__sfputc_r+0x16>
 8015b8a:	290a      	cmp	r1, #10
 8015b8c:	d103      	bne.n	8015b96 <__sfputc_r+0x1e>
 8015b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b92:	f001 bfbf 	b.w	8017b14 <__swbuf_r>
 8015b96:	6813      	ldr	r3, [r2, #0]
 8015b98:	1c58      	adds	r0, r3, #1
 8015b9a:	6010      	str	r0, [r2, #0]
 8015b9c:	7019      	strb	r1, [r3, #0]
 8015b9e:	4608      	mov	r0, r1
 8015ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ba4:	4770      	bx	lr

08015ba6 <__sfputs_r>:
 8015ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ba8:	4606      	mov	r6, r0
 8015baa:	460f      	mov	r7, r1
 8015bac:	4614      	mov	r4, r2
 8015bae:	18d5      	adds	r5, r2, r3
 8015bb0:	42ac      	cmp	r4, r5
 8015bb2:	d101      	bne.n	8015bb8 <__sfputs_r+0x12>
 8015bb4:	2000      	movs	r0, #0
 8015bb6:	e007      	b.n	8015bc8 <__sfputs_r+0x22>
 8015bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bbc:	463a      	mov	r2, r7
 8015bbe:	4630      	mov	r0, r6
 8015bc0:	f7ff ffda 	bl	8015b78 <__sfputc_r>
 8015bc4:	1c43      	adds	r3, r0, #1
 8015bc6:	d1f3      	bne.n	8015bb0 <__sfputs_r+0xa>
 8015bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015bcc <_vfiprintf_r>:
 8015bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd0:	460d      	mov	r5, r1
 8015bd2:	b09d      	sub	sp, #116	; 0x74
 8015bd4:	4614      	mov	r4, r2
 8015bd6:	4698      	mov	r8, r3
 8015bd8:	4606      	mov	r6, r0
 8015bda:	b118      	cbz	r0, 8015be4 <_vfiprintf_r+0x18>
 8015bdc:	6983      	ldr	r3, [r0, #24]
 8015bde:	b90b      	cbnz	r3, 8015be4 <_vfiprintf_r+0x18>
 8015be0:	f003 f848 	bl	8018c74 <__sinit>
 8015be4:	4b89      	ldr	r3, [pc, #548]	; (8015e0c <_vfiprintf_r+0x240>)
 8015be6:	429d      	cmp	r5, r3
 8015be8:	d11b      	bne.n	8015c22 <_vfiprintf_r+0x56>
 8015bea:	6875      	ldr	r5, [r6, #4]
 8015bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bee:	07d9      	lsls	r1, r3, #31
 8015bf0:	d405      	bmi.n	8015bfe <_vfiprintf_r+0x32>
 8015bf2:	89ab      	ldrh	r3, [r5, #12]
 8015bf4:	059a      	lsls	r2, r3, #22
 8015bf6:	d402      	bmi.n	8015bfe <_vfiprintf_r+0x32>
 8015bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bfa:	f7ff fec0 	bl	801597e <__retarget_lock_acquire_recursive>
 8015bfe:	89ab      	ldrh	r3, [r5, #12]
 8015c00:	071b      	lsls	r3, r3, #28
 8015c02:	d501      	bpl.n	8015c08 <_vfiprintf_r+0x3c>
 8015c04:	692b      	ldr	r3, [r5, #16]
 8015c06:	b9eb      	cbnz	r3, 8015c44 <_vfiprintf_r+0x78>
 8015c08:	4629      	mov	r1, r5
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f001 ffd4 	bl	8017bb8 <__swsetup_r>
 8015c10:	b1c0      	cbz	r0, 8015c44 <_vfiprintf_r+0x78>
 8015c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c14:	07dc      	lsls	r4, r3, #31
 8015c16:	d50e      	bpl.n	8015c36 <_vfiprintf_r+0x6a>
 8015c18:	f04f 30ff 	mov.w	r0, #4294967295
 8015c1c:	b01d      	add	sp, #116	; 0x74
 8015c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c22:	4b7b      	ldr	r3, [pc, #492]	; (8015e10 <_vfiprintf_r+0x244>)
 8015c24:	429d      	cmp	r5, r3
 8015c26:	d101      	bne.n	8015c2c <_vfiprintf_r+0x60>
 8015c28:	68b5      	ldr	r5, [r6, #8]
 8015c2a:	e7df      	b.n	8015bec <_vfiprintf_r+0x20>
 8015c2c:	4b79      	ldr	r3, [pc, #484]	; (8015e14 <_vfiprintf_r+0x248>)
 8015c2e:	429d      	cmp	r5, r3
 8015c30:	bf08      	it	eq
 8015c32:	68f5      	ldreq	r5, [r6, #12]
 8015c34:	e7da      	b.n	8015bec <_vfiprintf_r+0x20>
 8015c36:	89ab      	ldrh	r3, [r5, #12]
 8015c38:	0598      	lsls	r0, r3, #22
 8015c3a:	d4ed      	bmi.n	8015c18 <_vfiprintf_r+0x4c>
 8015c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c3e:	f7ff fe9f 	bl	8015980 <__retarget_lock_release_recursive>
 8015c42:	e7e9      	b.n	8015c18 <_vfiprintf_r+0x4c>
 8015c44:	2300      	movs	r3, #0
 8015c46:	9309      	str	r3, [sp, #36]	; 0x24
 8015c48:	2320      	movs	r3, #32
 8015c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c52:	2330      	movs	r3, #48	; 0x30
 8015c54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015e18 <_vfiprintf_r+0x24c>
 8015c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c5c:	f04f 0901 	mov.w	r9, #1
 8015c60:	4623      	mov	r3, r4
 8015c62:	469a      	mov	sl, r3
 8015c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c68:	b10a      	cbz	r2, 8015c6e <_vfiprintf_r+0xa2>
 8015c6a:	2a25      	cmp	r2, #37	; 0x25
 8015c6c:	d1f9      	bne.n	8015c62 <_vfiprintf_r+0x96>
 8015c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8015c72:	d00b      	beq.n	8015c8c <_vfiprintf_r+0xc0>
 8015c74:	465b      	mov	r3, fp
 8015c76:	4622      	mov	r2, r4
 8015c78:	4629      	mov	r1, r5
 8015c7a:	4630      	mov	r0, r6
 8015c7c:	f7ff ff93 	bl	8015ba6 <__sfputs_r>
 8015c80:	3001      	adds	r0, #1
 8015c82:	f000 80aa 	beq.w	8015dda <_vfiprintf_r+0x20e>
 8015c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c88:	445a      	add	r2, fp
 8015c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8015c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f000 80a2 	beq.w	8015dda <_vfiprintf_r+0x20e>
 8015c96:	2300      	movs	r3, #0
 8015c98:	f04f 32ff 	mov.w	r2, #4294967295
 8015c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ca0:	f10a 0a01 	add.w	sl, sl, #1
 8015ca4:	9304      	str	r3, [sp, #16]
 8015ca6:	9307      	str	r3, [sp, #28]
 8015ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015cac:	931a      	str	r3, [sp, #104]	; 0x68
 8015cae:	4654      	mov	r4, sl
 8015cb0:	2205      	movs	r2, #5
 8015cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cb6:	4858      	ldr	r0, [pc, #352]	; (8015e18 <_vfiprintf_r+0x24c>)
 8015cb8:	f7ea fac2 	bl	8000240 <memchr>
 8015cbc:	9a04      	ldr	r2, [sp, #16]
 8015cbe:	b9d8      	cbnz	r0, 8015cf8 <_vfiprintf_r+0x12c>
 8015cc0:	06d1      	lsls	r1, r2, #27
 8015cc2:	bf44      	itt	mi
 8015cc4:	2320      	movmi	r3, #32
 8015cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015cca:	0713      	lsls	r3, r2, #28
 8015ccc:	bf44      	itt	mi
 8015cce:	232b      	movmi	r3, #43	; 0x2b
 8015cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8015cda:	d015      	beq.n	8015d08 <_vfiprintf_r+0x13c>
 8015cdc:	9a07      	ldr	r2, [sp, #28]
 8015cde:	4654      	mov	r4, sl
 8015ce0:	2000      	movs	r0, #0
 8015ce2:	f04f 0c0a 	mov.w	ip, #10
 8015ce6:	4621      	mov	r1, r4
 8015ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015cec:	3b30      	subs	r3, #48	; 0x30
 8015cee:	2b09      	cmp	r3, #9
 8015cf0:	d94e      	bls.n	8015d90 <_vfiprintf_r+0x1c4>
 8015cf2:	b1b0      	cbz	r0, 8015d22 <_vfiprintf_r+0x156>
 8015cf4:	9207      	str	r2, [sp, #28]
 8015cf6:	e014      	b.n	8015d22 <_vfiprintf_r+0x156>
 8015cf8:	eba0 0308 	sub.w	r3, r0, r8
 8015cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8015d00:	4313      	orrs	r3, r2
 8015d02:	9304      	str	r3, [sp, #16]
 8015d04:	46a2      	mov	sl, r4
 8015d06:	e7d2      	b.n	8015cae <_vfiprintf_r+0xe2>
 8015d08:	9b03      	ldr	r3, [sp, #12]
 8015d0a:	1d19      	adds	r1, r3, #4
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	9103      	str	r1, [sp, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	bfbb      	ittet	lt
 8015d14:	425b      	neglt	r3, r3
 8015d16:	f042 0202 	orrlt.w	r2, r2, #2
 8015d1a:	9307      	strge	r3, [sp, #28]
 8015d1c:	9307      	strlt	r3, [sp, #28]
 8015d1e:	bfb8      	it	lt
 8015d20:	9204      	strlt	r2, [sp, #16]
 8015d22:	7823      	ldrb	r3, [r4, #0]
 8015d24:	2b2e      	cmp	r3, #46	; 0x2e
 8015d26:	d10c      	bne.n	8015d42 <_vfiprintf_r+0x176>
 8015d28:	7863      	ldrb	r3, [r4, #1]
 8015d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8015d2c:	d135      	bne.n	8015d9a <_vfiprintf_r+0x1ce>
 8015d2e:	9b03      	ldr	r3, [sp, #12]
 8015d30:	1d1a      	adds	r2, r3, #4
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	9203      	str	r2, [sp, #12]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	bfb8      	it	lt
 8015d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d3e:	3402      	adds	r4, #2
 8015d40:	9305      	str	r3, [sp, #20]
 8015d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015e28 <_vfiprintf_r+0x25c>
 8015d46:	7821      	ldrb	r1, [r4, #0]
 8015d48:	2203      	movs	r2, #3
 8015d4a:	4650      	mov	r0, sl
 8015d4c:	f7ea fa78 	bl	8000240 <memchr>
 8015d50:	b140      	cbz	r0, 8015d64 <_vfiprintf_r+0x198>
 8015d52:	2340      	movs	r3, #64	; 0x40
 8015d54:	eba0 000a 	sub.w	r0, r0, sl
 8015d58:	fa03 f000 	lsl.w	r0, r3, r0
 8015d5c:	9b04      	ldr	r3, [sp, #16]
 8015d5e:	4303      	orrs	r3, r0
 8015d60:	3401      	adds	r4, #1
 8015d62:	9304      	str	r3, [sp, #16]
 8015d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d68:	482c      	ldr	r0, [pc, #176]	; (8015e1c <_vfiprintf_r+0x250>)
 8015d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d6e:	2206      	movs	r2, #6
 8015d70:	f7ea fa66 	bl	8000240 <memchr>
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d03f      	beq.n	8015df8 <_vfiprintf_r+0x22c>
 8015d78:	4b29      	ldr	r3, [pc, #164]	; (8015e20 <_vfiprintf_r+0x254>)
 8015d7a:	bb1b      	cbnz	r3, 8015dc4 <_vfiprintf_r+0x1f8>
 8015d7c:	9b03      	ldr	r3, [sp, #12]
 8015d7e:	3307      	adds	r3, #7
 8015d80:	f023 0307 	bic.w	r3, r3, #7
 8015d84:	3308      	adds	r3, #8
 8015d86:	9303      	str	r3, [sp, #12]
 8015d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d8a:	443b      	add	r3, r7
 8015d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d8e:	e767      	b.n	8015c60 <_vfiprintf_r+0x94>
 8015d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d94:	460c      	mov	r4, r1
 8015d96:	2001      	movs	r0, #1
 8015d98:	e7a5      	b.n	8015ce6 <_vfiprintf_r+0x11a>
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	3401      	adds	r4, #1
 8015d9e:	9305      	str	r3, [sp, #20]
 8015da0:	4619      	mov	r1, r3
 8015da2:	f04f 0c0a 	mov.w	ip, #10
 8015da6:	4620      	mov	r0, r4
 8015da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015dac:	3a30      	subs	r2, #48	; 0x30
 8015dae:	2a09      	cmp	r2, #9
 8015db0:	d903      	bls.n	8015dba <_vfiprintf_r+0x1ee>
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d0c5      	beq.n	8015d42 <_vfiprintf_r+0x176>
 8015db6:	9105      	str	r1, [sp, #20]
 8015db8:	e7c3      	b.n	8015d42 <_vfiprintf_r+0x176>
 8015dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8015dbe:	4604      	mov	r4, r0
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	e7f0      	b.n	8015da6 <_vfiprintf_r+0x1da>
 8015dc4:	ab03      	add	r3, sp, #12
 8015dc6:	9300      	str	r3, [sp, #0]
 8015dc8:	462a      	mov	r2, r5
 8015dca:	4b16      	ldr	r3, [pc, #88]	; (8015e24 <_vfiprintf_r+0x258>)
 8015dcc:	a904      	add	r1, sp, #16
 8015dce:	4630      	mov	r0, r6
 8015dd0:	f000 f8cc 	bl	8015f6c <_printf_float>
 8015dd4:	4607      	mov	r7, r0
 8015dd6:	1c78      	adds	r0, r7, #1
 8015dd8:	d1d6      	bne.n	8015d88 <_vfiprintf_r+0x1bc>
 8015dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ddc:	07d9      	lsls	r1, r3, #31
 8015dde:	d405      	bmi.n	8015dec <_vfiprintf_r+0x220>
 8015de0:	89ab      	ldrh	r3, [r5, #12]
 8015de2:	059a      	lsls	r2, r3, #22
 8015de4:	d402      	bmi.n	8015dec <_vfiprintf_r+0x220>
 8015de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015de8:	f7ff fdca 	bl	8015980 <__retarget_lock_release_recursive>
 8015dec:	89ab      	ldrh	r3, [r5, #12]
 8015dee:	065b      	lsls	r3, r3, #25
 8015df0:	f53f af12 	bmi.w	8015c18 <_vfiprintf_r+0x4c>
 8015df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015df6:	e711      	b.n	8015c1c <_vfiprintf_r+0x50>
 8015df8:	ab03      	add	r3, sp, #12
 8015dfa:	9300      	str	r3, [sp, #0]
 8015dfc:	462a      	mov	r2, r5
 8015dfe:	4b09      	ldr	r3, [pc, #36]	; (8015e24 <_vfiprintf_r+0x258>)
 8015e00:	a904      	add	r1, sp, #16
 8015e02:	4630      	mov	r0, r6
 8015e04:	f000 fb56 	bl	80164b4 <_printf_i>
 8015e08:	e7e4      	b.n	8015dd4 <_vfiprintf_r+0x208>
 8015e0a:	bf00      	nop
 8015e0c:	0803a220 	.word	0x0803a220
 8015e10:	0803a240 	.word	0x0803a240
 8015e14:	0803a200 	.word	0x0803a200
 8015e18:	08039fc8 	.word	0x08039fc8
 8015e1c:	08039fd2 	.word	0x08039fd2
 8015e20:	08015f6d 	.word	0x08015f6d
 8015e24:	08015ba7 	.word	0x08015ba7
 8015e28:	08039fce 	.word	0x08039fce

08015e2c <__cvt>:
 8015e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e30:	ec55 4b10 	vmov	r4, r5, d0
 8015e34:	2d00      	cmp	r5, #0
 8015e36:	460e      	mov	r6, r1
 8015e38:	4619      	mov	r1, r3
 8015e3a:	462b      	mov	r3, r5
 8015e3c:	bfbb      	ittet	lt
 8015e3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015e42:	461d      	movlt	r5, r3
 8015e44:	2300      	movge	r3, #0
 8015e46:	232d      	movlt	r3, #45	; 0x2d
 8015e48:	700b      	strb	r3, [r1, #0]
 8015e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015e50:	4691      	mov	r9, r2
 8015e52:	f023 0820 	bic.w	r8, r3, #32
 8015e56:	bfbc      	itt	lt
 8015e58:	4622      	movlt	r2, r4
 8015e5a:	4614      	movlt	r4, r2
 8015e5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e60:	d005      	beq.n	8015e6e <__cvt+0x42>
 8015e62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015e66:	d100      	bne.n	8015e6a <__cvt+0x3e>
 8015e68:	3601      	adds	r6, #1
 8015e6a:	2102      	movs	r1, #2
 8015e6c:	e000      	b.n	8015e70 <__cvt+0x44>
 8015e6e:	2103      	movs	r1, #3
 8015e70:	ab03      	add	r3, sp, #12
 8015e72:	9301      	str	r3, [sp, #4]
 8015e74:	ab02      	add	r3, sp, #8
 8015e76:	9300      	str	r3, [sp, #0]
 8015e78:	ec45 4b10 	vmov	d0, r4, r5
 8015e7c:	4653      	mov	r3, sl
 8015e7e:	4632      	mov	r2, r6
 8015e80:	f001 fff2 	bl	8017e68 <_dtoa_r>
 8015e84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015e88:	4607      	mov	r7, r0
 8015e8a:	d102      	bne.n	8015e92 <__cvt+0x66>
 8015e8c:	f019 0f01 	tst.w	r9, #1
 8015e90:	d022      	beq.n	8015ed8 <__cvt+0xac>
 8015e92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e96:	eb07 0906 	add.w	r9, r7, r6
 8015e9a:	d110      	bne.n	8015ebe <__cvt+0x92>
 8015e9c:	783b      	ldrb	r3, [r7, #0]
 8015e9e:	2b30      	cmp	r3, #48	; 0x30
 8015ea0:	d10a      	bne.n	8015eb8 <__cvt+0x8c>
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	4629      	mov	r1, r5
 8015eaa:	f7ea fe3d 	bl	8000b28 <__aeabi_dcmpeq>
 8015eae:	b918      	cbnz	r0, 8015eb8 <__cvt+0x8c>
 8015eb0:	f1c6 0601 	rsb	r6, r6, #1
 8015eb4:	f8ca 6000 	str.w	r6, [sl]
 8015eb8:	f8da 3000 	ldr.w	r3, [sl]
 8015ebc:	4499      	add	r9, r3
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	4629      	mov	r1, r5
 8015ec6:	f7ea fe2f 	bl	8000b28 <__aeabi_dcmpeq>
 8015eca:	b108      	cbz	r0, 8015ed0 <__cvt+0xa4>
 8015ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ed0:	2230      	movs	r2, #48	; 0x30
 8015ed2:	9b03      	ldr	r3, [sp, #12]
 8015ed4:	454b      	cmp	r3, r9
 8015ed6:	d307      	bcc.n	8015ee8 <__cvt+0xbc>
 8015ed8:	9b03      	ldr	r3, [sp, #12]
 8015eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015edc:	1bdb      	subs	r3, r3, r7
 8015ede:	4638      	mov	r0, r7
 8015ee0:	6013      	str	r3, [r2, #0]
 8015ee2:	b004      	add	sp, #16
 8015ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ee8:	1c59      	adds	r1, r3, #1
 8015eea:	9103      	str	r1, [sp, #12]
 8015eec:	701a      	strb	r2, [r3, #0]
 8015eee:	e7f0      	b.n	8015ed2 <__cvt+0xa6>

08015ef0 <__exponent>:
 8015ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2900      	cmp	r1, #0
 8015ef6:	bfb8      	it	lt
 8015ef8:	4249      	neglt	r1, r1
 8015efa:	f803 2b02 	strb.w	r2, [r3], #2
 8015efe:	bfb4      	ite	lt
 8015f00:	222d      	movlt	r2, #45	; 0x2d
 8015f02:	222b      	movge	r2, #43	; 0x2b
 8015f04:	2909      	cmp	r1, #9
 8015f06:	7042      	strb	r2, [r0, #1]
 8015f08:	dd2a      	ble.n	8015f60 <__exponent+0x70>
 8015f0a:	f10d 0407 	add.w	r4, sp, #7
 8015f0e:	46a4      	mov	ip, r4
 8015f10:	270a      	movs	r7, #10
 8015f12:	46a6      	mov	lr, r4
 8015f14:	460a      	mov	r2, r1
 8015f16:	fb91 f6f7 	sdiv	r6, r1, r7
 8015f1a:	fb07 1516 	mls	r5, r7, r6, r1
 8015f1e:	3530      	adds	r5, #48	; 0x30
 8015f20:	2a63      	cmp	r2, #99	; 0x63
 8015f22:	f104 34ff 	add.w	r4, r4, #4294967295
 8015f26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015f2a:	4631      	mov	r1, r6
 8015f2c:	dcf1      	bgt.n	8015f12 <__exponent+0x22>
 8015f2e:	3130      	adds	r1, #48	; 0x30
 8015f30:	f1ae 0502 	sub.w	r5, lr, #2
 8015f34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015f38:	1c44      	adds	r4, r0, #1
 8015f3a:	4629      	mov	r1, r5
 8015f3c:	4561      	cmp	r1, ip
 8015f3e:	d30a      	bcc.n	8015f56 <__exponent+0x66>
 8015f40:	f10d 0209 	add.w	r2, sp, #9
 8015f44:	eba2 020e 	sub.w	r2, r2, lr
 8015f48:	4565      	cmp	r5, ip
 8015f4a:	bf88      	it	hi
 8015f4c:	2200      	movhi	r2, #0
 8015f4e:	4413      	add	r3, r2
 8015f50:	1a18      	subs	r0, r3, r0
 8015f52:	b003      	add	sp, #12
 8015f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015f5e:	e7ed      	b.n	8015f3c <__exponent+0x4c>
 8015f60:	2330      	movs	r3, #48	; 0x30
 8015f62:	3130      	adds	r1, #48	; 0x30
 8015f64:	7083      	strb	r3, [r0, #2]
 8015f66:	70c1      	strb	r1, [r0, #3]
 8015f68:	1d03      	adds	r3, r0, #4
 8015f6a:	e7f1      	b.n	8015f50 <__exponent+0x60>

08015f6c <_printf_float>:
 8015f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f70:	ed2d 8b02 	vpush	{d8}
 8015f74:	b08d      	sub	sp, #52	; 0x34
 8015f76:	460c      	mov	r4, r1
 8015f78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015f7c:	4616      	mov	r6, r2
 8015f7e:	461f      	mov	r7, r3
 8015f80:	4605      	mov	r5, r0
 8015f82:	f003 fa83 	bl	801948c <_localeconv_r>
 8015f86:	f8d0 a000 	ldr.w	sl, [r0]
 8015f8a:	4650      	mov	r0, sl
 8015f8c:	f7ea f94a 	bl	8000224 <strlen>
 8015f90:	2300      	movs	r3, #0
 8015f92:	930a      	str	r3, [sp, #40]	; 0x28
 8015f94:	6823      	ldr	r3, [r4, #0]
 8015f96:	9305      	str	r3, [sp, #20]
 8015f98:	f8d8 3000 	ldr.w	r3, [r8]
 8015f9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015fa0:	3307      	adds	r3, #7
 8015fa2:	f023 0307 	bic.w	r3, r3, #7
 8015fa6:	f103 0208 	add.w	r2, r3, #8
 8015faa:	f8c8 2000 	str.w	r2, [r8]
 8015fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015fb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015fba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015fbe:	9307      	str	r3, [sp, #28]
 8015fc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8015fc4:	ee08 0a10 	vmov	s16, r0
 8015fc8:	4b9f      	ldr	r3, [pc, #636]	; (8016248 <_printf_float+0x2dc>)
 8015fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015fce:	f04f 32ff 	mov.w	r2, #4294967295
 8015fd2:	f7ea fddb 	bl	8000b8c <__aeabi_dcmpun>
 8015fd6:	bb88      	cbnz	r0, 801603c <_printf_float+0xd0>
 8015fd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015fdc:	4b9a      	ldr	r3, [pc, #616]	; (8016248 <_printf_float+0x2dc>)
 8015fde:	f04f 32ff 	mov.w	r2, #4294967295
 8015fe2:	f7ea fdb5 	bl	8000b50 <__aeabi_dcmple>
 8015fe6:	bb48      	cbnz	r0, 801603c <_printf_float+0xd0>
 8015fe8:	2200      	movs	r2, #0
 8015fea:	2300      	movs	r3, #0
 8015fec:	4640      	mov	r0, r8
 8015fee:	4649      	mov	r1, r9
 8015ff0:	f7ea fda4 	bl	8000b3c <__aeabi_dcmplt>
 8015ff4:	b110      	cbz	r0, 8015ffc <_printf_float+0x90>
 8015ff6:	232d      	movs	r3, #45	; 0x2d
 8015ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ffc:	4b93      	ldr	r3, [pc, #588]	; (801624c <_printf_float+0x2e0>)
 8015ffe:	4894      	ldr	r0, [pc, #592]	; (8016250 <_printf_float+0x2e4>)
 8016000:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016004:	bf94      	ite	ls
 8016006:	4698      	movls	r8, r3
 8016008:	4680      	movhi	r8, r0
 801600a:	2303      	movs	r3, #3
 801600c:	6123      	str	r3, [r4, #16]
 801600e:	9b05      	ldr	r3, [sp, #20]
 8016010:	f023 0204 	bic.w	r2, r3, #4
 8016014:	6022      	str	r2, [r4, #0]
 8016016:	f04f 0900 	mov.w	r9, #0
 801601a:	9700      	str	r7, [sp, #0]
 801601c:	4633      	mov	r3, r6
 801601e:	aa0b      	add	r2, sp, #44	; 0x2c
 8016020:	4621      	mov	r1, r4
 8016022:	4628      	mov	r0, r5
 8016024:	f000 f9d8 	bl	80163d8 <_printf_common>
 8016028:	3001      	adds	r0, #1
 801602a:	f040 8090 	bne.w	801614e <_printf_float+0x1e2>
 801602e:	f04f 30ff 	mov.w	r0, #4294967295
 8016032:	b00d      	add	sp, #52	; 0x34
 8016034:	ecbd 8b02 	vpop	{d8}
 8016038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801603c:	4642      	mov	r2, r8
 801603e:	464b      	mov	r3, r9
 8016040:	4640      	mov	r0, r8
 8016042:	4649      	mov	r1, r9
 8016044:	f7ea fda2 	bl	8000b8c <__aeabi_dcmpun>
 8016048:	b140      	cbz	r0, 801605c <_printf_float+0xf0>
 801604a:	464b      	mov	r3, r9
 801604c:	2b00      	cmp	r3, #0
 801604e:	bfbc      	itt	lt
 8016050:	232d      	movlt	r3, #45	; 0x2d
 8016052:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016056:	487f      	ldr	r0, [pc, #508]	; (8016254 <_printf_float+0x2e8>)
 8016058:	4b7f      	ldr	r3, [pc, #508]	; (8016258 <_printf_float+0x2ec>)
 801605a:	e7d1      	b.n	8016000 <_printf_float+0x94>
 801605c:	6863      	ldr	r3, [r4, #4]
 801605e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016062:	9206      	str	r2, [sp, #24]
 8016064:	1c5a      	adds	r2, r3, #1
 8016066:	d13f      	bne.n	80160e8 <_printf_float+0x17c>
 8016068:	2306      	movs	r3, #6
 801606a:	6063      	str	r3, [r4, #4]
 801606c:	9b05      	ldr	r3, [sp, #20]
 801606e:	6861      	ldr	r1, [r4, #4]
 8016070:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016074:	2300      	movs	r3, #0
 8016076:	9303      	str	r3, [sp, #12]
 8016078:	ab0a      	add	r3, sp, #40	; 0x28
 801607a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801607e:	ab09      	add	r3, sp, #36	; 0x24
 8016080:	ec49 8b10 	vmov	d0, r8, r9
 8016084:	9300      	str	r3, [sp, #0]
 8016086:	6022      	str	r2, [r4, #0]
 8016088:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801608c:	4628      	mov	r0, r5
 801608e:	f7ff fecd 	bl	8015e2c <__cvt>
 8016092:	9b06      	ldr	r3, [sp, #24]
 8016094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016096:	2b47      	cmp	r3, #71	; 0x47
 8016098:	4680      	mov	r8, r0
 801609a:	d108      	bne.n	80160ae <_printf_float+0x142>
 801609c:	1cc8      	adds	r0, r1, #3
 801609e:	db02      	blt.n	80160a6 <_printf_float+0x13a>
 80160a0:	6863      	ldr	r3, [r4, #4]
 80160a2:	4299      	cmp	r1, r3
 80160a4:	dd41      	ble.n	801612a <_printf_float+0x1be>
 80160a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80160aa:	fa5f fb8b 	uxtb.w	fp, fp
 80160ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80160b2:	d820      	bhi.n	80160f6 <_printf_float+0x18a>
 80160b4:	3901      	subs	r1, #1
 80160b6:	465a      	mov	r2, fp
 80160b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80160bc:	9109      	str	r1, [sp, #36]	; 0x24
 80160be:	f7ff ff17 	bl	8015ef0 <__exponent>
 80160c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160c4:	1813      	adds	r3, r2, r0
 80160c6:	2a01      	cmp	r2, #1
 80160c8:	4681      	mov	r9, r0
 80160ca:	6123      	str	r3, [r4, #16]
 80160cc:	dc02      	bgt.n	80160d4 <_printf_float+0x168>
 80160ce:	6822      	ldr	r2, [r4, #0]
 80160d0:	07d2      	lsls	r2, r2, #31
 80160d2:	d501      	bpl.n	80160d8 <_printf_float+0x16c>
 80160d4:	3301      	adds	r3, #1
 80160d6:	6123      	str	r3, [r4, #16]
 80160d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d09c      	beq.n	801601a <_printf_float+0xae>
 80160e0:	232d      	movs	r3, #45	; 0x2d
 80160e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160e6:	e798      	b.n	801601a <_printf_float+0xae>
 80160e8:	9a06      	ldr	r2, [sp, #24]
 80160ea:	2a47      	cmp	r2, #71	; 0x47
 80160ec:	d1be      	bne.n	801606c <_printf_float+0x100>
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d1bc      	bne.n	801606c <_printf_float+0x100>
 80160f2:	2301      	movs	r3, #1
 80160f4:	e7b9      	b.n	801606a <_printf_float+0xfe>
 80160f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80160fa:	d118      	bne.n	801612e <_printf_float+0x1c2>
 80160fc:	2900      	cmp	r1, #0
 80160fe:	6863      	ldr	r3, [r4, #4]
 8016100:	dd0b      	ble.n	801611a <_printf_float+0x1ae>
 8016102:	6121      	str	r1, [r4, #16]
 8016104:	b913      	cbnz	r3, 801610c <_printf_float+0x1a0>
 8016106:	6822      	ldr	r2, [r4, #0]
 8016108:	07d0      	lsls	r0, r2, #31
 801610a:	d502      	bpl.n	8016112 <_printf_float+0x1a6>
 801610c:	3301      	adds	r3, #1
 801610e:	440b      	add	r3, r1
 8016110:	6123      	str	r3, [r4, #16]
 8016112:	65a1      	str	r1, [r4, #88]	; 0x58
 8016114:	f04f 0900 	mov.w	r9, #0
 8016118:	e7de      	b.n	80160d8 <_printf_float+0x16c>
 801611a:	b913      	cbnz	r3, 8016122 <_printf_float+0x1b6>
 801611c:	6822      	ldr	r2, [r4, #0]
 801611e:	07d2      	lsls	r2, r2, #31
 8016120:	d501      	bpl.n	8016126 <_printf_float+0x1ba>
 8016122:	3302      	adds	r3, #2
 8016124:	e7f4      	b.n	8016110 <_printf_float+0x1a4>
 8016126:	2301      	movs	r3, #1
 8016128:	e7f2      	b.n	8016110 <_printf_float+0x1a4>
 801612a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801612e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016130:	4299      	cmp	r1, r3
 8016132:	db05      	blt.n	8016140 <_printf_float+0x1d4>
 8016134:	6823      	ldr	r3, [r4, #0]
 8016136:	6121      	str	r1, [r4, #16]
 8016138:	07d8      	lsls	r0, r3, #31
 801613a:	d5ea      	bpl.n	8016112 <_printf_float+0x1a6>
 801613c:	1c4b      	adds	r3, r1, #1
 801613e:	e7e7      	b.n	8016110 <_printf_float+0x1a4>
 8016140:	2900      	cmp	r1, #0
 8016142:	bfd4      	ite	le
 8016144:	f1c1 0202 	rsble	r2, r1, #2
 8016148:	2201      	movgt	r2, #1
 801614a:	4413      	add	r3, r2
 801614c:	e7e0      	b.n	8016110 <_printf_float+0x1a4>
 801614e:	6823      	ldr	r3, [r4, #0]
 8016150:	055a      	lsls	r2, r3, #21
 8016152:	d407      	bmi.n	8016164 <_printf_float+0x1f8>
 8016154:	6923      	ldr	r3, [r4, #16]
 8016156:	4642      	mov	r2, r8
 8016158:	4631      	mov	r1, r6
 801615a:	4628      	mov	r0, r5
 801615c:	47b8      	blx	r7
 801615e:	3001      	adds	r0, #1
 8016160:	d12c      	bne.n	80161bc <_printf_float+0x250>
 8016162:	e764      	b.n	801602e <_printf_float+0xc2>
 8016164:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016168:	f240 80e0 	bls.w	801632c <_printf_float+0x3c0>
 801616c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016170:	2200      	movs	r2, #0
 8016172:	2300      	movs	r3, #0
 8016174:	f7ea fcd8 	bl	8000b28 <__aeabi_dcmpeq>
 8016178:	2800      	cmp	r0, #0
 801617a:	d034      	beq.n	80161e6 <_printf_float+0x27a>
 801617c:	4a37      	ldr	r2, [pc, #220]	; (801625c <_printf_float+0x2f0>)
 801617e:	2301      	movs	r3, #1
 8016180:	4631      	mov	r1, r6
 8016182:	4628      	mov	r0, r5
 8016184:	47b8      	blx	r7
 8016186:	3001      	adds	r0, #1
 8016188:	f43f af51 	beq.w	801602e <_printf_float+0xc2>
 801618c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016190:	429a      	cmp	r2, r3
 8016192:	db02      	blt.n	801619a <_printf_float+0x22e>
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	07d8      	lsls	r0, r3, #31
 8016198:	d510      	bpl.n	80161bc <_printf_float+0x250>
 801619a:	ee18 3a10 	vmov	r3, s16
 801619e:	4652      	mov	r2, sl
 80161a0:	4631      	mov	r1, r6
 80161a2:	4628      	mov	r0, r5
 80161a4:	47b8      	blx	r7
 80161a6:	3001      	adds	r0, #1
 80161a8:	f43f af41 	beq.w	801602e <_printf_float+0xc2>
 80161ac:	f04f 0800 	mov.w	r8, #0
 80161b0:	f104 091a 	add.w	r9, r4, #26
 80161b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b6:	3b01      	subs	r3, #1
 80161b8:	4543      	cmp	r3, r8
 80161ba:	dc09      	bgt.n	80161d0 <_printf_float+0x264>
 80161bc:	6823      	ldr	r3, [r4, #0]
 80161be:	079b      	lsls	r3, r3, #30
 80161c0:	f100 8105 	bmi.w	80163ce <_printf_float+0x462>
 80161c4:	68e0      	ldr	r0, [r4, #12]
 80161c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161c8:	4298      	cmp	r0, r3
 80161ca:	bfb8      	it	lt
 80161cc:	4618      	movlt	r0, r3
 80161ce:	e730      	b.n	8016032 <_printf_float+0xc6>
 80161d0:	2301      	movs	r3, #1
 80161d2:	464a      	mov	r2, r9
 80161d4:	4631      	mov	r1, r6
 80161d6:	4628      	mov	r0, r5
 80161d8:	47b8      	blx	r7
 80161da:	3001      	adds	r0, #1
 80161dc:	f43f af27 	beq.w	801602e <_printf_float+0xc2>
 80161e0:	f108 0801 	add.w	r8, r8, #1
 80161e4:	e7e6      	b.n	80161b4 <_printf_float+0x248>
 80161e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	dc39      	bgt.n	8016260 <_printf_float+0x2f4>
 80161ec:	4a1b      	ldr	r2, [pc, #108]	; (801625c <_printf_float+0x2f0>)
 80161ee:	2301      	movs	r3, #1
 80161f0:	4631      	mov	r1, r6
 80161f2:	4628      	mov	r0, r5
 80161f4:	47b8      	blx	r7
 80161f6:	3001      	adds	r0, #1
 80161f8:	f43f af19 	beq.w	801602e <_printf_float+0xc2>
 80161fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016200:	4313      	orrs	r3, r2
 8016202:	d102      	bne.n	801620a <_printf_float+0x29e>
 8016204:	6823      	ldr	r3, [r4, #0]
 8016206:	07d9      	lsls	r1, r3, #31
 8016208:	d5d8      	bpl.n	80161bc <_printf_float+0x250>
 801620a:	ee18 3a10 	vmov	r3, s16
 801620e:	4652      	mov	r2, sl
 8016210:	4631      	mov	r1, r6
 8016212:	4628      	mov	r0, r5
 8016214:	47b8      	blx	r7
 8016216:	3001      	adds	r0, #1
 8016218:	f43f af09 	beq.w	801602e <_printf_float+0xc2>
 801621c:	f04f 0900 	mov.w	r9, #0
 8016220:	f104 0a1a 	add.w	sl, r4, #26
 8016224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016226:	425b      	negs	r3, r3
 8016228:	454b      	cmp	r3, r9
 801622a:	dc01      	bgt.n	8016230 <_printf_float+0x2c4>
 801622c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801622e:	e792      	b.n	8016156 <_printf_float+0x1ea>
 8016230:	2301      	movs	r3, #1
 8016232:	4652      	mov	r2, sl
 8016234:	4631      	mov	r1, r6
 8016236:	4628      	mov	r0, r5
 8016238:	47b8      	blx	r7
 801623a:	3001      	adds	r0, #1
 801623c:	f43f aef7 	beq.w	801602e <_printf_float+0xc2>
 8016240:	f109 0901 	add.w	r9, r9, #1
 8016244:	e7ee      	b.n	8016224 <_printf_float+0x2b8>
 8016246:	bf00      	nop
 8016248:	7fefffff 	.word	0x7fefffff
 801624c:	08039fd9 	.word	0x08039fd9
 8016250:	08039fdd 	.word	0x08039fdd
 8016254:	08039fe5 	.word	0x08039fe5
 8016258:	08039fe1 	.word	0x08039fe1
 801625c:	08039fe9 	.word	0x08039fe9
 8016260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016264:	429a      	cmp	r2, r3
 8016266:	bfa8      	it	ge
 8016268:	461a      	movge	r2, r3
 801626a:	2a00      	cmp	r2, #0
 801626c:	4691      	mov	r9, r2
 801626e:	dc37      	bgt.n	80162e0 <_printf_float+0x374>
 8016270:	f04f 0b00 	mov.w	fp, #0
 8016274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016278:	f104 021a 	add.w	r2, r4, #26
 801627c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801627e:	9305      	str	r3, [sp, #20]
 8016280:	eba3 0309 	sub.w	r3, r3, r9
 8016284:	455b      	cmp	r3, fp
 8016286:	dc33      	bgt.n	80162f0 <_printf_float+0x384>
 8016288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801628c:	429a      	cmp	r2, r3
 801628e:	db3b      	blt.n	8016308 <_printf_float+0x39c>
 8016290:	6823      	ldr	r3, [r4, #0]
 8016292:	07da      	lsls	r2, r3, #31
 8016294:	d438      	bmi.n	8016308 <_printf_float+0x39c>
 8016296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016298:	9b05      	ldr	r3, [sp, #20]
 801629a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801629c:	1ad3      	subs	r3, r2, r3
 801629e:	eba2 0901 	sub.w	r9, r2, r1
 80162a2:	4599      	cmp	r9, r3
 80162a4:	bfa8      	it	ge
 80162a6:	4699      	movge	r9, r3
 80162a8:	f1b9 0f00 	cmp.w	r9, #0
 80162ac:	dc35      	bgt.n	801631a <_printf_float+0x3ae>
 80162ae:	f04f 0800 	mov.w	r8, #0
 80162b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80162b6:	f104 0a1a 	add.w	sl, r4, #26
 80162ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162be:	1a9b      	subs	r3, r3, r2
 80162c0:	eba3 0309 	sub.w	r3, r3, r9
 80162c4:	4543      	cmp	r3, r8
 80162c6:	f77f af79 	ble.w	80161bc <_printf_float+0x250>
 80162ca:	2301      	movs	r3, #1
 80162cc:	4652      	mov	r2, sl
 80162ce:	4631      	mov	r1, r6
 80162d0:	4628      	mov	r0, r5
 80162d2:	47b8      	blx	r7
 80162d4:	3001      	adds	r0, #1
 80162d6:	f43f aeaa 	beq.w	801602e <_printf_float+0xc2>
 80162da:	f108 0801 	add.w	r8, r8, #1
 80162de:	e7ec      	b.n	80162ba <_printf_float+0x34e>
 80162e0:	4613      	mov	r3, r2
 80162e2:	4631      	mov	r1, r6
 80162e4:	4642      	mov	r2, r8
 80162e6:	4628      	mov	r0, r5
 80162e8:	47b8      	blx	r7
 80162ea:	3001      	adds	r0, #1
 80162ec:	d1c0      	bne.n	8016270 <_printf_float+0x304>
 80162ee:	e69e      	b.n	801602e <_printf_float+0xc2>
 80162f0:	2301      	movs	r3, #1
 80162f2:	4631      	mov	r1, r6
 80162f4:	4628      	mov	r0, r5
 80162f6:	9205      	str	r2, [sp, #20]
 80162f8:	47b8      	blx	r7
 80162fa:	3001      	adds	r0, #1
 80162fc:	f43f ae97 	beq.w	801602e <_printf_float+0xc2>
 8016300:	9a05      	ldr	r2, [sp, #20]
 8016302:	f10b 0b01 	add.w	fp, fp, #1
 8016306:	e7b9      	b.n	801627c <_printf_float+0x310>
 8016308:	ee18 3a10 	vmov	r3, s16
 801630c:	4652      	mov	r2, sl
 801630e:	4631      	mov	r1, r6
 8016310:	4628      	mov	r0, r5
 8016312:	47b8      	blx	r7
 8016314:	3001      	adds	r0, #1
 8016316:	d1be      	bne.n	8016296 <_printf_float+0x32a>
 8016318:	e689      	b.n	801602e <_printf_float+0xc2>
 801631a:	9a05      	ldr	r2, [sp, #20]
 801631c:	464b      	mov	r3, r9
 801631e:	4442      	add	r2, r8
 8016320:	4631      	mov	r1, r6
 8016322:	4628      	mov	r0, r5
 8016324:	47b8      	blx	r7
 8016326:	3001      	adds	r0, #1
 8016328:	d1c1      	bne.n	80162ae <_printf_float+0x342>
 801632a:	e680      	b.n	801602e <_printf_float+0xc2>
 801632c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801632e:	2a01      	cmp	r2, #1
 8016330:	dc01      	bgt.n	8016336 <_printf_float+0x3ca>
 8016332:	07db      	lsls	r3, r3, #31
 8016334:	d538      	bpl.n	80163a8 <_printf_float+0x43c>
 8016336:	2301      	movs	r3, #1
 8016338:	4642      	mov	r2, r8
 801633a:	4631      	mov	r1, r6
 801633c:	4628      	mov	r0, r5
 801633e:	47b8      	blx	r7
 8016340:	3001      	adds	r0, #1
 8016342:	f43f ae74 	beq.w	801602e <_printf_float+0xc2>
 8016346:	ee18 3a10 	vmov	r3, s16
 801634a:	4652      	mov	r2, sl
 801634c:	4631      	mov	r1, r6
 801634e:	4628      	mov	r0, r5
 8016350:	47b8      	blx	r7
 8016352:	3001      	adds	r0, #1
 8016354:	f43f ae6b 	beq.w	801602e <_printf_float+0xc2>
 8016358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801635c:	2200      	movs	r2, #0
 801635e:	2300      	movs	r3, #0
 8016360:	f7ea fbe2 	bl	8000b28 <__aeabi_dcmpeq>
 8016364:	b9d8      	cbnz	r0, 801639e <_printf_float+0x432>
 8016366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016368:	f108 0201 	add.w	r2, r8, #1
 801636c:	3b01      	subs	r3, #1
 801636e:	4631      	mov	r1, r6
 8016370:	4628      	mov	r0, r5
 8016372:	47b8      	blx	r7
 8016374:	3001      	adds	r0, #1
 8016376:	d10e      	bne.n	8016396 <_printf_float+0x42a>
 8016378:	e659      	b.n	801602e <_printf_float+0xc2>
 801637a:	2301      	movs	r3, #1
 801637c:	4652      	mov	r2, sl
 801637e:	4631      	mov	r1, r6
 8016380:	4628      	mov	r0, r5
 8016382:	47b8      	blx	r7
 8016384:	3001      	adds	r0, #1
 8016386:	f43f ae52 	beq.w	801602e <_printf_float+0xc2>
 801638a:	f108 0801 	add.w	r8, r8, #1
 801638e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016390:	3b01      	subs	r3, #1
 8016392:	4543      	cmp	r3, r8
 8016394:	dcf1      	bgt.n	801637a <_printf_float+0x40e>
 8016396:	464b      	mov	r3, r9
 8016398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801639c:	e6dc      	b.n	8016158 <_printf_float+0x1ec>
 801639e:	f04f 0800 	mov.w	r8, #0
 80163a2:	f104 0a1a 	add.w	sl, r4, #26
 80163a6:	e7f2      	b.n	801638e <_printf_float+0x422>
 80163a8:	2301      	movs	r3, #1
 80163aa:	4642      	mov	r2, r8
 80163ac:	e7df      	b.n	801636e <_printf_float+0x402>
 80163ae:	2301      	movs	r3, #1
 80163b0:	464a      	mov	r2, r9
 80163b2:	4631      	mov	r1, r6
 80163b4:	4628      	mov	r0, r5
 80163b6:	47b8      	blx	r7
 80163b8:	3001      	adds	r0, #1
 80163ba:	f43f ae38 	beq.w	801602e <_printf_float+0xc2>
 80163be:	f108 0801 	add.w	r8, r8, #1
 80163c2:	68e3      	ldr	r3, [r4, #12]
 80163c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163c6:	1a5b      	subs	r3, r3, r1
 80163c8:	4543      	cmp	r3, r8
 80163ca:	dcf0      	bgt.n	80163ae <_printf_float+0x442>
 80163cc:	e6fa      	b.n	80161c4 <_printf_float+0x258>
 80163ce:	f04f 0800 	mov.w	r8, #0
 80163d2:	f104 0919 	add.w	r9, r4, #25
 80163d6:	e7f4      	b.n	80163c2 <_printf_float+0x456>

080163d8 <_printf_common>:
 80163d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163dc:	4616      	mov	r6, r2
 80163de:	4699      	mov	r9, r3
 80163e0:	688a      	ldr	r2, [r1, #8]
 80163e2:	690b      	ldr	r3, [r1, #16]
 80163e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80163e8:	4293      	cmp	r3, r2
 80163ea:	bfb8      	it	lt
 80163ec:	4613      	movlt	r3, r2
 80163ee:	6033      	str	r3, [r6, #0]
 80163f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80163f4:	4607      	mov	r7, r0
 80163f6:	460c      	mov	r4, r1
 80163f8:	b10a      	cbz	r2, 80163fe <_printf_common+0x26>
 80163fa:	3301      	adds	r3, #1
 80163fc:	6033      	str	r3, [r6, #0]
 80163fe:	6823      	ldr	r3, [r4, #0]
 8016400:	0699      	lsls	r1, r3, #26
 8016402:	bf42      	ittt	mi
 8016404:	6833      	ldrmi	r3, [r6, #0]
 8016406:	3302      	addmi	r3, #2
 8016408:	6033      	strmi	r3, [r6, #0]
 801640a:	6825      	ldr	r5, [r4, #0]
 801640c:	f015 0506 	ands.w	r5, r5, #6
 8016410:	d106      	bne.n	8016420 <_printf_common+0x48>
 8016412:	f104 0a19 	add.w	sl, r4, #25
 8016416:	68e3      	ldr	r3, [r4, #12]
 8016418:	6832      	ldr	r2, [r6, #0]
 801641a:	1a9b      	subs	r3, r3, r2
 801641c:	42ab      	cmp	r3, r5
 801641e:	dc26      	bgt.n	801646e <_printf_common+0x96>
 8016420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016424:	1e13      	subs	r3, r2, #0
 8016426:	6822      	ldr	r2, [r4, #0]
 8016428:	bf18      	it	ne
 801642a:	2301      	movne	r3, #1
 801642c:	0692      	lsls	r2, r2, #26
 801642e:	d42b      	bmi.n	8016488 <_printf_common+0xb0>
 8016430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016434:	4649      	mov	r1, r9
 8016436:	4638      	mov	r0, r7
 8016438:	47c0      	blx	r8
 801643a:	3001      	adds	r0, #1
 801643c:	d01e      	beq.n	801647c <_printf_common+0xa4>
 801643e:	6823      	ldr	r3, [r4, #0]
 8016440:	68e5      	ldr	r5, [r4, #12]
 8016442:	6832      	ldr	r2, [r6, #0]
 8016444:	f003 0306 	and.w	r3, r3, #6
 8016448:	2b04      	cmp	r3, #4
 801644a:	bf08      	it	eq
 801644c:	1aad      	subeq	r5, r5, r2
 801644e:	68a3      	ldr	r3, [r4, #8]
 8016450:	6922      	ldr	r2, [r4, #16]
 8016452:	bf0c      	ite	eq
 8016454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016458:	2500      	movne	r5, #0
 801645a:	4293      	cmp	r3, r2
 801645c:	bfc4      	itt	gt
 801645e:	1a9b      	subgt	r3, r3, r2
 8016460:	18ed      	addgt	r5, r5, r3
 8016462:	2600      	movs	r6, #0
 8016464:	341a      	adds	r4, #26
 8016466:	42b5      	cmp	r5, r6
 8016468:	d11a      	bne.n	80164a0 <_printf_common+0xc8>
 801646a:	2000      	movs	r0, #0
 801646c:	e008      	b.n	8016480 <_printf_common+0xa8>
 801646e:	2301      	movs	r3, #1
 8016470:	4652      	mov	r2, sl
 8016472:	4649      	mov	r1, r9
 8016474:	4638      	mov	r0, r7
 8016476:	47c0      	blx	r8
 8016478:	3001      	adds	r0, #1
 801647a:	d103      	bne.n	8016484 <_printf_common+0xac>
 801647c:	f04f 30ff 	mov.w	r0, #4294967295
 8016480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016484:	3501      	adds	r5, #1
 8016486:	e7c6      	b.n	8016416 <_printf_common+0x3e>
 8016488:	18e1      	adds	r1, r4, r3
 801648a:	1c5a      	adds	r2, r3, #1
 801648c:	2030      	movs	r0, #48	; 0x30
 801648e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016492:	4422      	add	r2, r4
 8016494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801649c:	3302      	adds	r3, #2
 801649e:	e7c7      	b.n	8016430 <_printf_common+0x58>
 80164a0:	2301      	movs	r3, #1
 80164a2:	4622      	mov	r2, r4
 80164a4:	4649      	mov	r1, r9
 80164a6:	4638      	mov	r0, r7
 80164a8:	47c0      	blx	r8
 80164aa:	3001      	adds	r0, #1
 80164ac:	d0e6      	beq.n	801647c <_printf_common+0xa4>
 80164ae:	3601      	adds	r6, #1
 80164b0:	e7d9      	b.n	8016466 <_printf_common+0x8e>
	...

080164b4 <_printf_i>:
 80164b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164b8:	460c      	mov	r4, r1
 80164ba:	4691      	mov	r9, r2
 80164bc:	7e27      	ldrb	r7, [r4, #24]
 80164be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80164c0:	2f78      	cmp	r7, #120	; 0x78
 80164c2:	4680      	mov	r8, r0
 80164c4:	469a      	mov	sl, r3
 80164c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80164ca:	d807      	bhi.n	80164dc <_printf_i+0x28>
 80164cc:	2f62      	cmp	r7, #98	; 0x62
 80164ce:	d80a      	bhi.n	80164e6 <_printf_i+0x32>
 80164d0:	2f00      	cmp	r7, #0
 80164d2:	f000 80d8 	beq.w	8016686 <_printf_i+0x1d2>
 80164d6:	2f58      	cmp	r7, #88	; 0x58
 80164d8:	f000 80a3 	beq.w	8016622 <_printf_i+0x16e>
 80164dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80164e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80164e4:	e03a      	b.n	801655c <_printf_i+0xa8>
 80164e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80164ea:	2b15      	cmp	r3, #21
 80164ec:	d8f6      	bhi.n	80164dc <_printf_i+0x28>
 80164ee:	a001      	add	r0, pc, #4	; (adr r0, 80164f4 <_printf_i+0x40>)
 80164f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80164f4:	0801654d 	.word	0x0801654d
 80164f8:	08016561 	.word	0x08016561
 80164fc:	080164dd 	.word	0x080164dd
 8016500:	080164dd 	.word	0x080164dd
 8016504:	080164dd 	.word	0x080164dd
 8016508:	080164dd 	.word	0x080164dd
 801650c:	08016561 	.word	0x08016561
 8016510:	080164dd 	.word	0x080164dd
 8016514:	080164dd 	.word	0x080164dd
 8016518:	080164dd 	.word	0x080164dd
 801651c:	080164dd 	.word	0x080164dd
 8016520:	0801666d 	.word	0x0801666d
 8016524:	08016591 	.word	0x08016591
 8016528:	0801664f 	.word	0x0801664f
 801652c:	080164dd 	.word	0x080164dd
 8016530:	080164dd 	.word	0x080164dd
 8016534:	0801668f 	.word	0x0801668f
 8016538:	080164dd 	.word	0x080164dd
 801653c:	08016591 	.word	0x08016591
 8016540:	080164dd 	.word	0x080164dd
 8016544:	080164dd 	.word	0x080164dd
 8016548:	08016657 	.word	0x08016657
 801654c:	680b      	ldr	r3, [r1, #0]
 801654e:	1d1a      	adds	r2, r3, #4
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	600a      	str	r2, [r1, #0]
 8016554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801655c:	2301      	movs	r3, #1
 801655e:	e0a3      	b.n	80166a8 <_printf_i+0x1f4>
 8016560:	6825      	ldr	r5, [r4, #0]
 8016562:	6808      	ldr	r0, [r1, #0]
 8016564:	062e      	lsls	r6, r5, #24
 8016566:	f100 0304 	add.w	r3, r0, #4
 801656a:	d50a      	bpl.n	8016582 <_printf_i+0xce>
 801656c:	6805      	ldr	r5, [r0, #0]
 801656e:	600b      	str	r3, [r1, #0]
 8016570:	2d00      	cmp	r5, #0
 8016572:	da03      	bge.n	801657c <_printf_i+0xc8>
 8016574:	232d      	movs	r3, #45	; 0x2d
 8016576:	426d      	negs	r5, r5
 8016578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801657c:	485e      	ldr	r0, [pc, #376]	; (80166f8 <_printf_i+0x244>)
 801657e:	230a      	movs	r3, #10
 8016580:	e019      	b.n	80165b6 <_printf_i+0x102>
 8016582:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016586:	6805      	ldr	r5, [r0, #0]
 8016588:	600b      	str	r3, [r1, #0]
 801658a:	bf18      	it	ne
 801658c:	b22d      	sxthne	r5, r5
 801658e:	e7ef      	b.n	8016570 <_printf_i+0xbc>
 8016590:	680b      	ldr	r3, [r1, #0]
 8016592:	6825      	ldr	r5, [r4, #0]
 8016594:	1d18      	adds	r0, r3, #4
 8016596:	6008      	str	r0, [r1, #0]
 8016598:	0628      	lsls	r0, r5, #24
 801659a:	d501      	bpl.n	80165a0 <_printf_i+0xec>
 801659c:	681d      	ldr	r5, [r3, #0]
 801659e:	e002      	b.n	80165a6 <_printf_i+0xf2>
 80165a0:	0669      	lsls	r1, r5, #25
 80165a2:	d5fb      	bpl.n	801659c <_printf_i+0xe8>
 80165a4:	881d      	ldrh	r5, [r3, #0]
 80165a6:	4854      	ldr	r0, [pc, #336]	; (80166f8 <_printf_i+0x244>)
 80165a8:	2f6f      	cmp	r7, #111	; 0x6f
 80165aa:	bf0c      	ite	eq
 80165ac:	2308      	moveq	r3, #8
 80165ae:	230a      	movne	r3, #10
 80165b0:	2100      	movs	r1, #0
 80165b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80165b6:	6866      	ldr	r6, [r4, #4]
 80165b8:	60a6      	str	r6, [r4, #8]
 80165ba:	2e00      	cmp	r6, #0
 80165bc:	bfa2      	ittt	ge
 80165be:	6821      	ldrge	r1, [r4, #0]
 80165c0:	f021 0104 	bicge.w	r1, r1, #4
 80165c4:	6021      	strge	r1, [r4, #0]
 80165c6:	b90d      	cbnz	r5, 80165cc <_printf_i+0x118>
 80165c8:	2e00      	cmp	r6, #0
 80165ca:	d04d      	beq.n	8016668 <_printf_i+0x1b4>
 80165cc:	4616      	mov	r6, r2
 80165ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80165d2:	fb03 5711 	mls	r7, r3, r1, r5
 80165d6:	5dc7      	ldrb	r7, [r0, r7]
 80165d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80165dc:	462f      	mov	r7, r5
 80165de:	42bb      	cmp	r3, r7
 80165e0:	460d      	mov	r5, r1
 80165e2:	d9f4      	bls.n	80165ce <_printf_i+0x11a>
 80165e4:	2b08      	cmp	r3, #8
 80165e6:	d10b      	bne.n	8016600 <_printf_i+0x14c>
 80165e8:	6823      	ldr	r3, [r4, #0]
 80165ea:	07df      	lsls	r7, r3, #31
 80165ec:	d508      	bpl.n	8016600 <_printf_i+0x14c>
 80165ee:	6923      	ldr	r3, [r4, #16]
 80165f0:	6861      	ldr	r1, [r4, #4]
 80165f2:	4299      	cmp	r1, r3
 80165f4:	bfde      	ittt	le
 80165f6:	2330      	movle	r3, #48	; 0x30
 80165f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80165fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016600:	1b92      	subs	r2, r2, r6
 8016602:	6122      	str	r2, [r4, #16]
 8016604:	f8cd a000 	str.w	sl, [sp]
 8016608:	464b      	mov	r3, r9
 801660a:	aa03      	add	r2, sp, #12
 801660c:	4621      	mov	r1, r4
 801660e:	4640      	mov	r0, r8
 8016610:	f7ff fee2 	bl	80163d8 <_printf_common>
 8016614:	3001      	adds	r0, #1
 8016616:	d14c      	bne.n	80166b2 <_printf_i+0x1fe>
 8016618:	f04f 30ff 	mov.w	r0, #4294967295
 801661c:	b004      	add	sp, #16
 801661e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016622:	4835      	ldr	r0, [pc, #212]	; (80166f8 <_printf_i+0x244>)
 8016624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016628:	6823      	ldr	r3, [r4, #0]
 801662a:	680e      	ldr	r6, [r1, #0]
 801662c:	061f      	lsls	r7, r3, #24
 801662e:	f856 5b04 	ldr.w	r5, [r6], #4
 8016632:	600e      	str	r6, [r1, #0]
 8016634:	d514      	bpl.n	8016660 <_printf_i+0x1ac>
 8016636:	07d9      	lsls	r1, r3, #31
 8016638:	bf44      	itt	mi
 801663a:	f043 0320 	orrmi.w	r3, r3, #32
 801663e:	6023      	strmi	r3, [r4, #0]
 8016640:	b91d      	cbnz	r5, 801664a <_printf_i+0x196>
 8016642:	6823      	ldr	r3, [r4, #0]
 8016644:	f023 0320 	bic.w	r3, r3, #32
 8016648:	6023      	str	r3, [r4, #0]
 801664a:	2310      	movs	r3, #16
 801664c:	e7b0      	b.n	80165b0 <_printf_i+0xfc>
 801664e:	6823      	ldr	r3, [r4, #0]
 8016650:	f043 0320 	orr.w	r3, r3, #32
 8016654:	6023      	str	r3, [r4, #0]
 8016656:	2378      	movs	r3, #120	; 0x78
 8016658:	4828      	ldr	r0, [pc, #160]	; (80166fc <_printf_i+0x248>)
 801665a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801665e:	e7e3      	b.n	8016628 <_printf_i+0x174>
 8016660:	065e      	lsls	r6, r3, #25
 8016662:	bf48      	it	mi
 8016664:	b2ad      	uxthmi	r5, r5
 8016666:	e7e6      	b.n	8016636 <_printf_i+0x182>
 8016668:	4616      	mov	r6, r2
 801666a:	e7bb      	b.n	80165e4 <_printf_i+0x130>
 801666c:	680b      	ldr	r3, [r1, #0]
 801666e:	6826      	ldr	r6, [r4, #0]
 8016670:	6960      	ldr	r0, [r4, #20]
 8016672:	1d1d      	adds	r5, r3, #4
 8016674:	600d      	str	r5, [r1, #0]
 8016676:	0635      	lsls	r5, r6, #24
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	d501      	bpl.n	8016680 <_printf_i+0x1cc>
 801667c:	6018      	str	r0, [r3, #0]
 801667e:	e002      	b.n	8016686 <_printf_i+0x1d2>
 8016680:	0671      	lsls	r1, r6, #25
 8016682:	d5fb      	bpl.n	801667c <_printf_i+0x1c8>
 8016684:	8018      	strh	r0, [r3, #0]
 8016686:	2300      	movs	r3, #0
 8016688:	6123      	str	r3, [r4, #16]
 801668a:	4616      	mov	r6, r2
 801668c:	e7ba      	b.n	8016604 <_printf_i+0x150>
 801668e:	680b      	ldr	r3, [r1, #0]
 8016690:	1d1a      	adds	r2, r3, #4
 8016692:	600a      	str	r2, [r1, #0]
 8016694:	681e      	ldr	r6, [r3, #0]
 8016696:	6862      	ldr	r2, [r4, #4]
 8016698:	2100      	movs	r1, #0
 801669a:	4630      	mov	r0, r6
 801669c:	f7e9 fdd0 	bl	8000240 <memchr>
 80166a0:	b108      	cbz	r0, 80166a6 <_printf_i+0x1f2>
 80166a2:	1b80      	subs	r0, r0, r6
 80166a4:	6060      	str	r0, [r4, #4]
 80166a6:	6863      	ldr	r3, [r4, #4]
 80166a8:	6123      	str	r3, [r4, #16]
 80166aa:	2300      	movs	r3, #0
 80166ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166b0:	e7a8      	b.n	8016604 <_printf_i+0x150>
 80166b2:	6923      	ldr	r3, [r4, #16]
 80166b4:	4632      	mov	r2, r6
 80166b6:	4649      	mov	r1, r9
 80166b8:	4640      	mov	r0, r8
 80166ba:	47d0      	blx	sl
 80166bc:	3001      	adds	r0, #1
 80166be:	d0ab      	beq.n	8016618 <_printf_i+0x164>
 80166c0:	6823      	ldr	r3, [r4, #0]
 80166c2:	079b      	lsls	r3, r3, #30
 80166c4:	d413      	bmi.n	80166ee <_printf_i+0x23a>
 80166c6:	68e0      	ldr	r0, [r4, #12]
 80166c8:	9b03      	ldr	r3, [sp, #12]
 80166ca:	4298      	cmp	r0, r3
 80166cc:	bfb8      	it	lt
 80166ce:	4618      	movlt	r0, r3
 80166d0:	e7a4      	b.n	801661c <_printf_i+0x168>
 80166d2:	2301      	movs	r3, #1
 80166d4:	4632      	mov	r2, r6
 80166d6:	4649      	mov	r1, r9
 80166d8:	4640      	mov	r0, r8
 80166da:	47d0      	blx	sl
 80166dc:	3001      	adds	r0, #1
 80166de:	d09b      	beq.n	8016618 <_printf_i+0x164>
 80166e0:	3501      	adds	r5, #1
 80166e2:	68e3      	ldr	r3, [r4, #12]
 80166e4:	9903      	ldr	r1, [sp, #12]
 80166e6:	1a5b      	subs	r3, r3, r1
 80166e8:	42ab      	cmp	r3, r5
 80166ea:	dcf2      	bgt.n	80166d2 <_printf_i+0x21e>
 80166ec:	e7eb      	b.n	80166c6 <_printf_i+0x212>
 80166ee:	2500      	movs	r5, #0
 80166f0:	f104 0619 	add.w	r6, r4, #25
 80166f4:	e7f5      	b.n	80166e2 <_printf_i+0x22e>
 80166f6:	bf00      	nop
 80166f8:	08039feb 	.word	0x08039feb
 80166fc:	08039ffc 	.word	0x08039ffc

08016700 <_scanf_float>:
 8016700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016704:	b087      	sub	sp, #28
 8016706:	4617      	mov	r7, r2
 8016708:	9303      	str	r3, [sp, #12]
 801670a:	688b      	ldr	r3, [r1, #8]
 801670c:	1e5a      	subs	r2, r3, #1
 801670e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016712:	bf83      	ittte	hi
 8016714:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016718:	195b      	addhi	r3, r3, r5
 801671a:	9302      	strhi	r3, [sp, #8]
 801671c:	2300      	movls	r3, #0
 801671e:	bf86      	itte	hi
 8016720:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016724:	608b      	strhi	r3, [r1, #8]
 8016726:	9302      	strls	r3, [sp, #8]
 8016728:	680b      	ldr	r3, [r1, #0]
 801672a:	468b      	mov	fp, r1
 801672c:	2500      	movs	r5, #0
 801672e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016732:	f84b 3b1c 	str.w	r3, [fp], #28
 8016736:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801673a:	4680      	mov	r8, r0
 801673c:	460c      	mov	r4, r1
 801673e:	465e      	mov	r6, fp
 8016740:	46aa      	mov	sl, r5
 8016742:	46a9      	mov	r9, r5
 8016744:	9501      	str	r5, [sp, #4]
 8016746:	68a2      	ldr	r2, [r4, #8]
 8016748:	b152      	cbz	r2, 8016760 <_scanf_float+0x60>
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	2b4e      	cmp	r3, #78	; 0x4e
 8016750:	d864      	bhi.n	801681c <_scanf_float+0x11c>
 8016752:	2b40      	cmp	r3, #64	; 0x40
 8016754:	d83c      	bhi.n	80167d0 <_scanf_float+0xd0>
 8016756:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801675a:	b2c8      	uxtb	r0, r1
 801675c:	280e      	cmp	r0, #14
 801675e:	d93a      	bls.n	80167d6 <_scanf_float+0xd6>
 8016760:	f1b9 0f00 	cmp.w	r9, #0
 8016764:	d003      	beq.n	801676e <_scanf_float+0x6e>
 8016766:	6823      	ldr	r3, [r4, #0]
 8016768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801676c:	6023      	str	r3, [r4, #0]
 801676e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016772:	f1ba 0f01 	cmp.w	sl, #1
 8016776:	f200 8113 	bhi.w	80169a0 <_scanf_float+0x2a0>
 801677a:	455e      	cmp	r6, fp
 801677c:	f200 8105 	bhi.w	801698a <_scanf_float+0x28a>
 8016780:	2501      	movs	r5, #1
 8016782:	4628      	mov	r0, r5
 8016784:	b007      	add	sp, #28
 8016786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801678a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801678e:	2a0d      	cmp	r2, #13
 8016790:	d8e6      	bhi.n	8016760 <_scanf_float+0x60>
 8016792:	a101      	add	r1, pc, #4	; (adr r1, 8016798 <_scanf_float+0x98>)
 8016794:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016798:	080168d7 	.word	0x080168d7
 801679c:	08016761 	.word	0x08016761
 80167a0:	08016761 	.word	0x08016761
 80167a4:	08016761 	.word	0x08016761
 80167a8:	08016937 	.word	0x08016937
 80167ac:	0801690f 	.word	0x0801690f
 80167b0:	08016761 	.word	0x08016761
 80167b4:	08016761 	.word	0x08016761
 80167b8:	080168e5 	.word	0x080168e5
 80167bc:	08016761 	.word	0x08016761
 80167c0:	08016761 	.word	0x08016761
 80167c4:	08016761 	.word	0x08016761
 80167c8:	08016761 	.word	0x08016761
 80167cc:	0801689d 	.word	0x0801689d
 80167d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80167d4:	e7db      	b.n	801678e <_scanf_float+0x8e>
 80167d6:	290e      	cmp	r1, #14
 80167d8:	d8c2      	bhi.n	8016760 <_scanf_float+0x60>
 80167da:	a001      	add	r0, pc, #4	; (adr r0, 80167e0 <_scanf_float+0xe0>)
 80167dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80167e0:	0801688f 	.word	0x0801688f
 80167e4:	08016761 	.word	0x08016761
 80167e8:	0801688f 	.word	0x0801688f
 80167ec:	08016923 	.word	0x08016923
 80167f0:	08016761 	.word	0x08016761
 80167f4:	0801683d 	.word	0x0801683d
 80167f8:	08016879 	.word	0x08016879
 80167fc:	08016879 	.word	0x08016879
 8016800:	08016879 	.word	0x08016879
 8016804:	08016879 	.word	0x08016879
 8016808:	08016879 	.word	0x08016879
 801680c:	08016879 	.word	0x08016879
 8016810:	08016879 	.word	0x08016879
 8016814:	08016879 	.word	0x08016879
 8016818:	08016879 	.word	0x08016879
 801681c:	2b6e      	cmp	r3, #110	; 0x6e
 801681e:	d809      	bhi.n	8016834 <_scanf_float+0x134>
 8016820:	2b60      	cmp	r3, #96	; 0x60
 8016822:	d8b2      	bhi.n	801678a <_scanf_float+0x8a>
 8016824:	2b54      	cmp	r3, #84	; 0x54
 8016826:	d077      	beq.n	8016918 <_scanf_float+0x218>
 8016828:	2b59      	cmp	r3, #89	; 0x59
 801682a:	d199      	bne.n	8016760 <_scanf_float+0x60>
 801682c:	2d07      	cmp	r5, #7
 801682e:	d197      	bne.n	8016760 <_scanf_float+0x60>
 8016830:	2508      	movs	r5, #8
 8016832:	e029      	b.n	8016888 <_scanf_float+0x188>
 8016834:	2b74      	cmp	r3, #116	; 0x74
 8016836:	d06f      	beq.n	8016918 <_scanf_float+0x218>
 8016838:	2b79      	cmp	r3, #121	; 0x79
 801683a:	e7f6      	b.n	801682a <_scanf_float+0x12a>
 801683c:	6821      	ldr	r1, [r4, #0]
 801683e:	05c8      	lsls	r0, r1, #23
 8016840:	d51a      	bpl.n	8016878 <_scanf_float+0x178>
 8016842:	9b02      	ldr	r3, [sp, #8]
 8016844:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016848:	6021      	str	r1, [r4, #0]
 801684a:	f109 0901 	add.w	r9, r9, #1
 801684e:	b11b      	cbz	r3, 8016858 <_scanf_float+0x158>
 8016850:	3b01      	subs	r3, #1
 8016852:	3201      	adds	r2, #1
 8016854:	9302      	str	r3, [sp, #8]
 8016856:	60a2      	str	r2, [r4, #8]
 8016858:	68a3      	ldr	r3, [r4, #8]
 801685a:	3b01      	subs	r3, #1
 801685c:	60a3      	str	r3, [r4, #8]
 801685e:	6923      	ldr	r3, [r4, #16]
 8016860:	3301      	adds	r3, #1
 8016862:	6123      	str	r3, [r4, #16]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	3b01      	subs	r3, #1
 8016868:	2b00      	cmp	r3, #0
 801686a:	607b      	str	r3, [r7, #4]
 801686c:	f340 8084 	ble.w	8016978 <_scanf_float+0x278>
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	3301      	adds	r3, #1
 8016874:	603b      	str	r3, [r7, #0]
 8016876:	e766      	b.n	8016746 <_scanf_float+0x46>
 8016878:	eb1a 0f05 	cmn.w	sl, r5
 801687c:	f47f af70 	bne.w	8016760 <_scanf_float+0x60>
 8016880:	6822      	ldr	r2, [r4, #0]
 8016882:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016886:	6022      	str	r2, [r4, #0]
 8016888:	f806 3b01 	strb.w	r3, [r6], #1
 801688c:	e7e4      	b.n	8016858 <_scanf_float+0x158>
 801688e:	6822      	ldr	r2, [r4, #0]
 8016890:	0610      	lsls	r0, r2, #24
 8016892:	f57f af65 	bpl.w	8016760 <_scanf_float+0x60>
 8016896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801689a:	e7f4      	b.n	8016886 <_scanf_float+0x186>
 801689c:	f1ba 0f00 	cmp.w	sl, #0
 80168a0:	d10e      	bne.n	80168c0 <_scanf_float+0x1c0>
 80168a2:	f1b9 0f00 	cmp.w	r9, #0
 80168a6:	d10e      	bne.n	80168c6 <_scanf_float+0x1c6>
 80168a8:	6822      	ldr	r2, [r4, #0]
 80168aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80168ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80168b2:	d108      	bne.n	80168c6 <_scanf_float+0x1c6>
 80168b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80168b8:	6022      	str	r2, [r4, #0]
 80168ba:	f04f 0a01 	mov.w	sl, #1
 80168be:	e7e3      	b.n	8016888 <_scanf_float+0x188>
 80168c0:	f1ba 0f02 	cmp.w	sl, #2
 80168c4:	d055      	beq.n	8016972 <_scanf_float+0x272>
 80168c6:	2d01      	cmp	r5, #1
 80168c8:	d002      	beq.n	80168d0 <_scanf_float+0x1d0>
 80168ca:	2d04      	cmp	r5, #4
 80168cc:	f47f af48 	bne.w	8016760 <_scanf_float+0x60>
 80168d0:	3501      	adds	r5, #1
 80168d2:	b2ed      	uxtb	r5, r5
 80168d4:	e7d8      	b.n	8016888 <_scanf_float+0x188>
 80168d6:	f1ba 0f01 	cmp.w	sl, #1
 80168da:	f47f af41 	bne.w	8016760 <_scanf_float+0x60>
 80168de:	f04f 0a02 	mov.w	sl, #2
 80168e2:	e7d1      	b.n	8016888 <_scanf_float+0x188>
 80168e4:	b97d      	cbnz	r5, 8016906 <_scanf_float+0x206>
 80168e6:	f1b9 0f00 	cmp.w	r9, #0
 80168ea:	f47f af3c 	bne.w	8016766 <_scanf_float+0x66>
 80168ee:	6822      	ldr	r2, [r4, #0]
 80168f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80168f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80168f8:	f47f af39 	bne.w	801676e <_scanf_float+0x6e>
 80168fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016900:	6022      	str	r2, [r4, #0]
 8016902:	2501      	movs	r5, #1
 8016904:	e7c0      	b.n	8016888 <_scanf_float+0x188>
 8016906:	2d03      	cmp	r5, #3
 8016908:	d0e2      	beq.n	80168d0 <_scanf_float+0x1d0>
 801690a:	2d05      	cmp	r5, #5
 801690c:	e7de      	b.n	80168cc <_scanf_float+0x1cc>
 801690e:	2d02      	cmp	r5, #2
 8016910:	f47f af26 	bne.w	8016760 <_scanf_float+0x60>
 8016914:	2503      	movs	r5, #3
 8016916:	e7b7      	b.n	8016888 <_scanf_float+0x188>
 8016918:	2d06      	cmp	r5, #6
 801691a:	f47f af21 	bne.w	8016760 <_scanf_float+0x60>
 801691e:	2507      	movs	r5, #7
 8016920:	e7b2      	b.n	8016888 <_scanf_float+0x188>
 8016922:	6822      	ldr	r2, [r4, #0]
 8016924:	0591      	lsls	r1, r2, #22
 8016926:	f57f af1b 	bpl.w	8016760 <_scanf_float+0x60>
 801692a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801692e:	6022      	str	r2, [r4, #0]
 8016930:	f8cd 9004 	str.w	r9, [sp, #4]
 8016934:	e7a8      	b.n	8016888 <_scanf_float+0x188>
 8016936:	6822      	ldr	r2, [r4, #0]
 8016938:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801693c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016940:	d006      	beq.n	8016950 <_scanf_float+0x250>
 8016942:	0550      	lsls	r0, r2, #21
 8016944:	f57f af0c 	bpl.w	8016760 <_scanf_float+0x60>
 8016948:	f1b9 0f00 	cmp.w	r9, #0
 801694c:	f43f af0f 	beq.w	801676e <_scanf_float+0x6e>
 8016950:	0591      	lsls	r1, r2, #22
 8016952:	bf58      	it	pl
 8016954:	9901      	ldrpl	r1, [sp, #4]
 8016956:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801695a:	bf58      	it	pl
 801695c:	eba9 0101 	subpl.w	r1, r9, r1
 8016960:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016964:	bf58      	it	pl
 8016966:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801696a:	6022      	str	r2, [r4, #0]
 801696c:	f04f 0900 	mov.w	r9, #0
 8016970:	e78a      	b.n	8016888 <_scanf_float+0x188>
 8016972:	f04f 0a03 	mov.w	sl, #3
 8016976:	e787      	b.n	8016888 <_scanf_float+0x188>
 8016978:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801697c:	4639      	mov	r1, r7
 801697e:	4640      	mov	r0, r8
 8016980:	4798      	blx	r3
 8016982:	2800      	cmp	r0, #0
 8016984:	f43f aedf 	beq.w	8016746 <_scanf_float+0x46>
 8016988:	e6ea      	b.n	8016760 <_scanf_float+0x60>
 801698a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801698e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016992:	463a      	mov	r2, r7
 8016994:	4640      	mov	r0, r8
 8016996:	4798      	blx	r3
 8016998:	6923      	ldr	r3, [r4, #16]
 801699a:	3b01      	subs	r3, #1
 801699c:	6123      	str	r3, [r4, #16]
 801699e:	e6ec      	b.n	801677a <_scanf_float+0x7a>
 80169a0:	1e6b      	subs	r3, r5, #1
 80169a2:	2b06      	cmp	r3, #6
 80169a4:	d825      	bhi.n	80169f2 <_scanf_float+0x2f2>
 80169a6:	2d02      	cmp	r5, #2
 80169a8:	d836      	bhi.n	8016a18 <_scanf_float+0x318>
 80169aa:	455e      	cmp	r6, fp
 80169ac:	f67f aee8 	bls.w	8016780 <_scanf_float+0x80>
 80169b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80169b8:	463a      	mov	r2, r7
 80169ba:	4640      	mov	r0, r8
 80169bc:	4798      	blx	r3
 80169be:	6923      	ldr	r3, [r4, #16]
 80169c0:	3b01      	subs	r3, #1
 80169c2:	6123      	str	r3, [r4, #16]
 80169c4:	e7f1      	b.n	80169aa <_scanf_float+0x2aa>
 80169c6:	9802      	ldr	r0, [sp, #8]
 80169c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80169d0:	9002      	str	r0, [sp, #8]
 80169d2:	463a      	mov	r2, r7
 80169d4:	4640      	mov	r0, r8
 80169d6:	4798      	blx	r3
 80169d8:	6923      	ldr	r3, [r4, #16]
 80169da:	3b01      	subs	r3, #1
 80169dc:	6123      	str	r3, [r4, #16]
 80169de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80169e2:	fa5f fa8a 	uxtb.w	sl, sl
 80169e6:	f1ba 0f02 	cmp.w	sl, #2
 80169ea:	d1ec      	bne.n	80169c6 <_scanf_float+0x2c6>
 80169ec:	3d03      	subs	r5, #3
 80169ee:	b2ed      	uxtb	r5, r5
 80169f0:	1b76      	subs	r6, r6, r5
 80169f2:	6823      	ldr	r3, [r4, #0]
 80169f4:	05da      	lsls	r2, r3, #23
 80169f6:	d52f      	bpl.n	8016a58 <_scanf_float+0x358>
 80169f8:	055b      	lsls	r3, r3, #21
 80169fa:	d510      	bpl.n	8016a1e <_scanf_float+0x31e>
 80169fc:	455e      	cmp	r6, fp
 80169fe:	f67f aebf 	bls.w	8016780 <_scanf_float+0x80>
 8016a02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a0a:	463a      	mov	r2, r7
 8016a0c:	4640      	mov	r0, r8
 8016a0e:	4798      	blx	r3
 8016a10:	6923      	ldr	r3, [r4, #16]
 8016a12:	3b01      	subs	r3, #1
 8016a14:	6123      	str	r3, [r4, #16]
 8016a16:	e7f1      	b.n	80169fc <_scanf_float+0x2fc>
 8016a18:	46aa      	mov	sl, r5
 8016a1a:	9602      	str	r6, [sp, #8]
 8016a1c:	e7df      	b.n	80169de <_scanf_float+0x2de>
 8016a1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016a22:	6923      	ldr	r3, [r4, #16]
 8016a24:	2965      	cmp	r1, #101	; 0x65
 8016a26:	f103 33ff 	add.w	r3, r3, #4294967295
 8016a2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8016a2e:	6123      	str	r3, [r4, #16]
 8016a30:	d00c      	beq.n	8016a4c <_scanf_float+0x34c>
 8016a32:	2945      	cmp	r1, #69	; 0x45
 8016a34:	d00a      	beq.n	8016a4c <_scanf_float+0x34c>
 8016a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a3a:	463a      	mov	r2, r7
 8016a3c:	4640      	mov	r0, r8
 8016a3e:	4798      	blx	r3
 8016a40:	6923      	ldr	r3, [r4, #16]
 8016a42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016a46:	3b01      	subs	r3, #1
 8016a48:	1eb5      	subs	r5, r6, #2
 8016a4a:	6123      	str	r3, [r4, #16]
 8016a4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a50:	463a      	mov	r2, r7
 8016a52:	4640      	mov	r0, r8
 8016a54:	4798      	blx	r3
 8016a56:	462e      	mov	r6, r5
 8016a58:	6825      	ldr	r5, [r4, #0]
 8016a5a:	f015 0510 	ands.w	r5, r5, #16
 8016a5e:	d158      	bne.n	8016b12 <_scanf_float+0x412>
 8016a60:	7035      	strb	r5, [r6, #0]
 8016a62:	6823      	ldr	r3, [r4, #0]
 8016a64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016a6c:	d11c      	bne.n	8016aa8 <_scanf_float+0x3a8>
 8016a6e:	9b01      	ldr	r3, [sp, #4]
 8016a70:	454b      	cmp	r3, r9
 8016a72:	eba3 0209 	sub.w	r2, r3, r9
 8016a76:	d124      	bne.n	8016ac2 <_scanf_float+0x3c2>
 8016a78:	2200      	movs	r2, #0
 8016a7a:	4659      	mov	r1, fp
 8016a7c:	4640      	mov	r0, r8
 8016a7e:	f000 ff91 	bl	80179a4 <_strtod_r>
 8016a82:	9b03      	ldr	r3, [sp, #12]
 8016a84:	6821      	ldr	r1, [r4, #0]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	f011 0f02 	tst.w	r1, #2
 8016a8c:	ec57 6b10 	vmov	r6, r7, d0
 8016a90:	f103 0204 	add.w	r2, r3, #4
 8016a94:	d020      	beq.n	8016ad8 <_scanf_float+0x3d8>
 8016a96:	9903      	ldr	r1, [sp, #12]
 8016a98:	600a      	str	r2, [r1, #0]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	e9c3 6700 	strd	r6, r7, [r3]
 8016aa0:	68e3      	ldr	r3, [r4, #12]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	60e3      	str	r3, [r4, #12]
 8016aa6:	e66c      	b.n	8016782 <_scanf_float+0x82>
 8016aa8:	9b04      	ldr	r3, [sp, #16]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d0e4      	beq.n	8016a78 <_scanf_float+0x378>
 8016aae:	9905      	ldr	r1, [sp, #20]
 8016ab0:	230a      	movs	r3, #10
 8016ab2:	462a      	mov	r2, r5
 8016ab4:	3101      	adds	r1, #1
 8016ab6:	4640      	mov	r0, r8
 8016ab8:	f001 f80a 	bl	8017ad0 <_strtol_r>
 8016abc:	9b04      	ldr	r3, [sp, #16]
 8016abe:	9e05      	ldr	r6, [sp, #20]
 8016ac0:	1ac2      	subs	r2, r0, r3
 8016ac2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016ac6:	429e      	cmp	r6, r3
 8016ac8:	bf28      	it	cs
 8016aca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016ace:	4912      	ldr	r1, [pc, #72]	; (8016b18 <_scanf_float+0x418>)
 8016ad0:	4630      	mov	r0, r6
 8016ad2:	f000 f907 	bl	8016ce4 <siprintf>
 8016ad6:	e7cf      	b.n	8016a78 <_scanf_float+0x378>
 8016ad8:	f011 0f04 	tst.w	r1, #4
 8016adc:	9903      	ldr	r1, [sp, #12]
 8016ade:	600a      	str	r2, [r1, #0]
 8016ae0:	d1db      	bne.n	8016a9a <_scanf_float+0x39a>
 8016ae2:	f8d3 8000 	ldr.w	r8, [r3]
 8016ae6:	ee10 2a10 	vmov	r2, s0
 8016aea:	ee10 0a10 	vmov	r0, s0
 8016aee:	463b      	mov	r3, r7
 8016af0:	4639      	mov	r1, r7
 8016af2:	f7ea f84b 	bl	8000b8c <__aeabi_dcmpun>
 8016af6:	b128      	cbz	r0, 8016b04 <_scanf_float+0x404>
 8016af8:	4808      	ldr	r0, [pc, #32]	; (8016b1c <_scanf_float+0x41c>)
 8016afa:	f7fe fe49 	bl	8015790 <nanf>
 8016afe:	ed88 0a00 	vstr	s0, [r8]
 8016b02:	e7cd      	b.n	8016aa0 <_scanf_float+0x3a0>
 8016b04:	4630      	mov	r0, r6
 8016b06:	4639      	mov	r1, r7
 8016b08:	f7ea f89e 	bl	8000c48 <__aeabi_d2f>
 8016b0c:	f8c8 0000 	str.w	r0, [r8]
 8016b10:	e7c6      	b.n	8016aa0 <_scanf_float+0x3a0>
 8016b12:	2500      	movs	r5, #0
 8016b14:	e635      	b.n	8016782 <_scanf_float+0x82>
 8016b16:	bf00      	nop
 8016b18:	0803a00d 	.word	0x0803a00d
 8016b1c:	08039fc3 	.word	0x08039fc3

08016b20 <iprintf>:
 8016b20:	b40f      	push	{r0, r1, r2, r3}
 8016b22:	4b0a      	ldr	r3, [pc, #40]	; (8016b4c <iprintf+0x2c>)
 8016b24:	b513      	push	{r0, r1, r4, lr}
 8016b26:	681c      	ldr	r4, [r3, #0]
 8016b28:	b124      	cbz	r4, 8016b34 <iprintf+0x14>
 8016b2a:	69a3      	ldr	r3, [r4, #24]
 8016b2c:	b913      	cbnz	r3, 8016b34 <iprintf+0x14>
 8016b2e:	4620      	mov	r0, r4
 8016b30:	f002 f8a0 	bl	8018c74 <__sinit>
 8016b34:	ab05      	add	r3, sp, #20
 8016b36:	9a04      	ldr	r2, [sp, #16]
 8016b38:	68a1      	ldr	r1, [r4, #8]
 8016b3a:	9301      	str	r3, [sp, #4]
 8016b3c:	4620      	mov	r0, r4
 8016b3e:	f7ff f845 	bl	8015bcc <_vfiprintf_r>
 8016b42:	b002      	add	sp, #8
 8016b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b48:	b004      	add	sp, #16
 8016b4a:	4770      	bx	lr
 8016b4c:	20000170 	.word	0x20000170

08016b50 <_puts_r>:
 8016b50:	b570      	push	{r4, r5, r6, lr}
 8016b52:	460e      	mov	r6, r1
 8016b54:	4605      	mov	r5, r0
 8016b56:	b118      	cbz	r0, 8016b60 <_puts_r+0x10>
 8016b58:	6983      	ldr	r3, [r0, #24]
 8016b5a:	b90b      	cbnz	r3, 8016b60 <_puts_r+0x10>
 8016b5c:	f002 f88a 	bl	8018c74 <__sinit>
 8016b60:	69ab      	ldr	r3, [r5, #24]
 8016b62:	68ac      	ldr	r4, [r5, #8]
 8016b64:	b913      	cbnz	r3, 8016b6c <_puts_r+0x1c>
 8016b66:	4628      	mov	r0, r5
 8016b68:	f002 f884 	bl	8018c74 <__sinit>
 8016b6c:	4b2c      	ldr	r3, [pc, #176]	; (8016c20 <_puts_r+0xd0>)
 8016b6e:	429c      	cmp	r4, r3
 8016b70:	d120      	bne.n	8016bb4 <_puts_r+0x64>
 8016b72:	686c      	ldr	r4, [r5, #4]
 8016b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b76:	07db      	lsls	r3, r3, #31
 8016b78:	d405      	bmi.n	8016b86 <_puts_r+0x36>
 8016b7a:	89a3      	ldrh	r3, [r4, #12]
 8016b7c:	0598      	lsls	r0, r3, #22
 8016b7e:	d402      	bmi.n	8016b86 <_puts_r+0x36>
 8016b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b82:	f7fe fefc 	bl	801597e <__retarget_lock_acquire_recursive>
 8016b86:	89a3      	ldrh	r3, [r4, #12]
 8016b88:	0719      	lsls	r1, r3, #28
 8016b8a:	d51d      	bpl.n	8016bc8 <_puts_r+0x78>
 8016b8c:	6923      	ldr	r3, [r4, #16]
 8016b8e:	b1db      	cbz	r3, 8016bc8 <_puts_r+0x78>
 8016b90:	3e01      	subs	r6, #1
 8016b92:	68a3      	ldr	r3, [r4, #8]
 8016b94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016b98:	3b01      	subs	r3, #1
 8016b9a:	60a3      	str	r3, [r4, #8]
 8016b9c:	bb39      	cbnz	r1, 8016bee <_puts_r+0x9e>
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	da38      	bge.n	8016c14 <_puts_r+0xc4>
 8016ba2:	4622      	mov	r2, r4
 8016ba4:	210a      	movs	r1, #10
 8016ba6:	4628      	mov	r0, r5
 8016ba8:	f000 ffb4 	bl	8017b14 <__swbuf_r>
 8016bac:	3001      	adds	r0, #1
 8016bae:	d011      	beq.n	8016bd4 <_puts_r+0x84>
 8016bb0:	250a      	movs	r5, #10
 8016bb2:	e011      	b.n	8016bd8 <_puts_r+0x88>
 8016bb4:	4b1b      	ldr	r3, [pc, #108]	; (8016c24 <_puts_r+0xd4>)
 8016bb6:	429c      	cmp	r4, r3
 8016bb8:	d101      	bne.n	8016bbe <_puts_r+0x6e>
 8016bba:	68ac      	ldr	r4, [r5, #8]
 8016bbc:	e7da      	b.n	8016b74 <_puts_r+0x24>
 8016bbe:	4b1a      	ldr	r3, [pc, #104]	; (8016c28 <_puts_r+0xd8>)
 8016bc0:	429c      	cmp	r4, r3
 8016bc2:	bf08      	it	eq
 8016bc4:	68ec      	ldreq	r4, [r5, #12]
 8016bc6:	e7d5      	b.n	8016b74 <_puts_r+0x24>
 8016bc8:	4621      	mov	r1, r4
 8016bca:	4628      	mov	r0, r5
 8016bcc:	f000 fff4 	bl	8017bb8 <__swsetup_r>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	d0dd      	beq.n	8016b90 <_puts_r+0x40>
 8016bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8016bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bda:	07da      	lsls	r2, r3, #31
 8016bdc:	d405      	bmi.n	8016bea <_puts_r+0x9a>
 8016bde:	89a3      	ldrh	r3, [r4, #12]
 8016be0:	059b      	lsls	r3, r3, #22
 8016be2:	d402      	bmi.n	8016bea <_puts_r+0x9a>
 8016be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016be6:	f7fe fecb 	bl	8015980 <__retarget_lock_release_recursive>
 8016bea:	4628      	mov	r0, r5
 8016bec:	bd70      	pop	{r4, r5, r6, pc}
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	da04      	bge.n	8016bfc <_puts_r+0xac>
 8016bf2:	69a2      	ldr	r2, [r4, #24]
 8016bf4:	429a      	cmp	r2, r3
 8016bf6:	dc06      	bgt.n	8016c06 <_puts_r+0xb6>
 8016bf8:	290a      	cmp	r1, #10
 8016bfa:	d004      	beq.n	8016c06 <_puts_r+0xb6>
 8016bfc:	6823      	ldr	r3, [r4, #0]
 8016bfe:	1c5a      	adds	r2, r3, #1
 8016c00:	6022      	str	r2, [r4, #0]
 8016c02:	7019      	strb	r1, [r3, #0]
 8016c04:	e7c5      	b.n	8016b92 <_puts_r+0x42>
 8016c06:	4622      	mov	r2, r4
 8016c08:	4628      	mov	r0, r5
 8016c0a:	f000 ff83 	bl	8017b14 <__swbuf_r>
 8016c0e:	3001      	adds	r0, #1
 8016c10:	d1bf      	bne.n	8016b92 <_puts_r+0x42>
 8016c12:	e7df      	b.n	8016bd4 <_puts_r+0x84>
 8016c14:	6823      	ldr	r3, [r4, #0]
 8016c16:	250a      	movs	r5, #10
 8016c18:	1c5a      	adds	r2, r3, #1
 8016c1a:	6022      	str	r2, [r4, #0]
 8016c1c:	701d      	strb	r5, [r3, #0]
 8016c1e:	e7db      	b.n	8016bd8 <_puts_r+0x88>
 8016c20:	0803a220 	.word	0x0803a220
 8016c24:	0803a240 	.word	0x0803a240
 8016c28:	0803a200 	.word	0x0803a200

08016c2c <puts>:
 8016c2c:	4b02      	ldr	r3, [pc, #8]	; (8016c38 <puts+0xc>)
 8016c2e:	4601      	mov	r1, r0
 8016c30:	6818      	ldr	r0, [r3, #0]
 8016c32:	f7ff bf8d 	b.w	8016b50 <_puts_r>
 8016c36:	bf00      	nop
 8016c38:	20000170 	.word	0x20000170

08016c3c <_sbrk_r>:
 8016c3c:	b538      	push	{r3, r4, r5, lr}
 8016c3e:	4d06      	ldr	r5, [pc, #24]	; (8016c58 <_sbrk_r+0x1c>)
 8016c40:	2300      	movs	r3, #0
 8016c42:	4604      	mov	r4, r0
 8016c44:	4608      	mov	r0, r1
 8016c46:	602b      	str	r3, [r5, #0]
 8016c48:	f7ef ffea 	bl	8006c20 <_sbrk>
 8016c4c:	1c43      	adds	r3, r0, #1
 8016c4e:	d102      	bne.n	8016c56 <_sbrk_r+0x1a>
 8016c50:	682b      	ldr	r3, [r5, #0]
 8016c52:	b103      	cbz	r3, 8016c56 <_sbrk_r+0x1a>
 8016c54:	6023      	str	r3, [r4, #0]
 8016c56:	bd38      	pop	{r3, r4, r5, pc}
 8016c58:	20000934 	.word	0x20000934

08016c5c <_raise_r>:
 8016c5c:	291f      	cmp	r1, #31
 8016c5e:	b538      	push	{r3, r4, r5, lr}
 8016c60:	4604      	mov	r4, r0
 8016c62:	460d      	mov	r5, r1
 8016c64:	d904      	bls.n	8016c70 <_raise_r+0x14>
 8016c66:	2316      	movs	r3, #22
 8016c68:	6003      	str	r3, [r0, #0]
 8016c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c72:	b112      	cbz	r2, 8016c7a <_raise_r+0x1e>
 8016c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016c78:	b94b      	cbnz	r3, 8016c8e <_raise_r+0x32>
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	f000 f830 	bl	8016ce0 <_getpid_r>
 8016c80:	462a      	mov	r2, r5
 8016c82:	4601      	mov	r1, r0
 8016c84:	4620      	mov	r0, r4
 8016c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c8a:	f000 b817 	b.w	8016cbc <_kill_r>
 8016c8e:	2b01      	cmp	r3, #1
 8016c90:	d00a      	beq.n	8016ca8 <_raise_r+0x4c>
 8016c92:	1c59      	adds	r1, r3, #1
 8016c94:	d103      	bne.n	8016c9e <_raise_r+0x42>
 8016c96:	2316      	movs	r3, #22
 8016c98:	6003      	str	r3, [r0, #0]
 8016c9a:	2001      	movs	r0, #1
 8016c9c:	e7e7      	b.n	8016c6e <_raise_r+0x12>
 8016c9e:	2400      	movs	r4, #0
 8016ca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	4798      	blx	r3
 8016ca8:	2000      	movs	r0, #0
 8016caa:	e7e0      	b.n	8016c6e <_raise_r+0x12>

08016cac <raise>:
 8016cac:	4b02      	ldr	r3, [pc, #8]	; (8016cb8 <raise+0xc>)
 8016cae:	4601      	mov	r1, r0
 8016cb0:	6818      	ldr	r0, [r3, #0]
 8016cb2:	f7ff bfd3 	b.w	8016c5c <_raise_r>
 8016cb6:	bf00      	nop
 8016cb8:	20000170 	.word	0x20000170

08016cbc <_kill_r>:
 8016cbc:	b538      	push	{r3, r4, r5, lr}
 8016cbe:	4d07      	ldr	r5, [pc, #28]	; (8016cdc <_kill_r+0x20>)
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	4608      	mov	r0, r1
 8016cc6:	4611      	mov	r1, r2
 8016cc8:	602b      	str	r3, [r5, #0]
 8016cca:	f7ef ff21 	bl	8006b10 <_kill>
 8016cce:	1c43      	adds	r3, r0, #1
 8016cd0:	d102      	bne.n	8016cd8 <_kill_r+0x1c>
 8016cd2:	682b      	ldr	r3, [r5, #0]
 8016cd4:	b103      	cbz	r3, 8016cd8 <_kill_r+0x1c>
 8016cd6:	6023      	str	r3, [r4, #0]
 8016cd8:	bd38      	pop	{r3, r4, r5, pc}
 8016cda:	bf00      	nop
 8016cdc:	20000934 	.word	0x20000934

08016ce0 <_getpid_r>:
 8016ce0:	f7ef bf0e 	b.w	8006b00 <_getpid>

08016ce4 <siprintf>:
 8016ce4:	b40e      	push	{r1, r2, r3}
 8016ce6:	b500      	push	{lr}
 8016ce8:	b09c      	sub	sp, #112	; 0x70
 8016cea:	ab1d      	add	r3, sp, #116	; 0x74
 8016cec:	9002      	str	r0, [sp, #8]
 8016cee:	9006      	str	r0, [sp, #24]
 8016cf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016cf4:	4809      	ldr	r0, [pc, #36]	; (8016d1c <siprintf+0x38>)
 8016cf6:	9107      	str	r1, [sp, #28]
 8016cf8:	9104      	str	r1, [sp, #16]
 8016cfa:	4909      	ldr	r1, [pc, #36]	; (8016d20 <siprintf+0x3c>)
 8016cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d00:	9105      	str	r1, [sp, #20]
 8016d02:	6800      	ldr	r0, [r0, #0]
 8016d04:	9301      	str	r3, [sp, #4]
 8016d06:	a902      	add	r1, sp, #8
 8016d08:	f003 f982 	bl	801a010 <_svfiprintf_r>
 8016d0c:	9b02      	ldr	r3, [sp, #8]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	701a      	strb	r2, [r3, #0]
 8016d12:	b01c      	add	sp, #112	; 0x70
 8016d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d18:	b003      	add	sp, #12
 8016d1a:	4770      	bx	lr
 8016d1c:	20000170 	.word	0x20000170
 8016d20:	ffff0208 	.word	0xffff0208

08016d24 <strcpy>:
 8016d24:	4603      	mov	r3, r0
 8016d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d2a:	f803 2b01 	strb.w	r2, [r3], #1
 8016d2e:	2a00      	cmp	r2, #0
 8016d30:	d1f9      	bne.n	8016d26 <strcpy+0x2>
 8016d32:	4770      	bx	lr

08016d34 <strncmp>:
 8016d34:	b510      	push	{r4, lr}
 8016d36:	b16a      	cbz	r2, 8016d54 <strncmp+0x20>
 8016d38:	3901      	subs	r1, #1
 8016d3a:	1884      	adds	r4, r0, r2
 8016d3c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016d40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016d44:	4293      	cmp	r3, r2
 8016d46:	d103      	bne.n	8016d50 <strncmp+0x1c>
 8016d48:	42a0      	cmp	r0, r4
 8016d4a:	d001      	beq.n	8016d50 <strncmp+0x1c>
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d1f5      	bne.n	8016d3c <strncmp+0x8>
 8016d50:	1a98      	subs	r0, r3, r2
 8016d52:	bd10      	pop	{r4, pc}
 8016d54:	4610      	mov	r0, r2
 8016d56:	e7fc      	b.n	8016d52 <strncmp+0x1e>

08016d58 <sulp>:
 8016d58:	b570      	push	{r4, r5, r6, lr}
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	460d      	mov	r5, r1
 8016d5e:	ec45 4b10 	vmov	d0, r4, r5
 8016d62:	4616      	mov	r6, r2
 8016d64:	f002 ff84 	bl	8019c70 <__ulp>
 8016d68:	ec51 0b10 	vmov	r0, r1, d0
 8016d6c:	b17e      	cbz	r6, 8016d8e <sulp+0x36>
 8016d6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	dd09      	ble.n	8016d8e <sulp+0x36>
 8016d7a:	051b      	lsls	r3, r3, #20
 8016d7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016d80:	2400      	movs	r4, #0
 8016d82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016d86:	4622      	mov	r2, r4
 8016d88:	462b      	mov	r3, r5
 8016d8a:	f7e9 fc65 	bl	8000658 <__aeabi_dmul>
 8016d8e:	bd70      	pop	{r4, r5, r6, pc}

08016d90 <_strtod_l>:
 8016d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d94:	b0a3      	sub	sp, #140	; 0x8c
 8016d96:	461f      	mov	r7, r3
 8016d98:	2300      	movs	r3, #0
 8016d9a:	931e      	str	r3, [sp, #120]	; 0x78
 8016d9c:	4ba4      	ldr	r3, [pc, #656]	; (8017030 <_strtod_l+0x2a0>)
 8016d9e:	9219      	str	r2, [sp, #100]	; 0x64
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	9307      	str	r3, [sp, #28]
 8016da4:	4604      	mov	r4, r0
 8016da6:	4618      	mov	r0, r3
 8016da8:	4688      	mov	r8, r1
 8016daa:	f7e9 fa3b 	bl	8000224 <strlen>
 8016dae:	f04f 0a00 	mov.w	sl, #0
 8016db2:	4605      	mov	r5, r0
 8016db4:	f04f 0b00 	mov.w	fp, #0
 8016db8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016dbe:	781a      	ldrb	r2, [r3, #0]
 8016dc0:	2a2b      	cmp	r2, #43	; 0x2b
 8016dc2:	d04c      	beq.n	8016e5e <_strtod_l+0xce>
 8016dc4:	d839      	bhi.n	8016e3a <_strtod_l+0xaa>
 8016dc6:	2a0d      	cmp	r2, #13
 8016dc8:	d832      	bhi.n	8016e30 <_strtod_l+0xa0>
 8016dca:	2a08      	cmp	r2, #8
 8016dcc:	d832      	bhi.n	8016e34 <_strtod_l+0xa4>
 8016dce:	2a00      	cmp	r2, #0
 8016dd0:	d03c      	beq.n	8016e4c <_strtod_l+0xbc>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8016dd6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016dd8:	7833      	ldrb	r3, [r6, #0]
 8016dda:	2b30      	cmp	r3, #48	; 0x30
 8016ddc:	f040 80b4 	bne.w	8016f48 <_strtod_l+0x1b8>
 8016de0:	7873      	ldrb	r3, [r6, #1]
 8016de2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016de6:	2b58      	cmp	r3, #88	; 0x58
 8016de8:	d16c      	bne.n	8016ec4 <_strtod_l+0x134>
 8016dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dec:	9301      	str	r3, [sp, #4]
 8016dee:	ab1e      	add	r3, sp, #120	; 0x78
 8016df0:	9702      	str	r7, [sp, #8]
 8016df2:	9300      	str	r3, [sp, #0]
 8016df4:	4a8f      	ldr	r2, [pc, #572]	; (8017034 <_strtod_l+0x2a4>)
 8016df6:	ab1f      	add	r3, sp, #124	; 0x7c
 8016df8:	a91d      	add	r1, sp, #116	; 0x74
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	f002 f83e 	bl	8018e7c <__gethex>
 8016e00:	f010 0707 	ands.w	r7, r0, #7
 8016e04:	4605      	mov	r5, r0
 8016e06:	d005      	beq.n	8016e14 <_strtod_l+0x84>
 8016e08:	2f06      	cmp	r7, #6
 8016e0a:	d12a      	bne.n	8016e62 <_strtod_l+0xd2>
 8016e0c:	3601      	adds	r6, #1
 8016e0e:	2300      	movs	r3, #0
 8016e10:	961d      	str	r6, [sp, #116]	; 0x74
 8016e12:	930e      	str	r3, [sp, #56]	; 0x38
 8016e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	f040 8596 	bne.w	8017948 <_strtod_l+0xbb8>
 8016e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e1e:	b1db      	cbz	r3, 8016e58 <_strtod_l+0xc8>
 8016e20:	4652      	mov	r2, sl
 8016e22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016e26:	ec43 2b10 	vmov	d0, r2, r3
 8016e2a:	b023      	add	sp, #140	; 0x8c
 8016e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e30:	2a20      	cmp	r2, #32
 8016e32:	d1ce      	bne.n	8016dd2 <_strtod_l+0x42>
 8016e34:	3301      	adds	r3, #1
 8016e36:	931d      	str	r3, [sp, #116]	; 0x74
 8016e38:	e7c0      	b.n	8016dbc <_strtod_l+0x2c>
 8016e3a:	2a2d      	cmp	r2, #45	; 0x2d
 8016e3c:	d1c9      	bne.n	8016dd2 <_strtod_l+0x42>
 8016e3e:	2201      	movs	r2, #1
 8016e40:	920e      	str	r2, [sp, #56]	; 0x38
 8016e42:	1c5a      	adds	r2, r3, #1
 8016e44:	921d      	str	r2, [sp, #116]	; 0x74
 8016e46:	785b      	ldrb	r3, [r3, #1]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d1c4      	bne.n	8016dd6 <_strtod_l+0x46>
 8016e4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016e4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	f040 8576 	bne.w	8017944 <_strtod_l+0xbb4>
 8016e58:	4652      	mov	r2, sl
 8016e5a:	465b      	mov	r3, fp
 8016e5c:	e7e3      	b.n	8016e26 <_strtod_l+0x96>
 8016e5e:	2200      	movs	r2, #0
 8016e60:	e7ee      	b.n	8016e40 <_strtod_l+0xb0>
 8016e62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016e64:	b13a      	cbz	r2, 8016e76 <_strtod_l+0xe6>
 8016e66:	2135      	movs	r1, #53	; 0x35
 8016e68:	a820      	add	r0, sp, #128	; 0x80
 8016e6a:	f003 f80c 	bl	8019e86 <__copybits>
 8016e6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016e70:	4620      	mov	r0, r4
 8016e72:	f002 fbd1 	bl	8019618 <_Bfree>
 8016e76:	3f01      	subs	r7, #1
 8016e78:	2f05      	cmp	r7, #5
 8016e7a:	d807      	bhi.n	8016e8c <_strtod_l+0xfc>
 8016e7c:	e8df f007 	tbb	[pc, r7]
 8016e80:	1d180b0e 	.word	0x1d180b0e
 8016e84:	030e      	.short	0x030e
 8016e86:	f04f 0b00 	mov.w	fp, #0
 8016e8a:	46da      	mov	sl, fp
 8016e8c:	0728      	lsls	r0, r5, #28
 8016e8e:	d5c1      	bpl.n	8016e14 <_strtod_l+0x84>
 8016e90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016e94:	e7be      	b.n	8016e14 <_strtod_l+0x84>
 8016e96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016e9a:	e7f7      	b.n	8016e8c <_strtod_l+0xfc>
 8016e9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016ea0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016ea2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016ea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016eaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016eae:	e7ed      	b.n	8016e8c <_strtod_l+0xfc>
 8016eb0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017038 <_strtod_l+0x2a8>
 8016eb4:	f04f 0a00 	mov.w	sl, #0
 8016eb8:	e7e8      	b.n	8016e8c <_strtod_l+0xfc>
 8016eba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016ebe:	f04f 3aff 	mov.w	sl, #4294967295
 8016ec2:	e7e3      	b.n	8016e8c <_strtod_l+0xfc>
 8016ec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ec6:	1c5a      	adds	r2, r3, #1
 8016ec8:	921d      	str	r2, [sp, #116]	; 0x74
 8016eca:	785b      	ldrb	r3, [r3, #1]
 8016ecc:	2b30      	cmp	r3, #48	; 0x30
 8016ece:	d0f9      	beq.n	8016ec4 <_strtod_l+0x134>
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d09f      	beq.n	8016e14 <_strtod_l+0x84>
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	f04f 0900 	mov.w	r9, #0
 8016eda:	9304      	str	r3, [sp, #16]
 8016edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ede:	930a      	str	r3, [sp, #40]	; 0x28
 8016ee0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016ee4:	464f      	mov	r7, r9
 8016ee6:	220a      	movs	r2, #10
 8016ee8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016eea:	7806      	ldrb	r6, [r0, #0]
 8016eec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016ef0:	b2d9      	uxtb	r1, r3
 8016ef2:	2909      	cmp	r1, #9
 8016ef4:	d92a      	bls.n	8016f4c <_strtod_l+0x1bc>
 8016ef6:	9907      	ldr	r1, [sp, #28]
 8016ef8:	462a      	mov	r2, r5
 8016efa:	f7ff ff1b 	bl	8016d34 <strncmp>
 8016efe:	b398      	cbz	r0, 8016f68 <_strtod_l+0x1d8>
 8016f00:	2000      	movs	r0, #0
 8016f02:	4633      	mov	r3, r6
 8016f04:	463d      	mov	r5, r7
 8016f06:	9007      	str	r0, [sp, #28]
 8016f08:	4602      	mov	r2, r0
 8016f0a:	2b65      	cmp	r3, #101	; 0x65
 8016f0c:	d001      	beq.n	8016f12 <_strtod_l+0x182>
 8016f0e:	2b45      	cmp	r3, #69	; 0x45
 8016f10:	d118      	bne.n	8016f44 <_strtod_l+0x1b4>
 8016f12:	b91d      	cbnz	r5, 8016f1c <_strtod_l+0x18c>
 8016f14:	9b04      	ldr	r3, [sp, #16]
 8016f16:	4303      	orrs	r3, r0
 8016f18:	d098      	beq.n	8016e4c <_strtod_l+0xbc>
 8016f1a:	2500      	movs	r5, #0
 8016f1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016f20:	f108 0301 	add.w	r3, r8, #1
 8016f24:	931d      	str	r3, [sp, #116]	; 0x74
 8016f26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016f2a:	2b2b      	cmp	r3, #43	; 0x2b
 8016f2c:	d075      	beq.n	801701a <_strtod_l+0x28a>
 8016f2e:	2b2d      	cmp	r3, #45	; 0x2d
 8016f30:	d07b      	beq.n	801702a <_strtod_l+0x29a>
 8016f32:	f04f 0c00 	mov.w	ip, #0
 8016f36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016f3a:	2909      	cmp	r1, #9
 8016f3c:	f240 8082 	bls.w	8017044 <_strtod_l+0x2b4>
 8016f40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016f44:	2600      	movs	r6, #0
 8016f46:	e09d      	b.n	8017084 <_strtod_l+0x2f4>
 8016f48:	2300      	movs	r3, #0
 8016f4a:	e7c4      	b.n	8016ed6 <_strtod_l+0x146>
 8016f4c:	2f08      	cmp	r7, #8
 8016f4e:	bfd8      	it	le
 8016f50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016f52:	f100 0001 	add.w	r0, r0, #1
 8016f56:	bfda      	itte	le
 8016f58:	fb02 3301 	mlale	r3, r2, r1, r3
 8016f5c:	9309      	strle	r3, [sp, #36]	; 0x24
 8016f5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016f62:	3701      	adds	r7, #1
 8016f64:	901d      	str	r0, [sp, #116]	; 0x74
 8016f66:	e7bf      	b.n	8016ee8 <_strtod_l+0x158>
 8016f68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f6a:	195a      	adds	r2, r3, r5
 8016f6c:	921d      	str	r2, [sp, #116]	; 0x74
 8016f6e:	5d5b      	ldrb	r3, [r3, r5]
 8016f70:	2f00      	cmp	r7, #0
 8016f72:	d037      	beq.n	8016fe4 <_strtod_l+0x254>
 8016f74:	9007      	str	r0, [sp, #28]
 8016f76:	463d      	mov	r5, r7
 8016f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016f7c:	2a09      	cmp	r2, #9
 8016f7e:	d912      	bls.n	8016fa6 <_strtod_l+0x216>
 8016f80:	2201      	movs	r2, #1
 8016f82:	e7c2      	b.n	8016f0a <_strtod_l+0x17a>
 8016f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f86:	1c5a      	adds	r2, r3, #1
 8016f88:	921d      	str	r2, [sp, #116]	; 0x74
 8016f8a:	785b      	ldrb	r3, [r3, #1]
 8016f8c:	3001      	adds	r0, #1
 8016f8e:	2b30      	cmp	r3, #48	; 0x30
 8016f90:	d0f8      	beq.n	8016f84 <_strtod_l+0x1f4>
 8016f92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016f96:	2a08      	cmp	r2, #8
 8016f98:	f200 84db 	bhi.w	8017952 <_strtod_l+0xbc2>
 8016f9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016f9e:	9007      	str	r0, [sp, #28]
 8016fa0:	2000      	movs	r0, #0
 8016fa2:	920a      	str	r2, [sp, #40]	; 0x28
 8016fa4:	4605      	mov	r5, r0
 8016fa6:	3b30      	subs	r3, #48	; 0x30
 8016fa8:	f100 0201 	add.w	r2, r0, #1
 8016fac:	d014      	beq.n	8016fd8 <_strtod_l+0x248>
 8016fae:	9907      	ldr	r1, [sp, #28]
 8016fb0:	4411      	add	r1, r2
 8016fb2:	9107      	str	r1, [sp, #28]
 8016fb4:	462a      	mov	r2, r5
 8016fb6:	eb00 0e05 	add.w	lr, r0, r5
 8016fba:	210a      	movs	r1, #10
 8016fbc:	4572      	cmp	r2, lr
 8016fbe:	d113      	bne.n	8016fe8 <_strtod_l+0x258>
 8016fc0:	182a      	adds	r2, r5, r0
 8016fc2:	2a08      	cmp	r2, #8
 8016fc4:	f105 0501 	add.w	r5, r5, #1
 8016fc8:	4405      	add	r5, r0
 8016fca:	dc1c      	bgt.n	8017006 <_strtod_l+0x276>
 8016fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016fce:	220a      	movs	r2, #10
 8016fd0:	fb02 3301 	mla	r3, r2, r1, r3
 8016fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fda:	1c59      	adds	r1, r3, #1
 8016fdc:	911d      	str	r1, [sp, #116]	; 0x74
 8016fde:	785b      	ldrb	r3, [r3, #1]
 8016fe0:	4610      	mov	r0, r2
 8016fe2:	e7c9      	b.n	8016f78 <_strtod_l+0x1e8>
 8016fe4:	4638      	mov	r0, r7
 8016fe6:	e7d2      	b.n	8016f8e <_strtod_l+0x1fe>
 8016fe8:	2a08      	cmp	r2, #8
 8016fea:	dc04      	bgt.n	8016ff6 <_strtod_l+0x266>
 8016fec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016fee:	434e      	muls	r6, r1
 8016ff0:	9609      	str	r6, [sp, #36]	; 0x24
 8016ff2:	3201      	adds	r2, #1
 8016ff4:	e7e2      	b.n	8016fbc <_strtod_l+0x22c>
 8016ff6:	f102 0c01 	add.w	ip, r2, #1
 8016ffa:	f1bc 0f10 	cmp.w	ip, #16
 8016ffe:	bfd8      	it	le
 8017000:	fb01 f909 	mulle.w	r9, r1, r9
 8017004:	e7f5      	b.n	8016ff2 <_strtod_l+0x262>
 8017006:	2d10      	cmp	r5, #16
 8017008:	bfdc      	itt	le
 801700a:	220a      	movle	r2, #10
 801700c:	fb02 3909 	mlale	r9, r2, r9, r3
 8017010:	e7e1      	b.n	8016fd6 <_strtod_l+0x246>
 8017012:	2300      	movs	r3, #0
 8017014:	9307      	str	r3, [sp, #28]
 8017016:	2201      	movs	r2, #1
 8017018:	e77c      	b.n	8016f14 <_strtod_l+0x184>
 801701a:	f04f 0c00 	mov.w	ip, #0
 801701e:	f108 0302 	add.w	r3, r8, #2
 8017022:	931d      	str	r3, [sp, #116]	; 0x74
 8017024:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017028:	e785      	b.n	8016f36 <_strtod_l+0x1a6>
 801702a:	f04f 0c01 	mov.w	ip, #1
 801702e:	e7f6      	b.n	801701e <_strtod_l+0x28e>
 8017030:	0803a2cc 	.word	0x0803a2cc
 8017034:	0803a014 	.word	0x0803a014
 8017038:	7ff00000 	.word	0x7ff00000
 801703c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801703e:	1c59      	adds	r1, r3, #1
 8017040:	911d      	str	r1, [sp, #116]	; 0x74
 8017042:	785b      	ldrb	r3, [r3, #1]
 8017044:	2b30      	cmp	r3, #48	; 0x30
 8017046:	d0f9      	beq.n	801703c <_strtod_l+0x2ac>
 8017048:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801704c:	2908      	cmp	r1, #8
 801704e:	f63f af79 	bhi.w	8016f44 <_strtod_l+0x1b4>
 8017052:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017058:	9308      	str	r3, [sp, #32]
 801705a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801705c:	1c59      	adds	r1, r3, #1
 801705e:	911d      	str	r1, [sp, #116]	; 0x74
 8017060:	785b      	ldrb	r3, [r3, #1]
 8017062:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8017066:	2e09      	cmp	r6, #9
 8017068:	d937      	bls.n	80170da <_strtod_l+0x34a>
 801706a:	9e08      	ldr	r6, [sp, #32]
 801706c:	1b89      	subs	r1, r1, r6
 801706e:	2908      	cmp	r1, #8
 8017070:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017074:	dc02      	bgt.n	801707c <_strtod_l+0x2ec>
 8017076:	4576      	cmp	r6, lr
 8017078:	bfa8      	it	ge
 801707a:	4676      	movge	r6, lr
 801707c:	f1bc 0f00 	cmp.w	ip, #0
 8017080:	d000      	beq.n	8017084 <_strtod_l+0x2f4>
 8017082:	4276      	negs	r6, r6
 8017084:	2d00      	cmp	r5, #0
 8017086:	d14f      	bne.n	8017128 <_strtod_l+0x398>
 8017088:	9904      	ldr	r1, [sp, #16]
 801708a:	4301      	orrs	r1, r0
 801708c:	f47f aec2 	bne.w	8016e14 <_strtod_l+0x84>
 8017090:	2a00      	cmp	r2, #0
 8017092:	f47f aedb 	bne.w	8016e4c <_strtod_l+0xbc>
 8017096:	2b69      	cmp	r3, #105	; 0x69
 8017098:	d027      	beq.n	80170ea <_strtod_l+0x35a>
 801709a:	dc24      	bgt.n	80170e6 <_strtod_l+0x356>
 801709c:	2b49      	cmp	r3, #73	; 0x49
 801709e:	d024      	beq.n	80170ea <_strtod_l+0x35a>
 80170a0:	2b4e      	cmp	r3, #78	; 0x4e
 80170a2:	f47f aed3 	bne.w	8016e4c <_strtod_l+0xbc>
 80170a6:	499e      	ldr	r1, [pc, #632]	; (8017320 <_strtod_l+0x590>)
 80170a8:	a81d      	add	r0, sp, #116	; 0x74
 80170aa:	f002 f93f 	bl	801932c <__match>
 80170ae:	2800      	cmp	r0, #0
 80170b0:	f43f aecc 	beq.w	8016e4c <_strtod_l+0xbc>
 80170b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	2b28      	cmp	r3, #40	; 0x28
 80170ba:	d12d      	bne.n	8017118 <_strtod_l+0x388>
 80170bc:	4999      	ldr	r1, [pc, #612]	; (8017324 <_strtod_l+0x594>)
 80170be:	aa20      	add	r2, sp, #128	; 0x80
 80170c0:	a81d      	add	r0, sp, #116	; 0x74
 80170c2:	f002 f947 	bl	8019354 <__hexnan>
 80170c6:	2805      	cmp	r0, #5
 80170c8:	d126      	bne.n	8017118 <_strtod_l+0x388>
 80170ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170cc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80170d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80170d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80170d8:	e69c      	b.n	8016e14 <_strtod_l+0x84>
 80170da:	210a      	movs	r1, #10
 80170dc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80170e0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80170e4:	e7b9      	b.n	801705a <_strtod_l+0x2ca>
 80170e6:	2b6e      	cmp	r3, #110	; 0x6e
 80170e8:	e7db      	b.n	80170a2 <_strtod_l+0x312>
 80170ea:	498f      	ldr	r1, [pc, #572]	; (8017328 <_strtod_l+0x598>)
 80170ec:	a81d      	add	r0, sp, #116	; 0x74
 80170ee:	f002 f91d 	bl	801932c <__match>
 80170f2:	2800      	cmp	r0, #0
 80170f4:	f43f aeaa 	beq.w	8016e4c <_strtod_l+0xbc>
 80170f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80170fa:	498c      	ldr	r1, [pc, #560]	; (801732c <_strtod_l+0x59c>)
 80170fc:	3b01      	subs	r3, #1
 80170fe:	a81d      	add	r0, sp, #116	; 0x74
 8017100:	931d      	str	r3, [sp, #116]	; 0x74
 8017102:	f002 f913 	bl	801932c <__match>
 8017106:	b910      	cbnz	r0, 801710e <_strtod_l+0x37e>
 8017108:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801710a:	3301      	adds	r3, #1
 801710c:	931d      	str	r3, [sp, #116]	; 0x74
 801710e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801733c <_strtod_l+0x5ac>
 8017112:	f04f 0a00 	mov.w	sl, #0
 8017116:	e67d      	b.n	8016e14 <_strtod_l+0x84>
 8017118:	4885      	ldr	r0, [pc, #532]	; (8017330 <_strtod_l+0x5a0>)
 801711a:	f7fe fa11 	bl	8015540 <nan>
 801711e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017122:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017126:	e675      	b.n	8016e14 <_strtod_l+0x84>
 8017128:	9b07      	ldr	r3, [sp, #28]
 801712a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801712c:	1af3      	subs	r3, r6, r3
 801712e:	2f00      	cmp	r7, #0
 8017130:	bf08      	it	eq
 8017132:	462f      	moveq	r7, r5
 8017134:	2d10      	cmp	r5, #16
 8017136:	9308      	str	r3, [sp, #32]
 8017138:	46a8      	mov	r8, r5
 801713a:	bfa8      	it	ge
 801713c:	f04f 0810 	movge.w	r8, #16
 8017140:	f7e9 fa10 	bl	8000564 <__aeabi_ui2d>
 8017144:	2d09      	cmp	r5, #9
 8017146:	4682      	mov	sl, r0
 8017148:	468b      	mov	fp, r1
 801714a:	dd13      	ble.n	8017174 <_strtod_l+0x3e4>
 801714c:	4b79      	ldr	r3, [pc, #484]	; (8017334 <_strtod_l+0x5a4>)
 801714e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017152:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017156:	f7e9 fa7f 	bl	8000658 <__aeabi_dmul>
 801715a:	4682      	mov	sl, r0
 801715c:	4648      	mov	r0, r9
 801715e:	468b      	mov	fp, r1
 8017160:	f7e9 fa00 	bl	8000564 <__aeabi_ui2d>
 8017164:	4602      	mov	r2, r0
 8017166:	460b      	mov	r3, r1
 8017168:	4650      	mov	r0, sl
 801716a:	4659      	mov	r1, fp
 801716c:	f7e9 f8be 	bl	80002ec <__adddf3>
 8017170:	4682      	mov	sl, r0
 8017172:	468b      	mov	fp, r1
 8017174:	2d0f      	cmp	r5, #15
 8017176:	dc38      	bgt.n	80171ea <_strtod_l+0x45a>
 8017178:	9b08      	ldr	r3, [sp, #32]
 801717a:	2b00      	cmp	r3, #0
 801717c:	f43f ae4a 	beq.w	8016e14 <_strtod_l+0x84>
 8017180:	dd24      	ble.n	80171cc <_strtod_l+0x43c>
 8017182:	2b16      	cmp	r3, #22
 8017184:	dc0b      	bgt.n	801719e <_strtod_l+0x40e>
 8017186:	4d6b      	ldr	r5, [pc, #428]	; (8017334 <_strtod_l+0x5a4>)
 8017188:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801718c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017190:	4652      	mov	r2, sl
 8017192:	465b      	mov	r3, fp
 8017194:	f7e9 fa60 	bl	8000658 <__aeabi_dmul>
 8017198:	4682      	mov	sl, r0
 801719a:	468b      	mov	fp, r1
 801719c:	e63a      	b.n	8016e14 <_strtod_l+0x84>
 801719e:	9a08      	ldr	r2, [sp, #32]
 80171a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80171a4:	4293      	cmp	r3, r2
 80171a6:	db20      	blt.n	80171ea <_strtod_l+0x45a>
 80171a8:	4c62      	ldr	r4, [pc, #392]	; (8017334 <_strtod_l+0x5a4>)
 80171aa:	f1c5 050f 	rsb	r5, r5, #15
 80171ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80171b2:	4652      	mov	r2, sl
 80171b4:	465b      	mov	r3, fp
 80171b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171ba:	f7e9 fa4d 	bl	8000658 <__aeabi_dmul>
 80171be:	9b08      	ldr	r3, [sp, #32]
 80171c0:	1b5d      	subs	r5, r3, r5
 80171c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80171c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80171ca:	e7e3      	b.n	8017194 <_strtod_l+0x404>
 80171cc:	9b08      	ldr	r3, [sp, #32]
 80171ce:	3316      	adds	r3, #22
 80171d0:	db0b      	blt.n	80171ea <_strtod_l+0x45a>
 80171d2:	9b07      	ldr	r3, [sp, #28]
 80171d4:	4a57      	ldr	r2, [pc, #348]	; (8017334 <_strtod_l+0x5a4>)
 80171d6:	1b9e      	subs	r6, r3, r6
 80171d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80171dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80171e0:	4650      	mov	r0, sl
 80171e2:	4659      	mov	r1, fp
 80171e4:	f7e9 fb62 	bl	80008ac <__aeabi_ddiv>
 80171e8:	e7d6      	b.n	8017198 <_strtod_l+0x408>
 80171ea:	9b08      	ldr	r3, [sp, #32]
 80171ec:	eba5 0808 	sub.w	r8, r5, r8
 80171f0:	4498      	add	r8, r3
 80171f2:	f1b8 0f00 	cmp.w	r8, #0
 80171f6:	dd71      	ble.n	80172dc <_strtod_l+0x54c>
 80171f8:	f018 030f 	ands.w	r3, r8, #15
 80171fc:	d00a      	beq.n	8017214 <_strtod_l+0x484>
 80171fe:	494d      	ldr	r1, [pc, #308]	; (8017334 <_strtod_l+0x5a4>)
 8017200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017204:	4652      	mov	r2, sl
 8017206:	465b      	mov	r3, fp
 8017208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801720c:	f7e9 fa24 	bl	8000658 <__aeabi_dmul>
 8017210:	4682      	mov	sl, r0
 8017212:	468b      	mov	fp, r1
 8017214:	f038 080f 	bics.w	r8, r8, #15
 8017218:	d04d      	beq.n	80172b6 <_strtod_l+0x526>
 801721a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801721e:	dd22      	ble.n	8017266 <_strtod_l+0x4d6>
 8017220:	2500      	movs	r5, #0
 8017222:	462e      	mov	r6, r5
 8017224:	9509      	str	r5, [sp, #36]	; 0x24
 8017226:	9507      	str	r5, [sp, #28]
 8017228:	2322      	movs	r3, #34	; 0x22
 801722a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801733c <_strtod_l+0x5ac>
 801722e:	6023      	str	r3, [r4, #0]
 8017230:	f04f 0a00 	mov.w	sl, #0
 8017234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017236:	2b00      	cmp	r3, #0
 8017238:	f43f adec 	beq.w	8016e14 <_strtod_l+0x84>
 801723c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801723e:	4620      	mov	r0, r4
 8017240:	f002 f9ea 	bl	8019618 <_Bfree>
 8017244:	9907      	ldr	r1, [sp, #28]
 8017246:	4620      	mov	r0, r4
 8017248:	f002 f9e6 	bl	8019618 <_Bfree>
 801724c:	4631      	mov	r1, r6
 801724e:	4620      	mov	r0, r4
 8017250:	f002 f9e2 	bl	8019618 <_Bfree>
 8017254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017256:	4620      	mov	r0, r4
 8017258:	f002 f9de 	bl	8019618 <_Bfree>
 801725c:	4629      	mov	r1, r5
 801725e:	4620      	mov	r0, r4
 8017260:	f002 f9da 	bl	8019618 <_Bfree>
 8017264:	e5d6      	b.n	8016e14 <_strtod_l+0x84>
 8017266:	2300      	movs	r3, #0
 8017268:	ea4f 1828 	mov.w	r8, r8, asr #4
 801726c:	4650      	mov	r0, sl
 801726e:	4659      	mov	r1, fp
 8017270:	4699      	mov	r9, r3
 8017272:	f1b8 0f01 	cmp.w	r8, #1
 8017276:	dc21      	bgt.n	80172bc <_strtod_l+0x52c>
 8017278:	b10b      	cbz	r3, 801727e <_strtod_l+0x4ee>
 801727a:	4682      	mov	sl, r0
 801727c:	468b      	mov	fp, r1
 801727e:	4b2e      	ldr	r3, [pc, #184]	; (8017338 <_strtod_l+0x5a8>)
 8017280:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017284:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017288:	4652      	mov	r2, sl
 801728a:	465b      	mov	r3, fp
 801728c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017290:	f7e9 f9e2 	bl	8000658 <__aeabi_dmul>
 8017294:	4b29      	ldr	r3, [pc, #164]	; (801733c <_strtod_l+0x5ac>)
 8017296:	460a      	mov	r2, r1
 8017298:	400b      	ands	r3, r1
 801729a:	4929      	ldr	r1, [pc, #164]	; (8017340 <_strtod_l+0x5b0>)
 801729c:	428b      	cmp	r3, r1
 801729e:	4682      	mov	sl, r0
 80172a0:	d8be      	bhi.n	8017220 <_strtod_l+0x490>
 80172a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80172a6:	428b      	cmp	r3, r1
 80172a8:	bf86      	itte	hi
 80172aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017344 <_strtod_l+0x5b4>
 80172ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80172b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80172b6:	2300      	movs	r3, #0
 80172b8:	9304      	str	r3, [sp, #16]
 80172ba:	e081      	b.n	80173c0 <_strtod_l+0x630>
 80172bc:	f018 0f01 	tst.w	r8, #1
 80172c0:	d007      	beq.n	80172d2 <_strtod_l+0x542>
 80172c2:	4b1d      	ldr	r3, [pc, #116]	; (8017338 <_strtod_l+0x5a8>)
 80172c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80172c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172cc:	f7e9 f9c4 	bl	8000658 <__aeabi_dmul>
 80172d0:	2301      	movs	r3, #1
 80172d2:	f109 0901 	add.w	r9, r9, #1
 80172d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80172da:	e7ca      	b.n	8017272 <_strtod_l+0x4e2>
 80172dc:	d0eb      	beq.n	80172b6 <_strtod_l+0x526>
 80172de:	f1c8 0800 	rsb	r8, r8, #0
 80172e2:	f018 020f 	ands.w	r2, r8, #15
 80172e6:	d00a      	beq.n	80172fe <_strtod_l+0x56e>
 80172e8:	4b12      	ldr	r3, [pc, #72]	; (8017334 <_strtod_l+0x5a4>)
 80172ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172ee:	4650      	mov	r0, sl
 80172f0:	4659      	mov	r1, fp
 80172f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f6:	f7e9 fad9 	bl	80008ac <__aeabi_ddiv>
 80172fa:	4682      	mov	sl, r0
 80172fc:	468b      	mov	fp, r1
 80172fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017302:	d0d8      	beq.n	80172b6 <_strtod_l+0x526>
 8017304:	f1b8 0f1f 	cmp.w	r8, #31
 8017308:	dd1e      	ble.n	8017348 <_strtod_l+0x5b8>
 801730a:	2500      	movs	r5, #0
 801730c:	462e      	mov	r6, r5
 801730e:	9509      	str	r5, [sp, #36]	; 0x24
 8017310:	9507      	str	r5, [sp, #28]
 8017312:	2322      	movs	r3, #34	; 0x22
 8017314:	f04f 0a00 	mov.w	sl, #0
 8017318:	f04f 0b00 	mov.w	fp, #0
 801731c:	6023      	str	r3, [r4, #0]
 801731e:	e789      	b.n	8017234 <_strtod_l+0x4a4>
 8017320:	08039fe6 	.word	0x08039fe6
 8017324:	0803a028 	.word	0x0803a028
 8017328:	08039fde 	.word	0x08039fde
 801732c:	0803a16c 	.word	0x0803a16c
 8017330:	08039fc3 	.word	0x08039fc3
 8017334:	0803a368 	.word	0x0803a368
 8017338:	0803a340 	.word	0x0803a340
 801733c:	7ff00000 	.word	0x7ff00000
 8017340:	7ca00000 	.word	0x7ca00000
 8017344:	7fefffff 	.word	0x7fefffff
 8017348:	f018 0310 	ands.w	r3, r8, #16
 801734c:	bf18      	it	ne
 801734e:	236a      	movne	r3, #106	; 0x6a
 8017350:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017708 <_strtod_l+0x978>
 8017354:	9304      	str	r3, [sp, #16]
 8017356:	4650      	mov	r0, sl
 8017358:	4659      	mov	r1, fp
 801735a:	2300      	movs	r3, #0
 801735c:	f018 0f01 	tst.w	r8, #1
 8017360:	d004      	beq.n	801736c <_strtod_l+0x5dc>
 8017362:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017366:	f7e9 f977 	bl	8000658 <__aeabi_dmul>
 801736a:	2301      	movs	r3, #1
 801736c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017370:	f109 0908 	add.w	r9, r9, #8
 8017374:	d1f2      	bne.n	801735c <_strtod_l+0x5cc>
 8017376:	b10b      	cbz	r3, 801737c <_strtod_l+0x5ec>
 8017378:	4682      	mov	sl, r0
 801737a:	468b      	mov	fp, r1
 801737c:	9b04      	ldr	r3, [sp, #16]
 801737e:	b1bb      	cbz	r3, 80173b0 <_strtod_l+0x620>
 8017380:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017384:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017388:	2b00      	cmp	r3, #0
 801738a:	4659      	mov	r1, fp
 801738c:	dd10      	ble.n	80173b0 <_strtod_l+0x620>
 801738e:	2b1f      	cmp	r3, #31
 8017390:	f340 8128 	ble.w	80175e4 <_strtod_l+0x854>
 8017394:	2b34      	cmp	r3, #52	; 0x34
 8017396:	bfde      	ittt	le
 8017398:	3b20      	suble	r3, #32
 801739a:	f04f 32ff 	movle.w	r2, #4294967295
 801739e:	fa02 f303 	lslle.w	r3, r2, r3
 80173a2:	f04f 0a00 	mov.w	sl, #0
 80173a6:	bfcc      	ite	gt
 80173a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80173ac:	ea03 0b01 	andle.w	fp, r3, r1
 80173b0:	2200      	movs	r2, #0
 80173b2:	2300      	movs	r3, #0
 80173b4:	4650      	mov	r0, sl
 80173b6:	4659      	mov	r1, fp
 80173b8:	f7e9 fbb6 	bl	8000b28 <__aeabi_dcmpeq>
 80173bc:	2800      	cmp	r0, #0
 80173be:	d1a4      	bne.n	801730a <_strtod_l+0x57a>
 80173c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173c2:	9300      	str	r3, [sp, #0]
 80173c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80173c6:	462b      	mov	r3, r5
 80173c8:	463a      	mov	r2, r7
 80173ca:	4620      	mov	r0, r4
 80173cc:	f002 f990 	bl	80196f0 <__s2b>
 80173d0:	9009      	str	r0, [sp, #36]	; 0x24
 80173d2:	2800      	cmp	r0, #0
 80173d4:	f43f af24 	beq.w	8017220 <_strtod_l+0x490>
 80173d8:	9b07      	ldr	r3, [sp, #28]
 80173da:	1b9e      	subs	r6, r3, r6
 80173dc:	9b08      	ldr	r3, [sp, #32]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	bfb4      	ite	lt
 80173e2:	4633      	movlt	r3, r6
 80173e4:	2300      	movge	r3, #0
 80173e6:	9310      	str	r3, [sp, #64]	; 0x40
 80173e8:	9b08      	ldr	r3, [sp, #32]
 80173ea:	2500      	movs	r5, #0
 80173ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80173f0:	9318      	str	r3, [sp, #96]	; 0x60
 80173f2:	462e      	mov	r6, r5
 80173f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f6:	4620      	mov	r0, r4
 80173f8:	6859      	ldr	r1, [r3, #4]
 80173fa:	f002 f8cd 	bl	8019598 <_Balloc>
 80173fe:	9007      	str	r0, [sp, #28]
 8017400:	2800      	cmp	r0, #0
 8017402:	f43f af11 	beq.w	8017228 <_strtod_l+0x498>
 8017406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017408:	691a      	ldr	r2, [r3, #16]
 801740a:	3202      	adds	r2, #2
 801740c:	f103 010c 	add.w	r1, r3, #12
 8017410:	0092      	lsls	r2, r2, #2
 8017412:	300c      	adds	r0, #12
 8017414:	f7fe fac6 	bl	80159a4 <memcpy>
 8017418:	ec4b ab10 	vmov	d0, sl, fp
 801741c:	aa20      	add	r2, sp, #128	; 0x80
 801741e:	a91f      	add	r1, sp, #124	; 0x7c
 8017420:	4620      	mov	r0, r4
 8017422:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017426:	f002 fc9f 	bl	8019d68 <__d2b>
 801742a:	901e      	str	r0, [sp, #120]	; 0x78
 801742c:	2800      	cmp	r0, #0
 801742e:	f43f aefb 	beq.w	8017228 <_strtod_l+0x498>
 8017432:	2101      	movs	r1, #1
 8017434:	4620      	mov	r0, r4
 8017436:	f002 f9f5 	bl	8019824 <__i2b>
 801743a:	4606      	mov	r6, r0
 801743c:	2800      	cmp	r0, #0
 801743e:	f43f aef3 	beq.w	8017228 <_strtod_l+0x498>
 8017442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017444:	9904      	ldr	r1, [sp, #16]
 8017446:	2b00      	cmp	r3, #0
 8017448:	bfab      	itete	ge
 801744a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801744c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801744e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017450:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8017454:	bfac      	ite	ge
 8017456:	eb03 0902 	addge.w	r9, r3, r2
 801745a:	1ad7      	sublt	r7, r2, r3
 801745c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801745e:	eba3 0801 	sub.w	r8, r3, r1
 8017462:	4490      	add	r8, r2
 8017464:	4ba3      	ldr	r3, [pc, #652]	; (80176f4 <_strtod_l+0x964>)
 8017466:	f108 38ff 	add.w	r8, r8, #4294967295
 801746a:	4598      	cmp	r8, r3
 801746c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017470:	f280 80cc 	bge.w	801760c <_strtod_l+0x87c>
 8017474:	eba3 0308 	sub.w	r3, r3, r8
 8017478:	2b1f      	cmp	r3, #31
 801747a:	eba2 0203 	sub.w	r2, r2, r3
 801747e:	f04f 0101 	mov.w	r1, #1
 8017482:	f300 80b6 	bgt.w	80175f2 <_strtod_l+0x862>
 8017486:	fa01 f303 	lsl.w	r3, r1, r3
 801748a:	9311      	str	r3, [sp, #68]	; 0x44
 801748c:	2300      	movs	r3, #0
 801748e:	930c      	str	r3, [sp, #48]	; 0x30
 8017490:	eb09 0802 	add.w	r8, r9, r2
 8017494:	9b04      	ldr	r3, [sp, #16]
 8017496:	45c1      	cmp	r9, r8
 8017498:	4417      	add	r7, r2
 801749a:	441f      	add	r7, r3
 801749c:	464b      	mov	r3, r9
 801749e:	bfa8      	it	ge
 80174a0:	4643      	movge	r3, r8
 80174a2:	42bb      	cmp	r3, r7
 80174a4:	bfa8      	it	ge
 80174a6:	463b      	movge	r3, r7
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	bfc2      	ittt	gt
 80174ac:	eba8 0803 	subgt.w	r8, r8, r3
 80174b0:	1aff      	subgt	r7, r7, r3
 80174b2:	eba9 0903 	subgt.w	r9, r9, r3
 80174b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	dd17      	ble.n	80174ec <_strtod_l+0x75c>
 80174bc:	4631      	mov	r1, r6
 80174be:	461a      	mov	r2, r3
 80174c0:	4620      	mov	r0, r4
 80174c2:	f002 fa6b 	bl	801999c <__pow5mult>
 80174c6:	4606      	mov	r6, r0
 80174c8:	2800      	cmp	r0, #0
 80174ca:	f43f aead 	beq.w	8017228 <_strtod_l+0x498>
 80174ce:	4601      	mov	r1, r0
 80174d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80174d2:	4620      	mov	r0, r4
 80174d4:	f002 f9bc 	bl	8019850 <__multiply>
 80174d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80174da:	2800      	cmp	r0, #0
 80174dc:	f43f aea4 	beq.w	8017228 <_strtod_l+0x498>
 80174e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80174e2:	4620      	mov	r0, r4
 80174e4:	f002 f898 	bl	8019618 <_Bfree>
 80174e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174ea:	931e      	str	r3, [sp, #120]	; 0x78
 80174ec:	f1b8 0f00 	cmp.w	r8, #0
 80174f0:	f300 8091 	bgt.w	8017616 <_strtod_l+0x886>
 80174f4:	9b08      	ldr	r3, [sp, #32]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	dd08      	ble.n	801750c <_strtod_l+0x77c>
 80174fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80174fc:	9907      	ldr	r1, [sp, #28]
 80174fe:	4620      	mov	r0, r4
 8017500:	f002 fa4c 	bl	801999c <__pow5mult>
 8017504:	9007      	str	r0, [sp, #28]
 8017506:	2800      	cmp	r0, #0
 8017508:	f43f ae8e 	beq.w	8017228 <_strtod_l+0x498>
 801750c:	2f00      	cmp	r7, #0
 801750e:	dd08      	ble.n	8017522 <_strtod_l+0x792>
 8017510:	9907      	ldr	r1, [sp, #28]
 8017512:	463a      	mov	r2, r7
 8017514:	4620      	mov	r0, r4
 8017516:	f002 fa9b 	bl	8019a50 <__lshift>
 801751a:	9007      	str	r0, [sp, #28]
 801751c:	2800      	cmp	r0, #0
 801751e:	f43f ae83 	beq.w	8017228 <_strtod_l+0x498>
 8017522:	f1b9 0f00 	cmp.w	r9, #0
 8017526:	dd08      	ble.n	801753a <_strtod_l+0x7aa>
 8017528:	4631      	mov	r1, r6
 801752a:	464a      	mov	r2, r9
 801752c:	4620      	mov	r0, r4
 801752e:	f002 fa8f 	bl	8019a50 <__lshift>
 8017532:	4606      	mov	r6, r0
 8017534:	2800      	cmp	r0, #0
 8017536:	f43f ae77 	beq.w	8017228 <_strtod_l+0x498>
 801753a:	9a07      	ldr	r2, [sp, #28]
 801753c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801753e:	4620      	mov	r0, r4
 8017540:	f002 fb0e 	bl	8019b60 <__mdiff>
 8017544:	4605      	mov	r5, r0
 8017546:	2800      	cmp	r0, #0
 8017548:	f43f ae6e 	beq.w	8017228 <_strtod_l+0x498>
 801754c:	68c3      	ldr	r3, [r0, #12]
 801754e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017550:	2300      	movs	r3, #0
 8017552:	60c3      	str	r3, [r0, #12]
 8017554:	4631      	mov	r1, r6
 8017556:	f002 fae7 	bl	8019b28 <__mcmp>
 801755a:	2800      	cmp	r0, #0
 801755c:	da65      	bge.n	801762a <_strtod_l+0x89a>
 801755e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017560:	ea53 030a 	orrs.w	r3, r3, sl
 8017564:	f040 8087 	bne.w	8017676 <_strtod_l+0x8e6>
 8017568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801756c:	2b00      	cmp	r3, #0
 801756e:	f040 8082 	bne.w	8017676 <_strtod_l+0x8e6>
 8017572:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017576:	0d1b      	lsrs	r3, r3, #20
 8017578:	051b      	lsls	r3, r3, #20
 801757a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801757e:	d97a      	bls.n	8017676 <_strtod_l+0x8e6>
 8017580:	696b      	ldr	r3, [r5, #20]
 8017582:	b913      	cbnz	r3, 801758a <_strtod_l+0x7fa>
 8017584:	692b      	ldr	r3, [r5, #16]
 8017586:	2b01      	cmp	r3, #1
 8017588:	dd75      	ble.n	8017676 <_strtod_l+0x8e6>
 801758a:	4629      	mov	r1, r5
 801758c:	2201      	movs	r2, #1
 801758e:	4620      	mov	r0, r4
 8017590:	f002 fa5e 	bl	8019a50 <__lshift>
 8017594:	4631      	mov	r1, r6
 8017596:	4605      	mov	r5, r0
 8017598:	f002 fac6 	bl	8019b28 <__mcmp>
 801759c:	2800      	cmp	r0, #0
 801759e:	dd6a      	ble.n	8017676 <_strtod_l+0x8e6>
 80175a0:	9904      	ldr	r1, [sp, #16]
 80175a2:	4a55      	ldr	r2, [pc, #340]	; (80176f8 <_strtod_l+0x968>)
 80175a4:	465b      	mov	r3, fp
 80175a6:	2900      	cmp	r1, #0
 80175a8:	f000 8085 	beq.w	80176b6 <_strtod_l+0x926>
 80175ac:	ea02 010b 	and.w	r1, r2, fp
 80175b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80175b4:	dc7f      	bgt.n	80176b6 <_strtod_l+0x926>
 80175b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80175ba:	f77f aeaa 	ble.w	8017312 <_strtod_l+0x582>
 80175be:	4a4f      	ldr	r2, [pc, #316]	; (80176fc <_strtod_l+0x96c>)
 80175c0:	2300      	movs	r3, #0
 80175c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80175c6:	4650      	mov	r0, sl
 80175c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80175cc:	4659      	mov	r1, fp
 80175ce:	f7e9 f843 	bl	8000658 <__aeabi_dmul>
 80175d2:	460b      	mov	r3, r1
 80175d4:	4303      	orrs	r3, r0
 80175d6:	bf08      	it	eq
 80175d8:	2322      	moveq	r3, #34	; 0x22
 80175da:	4682      	mov	sl, r0
 80175dc:	468b      	mov	fp, r1
 80175de:	bf08      	it	eq
 80175e0:	6023      	streq	r3, [r4, #0]
 80175e2:	e62b      	b.n	801723c <_strtod_l+0x4ac>
 80175e4:	f04f 32ff 	mov.w	r2, #4294967295
 80175e8:	fa02 f303 	lsl.w	r3, r2, r3
 80175ec:	ea03 0a0a 	and.w	sl, r3, sl
 80175f0:	e6de      	b.n	80173b0 <_strtod_l+0x620>
 80175f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80175f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80175fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80175fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8017602:	fa01 f308 	lsl.w	r3, r1, r8
 8017606:	930c      	str	r3, [sp, #48]	; 0x30
 8017608:	9111      	str	r1, [sp, #68]	; 0x44
 801760a:	e741      	b.n	8017490 <_strtod_l+0x700>
 801760c:	2300      	movs	r3, #0
 801760e:	930c      	str	r3, [sp, #48]	; 0x30
 8017610:	2301      	movs	r3, #1
 8017612:	9311      	str	r3, [sp, #68]	; 0x44
 8017614:	e73c      	b.n	8017490 <_strtod_l+0x700>
 8017616:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017618:	4642      	mov	r2, r8
 801761a:	4620      	mov	r0, r4
 801761c:	f002 fa18 	bl	8019a50 <__lshift>
 8017620:	901e      	str	r0, [sp, #120]	; 0x78
 8017622:	2800      	cmp	r0, #0
 8017624:	f47f af66 	bne.w	80174f4 <_strtod_l+0x764>
 8017628:	e5fe      	b.n	8017228 <_strtod_l+0x498>
 801762a:	465f      	mov	r7, fp
 801762c:	d16e      	bne.n	801770c <_strtod_l+0x97c>
 801762e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017634:	b342      	cbz	r2, 8017688 <_strtod_l+0x8f8>
 8017636:	4a32      	ldr	r2, [pc, #200]	; (8017700 <_strtod_l+0x970>)
 8017638:	4293      	cmp	r3, r2
 801763a:	d128      	bne.n	801768e <_strtod_l+0x8fe>
 801763c:	9b04      	ldr	r3, [sp, #16]
 801763e:	4650      	mov	r0, sl
 8017640:	b1eb      	cbz	r3, 801767e <_strtod_l+0x8ee>
 8017642:	4a2d      	ldr	r2, [pc, #180]	; (80176f8 <_strtod_l+0x968>)
 8017644:	403a      	ands	r2, r7
 8017646:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801764a:	f04f 31ff 	mov.w	r1, #4294967295
 801764e:	d819      	bhi.n	8017684 <_strtod_l+0x8f4>
 8017650:	0d12      	lsrs	r2, r2, #20
 8017652:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017656:	fa01 f303 	lsl.w	r3, r1, r3
 801765a:	4298      	cmp	r0, r3
 801765c:	d117      	bne.n	801768e <_strtod_l+0x8fe>
 801765e:	4b29      	ldr	r3, [pc, #164]	; (8017704 <_strtod_l+0x974>)
 8017660:	429f      	cmp	r7, r3
 8017662:	d102      	bne.n	801766a <_strtod_l+0x8da>
 8017664:	3001      	adds	r0, #1
 8017666:	f43f addf 	beq.w	8017228 <_strtod_l+0x498>
 801766a:	4b23      	ldr	r3, [pc, #140]	; (80176f8 <_strtod_l+0x968>)
 801766c:	403b      	ands	r3, r7
 801766e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017672:	f04f 0a00 	mov.w	sl, #0
 8017676:	9b04      	ldr	r3, [sp, #16]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d1a0      	bne.n	80175be <_strtod_l+0x82e>
 801767c:	e5de      	b.n	801723c <_strtod_l+0x4ac>
 801767e:	f04f 33ff 	mov.w	r3, #4294967295
 8017682:	e7ea      	b.n	801765a <_strtod_l+0x8ca>
 8017684:	460b      	mov	r3, r1
 8017686:	e7e8      	b.n	801765a <_strtod_l+0x8ca>
 8017688:	ea53 030a 	orrs.w	r3, r3, sl
 801768c:	d088      	beq.n	80175a0 <_strtod_l+0x810>
 801768e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017690:	b1db      	cbz	r3, 80176ca <_strtod_l+0x93a>
 8017692:	423b      	tst	r3, r7
 8017694:	d0ef      	beq.n	8017676 <_strtod_l+0x8e6>
 8017696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017698:	9a04      	ldr	r2, [sp, #16]
 801769a:	4650      	mov	r0, sl
 801769c:	4659      	mov	r1, fp
 801769e:	b1c3      	cbz	r3, 80176d2 <_strtod_l+0x942>
 80176a0:	f7ff fb5a 	bl	8016d58 <sulp>
 80176a4:	4602      	mov	r2, r0
 80176a6:	460b      	mov	r3, r1
 80176a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176ac:	f7e8 fe1e 	bl	80002ec <__adddf3>
 80176b0:	4682      	mov	sl, r0
 80176b2:	468b      	mov	fp, r1
 80176b4:	e7df      	b.n	8017676 <_strtod_l+0x8e6>
 80176b6:	4013      	ands	r3, r2
 80176b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80176bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80176c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80176c4:	f04f 3aff 	mov.w	sl, #4294967295
 80176c8:	e7d5      	b.n	8017676 <_strtod_l+0x8e6>
 80176ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80176cc:	ea13 0f0a 	tst.w	r3, sl
 80176d0:	e7e0      	b.n	8017694 <_strtod_l+0x904>
 80176d2:	f7ff fb41 	bl	8016d58 <sulp>
 80176d6:	4602      	mov	r2, r0
 80176d8:	460b      	mov	r3, r1
 80176da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176de:	f7e8 fe03 	bl	80002e8 <__aeabi_dsub>
 80176e2:	2200      	movs	r2, #0
 80176e4:	2300      	movs	r3, #0
 80176e6:	4682      	mov	sl, r0
 80176e8:	468b      	mov	fp, r1
 80176ea:	f7e9 fa1d 	bl	8000b28 <__aeabi_dcmpeq>
 80176ee:	2800      	cmp	r0, #0
 80176f0:	d0c1      	beq.n	8017676 <_strtod_l+0x8e6>
 80176f2:	e60e      	b.n	8017312 <_strtod_l+0x582>
 80176f4:	fffffc02 	.word	0xfffffc02
 80176f8:	7ff00000 	.word	0x7ff00000
 80176fc:	39500000 	.word	0x39500000
 8017700:	000fffff 	.word	0x000fffff
 8017704:	7fefffff 	.word	0x7fefffff
 8017708:	0803a040 	.word	0x0803a040
 801770c:	4631      	mov	r1, r6
 801770e:	4628      	mov	r0, r5
 8017710:	f002 fb86 	bl	8019e20 <__ratio>
 8017714:	ec59 8b10 	vmov	r8, r9, d0
 8017718:	ee10 0a10 	vmov	r0, s0
 801771c:	2200      	movs	r2, #0
 801771e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017722:	4649      	mov	r1, r9
 8017724:	f7e9 fa14 	bl	8000b50 <__aeabi_dcmple>
 8017728:	2800      	cmp	r0, #0
 801772a:	d07c      	beq.n	8017826 <_strtod_l+0xa96>
 801772c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801772e:	2b00      	cmp	r3, #0
 8017730:	d04c      	beq.n	80177cc <_strtod_l+0xa3c>
 8017732:	4b95      	ldr	r3, [pc, #596]	; (8017988 <_strtod_l+0xbf8>)
 8017734:	2200      	movs	r2, #0
 8017736:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801773a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017988 <_strtod_l+0xbf8>
 801773e:	f04f 0800 	mov.w	r8, #0
 8017742:	4b92      	ldr	r3, [pc, #584]	; (801798c <_strtod_l+0xbfc>)
 8017744:	403b      	ands	r3, r7
 8017746:	9311      	str	r3, [sp, #68]	; 0x44
 8017748:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801774a:	4b91      	ldr	r3, [pc, #580]	; (8017990 <_strtod_l+0xc00>)
 801774c:	429a      	cmp	r2, r3
 801774e:	f040 80b2 	bne.w	80178b6 <_strtod_l+0xb26>
 8017752:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801775a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801775e:	ec4b ab10 	vmov	d0, sl, fp
 8017762:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017766:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801776a:	f002 fa81 	bl	8019c70 <__ulp>
 801776e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017772:	ec53 2b10 	vmov	r2, r3, d0
 8017776:	f7e8 ff6f 	bl	8000658 <__aeabi_dmul>
 801777a:	4652      	mov	r2, sl
 801777c:	465b      	mov	r3, fp
 801777e:	f7e8 fdb5 	bl	80002ec <__adddf3>
 8017782:	460b      	mov	r3, r1
 8017784:	4981      	ldr	r1, [pc, #516]	; (801798c <_strtod_l+0xbfc>)
 8017786:	4a83      	ldr	r2, [pc, #524]	; (8017994 <_strtod_l+0xc04>)
 8017788:	4019      	ands	r1, r3
 801778a:	4291      	cmp	r1, r2
 801778c:	4682      	mov	sl, r0
 801778e:	d95e      	bls.n	801784e <_strtod_l+0xabe>
 8017790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017792:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017796:	4293      	cmp	r3, r2
 8017798:	d103      	bne.n	80177a2 <_strtod_l+0xa12>
 801779a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801779c:	3301      	adds	r3, #1
 801779e:	f43f ad43 	beq.w	8017228 <_strtod_l+0x498>
 80177a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80179a0 <_strtod_l+0xc10>
 80177a6:	f04f 3aff 	mov.w	sl, #4294967295
 80177aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80177ac:	4620      	mov	r0, r4
 80177ae:	f001 ff33 	bl	8019618 <_Bfree>
 80177b2:	9907      	ldr	r1, [sp, #28]
 80177b4:	4620      	mov	r0, r4
 80177b6:	f001 ff2f 	bl	8019618 <_Bfree>
 80177ba:	4631      	mov	r1, r6
 80177bc:	4620      	mov	r0, r4
 80177be:	f001 ff2b 	bl	8019618 <_Bfree>
 80177c2:	4629      	mov	r1, r5
 80177c4:	4620      	mov	r0, r4
 80177c6:	f001 ff27 	bl	8019618 <_Bfree>
 80177ca:	e613      	b.n	80173f4 <_strtod_l+0x664>
 80177cc:	f1ba 0f00 	cmp.w	sl, #0
 80177d0:	d11b      	bne.n	801780a <_strtod_l+0xa7a>
 80177d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80177d6:	b9f3      	cbnz	r3, 8017816 <_strtod_l+0xa86>
 80177d8:	4b6b      	ldr	r3, [pc, #428]	; (8017988 <_strtod_l+0xbf8>)
 80177da:	2200      	movs	r2, #0
 80177dc:	4640      	mov	r0, r8
 80177de:	4649      	mov	r1, r9
 80177e0:	f7e9 f9ac 	bl	8000b3c <__aeabi_dcmplt>
 80177e4:	b9d0      	cbnz	r0, 801781c <_strtod_l+0xa8c>
 80177e6:	4640      	mov	r0, r8
 80177e8:	4649      	mov	r1, r9
 80177ea:	4b6b      	ldr	r3, [pc, #428]	; (8017998 <_strtod_l+0xc08>)
 80177ec:	2200      	movs	r2, #0
 80177ee:	f7e8 ff33 	bl	8000658 <__aeabi_dmul>
 80177f2:	4680      	mov	r8, r0
 80177f4:	4689      	mov	r9, r1
 80177f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80177fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80177fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8017800:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017804:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017808:	e79b      	b.n	8017742 <_strtod_l+0x9b2>
 801780a:	f1ba 0f01 	cmp.w	sl, #1
 801780e:	d102      	bne.n	8017816 <_strtod_l+0xa86>
 8017810:	2f00      	cmp	r7, #0
 8017812:	f43f ad7e 	beq.w	8017312 <_strtod_l+0x582>
 8017816:	4b61      	ldr	r3, [pc, #388]	; (801799c <_strtod_l+0xc0c>)
 8017818:	2200      	movs	r2, #0
 801781a:	e78c      	b.n	8017736 <_strtod_l+0x9a6>
 801781c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017998 <_strtod_l+0xc08>
 8017820:	f04f 0800 	mov.w	r8, #0
 8017824:	e7e7      	b.n	80177f6 <_strtod_l+0xa66>
 8017826:	4b5c      	ldr	r3, [pc, #368]	; (8017998 <_strtod_l+0xc08>)
 8017828:	4640      	mov	r0, r8
 801782a:	4649      	mov	r1, r9
 801782c:	2200      	movs	r2, #0
 801782e:	f7e8 ff13 	bl	8000658 <__aeabi_dmul>
 8017832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017834:	4680      	mov	r8, r0
 8017836:	4689      	mov	r9, r1
 8017838:	b933      	cbnz	r3, 8017848 <_strtod_l+0xab8>
 801783a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801783e:	9012      	str	r0, [sp, #72]	; 0x48
 8017840:	9313      	str	r3, [sp, #76]	; 0x4c
 8017842:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017846:	e7dd      	b.n	8017804 <_strtod_l+0xa74>
 8017848:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801784c:	e7f9      	b.n	8017842 <_strtod_l+0xab2>
 801784e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017852:	9b04      	ldr	r3, [sp, #16]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d1a8      	bne.n	80177aa <_strtod_l+0xa1a>
 8017858:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801785c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801785e:	0d1b      	lsrs	r3, r3, #20
 8017860:	051b      	lsls	r3, r3, #20
 8017862:	429a      	cmp	r2, r3
 8017864:	d1a1      	bne.n	80177aa <_strtod_l+0xa1a>
 8017866:	4640      	mov	r0, r8
 8017868:	4649      	mov	r1, r9
 801786a:	f7e9 fa55 	bl	8000d18 <__aeabi_d2lz>
 801786e:	f7e8 fec5 	bl	80005fc <__aeabi_l2d>
 8017872:	4602      	mov	r2, r0
 8017874:	460b      	mov	r3, r1
 8017876:	4640      	mov	r0, r8
 8017878:	4649      	mov	r1, r9
 801787a:	f7e8 fd35 	bl	80002e8 <__aeabi_dsub>
 801787e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017884:	ea43 030a 	orr.w	r3, r3, sl
 8017888:	4313      	orrs	r3, r2
 801788a:	4680      	mov	r8, r0
 801788c:	4689      	mov	r9, r1
 801788e:	d053      	beq.n	8017938 <_strtod_l+0xba8>
 8017890:	a335      	add	r3, pc, #212	; (adr r3, 8017968 <_strtod_l+0xbd8>)
 8017892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017896:	f7e9 f951 	bl	8000b3c <__aeabi_dcmplt>
 801789a:	2800      	cmp	r0, #0
 801789c:	f47f acce 	bne.w	801723c <_strtod_l+0x4ac>
 80178a0:	a333      	add	r3, pc, #204	; (adr r3, 8017970 <_strtod_l+0xbe0>)
 80178a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178a6:	4640      	mov	r0, r8
 80178a8:	4649      	mov	r1, r9
 80178aa:	f7e9 f965 	bl	8000b78 <__aeabi_dcmpgt>
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f43f af7b 	beq.w	80177aa <_strtod_l+0xa1a>
 80178b4:	e4c2      	b.n	801723c <_strtod_l+0x4ac>
 80178b6:	9b04      	ldr	r3, [sp, #16]
 80178b8:	b333      	cbz	r3, 8017908 <_strtod_l+0xb78>
 80178ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80178bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80178c0:	d822      	bhi.n	8017908 <_strtod_l+0xb78>
 80178c2:	a32d      	add	r3, pc, #180	; (adr r3, 8017978 <_strtod_l+0xbe8>)
 80178c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c8:	4640      	mov	r0, r8
 80178ca:	4649      	mov	r1, r9
 80178cc:	f7e9 f940 	bl	8000b50 <__aeabi_dcmple>
 80178d0:	b1a0      	cbz	r0, 80178fc <_strtod_l+0xb6c>
 80178d2:	4649      	mov	r1, r9
 80178d4:	4640      	mov	r0, r8
 80178d6:	f7e9 f997 	bl	8000c08 <__aeabi_d2uiz>
 80178da:	2801      	cmp	r0, #1
 80178dc:	bf38      	it	cc
 80178de:	2001      	movcc	r0, #1
 80178e0:	f7e8 fe40 	bl	8000564 <__aeabi_ui2d>
 80178e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178e6:	4680      	mov	r8, r0
 80178e8:	4689      	mov	r9, r1
 80178ea:	bb13      	cbnz	r3, 8017932 <_strtod_l+0xba2>
 80178ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80178f0:	9014      	str	r0, [sp, #80]	; 0x50
 80178f2:	9315      	str	r3, [sp, #84]	; 0x54
 80178f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80178f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80178fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017900:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017904:	1a9b      	subs	r3, r3, r2
 8017906:	930d      	str	r3, [sp, #52]	; 0x34
 8017908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801790c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017910:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017914:	f002 f9ac 	bl	8019c70 <__ulp>
 8017918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801791c:	ec53 2b10 	vmov	r2, r3, d0
 8017920:	f7e8 fe9a 	bl	8000658 <__aeabi_dmul>
 8017924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017928:	f7e8 fce0 	bl	80002ec <__adddf3>
 801792c:	4682      	mov	sl, r0
 801792e:	468b      	mov	fp, r1
 8017930:	e78f      	b.n	8017852 <_strtod_l+0xac2>
 8017932:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8017936:	e7dd      	b.n	80178f4 <_strtod_l+0xb64>
 8017938:	a311      	add	r3, pc, #68	; (adr r3, 8017980 <_strtod_l+0xbf0>)
 801793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793e:	f7e9 f8fd 	bl	8000b3c <__aeabi_dcmplt>
 8017942:	e7b4      	b.n	80178ae <_strtod_l+0xb1e>
 8017944:	2300      	movs	r3, #0
 8017946:	930e      	str	r3, [sp, #56]	; 0x38
 8017948:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801794a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801794c:	6013      	str	r3, [r2, #0]
 801794e:	f7ff ba65 	b.w	8016e1c <_strtod_l+0x8c>
 8017952:	2b65      	cmp	r3, #101	; 0x65
 8017954:	f43f ab5d 	beq.w	8017012 <_strtod_l+0x282>
 8017958:	2b45      	cmp	r3, #69	; 0x45
 801795a:	f43f ab5a 	beq.w	8017012 <_strtod_l+0x282>
 801795e:	2201      	movs	r2, #1
 8017960:	f7ff bb92 	b.w	8017088 <_strtod_l+0x2f8>
 8017964:	f3af 8000 	nop.w
 8017968:	94a03595 	.word	0x94a03595
 801796c:	3fdfffff 	.word	0x3fdfffff
 8017970:	35afe535 	.word	0x35afe535
 8017974:	3fe00000 	.word	0x3fe00000
 8017978:	ffc00000 	.word	0xffc00000
 801797c:	41dfffff 	.word	0x41dfffff
 8017980:	94a03595 	.word	0x94a03595
 8017984:	3fcfffff 	.word	0x3fcfffff
 8017988:	3ff00000 	.word	0x3ff00000
 801798c:	7ff00000 	.word	0x7ff00000
 8017990:	7fe00000 	.word	0x7fe00000
 8017994:	7c9fffff 	.word	0x7c9fffff
 8017998:	3fe00000 	.word	0x3fe00000
 801799c:	bff00000 	.word	0xbff00000
 80179a0:	7fefffff 	.word	0x7fefffff

080179a4 <_strtod_r>:
 80179a4:	4b01      	ldr	r3, [pc, #4]	; (80179ac <_strtod_r+0x8>)
 80179a6:	f7ff b9f3 	b.w	8016d90 <_strtod_l>
 80179aa:	bf00      	nop
 80179ac:	200001dc 	.word	0x200001dc

080179b0 <strtod>:
 80179b0:	460a      	mov	r2, r1
 80179b2:	4601      	mov	r1, r0
 80179b4:	4802      	ldr	r0, [pc, #8]	; (80179c0 <strtod+0x10>)
 80179b6:	4b03      	ldr	r3, [pc, #12]	; (80179c4 <strtod+0x14>)
 80179b8:	6800      	ldr	r0, [r0, #0]
 80179ba:	f7ff b9e9 	b.w	8016d90 <_strtod_l>
 80179be:	bf00      	nop
 80179c0:	20000170 	.word	0x20000170
 80179c4:	200001dc 	.word	0x200001dc

080179c8 <_strtol_l.isra.0>:
 80179c8:	2b01      	cmp	r3, #1
 80179ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179ce:	d001      	beq.n	80179d4 <_strtol_l.isra.0+0xc>
 80179d0:	2b24      	cmp	r3, #36	; 0x24
 80179d2:	d906      	bls.n	80179e2 <_strtol_l.isra.0+0x1a>
 80179d4:	f7fd ff14 	bl	8015800 <__errno>
 80179d8:	2316      	movs	r3, #22
 80179da:	6003      	str	r3, [r0, #0]
 80179dc:	2000      	movs	r0, #0
 80179de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179e2:	4f3a      	ldr	r7, [pc, #232]	; (8017acc <_strtol_l.isra.0+0x104>)
 80179e4:	468e      	mov	lr, r1
 80179e6:	4676      	mov	r6, lr
 80179e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80179ec:	5de5      	ldrb	r5, [r4, r7]
 80179ee:	f015 0508 	ands.w	r5, r5, #8
 80179f2:	d1f8      	bne.n	80179e6 <_strtol_l.isra.0+0x1e>
 80179f4:	2c2d      	cmp	r4, #45	; 0x2d
 80179f6:	d134      	bne.n	8017a62 <_strtol_l.isra.0+0x9a>
 80179f8:	f89e 4000 	ldrb.w	r4, [lr]
 80179fc:	f04f 0801 	mov.w	r8, #1
 8017a00:	f106 0e02 	add.w	lr, r6, #2
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d05c      	beq.n	8017ac2 <_strtol_l.isra.0+0xfa>
 8017a08:	2b10      	cmp	r3, #16
 8017a0a:	d10c      	bne.n	8017a26 <_strtol_l.isra.0+0x5e>
 8017a0c:	2c30      	cmp	r4, #48	; 0x30
 8017a0e:	d10a      	bne.n	8017a26 <_strtol_l.isra.0+0x5e>
 8017a10:	f89e 4000 	ldrb.w	r4, [lr]
 8017a14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017a18:	2c58      	cmp	r4, #88	; 0x58
 8017a1a:	d14d      	bne.n	8017ab8 <_strtol_l.isra.0+0xf0>
 8017a1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017a20:	2310      	movs	r3, #16
 8017a22:	f10e 0e02 	add.w	lr, lr, #2
 8017a26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017a2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017a2e:	2600      	movs	r6, #0
 8017a30:	fbbc f9f3 	udiv	r9, ip, r3
 8017a34:	4635      	mov	r5, r6
 8017a36:	fb03 ca19 	mls	sl, r3, r9, ip
 8017a3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017a3e:	2f09      	cmp	r7, #9
 8017a40:	d818      	bhi.n	8017a74 <_strtol_l.isra.0+0xac>
 8017a42:	463c      	mov	r4, r7
 8017a44:	42a3      	cmp	r3, r4
 8017a46:	dd24      	ble.n	8017a92 <_strtol_l.isra.0+0xca>
 8017a48:	2e00      	cmp	r6, #0
 8017a4a:	db1f      	blt.n	8017a8c <_strtol_l.isra.0+0xc4>
 8017a4c:	45a9      	cmp	r9, r5
 8017a4e:	d31d      	bcc.n	8017a8c <_strtol_l.isra.0+0xc4>
 8017a50:	d101      	bne.n	8017a56 <_strtol_l.isra.0+0x8e>
 8017a52:	45a2      	cmp	sl, r4
 8017a54:	db1a      	blt.n	8017a8c <_strtol_l.isra.0+0xc4>
 8017a56:	fb05 4503 	mla	r5, r5, r3, r4
 8017a5a:	2601      	movs	r6, #1
 8017a5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017a60:	e7eb      	b.n	8017a3a <_strtol_l.isra.0+0x72>
 8017a62:	2c2b      	cmp	r4, #43	; 0x2b
 8017a64:	bf08      	it	eq
 8017a66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017a6a:	46a8      	mov	r8, r5
 8017a6c:	bf08      	it	eq
 8017a6e:	f106 0e02 	addeq.w	lr, r6, #2
 8017a72:	e7c7      	b.n	8017a04 <_strtol_l.isra.0+0x3c>
 8017a74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017a78:	2f19      	cmp	r7, #25
 8017a7a:	d801      	bhi.n	8017a80 <_strtol_l.isra.0+0xb8>
 8017a7c:	3c37      	subs	r4, #55	; 0x37
 8017a7e:	e7e1      	b.n	8017a44 <_strtol_l.isra.0+0x7c>
 8017a80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017a84:	2f19      	cmp	r7, #25
 8017a86:	d804      	bhi.n	8017a92 <_strtol_l.isra.0+0xca>
 8017a88:	3c57      	subs	r4, #87	; 0x57
 8017a8a:	e7db      	b.n	8017a44 <_strtol_l.isra.0+0x7c>
 8017a8c:	f04f 36ff 	mov.w	r6, #4294967295
 8017a90:	e7e4      	b.n	8017a5c <_strtol_l.isra.0+0x94>
 8017a92:	2e00      	cmp	r6, #0
 8017a94:	da05      	bge.n	8017aa2 <_strtol_l.isra.0+0xda>
 8017a96:	2322      	movs	r3, #34	; 0x22
 8017a98:	6003      	str	r3, [r0, #0]
 8017a9a:	4665      	mov	r5, ip
 8017a9c:	b942      	cbnz	r2, 8017ab0 <_strtol_l.isra.0+0xe8>
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	e79d      	b.n	80179de <_strtol_l.isra.0+0x16>
 8017aa2:	f1b8 0f00 	cmp.w	r8, #0
 8017aa6:	d000      	beq.n	8017aaa <_strtol_l.isra.0+0xe2>
 8017aa8:	426d      	negs	r5, r5
 8017aaa:	2a00      	cmp	r2, #0
 8017aac:	d0f7      	beq.n	8017a9e <_strtol_l.isra.0+0xd6>
 8017aae:	b10e      	cbz	r6, 8017ab4 <_strtol_l.isra.0+0xec>
 8017ab0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017ab4:	6011      	str	r1, [r2, #0]
 8017ab6:	e7f2      	b.n	8017a9e <_strtol_l.isra.0+0xd6>
 8017ab8:	2430      	movs	r4, #48	; 0x30
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d1b3      	bne.n	8017a26 <_strtol_l.isra.0+0x5e>
 8017abe:	2308      	movs	r3, #8
 8017ac0:	e7b1      	b.n	8017a26 <_strtol_l.isra.0+0x5e>
 8017ac2:	2c30      	cmp	r4, #48	; 0x30
 8017ac4:	d0a4      	beq.n	8017a10 <_strtol_l.isra.0+0x48>
 8017ac6:	230a      	movs	r3, #10
 8017ac8:	e7ad      	b.n	8017a26 <_strtol_l.isra.0+0x5e>
 8017aca:	bf00      	nop
 8017acc:	0803a069 	.word	0x0803a069

08017ad0 <_strtol_r>:
 8017ad0:	f7ff bf7a 	b.w	80179c8 <_strtol_l.isra.0>

08017ad4 <_vsiprintf_r>:
 8017ad4:	b500      	push	{lr}
 8017ad6:	b09b      	sub	sp, #108	; 0x6c
 8017ad8:	9100      	str	r1, [sp, #0]
 8017ada:	9104      	str	r1, [sp, #16]
 8017adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ae0:	9105      	str	r1, [sp, #20]
 8017ae2:	9102      	str	r1, [sp, #8]
 8017ae4:	4905      	ldr	r1, [pc, #20]	; (8017afc <_vsiprintf_r+0x28>)
 8017ae6:	9103      	str	r1, [sp, #12]
 8017ae8:	4669      	mov	r1, sp
 8017aea:	f002 fa91 	bl	801a010 <_svfiprintf_r>
 8017aee:	9b00      	ldr	r3, [sp, #0]
 8017af0:	2200      	movs	r2, #0
 8017af2:	701a      	strb	r2, [r3, #0]
 8017af4:	b01b      	add	sp, #108	; 0x6c
 8017af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8017afa:	bf00      	nop
 8017afc:	ffff0208 	.word	0xffff0208

08017b00 <vsiprintf>:
 8017b00:	4613      	mov	r3, r2
 8017b02:	460a      	mov	r2, r1
 8017b04:	4601      	mov	r1, r0
 8017b06:	4802      	ldr	r0, [pc, #8]	; (8017b10 <vsiprintf+0x10>)
 8017b08:	6800      	ldr	r0, [r0, #0]
 8017b0a:	f7ff bfe3 	b.w	8017ad4 <_vsiprintf_r>
 8017b0e:	bf00      	nop
 8017b10:	20000170 	.word	0x20000170

08017b14 <__swbuf_r>:
 8017b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b16:	460e      	mov	r6, r1
 8017b18:	4614      	mov	r4, r2
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	b118      	cbz	r0, 8017b26 <__swbuf_r+0x12>
 8017b1e:	6983      	ldr	r3, [r0, #24]
 8017b20:	b90b      	cbnz	r3, 8017b26 <__swbuf_r+0x12>
 8017b22:	f001 f8a7 	bl	8018c74 <__sinit>
 8017b26:	4b21      	ldr	r3, [pc, #132]	; (8017bac <__swbuf_r+0x98>)
 8017b28:	429c      	cmp	r4, r3
 8017b2a:	d12b      	bne.n	8017b84 <__swbuf_r+0x70>
 8017b2c:	686c      	ldr	r4, [r5, #4]
 8017b2e:	69a3      	ldr	r3, [r4, #24]
 8017b30:	60a3      	str	r3, [r4, #8]
 8017b32:	89a3      	ldrh	r3, [r4, #12]
 8017b34:	071a      	lsls	r2, r3, #28
 8017b36:	d52f      	bpl.n	8017b98 <__swbuf_r+0x84>
 8017b38:	6923      	ldr	r3, [r4, #16]
 8017b3a:	b36b      	cbz	r3, 8017b98 <__swbuf_r+0x84>
 8017b3c:	6923      	ldr	r3, [r4, #16]
 8017b3e:	6820      	ldr	r0, [r4, #0]
 8017b40:	1ac0      	subs	r0, r0, r3
 8017b42:	6963      	ldr	r3, [r4, #20]
 8017b44:	b2f6      	uxtb	r6, r6
 8017b46:	4283      	cmp	r3, r0
 8017b48:	4637      	mov	r7, r6
 8017b4a:	dc04      	bgt.n	8017b56 <__swbuf_r+0x42>
 8017b4c:	4621      	mov	r1, r4
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f000 fffc 	bl	8018b4c <_fflush_r>
 8017b54:	bb30      	cbnz	r0, 8017ba4 <__swbuf_r+0x90>
 8017b56:	68a3      	ldr	r3, [r4, #8]
 8017b58:	3b01      	subs	r3, #1
 8017b5a:	60a3      	str	r3, [r4, #8]
 8017b5c:	6823      	ldr	r3, [r4, #0]
 8017b5e:	1c5a      	adds	r2, r3, #1
 8017b60:	6022      	str	r2, [r4, #0]
 8017b62:	701e      	strb	r6, [r3, #0]
 8017b64:	6963      	ldr	r3, [r4, #20]
 8017b66:	3001      	adds	r0, #1
 8017b68:	4283      	cmp	r3, r0
 8017b6a:	d004      	beq.n	8017b76 <__swbuf_r+0x62>
 8017b6c:	89a3      	ldrh	r3, [r4, #12]
 8017b6e:	07db      	lsls	r3, r3, #31
 8017b70:	d506      	bpl.n	8017b80 <__swbuf_r+0x6c>
 8017b72:	2e0a      	cmp	r6, #10
 8017b74:	d104      	bne.n	8017b80 <__swbuf_r+0x6c>
 8017b76:	4621      	mov	r1, r4
 8017b78:	4628      	mov	r0, r5
 8017b7a:	f000 ffe7 	bl	8018b4c <_fflush_r>
 8017b7e:	b988      	cbnz	r0, 8017ba4 <__swbuf_r+0x90>
 8017b80:	4638      	mov	r0, r7
 8017b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b84:	4b0a      	ldr	r3, [pc, #40]	; (8017bb0 <__swbuf_r+0x9c>)
 8017b86:	429c      	cmp	r4, r3
 8017b88:	d101      	bne.n	8017b8e <__swbuf_r+0x7a>
 8017b8a:	68ac      	ldr	r4, [r5, #8]
 8017b8c:	e7cf      	b.n	8017b2e <__swbuf_r+0x1a>
 8017b8e:	4b09      	ldr	r3, [pc, #36]	; (8017bb4 <__swbuf_r+0xa0>)
 8017b90:	429c      	cmp	r4, r3
 8017b92:	bf08      	it	eq
 8017b94:	68ec      	ldreq	r4, [r5, #12]
 8017b96:	e7ca      	b.n	8017b2e <__swbuf_r+0x1a>
 8017b98:	4621      	mov	r1, r4
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	f000 f80c 	bl	8017bb8 <__swsetup_r>
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	d0cb      	beq.n	8017b3c <__swbuf_r+0x28>
 8017ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8017ba8:	e7ea      	b.n	8017b80 <__swbuf_r+0x6c>
 8017baa:	bf00      	nop
 8017bac:	0803a220 	.word	0x0803a220
 8017bb0:	0803a240 	.word	0x0803a240
 8017bb4:	0803a200 	.word	0x0803a200

08017bb8 <__swsetup_r>:
 8017bb8:	4b32      	ldr	r3, [pc, #200]	; (8017c84 <__swsetup_r+0xcc>)
 8017bba:	b570      	push	{r4, r5, r6, lr}
 8017bbc:	681d      	ldr	r5, [r3, #0]
 8017bbe:	4606      	mov	r6, r0
 8017bc0:	460c      	mov	r4, r1
 8017bc2:	b125      	cbz	r5, 8017bce <__swsetup_r+0x16>
 8017bc4:	69ab      	ldr	r3, [r5, #24]
 8017bc6:	b913      	cbnz	r3, 8017bce <__swsetup_r+0x16>
 8017bc8:	4628      	mov	r0, r5
 8017bca:	f001 f853 	bl	8018c74 <__sinit>
 8017bce:	4b2e      	ldr	r3, [pc, #184]	; (8017c88 <__swsetup_r+0xd0>)
 8017bd0:	429c      	cmp	r4, r3
 8017bd2:	d10f      	bne.n	8017bf4 <__swsetup_r+0x3c>
 8017bd4:	686c      	ldr	r4, [r5, #4]
 8017bd6:	89a3      	ldrh	r3, [r4, #12]
 8017bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017bdc:	0719      	lsls	r1, r3, #28
 8017bde:	d42c      	bmi.n	8017c3a <__swsetup_r+0x82>
 8017be0:	06dd      	lsls	r5, r3, #27
 8017be2:	d411      	bmi.n	8017c08 <__swsetup_r+0x50>
 8017be4:	2309      	movs	r3, #9
 8017be6:	6033      	str	r3, [r6, #0]
 8017be8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017bec:	81a3      	strh	r3, [r4, #12]
 8017bee:	f04f 30ff 	mov.w	r0, #4294967295
 8017bf2:	e03e      	b.n	8017c72 <__swsetup_r+0xba>
 8017bf4:	4b25      	ldr	r3, [pc, #148]	; (8017c8c <__swsetup_r+0xd4>)
 8017bf6:	429c      	cmp	r4, r3
 8017bf8:	d101      	bne.n	8017bfe <__swsetup_r+0x46>
 8017bfa:	68ac      	ldr	r4, [r5, #8]
 8017bfc:	e7eb      	b.n	8017bd6 <__swsetup_r+0x1e>
 8017bfe:	4b24      	ldr	r3, [pc, #144]	; (8017c90 <__swsetup_r+0xd8>)
 8017c00:	429c      	cmp	r4, r3
 8017c02:	bf08      	it	eq
 8017c04:	68ec      	ldreq	r4, [r5, #12]
 8017c06:	e7e6      	b.n	8017bd6 <__swsetup_r+0x1e>
 8017c08:	0758      	lsls	r0, r3, #29
 8017c0a:	d512      	bpl.n	8017c32 <__swsetup_r+0x7a>
 8017c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c0e:	b141      	cbz	r1, 8017c22 <__swsetup_r+0x6a>
 8017c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c14:	4299      	cmp	r1, r3
 8017c16:	d002      	beq.n	8017c1e <__swsetup_r+0x66>
 8017c18:	4630      	mov	r0, r6
 8017c1a:	f7fd ff03 	bl	8015a24 <_free_r>
 8017c1e:	2300      	movs	r3, #0
 8017c20:	6363      	str	r3, [r4, #52]	; 0x34
 8017c22:	89a3      	ldrh	r3, [r4, #12]
 8017c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c28:	81a3      	strh	r3, [r4, #12]
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	6063      	str	r3, [r4, #4]
 8017c2e:	6923      	ldr	r3, [r4, #16]
 8017c30:	6023      	str	r3, [r4, #0]
 8017c32:	89a3      	ldrh	r3, [r4, #12]
 8017c34:	f043 0308 	orr.w	r3, r3, #8
 8017c38:	81a3      	strh	r3, [r4, #12]
 8017c3a:	6923      	ldr	r3, [r4, #16]
 8017c3c:	b94b      	cbnz	r3, 8017c52 <__swsetup_r+0x9a>
 8017c3e:	89a3      	ldrh	r3, [r4, #12]
 8017c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c48:	d003      	beq.n	8017c52 <__swsetup_r+0x9a>
 8017c4a:	4621      	mov	r1, r4
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f001 fc45 	bl	80194dc <__smakebuf_r>
 8017c52:	89a0      	ldrh	r0, [r4, #12]
 8017c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c58:	f010 0301 	ands.w	r3, r0, #1
 8017c5c:	d00a      	beq.n	8017c74 <__swsetup_r+0xbc>
 8017c5e:	2300      	movs	r3, #0
 8017c60:	60a3      	str	r3, [r4, #8]
 8017c62:	6963      	ldr	r3, [r4, #20]
 8017c64:	425b      	negs	r3, r3
 8017c66:	61a3      	str	r3, [r4, #24]
 8017c68:	6923      	ldr	r3, [r4, #16]
 8017c6a:	b943      	cbnz	r3, 8017c7e <__swsetup_r+0xc6>
 8017c6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017c70:	d1ba      	bne.n	8017be8 <__swsetup_r+0x30>
 8017c72:	bd70      	pop	{r4, r5, r6, pc}
 8017c74:	0781      	lsls	r1, r0, #30
 8017c76:	bf58      	it	pl
 8017c78:	6963      	ldrpl	r3, [r4, #20]
 8017c7a:	60a3      	str	r3, [r4, #8]
 8017c7c:	e7f4      	b.n	8017c68 <__swsetup_r+0xb0>
 8017c7e:	2000      	movs	r0, #0
 8017c80:	e7f7      	b.n	8017c72 <__swsetup_r+0xba>
 8017c82:	bf00      	nop
 8017c84:	20000170 	.word	0x20000170
 8017c88:	0803a220 	.word	0x0803a220
 8017c8c:	0803a240 	.word	0x0803a240
 8017c90:	0803a200 	.word	0x0803a200

08017c94 <__call_exitprocs>:
 8017c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c98:	4c2b      	ldr	r4, [pc, #172]	; (8017d48 <__call_exitprocs+0xb4>)
 8017c9a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017d4c <__call_exitprocs+0xb8>
 8017c9e:	4607      	mov	r7, r0
 8017ca0:	6820      	ldr	r0, [r4, #0]
 8017ca2:	460e      	mov	r6, r1
 8017ca4:	f7fd fe6b 	bl	801597e <__retarget_lock_acquire_recursive>
 8017ca8:	46a3      	mov	fp, r4
 8017caa:	f8d8 5000 	ldr.w	r5, [r8]
 8017cae:	b935      	cbnz	r5, 8017cbe <__call_exitprocs+0x2a>
 8017cb0:	f8db 0000 	ldr.w	r0, [fp]
 8017cb4:	b003      	add	sp, #12
 8017cb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cba:	f7fd be61 	b.w	8015980 <__retarget_lock_release_recursive>
 8017cbe:	686c      	ldr	r4, [r5, #4]
 8017cc0:	f8d5 a088 	ldr.w	sl, [r5, #136]	; 0x88
 8017cc4:	3c01      	subs	r4, #1
 8017cc6:	f105 0908 	add.w	r9, r5, #8
 8017cca:	2c00      	cmp	r4, #0
 8017ccc:	dbf0      	blt.n	8017cb0 <__call_exitprocs+0x1c>
 8017cce:	b156      	cbz	r6, 8017ce6 <__call_exitprocs+0x52>
 8017cd0:	f1ba 0f00 	cmp.w	sl, #0
 8017cd4:	d101      	bne.n	8017cda <__call_exitprocs+0x46>
 8017cd6:	3c01      	subs	r4, #1
 8017cd8:	e7f7      	b.n	8017cca <__call_exitprocs+0x36>
 8017cda:	f10a 0280 	add.w	r2, sl, #128	; 0x80
 8017cde:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8017ce2:	42b2      	cmp	r2, r6
 8017ce4:	d1f7      	bne.n	8017cd6 <__call_exitprocs+0x42>
 8017ce6:	6869      	ldr	r1, [r5, #4]
 8017ce8:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8017cec:	3901      	subs	r1, #1
 8017cee:	42a1      	cmp	r1, r4
 8017cf0:	bf1a      	itte	ne
 8017cf2:	2300      	movne	r3, #0
 8017cf4:	f849 3024 	strne.w	r3, [r9, r4, lsl #2]
 8017cf8:	606c      	streq	r4, [r5, #4]
 8017cfa:	2a00      	cmp	r2, #0
 8017cfc:	d0eb      	beq.n	8017cd6 <__call_exitprocs+0x42>
 8017cfe:	686b      	ldr	r3, [r5, #4]
 8017d00:	9301      	str	r3, [sp, #4]
 8017d02:	f1ba 0f00 	cmp.w	sl, #0
 8017d06:	d007      	beq.n	8017d18 <__call_exitprocs+0x84>
 8017d08:	f8da 1100 	ldr.w	r1, [sl, #256]	; 0x100
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	fa03 fc04 	lsl.w	ip, r3, r4
 8017d12:	ea1c 0f01 	tst.w	ip, r1
 8017d16:	d109      	bne.n	8017d2c <__call_exitprocs+0x98>
 8017d18:	4790      	blx	r2
 8017d1a:	4b0c      	ldr	r3, [pc, #48]	; (8017d4c <__call_exitprocs+0xb8>)
 8017d1c:	6869      	ldr	r1, [r5, #4]
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	9b01      	ldr	r3, [sp, #4]
 8017d22:	4299      	cmp	r1, r3
 8017d24:	d1c1      	bne.n	8017caa <__call_exitprocs+0x16>
 8017d26:	4295      	cmp	r5, r2
 8017d28:	d0d5      	beq.n	8017cd6 <__call_exitprocs+0x42>
 8017d2a:	e7be      	b.n	8017caa <__call_exitprocs+0x16>
 8017d2c:	f8da 0104 	ldr.w	r0, [sl, #260]	; 0x104
 8017d30:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8017d34:	ea1c 0f00 	tst.w	ip, r0
 8017d38:	d102      	bne.n	8017d40 <__call_exitprocs+0xac>
 8017d3a:	4638      	mov	r0, r7
 8017d3c:	4790      	blx	r2
 8017d3e:	e7ec      	b.n	8017d1a <__call_exitprocs+0x86>
 8017d40:	4608      	mov	r0, r1
 8017d42:	4790      	blx	r2
 8017d44:	e7e9      	b.n	8017d1a <__call_exitprocs+0x86>
 8017d46:	bf00      	nop
 8017d48:	200001d4 	.word	0x200001d4
 8017d4c:	20000920 	.word	0x20000920

08017d50 <quorem>:
 8017d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d54:	6903      	ldr	r3, [r0, #16]
 8017d56:	690c      	ldr	r4, [r1, #16]
 8017d58:	42a3      	cmp	r3, r4
 8017d5a:	4607      	mov	r7, r0
 8017d5c:	f2c0 8081 	blt.w	8017e62 <quorem+0x112>
 8017d60:	3c01      	subs	r4, #1
 8017d62:	f101 0814 	add.w	r8, r1, #20
 8017d66:	f100 0514 	add.w	r5, r0, #20
 8017d6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d6e:	9301      	str	r3, [sp, #4]
 8017d70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d78:	3301      	adds	r3, #1
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8017d88:	d331      	bcc.n	8017dee <quorem+0x9e>
 8017d8a:	f04f 0e00 	mov.w	lr, #0
 8017d8e:	4640      	mov	r0, r8
 8017d90:	46ac      	mov	ip, r5
 8017d92:	46f2      	mov	sl, lr
 8017d94:	f850 2b04 	ldr.w	r2, [r0], #4
 8017d98:	b293      	uxth	r3, r2
 8017d9a:	fb06 e303 	mla	r3, r6, r3, lr
 8017d9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017da2:	b29b      	uxth	r3, r3
 8017da4:	ebaa 0303 	sub.w	r3, sl, r3
 8017da8:	0c12      	lsrs	r2, r2, #16
 8017daa:	f8dc a000 	ldr.w	sl, [ip]
 8017dae:	fb06 e202 	mla	r2, r6, r2, lr
 8017db2:	fa13 f38a 	uxtah	r3, r3, sl
 8017db6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017dba:	fa1f fa82 	uxth.w	sl, r2
 8017dbe:	f8dc 2000 	ldr.w	r2, [ip]
 8017dc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017dc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017dca:	b29b      	uxth	r3, r3
 8017dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017dd0:	4581      	cmp	r9, r0
 8017dd2:	f84c 3b04 	str.w	r3, [ip], #4
 8017dd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017dda:	d2db      	bcs.n	8017d94 <quorem+0x44>
 8017ddc:	f855 300b 	ldr.w	r3, [r5, fp]
 8017de0:	b92b      	cbnz	r3, 8017dee <quorem+0x9e>
 8017de2:	9b01      	ldr	r3, [sp, #4]
 8017de4:	3b04      	subs	r3, #4
 8017de6:	429d      	cmp	r5, r3
 8017de8:	461a      	mov	r2, r3
 8017dea:	d32e      	bcc.n	8017e4a <quorem+0xfa>
 8017dec:	613c      	str	r4, [r7, #16]
 8017dee:	4638      	mov	r0, r7
 8017df0:	f001 fe9a 	bl	8019b28 <__mcmp>
 8017df4:	2800      	cmp	r0, #0
 8017df6:	db24      	blt.n	8017e42 <quorem+0xf2>
 8017df8:	3601      	adds	r6, #1
 8017dfa:	4628      	mov	r0, r5
 8017dfc:	f04f 0c00 	mov.w	ip, #0
 8017e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8017e04:	f8d0 e000 	ldr.w	lr, [r0]
 8017e08:	b293      	uxth	r3, r2
 8017e0a:	ebac 0303 	sub.w	r3, ip, r3
 8017e0e:	0c12      	lsrs	r2, r2, #16
 8017e10:	fa13 f38e 	uxtah	r3, r3, lr
 8017e14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e1c:	b29b      	uxth	r3, r3
 8017e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e22:	45c1      	cmp	r9, r8
 8017e24:	f840 3b04 	str.w	r3, [r0], #4
 8017e28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017e2c:	d2e8      	bcs.n	8017e00 <quorem+0xb0>
 8017e2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e36:	b922      	cbnz	r2, 8017e42 <quorem+0xf2>
 8017e38:	3b04      	subs	r3, #4
 8017e3a:	429d      	cmp	r5, r3
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	d30a      	bcc.n	8017e56 <quorem+0x106>
 8017e40:	613c      	str	r4, [r7, #16]
 8017e42:	4630      	mov	r0, r6
 8017e44:	b003      	add	sp, #12
 8017e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e4a:	6812      	ldr	r2, [r2, #0]
 8017e4c:	3b04      	subs	r3, #4
 8017e4e:	2a00      	cmp	r2, #0
 8017e50:	d1cc      	bne.n	8017dec <quorem+0x9c>
 8017e52:	3c01      	subs	r4, #1
 8017e54:	e7c7      	b.n	8017de6 <quorem+0x96>
 8017e56:	6812      	ldr	r2, [r2, #0]
 8017e58:	3b04      	subs	r3, #4
 8017e5a:	2a00      	cmp	r2, #0
 8017e5c:	d1f0      	bne.n	8017e40 <quorem+0xf0>
 8017e5e:	3c01      	subs	r4, #1
 8017e60:	e7eb      	b.n	8017e3a <quorem+0xea>
 8017e62:	2000      	movs	r0, #0
 8017e64:	e7ee      	b.n	8017e44 <quorem+0xf4>
	...

08017e68 <_dtoa_r>:
 8017e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e6c:	ed2d 8b02 	vpush	{d8}
 8017e70:	ec57 6b10 	vmov	r6, r7, d0
 8017e74:	b095      	sub	sp, #84	; 0x54
 8017e76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017e7c:	9105      	str	r1, [sp, #20]
 8017e7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017e82:	4604      	mov	r4, r0
 8017e84:	9209      	str	r2, [sp, #36]	; 0x24
 8017e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e88:	b975      	cbnz	r5, 8017ea8 <_dtoa_r+0x40>
 8017e8a:	2010      	movs	r0, #16
 8017e8c:	f7fd fd7a 	bl	8015984 <malloc>
 8017e90:	4602      	mov	r2, r0
 8017e92:	6260      	str	r0, [r4, #36]	; 0x24
 8017e94:	b920      	cbnz	r0, 8017ea0 <_dtoa_r+0x38>
 8017e96:	4bb2      	ldr	r3, [pc, #712]	; (8018160 <_dtoa_r+0x2f8>)
 8017e98:	21ea      	movs	r1, #234	; 0xea
 8017e9a:	48b2      	ldr	r0, [pc, #712]	; (8018164 <_dtoa_r+0x2fc>)
 8017e9c:	f7fd fc86 	bl	80157ac <__assert_func>
 8017ea0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ea4:	6005      	str	r5, [r0, #0]
 8017ea6:	60c5      	str	r5, [r0, #12]
 8017ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017eaa:	6819      	ldr	r1, [r3, #0]
 8017eac:	b151      	cbz	r1, 8017ec4 <_dtoa_r+0x5c>
 8017eae:	685a      	ldr	r2, [r3, #4]
 8017eb0:	604a      	str	r2, [r1, #4]
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	4093      	lsls	r3, r2
 8017eb6:	608b      	str	r3, [r1, #8]
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f001 fbad 	bl	8019618 <_Bfree>
 8017ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	601a      	str	r2, [r3, #0]
 8017ec4:	1e3b      	subs	r3, r7, #0
 8017ec6:	bfb9      	ittee	lt
 8017ec8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017ecc:	9303      	strlt	r3, [sp, #12]
 8017ece:	2300      	movge	r3, #0
 8017ed0:	f8c8 3000 	strge.w	r3, [r8]
 8017ed4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017ed8:	4ba3      	ldr	r3, [pc, #652]	; (8018168 <_dtoa_r+0x300>)
 8017eda:	bfbc      	itt	lt
 8017edc:	2201      	movlt	r2, #1
 8017ede:	f8c8 2000 	strlt.w	r2, [r8]
 8017ee2:	ea33 0309 	bics.w	r3, r3, r9
 8017ee6:	d11b      	bne.n	8017f20 <_dtoa_r+0xb8>
 8017ee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017eea:	f242 730f 	movw	r3, #9999	; 0x270f
 8017eee:	6013      	str	r3, [r2, #0]
 8017ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017ef4:	4333      	orrs	r3, r6
 8017ef6:	f000 857a 	beq.w	80189ee <_dtoa_r+0xb86>
 8017efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017efc:	b963      	cbnz	r3, 8017f18 <_dtoa_r+0xb0>
 8017efe:	4b9b      	ldr	r3, [pc, #620]	; (801816c <_dtoa_r+0x304>)
 8017f00:	e024      	b.n	8017f4c <_dtoa_r+0xe4>
 8017f02:	4b9b      	ldr	r3, [pc, #620]	; (8018170 <_dtoa_r+0x308>)
 8017f04:	9300      	str	r3, [sp, #0]
 8017f06:	3308      	adds	r3, #8
 8017f08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f0a:	6013      	str	r3, [r2, #0]
 8017f0c:	9800      	ldr	r0, [sp, #0]
 8017f0e:	b015      	add	sp, #84	; 0x54
 8017f10:	ecbd 8b02 	vpop	{d8}
 8017f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f18:	4b94      	ldr	r3, [pc, #592]	; (801816c <_dtoa_r+0x304>)
 8017f1a:	9300      	str	r3, [sp, #0]
 8017f1c:	3303      	adds	r3, #3
 8017f1e:	e7f3      	b.n	8017f08 <_dtoa_r+0xa0>
 8017f20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f24:	2200      	movs	r2, #0
 8017f26:	ec51 0b17 	vmov	r0, r1, d7
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017f30:	f7e8 fdfa 	bl	8000b28 <__aeabi_dcmpeq>
 8017f34:	4680      	mov	r8, r0
 8017f36:	b158      	cbz	r0, 8017f50 <_dtoa_r+0xe8>
 8017f38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	6013      	str	r3, [r2, #0]
 8017f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	f000 8551 	beq.w	80189e8 <_dtoa_r+0xb80>
 8017f46:	488b      	ldr	r0, [pc, #556]	; (8018174 <_dtoa_r+0x30c>)
 8017f48:	6018      	str	r0, [r3, #0]
 8017f4a:	1e43      	subs	r3, r0, #1
 8017f4c:	9300      	str	r3, [sp, #0]
 8017f4e:	e7dd      	b.n	8017f0c <_dtoa_r+0xa4>
 8017f50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017f54:	aa12      	add	r2, sp, #72	; 0x48
 8017f56:	a913      	add	r1, sp, #76	; 0x4c
 8017f58:	4620      	mov	r0, r4
 8017f5a:	f001 ff05 	bl	8019d68 <__d2b>
 8017f5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017f62:	4683      	mov	fp, r0
 8017f64:	2d00      	cmp	r5, #0
 8017f66:	d07c      	beq.n	8018062 <_dtoa_r+0x1fa>
 8017f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017f6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017f76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017f7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017f7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017f82:	4b7d      	ldr	r3, [pc, #500]	; (8018178 <_dtoa_r+0x310>)
 8017f84:	2200      	movs	r2, #0
 8017f86:	4630      	mov	r0, r6
 8017f88:	4639      	mov	r1, r7
 8017f8a:	f7e8 f9ad 	bl	80002e8 <__aeabi_dsub>
 8017f8e:	a36e      	add	r3, pc, #440	; (adr r3, 8018148 <_dtoa_r+0x2e0>)
 8017f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f94:	f7e8 fb60 	bl	8000658 <__aeabi_dmul>
 8017f98:	a36d      	add	r3, pc, #436	; (adr r3, 8018150 <_dtoa_r+0x2e8>)
 8017f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f9e:	f7e8 f9a5 	bl	80002ec <__adddf3>
 8017fa2:	4606      	mov	r6, r0
 8017fa4:	4628      	mov	r0, r5
 8017fa6:	460f      	mov	r7, r1
 8017fa8:	f7e8 faec 	bl	8000584 <__aeabi_i2d>
 8017fac:	a36a      	add	r3, pc, #424	; (adr r3, 8018158 <_dtoa_r+0x2f0>)
 8017fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb2:	f7e8 fb51 	bl	8000658 <__aeabi_dmul>
 8017fb6:	4602      	mov	r2, r0
 8017fb8:	460b      	mov	r3, r1
 8017fba:	4630      	mov	r0, r6
 8017fbc:	4639      	mov	r1, r7
 8017fbe:	f7e8 f995 	bl	80002ec <__adddf3>
 8017fc2:	4606      	mov	r6, r0
 8017fc4:	460f      	mov	r7, r1
 8017fc6:	f7e8 fdf7 	bl	8000bb8 <__aeabi_d2iz>
 8017fca:	2200      	movs	r2, #0
 8017fcc:	4682      	mov	sl, r0
 8017fce:	2300      	movs	r3, #0
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	4639      	mov	r1, r7
 8017fd4:	f7e8 fdb2 	bl	8000b3c <__aeabi_dcmplt>
 8017fd8:	b148      	cbz	r0, 8017fee <_dtoa_r+0x186>
 8017fda:	4650      	mov	r0, sl
 8017fdc:	f7e8 fad2 	bl	8000584 <__aeabi_i2d>
 8017fe0:	4632      	mov	r2, r6
 8017fe2:	463b      	mov	r3, r7
 8017fe4:	f7e8 fda0 	bl	8000b28 <__aeabi_dcmpeq>
 8017fe8:	b908      	cbnz	r0, 8017fee <_dtoa_r+0x186>
 8017fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017fee:	f1ba 0f16 	cmp.w	sl, #22
 8017ff2:	d854      	bhi.n	801809e <_dtoa_r+0x236>
 8017ff4:	4b61      	ldr	r3, [pc, #388]	; (801817c <_dtoa_r+0x314>)
 8017ff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018002:	f7e8 fd9b 	bl	8000b3c <__aeabi_dcmplt>
 8018006:	2800      	cmp	r0, #0
 8018008:	d04b      	beq.n	80180a2 <_dtoa_r+0x23a>
 801800a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801800e:	2300      	movs	r3, #0
 8018010:	930e      	str	r3, [sp, #56]	; 0x38
 8018012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018014:	1b5d      	subs	r5, r3, r5
 8018016:	1e6b      	subs	r3, r5, #1
 8018018:	9304      	str	r3, [sp, #16]
 801801a:	bf43      	ittte	mi
 801801c:	2300      	movmi	r3, #0
 801801e:	f1c5 0801 	rsbmi	r8, r5, #1
 8018022:	9304      	strmi	r3, [sp, #16]
 8018024:	f04f 0800 	movpl.w	r8, #0
 8018028:	f1ba 0f00 	cmp.w	sl, #0
 801802c:	db3b      	blt.n	80180a6 <_dtoa_r+0x23e>
 801802e:	9b04      	ldr	r3, [sp, #16]
 8018030:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018034:	4453      	add	r3, sl
 8018036:	9304      	str	r3, [sp, #16]
 8018038:	2300      	movs	r3, #0
 801803a:	9306      	str	r3, [sp, #24]
 801803c:	9b05      	ldr	r3, [sp, #20]
 801803e:	2b09      	cmp	r3, #9
 8018040:	d869      	bhi.n	8018116 <_dtoa_r+0x2ae>
 8018042:	2b05      	cmp	r3, #5
 8018044:	bfc4      	itt	gt
 8018046:	3b04      	subgt	r3, #4
 8018048:	9305      	strgt	r3, [sp, #20]
 801804a:	9b05      	ldr	r3, [sp, #20]
 801804c:	f1a3 0302 	sub.w	r3, r3, #2
 8018050:	bfcc      	ite	gt
 8018052:	2500      	movgt	r5, #0
 8018054:	2501      	movle	r5, #1
 8018056:	2b03      	cmp	r3, #3
 8018058:	d869      	bhi.n	801812e <_dtoa_r+0x2c6>
 801805a:	e8df f003 	tbb	[pc, r3]
 801805e:	4e2c      	.short	0x4e2c
 8018060:	5a4c      	.short	0x5a4c
 8018062:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018066:	441d      	add	r5, r3
 8018068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801806c:	2b20      	cmp	r3, #32
 801806e:	bfc1      	itttt	gt
 8018070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018074:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018078:	fa09 f303 	lslgt.w	r3, r9, r3
 801807c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018080:	bfda      	itte	le
 8018082:	f1c3 0320 	rsble	r3, r3, #32
 8018086:	fa06 f003 	lslle.w	r0, r6, r3
 801808a:	4318      	orrgt	r0, r3
 801808c:	f7e8 fa6a 	bl	8000564 <__aeabi_ui2d>
 8018090:	2301      	movs	r3, #1
 8018092:	4606      	mov	r6, r0
 8018094:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018098:	3d01      	subs	r5, #1
 801809a:	9310      	str	r3, [sp, #64]	; 0x40
 801809c:	e771      	b.n	8017f82 <_dtoa_r+0x11a>
 801809e:	2301      	movs	r3, #1
 80180a0:	e7b6      	b.n	8018010 <_dtoa_r+0x1a8>
 80180a2:	900e      	str	r0, [sp, #56]	; 0x38
 80180a4:	e7b5      	b.n	8018012 <_dtoa_r+0x1aa>
 80180a6:	f1ca 0300 	rsb	r3, sl, #0
 80180aa:	9306      	str	r3, [sp, #24]
 80180ac:	2300      	movs	r3, #0
 80180ae:	eba8 080a 	sub.w	r8, r8, sl
 80180b2:	930d      	str	r3, [sp, #52]	; 0x34
 80180b4:	e7c2      	b.n	801803c <_dtoa_r+0x1d4>
 80180b6:	2300      	movs	r3, #0
 80180b8:	9308      	str	r3, [sp, #32]
 80180ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180bc:	2b00      	cmp	r3, #0
 80180be:	dc39      	bgt.n	8018134 <_dtoa_r+0x2cc>
 80180c0:	f04f 0901 	mov.w	r9, #1
 80180c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80180c8:	464b      	mov	r3, r9
 80180ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80180ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80180d0:	2200      	movs	r2, #0
 80180d2:	6042      	str	r2, [r0, #4]
 80180d4:	2204      	movs	r2, #4
 80180d6:	f102 0614 	add.w	r6, r2, #20
 80180da:	429e      	cmp	r6, r3
 80180dc:	6841      	ldr	r1, [r0, #4]
 80180de:	d92f      	bls.n	8018140 <_dtoa_r+0x2d8>
 80180e0:	4620      	mov	r0, r4
 80180e2:	f001 fa59 	bl	8019598 <_Balloc>
 80180e6:	9000      	str	r0, [sp, #0]
 80180e8:	2800      	cmp	r0, #0
 80180ea:	d14b      	bne.n	8018184 <_dtoa_r+0x31c>
 80180ec:	4b24      	ldr	r3, [pc, #144]	; (8018180 <_dtoa_r+0x318>)
 80180ee:	4602      	mov	r2, r0
 80180f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80180f4:	e6d1      	b.n	8017e9a <_dtoa_r+0x32>
 80180f6:	2301      	movs	r3, #1
 80180f8:	e7de      	b.n	80180b8 <_dtoa_r+0x250>
 80180fa:	2300      	movs	r3, #0
 80180fc:	9308      	str	r3, [sp, #32]
 80180fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018100:	eb0a 0903 	add.w	r9, sl, r3
 8018104:	f109 0301 	add.w	r3, r9, #1
 8018108:	2b01      	cmp	r3, #1
 801810a:	9301      	str	r3, [sp, #4]
 801810c:	bfb8      	it	lt
 801810e:	2301      	movlt	r3, #1
 8018110:	e7dd      	b.n	80180ce <_dtoa_r+0x266>
 8018112:	2301      	movs	r3, #1
 8018114:	e7f2      	b.n	80180fc <_dtoa_r+0x294>
 8018116:	2501      	movs	r5, #1
 8018118:	2300      	movs	r3, #0
 801811a:	9305      	str	r3, [sp, #20]
 801811c:	9508      	str	r5, [sp, #32]
 801811e:	f04f 39ff 	mov.w	r9, #4294967295
 8018122:	2200      	movs	r2, #0
 8018124:	f8cd 9004 	str.w	r9, [sp, #4]
 8018128:	2312      	movs	r3, #18
 801812a:	9209      	str	r2, [sp, #36]	; 0x24
 801812c:	e7cf      	b.n	80180ce <_dtoa_r+0x266>
 801812e:	2301      	movs	r3, #1
 8018130:	9308      	str	r3, [sp, #32]
 8018132:	e7f4      	b.n	801811e <_dtoa_r+0x2b6>
 8018134:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018138:	f8cd 9004 	str.w	r9, [sp, #4]
 801813c:	464b      	mov	r3, r9
 801813e:	e7c6      	b.n	80180ce <_dtoa_r+0x266>
 8018140:	3101      	adds	r1, #1
 8018142:	6041      	str	r1, [r0, #4]
 8018144:	0052      	lsls	r2, r2, #1
 8018146:	e7c6      	b.n	80180d6 <_dtoa_r+0x26e>
 8018148:	636f4361 	.word	0x636f4361
 801814c:	3fd287a7 	.word	0x3fd287a7
 8018150:	8b60c8b3 	.word	0x8b60c8b3
 8018154:	3fc68a28 	.word	0x3fc68a28
 8018158:	509f79fb 	.word	0x509f79fb
 801815c:	3fd34413 	.word	0x3fd34413
 8018160:	0803a176 	.word	0x0803a176
 8018164:	0803a18d 	.word	0x0803a18d
 8018168:	7ff00000 	.word	0x7ff00000
 801816c:	0803a172 	.word	0x0803a172
 8018170:	0803a169 	.word	0x0803a169
 8018174:	08039fea 	.word	0x08039fea
 8018178:	3ff80000 	.word	0x3ff80000
 801817c:	0803a368 	.word	0x0803a368
 8018180:	0803a1ec 	.word	0x0803a1ec
 8018184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018186:	9a00      	ldr	r2, [sp, #0]
 8018188:	601a      	str	r2, [r3, #0]
 801818a:	9b01      	ldr	r3, [sp, #4]
 801818c:	2b0e      	cmp	r3, #14
 801818e:	f200 80ad 	bhi.w	80182ec <_dtoa_r+0x484>
 8018192:	2d00      	cmp	r5, #0
 8018194:	f000 80aa 	beq.w	80182ec <_dtoa_r+0x484>
 8018198:	f1ba 0f00 	cmp.w	sl, #0
 801819c:	dd36      	ble.n	801820c <_dtoa_r+0x3a4>
 801819e:	4ac3      	ldr	r2, [pc, #780]	; (80184ac <_dtoa_r+0x644>)
 80181a0:	f00a 030f 	and.w	r3, sl, #15
 80181a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80181a8:	ed93 7b00 	vldr	d7, [r3]
 80181ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80181b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80181b4:	eeb0 8a47 	vmov.f32	s16, s14
 80181b8:	eef0 8a67 	vmov.f32	s17, s15
 80181bc:	d016      	beq.n	80181ec <_dtoa_r+0x384>
 80181be:	4bbc      	ldr	r3, [pc, #752]	; (80184b0 <_dtoa_r+0x648>)
 80181c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80181c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80181c8:	f7e8 fb70 	bl	80008ac <__aeabi_ddiv>
 80181cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181d0:	f007 070f 	and.w	r7, r7, #15
 80181d4:	2503      	movs	r5, #3
 80181d6:	4eb6      	ldr	r6, [pc, #728]	; (80184b0 <_dtoa_r+0x648>)
 80181d8:	b957      	cbnz	r7, 80181f0 <_dtoa_r+0x388>
 80181da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80181de:	ec53 2b18 	vmov	r2, r3, d8
 80181e2:	f7e8 fb63 	bl	80008ac <__aeabi_ddiv>
 80181e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181ea:	e029      	b.n	8018240 <_dtoa_r+0x3d8>
 80181ec:	2502      	movs	r5, #2
 80181ee:	e7f2      	b.n	80181d6 <_dtoa_r+0x36e>
 80181f0:	07f9      	lsls	r1, r7, #31
 80181f2:	d508      	bpl.n	8018206 <_dtoa_r+0x39e>
 80181f4:	ec51 0b18 	vmov	r0, r1, d8
 80181f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80181fc:	f7e8 fa2c 	bl	8000658 <__aeabi_dmul>
 8018200:	ec41 0b18 	vmov	d8, r0, r1
 8018204:	3501      	adds	r5, #1
 8018206:	107f      	asrs	r7, r7, #1
 8018208:	3608      	adds	r6, #8
 801820a:	e7e5      	b.n	80181d8 <_dtoa_r+0x370>
 801820c:	f000 80a6 	beq.w	801835c <_dtoa_r+0x4f4>
 8018210:	f1ca 0600 	rsb	r6, sl, #0
 8018214:	4ba5      	ldr	r3, [pc, #660]	; (80184ac <_dtoa_r+0x644>)
 8018216:	4fa6      	ldr	r7, [pc, #664]	; (80184b0 <_dtoa_r+0x648>)
 8018218:	f006 020f 	and.w	r2, r6, #15
 801821c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018228:	f7e8 fa16 	bl	8000658 <__aeabi_dmul>
 801822c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018230:	1136      	asrs	r6, r6, #4
 8018232:	2300      	movs	r3, #0
 8018234:	2502      	movs	r5, #2
 8018236:	2e00      	cmp	r6, #0
 8018238:	f040 8085 	bne.w	8018346 <_dtoa_r+0x4de>
 801823c:	2b00      	cmp	r3, #0
 801823e:	d1d2      	bne.n	80181e6 <_dtoa_r+0x37e>
 8018240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018242:	2b00      	cmp	r3, #0
 8018244:	f000 808c 	beq.w	8018360 <_dtoa_r+0x4f8>
 8018248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801824c:	4b99      	ldr	r3, [pc, #612]	; (80184b4 <_dtoa_r+0x64c>)
 801824e:	2200      	movs	r2, #0
 8018250:	4630      	mov	r0, r6
 8018252:	4639      	mov	r1, r7
 8018254:	f7e8 fc72 	bl	8000b3c <__aeabi_dcmplt>
 8018258:	2800      	cmp	r0, #0
 801825a:	f000 8081 	beq.w	8018360 <_dtoa_r+0x4f8>
 801825e:	9b01      	ldr	r3, [sp, #4]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d07d      	beq.n	8018360 <_dtoa_r+0x4f8>
 8018264:	f1b9 0f00 	cmp.w	r9, #0
 8018268:	dd3c      	ble.n	80182e4 <_dtoa_r+0x47c>
 801826a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801826e:	9307      	str	r3, [sp, #28]
 8018270:	2200      	movs	r2, #0
 8018272:	4b91      	ldr	r3, [pc, #580]	; (80184b8 <_dtoa_r+0x650>)
 8018274:	4630      	mov	r0, r6
 8018276:	4639      	mov	r1, r7
 8018278:	f7e8 f9ee 	bl	8000658 <__aeabi_dmul>
 801827c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018280:	3501      	adds	r5, #1
 8018282:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018286:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801828a:	4628      	mov	r0, r5
 801828c:	f7e8 f97a 	bl	8000584 <__aeabi_i2d>
 8018290:	4632      	mov	r2, r6
 8018292:	463b      	mov	r3, r7
 8018294:	f7e8 f9e0 	bl	8000658 <__aeabi_dmul>
 8018298:	4b88      	ldr	r3, [pc, #544]	; (80184bc <_dtoa_r+0x654>)
 801829a:	2200      	movs	r2, #0
 801829c:	f7e8 f826 	bl	80002ec <__adddf3>
 80182a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80182a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182a8:	9303      	str	r3, [sp, #12]
 80182aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d15c      	bne.n	801836a <_dtoa_r+0x502>
 80182b0:	4b83      	ldr	r3, [pc, #524]	; (80184c0 <_dtoa_r+0x658>)
 80182b2:	2200      	movs	r2, #0
 80182b4:	4630      	mov	r0, r6
 80182b6:	4639      	mov	r1, r7
 80182b8:	f7e8 f816 	bl	80002e8 <__aeabi_dsub>
 80182bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80182c0:	4606      	mov	r6, r0
 80182c2:	460f      	mov	r7, r1
 80182c4:	f7e8 fc58 	bl	8000b78 <__aeabi_dcmpgt>
 80182c8:	2800      	cmp	r0, #0
 80182ca:	f040 8296 	bne.w	80187fa <_dtoa_r+0x992>
 80182ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80182d2:	4630      	mov	r0, r6
 80182d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80182d8:	4639      	mov	r1, r7
 80182da:	f7e8 fc2f 	bl	8000b3c <__aeabi_dcmplt>
 80182de:	2800      	cmp	r0, #0
 80182e0:	f040 8288 	bne.w	80187f4 <_dtoa_r+0x98c>
 80182e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80182e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80182ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	f2c0 8158 	blt.w	80185a4 <_dtoa_r+0x73c>
 80182f4:	f1ba 0f0e 	cmp.w	sl, #14
 80182f8:	f300 8154 	bgt.w	80185a4 <_dtoa_r+0x73c>
 80182fc:	4b6b      	ldr	r3, [pc, #428]	; (80184ac <_dtoa_r+0x644>)
 80182fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018302:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018308:	2b00      	cmp	r3, #0
 801830a:	f280 80e3 	bge.w	80184d4 <_dtoa_r+0x66c>
 801830e:	9b01      	ldr	r3, [sp, #4]
 8018310:	2b00      	cmp	r3, #0
 8018312:	f300 80df 	bgt.w	80184d4 <_dtoa_r+0x66c>
 8018316:	f040 826d 	bne.w	80187f4 <_dtoa_r+0x98c>
 801831a:	4b69      	ldr	r3, [pc, #420]	; (80184c0 <_dtoa_r+0x658>)
 801831c:	2200      	movs	r2, #0
 801831e:	4640      	mov	r0, r8
 8018320:	4649      	mov	r1, r9
 8018322:	f7e8 f999 	bl	8000658 <__aeabi_dmul>
 8018326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801832a:	f7e8 fc1b 	bl	8000b64 <__aeabi_dcmpge>
 801832e:	9e01      	ldr	r6, [sp, #4]
 8018330:	4637      	mov	r7, r6
 8018332:	2800      	cmp	r0, #0
 8018334:	f040 8243 	bne.w	80187be <_dtoa_r+0x956>
 8018338:	9d00      	ldr	r5, [sp, #0]
 801833a:	2331      	movs	r3, #49	; 0x31
 801833c:	f805 3b01 	strb.w	r3, [r5], #1
 8018340:	f10a 0a01 	add.w	sl, sl, #1
 8018344:	e23f      	b.n	80187c6 <_dtoa_r+0x95e>
 8018346:	07f2      	lsls	r2, r6, #31
 8018348:	d505      	bpl.n	8018356 <_dtoa_r+0x4ee>
 801834a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801834e:	f7e8 f983 	bl	8000658 <__aeabi_dmul>
 8018352:	3501      	adds	r5, #1
 8018354:	2301      	movs	r3, #1
 8018356:	1076      	asrs	r6, r6, #1
 8018358:	3708      	adds	r7, #8
 801835a:	e76c      	b.n	8018236 <_dtoa_r+0x3ce>
 801835c:	2502      	movs	r5, #2
 801835e:	e76f      	b.n	8018240 <_dtoa_r+0x3d8>
 8018360:	9b01      	ldr	r3, [sp, #4]
 8018362:	f8cd a01c 	str.w	sl, [sp, #28]
 8018366:	930c      	str	r3, [sp, #48]	; 0x30
 8018368:	e78d      	b.n	8018286 <_dtoa_r+0x41e>
 801836a:	9900      	ldr	r1, [sp, #0]
 801836c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801836e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018370:	4b4e      	ldr	r3, [pc, #312]	; (80184ac <_dtoa_r+0x644>)
 8018372:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018376:	4401      	add	r1, r0
 8018378:	9102      	str	r1, [sp, #8]
 801837a:	9908      	ldr	r1, [sp, #32]
 801837c:	eeb0 8a47 	vmov.f32	s16, s14
 8018380:	eef0 8a67 	vmov.f32	s17, s15
 8018384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801838c:	2900      	cmp	r1, #0
 801838e:	d045      	beq.n	801841c <_dtoa_r+0x5b4>
 8018390:	494c      	ldr	r1, [pc, #304]	; (80184c4 <_dtoa_r+0x65c>)
 8018392:	2000      	movs	r0, #0
 8018394:	f7e8 fa8a 	bl	80008ac <__aeabi_ddiv>
 8018398:	ec53 2b18 	vmov	r2, r3, d8
 801839c:	f7e7 ffa4 	bl	80002e8 <__aeabi_dsub>
 80183a0:	9d00      	ldr	r5, [sp, #0]
 80183a2:	ec41 0b18 	vmov	d8, r0, r1
 80183a6:	4639      	mov	r1, r7
 80183a8:	4630      	mov	r0, r6
 80183aa:	f7e8 fc05 	bl	8000bb8 <__aeabi_d2iz>
 80183ae:	900c      	str	r0, [sp, #48]	; 0x30
 80183b0:	f7e8 f8e8 	bl	8000584 <__aeabi_i2d>
 80183b4:	4602      	mov	r2, r0
 80183b6:	460b      	mov	r3, r1
 80183b8:	4630      	mov	r0, r6
 80183ba:	4639      	mov	r1, r7
 80183bc:	f7e7 ff94 	bl	80002e8 <__aeabi_dsub>
 80183c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183c2:	3330      	adds	r3, #48	; 0x30
 80183c4:	f805 3b01 	strb.w	r3, [r5], #1
 80183c8:	ec53 2b18 	vmov	r2, r3, d8
 80183cc:	4606      	mov	r6, r0
 80183ce:	460f      	mov	r7, r1
 80183d0:	f7e8 fbb4 	bl	8000b3c <__aeabi_dcmplt>
 80183d4:	2800      	cmp	r0, #0
 80183d6:	d165      	bne.n	80184a4 <_dtoa_r+0x63c>
 80183d8:	4632      	mov	r2, r6
 80183da:	463b      	mov	r3, r7
 80183dc:	4935      	ldr	r1, [pc, #212]	; (80184b4 <_dtoa_r+0x64c>)
 80183de:	2000      	movs	r0, #0
 80183e0:	f7e7 ff82 	bl	80002e8 <__aeabi_dsub>
 80183e4:	ec53 2b18 	vmov	r2, r3, d8
 80183e8:	f7e8 fba8 	bl	8000b3c <__aeabi_dcmplt>
 80183ec:	2800      	cmp	r0, #0
 80183ee:	f040 80b9 	bne.w	8018564 <_dtoa_r+0x6fc>
 80183f2:	9b02      	ldr	r3, [sp, #8]
 80183f4:	429d      	cmp	r5, r3
 80183f6:	f43f af75 	beq.w	80182e4 <_dtoa_r+0x47c>
 80183fa:	4b2f      	ldr	r3, [pc, #188]	; (80184b8 <_dtoa_r+0x650>)
 80183fc:	ec51 0b18 	vmov	r0, r1, d8
 8018400:	2200      	movs	r2, #0
 8018402:	f7e8 f929 	bl	8000658 <__aeabi_dmul>
 8018406:	4b2c      	ldr	r3, [pc, #176]	; (80184b8 <_dtoa_r+0x650>)
 8018408:	ec41 0b18 	vmov	d8, r0, r1
 801840c:	2200      	movs	r2, #0
 801840e:	4630      	mov	r0, r6
 8018410:	4639      	mov	r1, r7
 8018412:	f7e8 f921 	bl	8000658 <__aeabi_dmul>
 8018416:	4606      	mov	r6, r0
 8018418:	460f      	mov	r7, r1
 801841a:	e7c4      	b.n	80183a6 <_dtoa_r+0x53e>
 801841c:	ec51 0b17 	vmov	r0, r1, d7
 8018420:	f7e8 f91a 	bl	8000658 <__aeabi_dmul>
 8018424:	9b02      	ldr	r3, [sp, #8]
 8018426:	9d00      	ldr	r5, [sp, #0]
 8018428:	930c      	str	r3, [sp, #48]	; 0x30
 801842a:	ec41 0b18 	vmov	d8, r0, r1
 801842e:	4639      	mov	r1, r7
 8018430:	4630      	mov	r0, r6
 8018432:	f7e8 fbc1 	bl	8000bb8 <__aeabi_d2iz>
 8018436:	9011      	str	r0, [sp, #68]	; 0x44
 8018438:	f7e8 f8a4 	bl	8000584 <__aeabi_i2d>
 801843c:	4602      	mov	r2, r0
 801843e:	460b      	mov	r3, r1
 8018440:	4630      	mov	r0, r6
 8018442:	4639      	mov	r1, r7
 8018444:	f7e7 ff50 	bl	80002e8 <__aeabi_dsub>
 8018448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801844a:	3330      	adds	r3, #48	; 0x30
 801844c:	f805 3b01 	strb.w	r3, [r5], #1
 8018450:	9b02      	ldr	r3, [sp, #8]
 8018452:	429d      	cmp	r5, r3
 8018454:	4606      	mov	r6, r0
 8018456:	460f      	mov	r7, r1
 8018458:	f04f 0200 	mov.w	r2, #0
 801845c:	d134      	bne.n	80184c8 <_dtoa_r+0x660>
 801845e:	4b19      	ldr	r3, [pc, #100]	; (80184c4 <_dtoa_r+0x65c>)
 8018460:	ec51 0b18 	vmov	r0, r1, d8
 8018464:	f7e7 ff42 	bl	80002ec <__adddf3>
 8018468:	4602      	mov	r2, r0
 801846a:	460b      	mov	r3, r1
 801846c:	4630      	mov	r0, r6
 801846e:	4639      	mov	r1, r7
 8018470:	f7e8 fb82 	bl	8000b78 <__aeabi_dcmpgt>
 8018474:	2800      	cmp	r0, #0
 8018476:	d175      	bne.n	8018564 <_dtoa_r+0x6fc>
 8018478:	ec53 2b18 	vmov	r2, r3, d8
 801847c:	4911      	ldr	r1, [pc, #68]	; (80184c4 <_dtoa_r+0x65c>)
 801847e:	2000      	movs	r0, #0
 8018480:	f7e7 ff32 	bl	80002e8 <__aeabi_dsub>
 8018484:	4602      	mov	r2, r0
 8018486:	460b      	mov	r3, r1
 8018488:	4630      	mov	r0, r6
 801848a:	4639      	mov	r1, r7
 801848c:	f7e8 fb56 	bl	8000b3c <__aeabi_dcmplt>
 8018490:	2800      	cmp	r0, #0
 8018492:	f43f af27 	beq.w	80182e4 <_dtoa_r+0x47c>
 8018496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018498:	1e6b      	subs	r3, r5, #1
 801849a:	930c      	str	r3, [sp, #48]	; 0x30
 801849c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80184a0:	2b30      	cmp	r3, #48	; 0x30
 80184a2:	d0f8      	beq.n	8018496 <_dtoa_r+0x62e>
 80184a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80184a8:	e04a      	b.n	8018540 <_dtoa_r+0x6d8>
 80184aa:	bf00      	nop
 80184ac:	0803a368 	.word	0x0803a368
 80184b0:	0803a340 	.word	0x0803a340
 80184b4:	3ff00000 	.word	0x3ff00000
 80184b8:	40240000 	.word	0x40240000
 80184bc:	401c0000 	.word	0x401c0000
 80184c0:	40140000 	.word	0x40140000
 80184c4:	3fe00000 	.word	0x3fe00000
 80184c8:	4baf      	ldr	r3, [pc, #700]	; (8018788 <_dtoa_r+0x920>)
 80184ca:	f7e8 f8c5 	bl	8000658 <__aeabi_dmul>
 80184ce:	4606      	mov	r6, r0
 80184d0:	460f      	mov	r7, r1
 80184d2:	e7ac      	b.n	801842e <_dtoa_r+0x5c6>
 80184d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80184d8:	9d00      	ldr	r5, [sp, #0]
 80184da:	4642      	mov	r2, r8
 80184dc:	464b      	mov	r3, r9
 80184de:	4630      	mov	r0, r6
 80184e0:	4639      	mov	r1, r7
 80184e2:	f7e8 f9e3 	bl	80008ac <__aeabi_ddiv>
 80184e6:	f7e8 fb67 	bl	8000bb8 <__aeabi_d2iz>
 80184ea:	9002      	str	r0, [sp, #8]
 80184ec:	f7e8 f84a 	bl	8000584 <__aeabi_i2d>
 80184f0:	4642      	mov	r2, r8
 80184f2:	464b      	mov	r3, r9
 80184f4:	f7e8 f8b0 	bl	8000658 <__aeabi_dmul>
 80184f8:	4602      	mov	r2, r0
 80184fa:	460b      	mov	r3, r1
 80184fc:	4630      	mov	r0, r6
 80184fe:	4639      	mov	r1, r7
 8018500:	f7e7 fef2 	bl	80002e8 <__aeabi_dsub>
 8018504:	9e02      	ldr	r6, [sp, #8]
 8018506:	9f01      	ldr	r7, [sp, #4]
 8018508:	3630      	adds	r6, #48	; 0x30
 801850a:	f805 6b01 	strb.w	r6, [r5], #1
 801850e:	9e00      	ldr	r6, [sp, #0]
 8018510:	1bae      	subs	r6, r5, r6
 8018512:	42b7      	cmp	r7, r6
 8018514:	4602      	mov	r2, r0
 8018516:	460b      	mov	r3, r1
 8018518:	d137      	bne.n	801858a <_dtoa_r+0x722>
 801851a:	f7e7 fee7 	bl	80002ec <__adddf3>
 801851e:	4642      	mov	r2, r8
 8018520:	464b      	mov	r3, r9
 8018522:	4606      	mov	r6, r0
 8018524:	460f      	mov	r7, r1
 8018526:	f7e8 fb27 	bl	8000b78 <__aeabi_dcmpgt>
 801852a:	b9c8      	cbnz	r0, 8018560 <_dtoa_r+0x6f8>
 801852c:	4642      	mov	r2, r8
 801852e:	464b      	mov	r3, r9
 8018530:	4630      	mov	r0, r6
 8018532:	4639      	mov	r1, r7
 8018534:	f7e8 faf8 	bl	8000b28 <__aeabi_dcmpeq>
 8018538:	b110      	cbz	r0, 8018540 <_dtoa_r+0x6d8>
 801853a:	9b02      	ldr	r3, [sp, #8]
 801853c:	07d9      	lsls	r1, r3, #31
 801853e:	d40f      	bmi.n	8018560 <_dtoa_r+0x6f8>
 8018540:	4620      	mov	r0, r4
 8018542:	4659      	mov	r1, fp
 8018544:	f001 f868 	bl	8019618 <_Bfree>
 8018548:	2300      	movs	r3, #0
 801854a:	702b      	strb	r3, [r5, #0]
 801854c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801854e:	f10a 0001 	add.w	r0, sl, #1
 8018552:	6018      	str	r0, [r3, #0]
 8018554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018556:	2b00      	cmp	r3, #0
 8018558:	f43f acd8 	beq.w	8017f0c <_dtoa_r+0xa4>
 801855c:	601d      	str	r5, [r3, #0]
 801855e:	e4d5      	b.n	8017f0c <_dtoa_r+0xa4>
 8018560:	f8cd a01c 	str.w	sl, [sp, #28]
 8018564:	462b      	mov	r3, r5
 8018566:	461d      	mov	r5, r3
 8018568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801856c:	2a39      	cmp	r2, #57	; 0x39
 801856e:	d108      	bne.n	8018582 <_dtoa_r+0x71a>
 8018570:	9a00      	ldr	r2, [sp, #0]
 8018572:	429a      	cmp	r2, r3
 8018574:	d1f7      	bne.n	8018566 <_dtoa_r+0x6fe>
 8018576:	9a07      	ldr	r2, [sp, #28]
 8018578:	9900      	ldr	r1, [sp, #0]
 801857a:	3201      	adds	r2, #1
 801857c:	9207      	str	r2, [sp, #28]
 801857e:	2230      	movs	r2, #48	; 0x30
 8018580:	700a      	strb	r2, [r1, #0]
 8018582:	781a      	ldrb	r2, [r3, #0]
 8018584:	3201      	adds	r2, #1
 8018586:	701a      	strb	r2, [r3, #0]
 8018588:	e78c      	b.n	80184a4 <_dtoa_r+0x63c>
 801858a:	4b7f      	ldr	r3, [pc, #508]	; (8018788 <_dtoa_r+0x920>)
 801858c:	2200      	movs	r2, #0
 801858e:	f7e8 f863 	bl	8000658 <__aeabi_dmul>
 8018592:	2200      	movs	r2, #0
 8018594:	2300      	movs	r3, #0
 8018596:	4606      	mov	r6, r0
 8018598:	460f      	mov	r7, r1
 801859a:	f7e8 fac5 	bl	8000b28 <__aeabi_dcmpeq>
 801859e:	2800      	cmp	r0, #0
 80185a0:	d09b      	beq.n	80184da <_dtoa_r+0x672>
 80185a2:	e7cd      	b.n	8018540 <_dtoa_r+0x6d8>
 80185a4:	9a08      	ldr	r2, [sp, #32]
 80185a6:	2a00      	cmp	r2, #0
 80185a8:	f000 80c4 	beq.w	8018734 <_dtoa_r+0x8cc>
 80185ac:	9a05      	ldr	r2, [sp, #20]
 80185ae:	2a01      	cmp	r2, #1
 80185b0:	f300 80a8 	bgt.w	8018704 <_dtoa_r+0x89c>
 80185b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80185b6:	2a00      	cmp	r2, #0
 80185b8:	f000 80a0 	beq.w	80186fc <_dtoa_r+0x894>
 80185bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80185c0:	9e06      	ldr	r6, [sp, #24]
 80185c2:	4645      	mov	r5, r8
 80185c4:	9a04      	ldr	r2, [sp, #16]
 80185c6:	2101      	movs	r1, #1
 80185c8:	441a      	add	r2, r3
 80185ca:	4620      	mov	r0, r4
 80185cc:	4498      	add	r8, r3
 80185ce:	9204      	str	r2, [sp, #16]
 80185d0:	f001 f928 	bl	8019824 <__i2b>
 80185d4:	4607      	mov	r7, r0
 80185d6:	2d00      	cmp	r5, #0
 80185d8:	dd0b      	ble.n	80185f2 <_dtoa_r+0x78a>
 80185da:	9b04      	ldr	r3, [sp, #16]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	dd08      	ble.n	80185f2 <_dtoa_r+0x78a>
 80185e0:	42ab      	cmp	r3, r5
 80185e2:	9a04      	ldr	r2, [sp, #16]
 80185e4:	bfa8      	it	ge
 80185e6:	462b      	movge	r3, r5
 80185e8:	eba8 0803 	sub.w	r8, r8, r3
 80185ec:	1aed      	subs	r5, r5, r3
 80185ee:	1ad3      	subs	r3, r2, r3
 80185f0:	9304      	str	r3, [sp, #16]
 80185f2:	9b06      	ldr	r3, [sp, #24]
 80185f4:	b1fb      	cbz	r3, 8018636 <_dtoa_r+0x7ce>
 80185f6:	9b08      	ldr	r3, [sp, #32]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	f000 809f 	beq.w	801873c <_dtoa_r+0x8d4>
 80185fe:	2e00      	cmp	r6, #0
 8018600:	dd11      	ble.n	8018626 <_dtoa_r+0x7be>
 8018602:	4639      	mov	r1, r7
 8018604:	4632      	mov	r2, r6
 8018606:	4620      	mov	r0, r4
 8018608:	f001 f9c8 	bl	801999c <__pow5mult>
 801860c:	465a      	mov	r2, fp
 801860e:	4601      	mov	r1, r0
 8018610:	4607      	mov	r7, r0
 8018612:	4620      	mov	r0, r4
 8018614:	f001 f91c 	bl	8019850 <__multiply>
 8018618:	4659      	mov	r1, fp
 801861a:	9007      	str	r0, [sp, #28]
 801861c:	4620      	mov	r0, r4
 801861e:	f000 fffb 	bl	8019618 <_Bfree>
 8018622:	9b07      	ldr	r3, [sp, #28]
 8018624:	469b      	mov	fp, r3
 8018626:	9b06      	ldr	r3, [sp, #24]
 8018628:	1b9a      	subs	r2, r3, r6
 801862a:	d004      	beq.n	8018636 <_dtoa_r+0x7ce>
 801862c:	4659      	mov	r1, fp
 801862e:	4620      	mov	r0, r4
 8018630:	f001 f9b4 	bl	801999c <__pow5mult>
 8018634:	4683      	mov	fp, r0
 8018636:	2101      	movs	r1, #1
 8018638:	4620      	mov	r0, r4
 801863a:	f001 f8f3 	bl	8019824 <__i2b>
 801863e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018640:	2b00      	cmp	r3, #0
 8018642:	4606      	mov	r6, r0
 8018644:	dd7c      	ble.n	8018740 <_dtoa_r+0x8d8>
 8018646:	461a      	mov	r2, r3
 8018648:	4601      	mov	r1, r0
 801864a:	4620      	mov	r0, r4
 801864c:	f001 f9a6 	bl	801999c <__pow5mult>
 8018650:	9b05      	ldr	r3, [sp, #20]
 8018652:	2b01      	cmp	r3, #1
 8018654:	4606      	mov	r6, r0
 8018656:	dd76      	ble.n	8018746 <_dtoa_r+0x8de>
 8018658:	2300      	movs	r3, #0
 801865a:	9306      	str	r3, [sp, #24]
 801865c:	6933      	ldr	r3, [r6, #16]
 801865e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018662:	6918      	ldr	r0, [r3, #16]
 8018664:	f001 f88e 	bl	8019784 <__hi0bits>
 8018668:	f1c0 0020 	rsb	r0, r0, #32
 801866c:	9b04      	ldr	r3, [sp, #16]
 801866e:	4418      	add	r0, r3
 8018670:	f010 001f 	ands.w	r0, r0, #31
 8018674:	f000 8086 	beq.w	8018784 <_dtoa_r+0x91c>
 8018678:	f1c0 0320 	rsb	r3, r0, #32
 801867c:	2b04      	cmp	r3, #4
 801867e:	dd7f      	ble.n	8018780 <_dtoa_r+0x918>
 8018680:	f1c0 001c 	rsb	r0, r0, #28
 8018684:	9b04      	ldr	r3, [sp, #16]
 8018686:	4403      	add	r3, r0
 8018688:	4480      	add	r8, r0
 801868a:	4405      	add	r5, r0
 801868c:	9304      	str	r3, [sp, #16]
 801868e:	f1b8 0f00 	cmp.w	r8, #0
 8018692:	dd05      	ble.n	80186a0 <_dtoa_r+0x838>
 8018694:	4659      	mov	r1, fp
 8018696:	4642      	mov	r2, r8
 8018698:	4620      	mov	r0, r4
 801869a:	f001 f9d9 	bl	8019a50 <__lshift>
 801869e:	4683      	mov	fp, r0
 80186a0:	9b04      	ldr	r3, [sp, #16]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	dd05      	ble.n	80186b2 <_dtoa_r+0x84a>
 80186a6:	4631      	mov	r1, r6
 80186a8:	461a      	mov	r2, r3
 80186aa:	4620      	mov	r0, r4
 80186ac:	f001 f9d0 	bl	8019a50 <__lshift>
 80186b0:	4606      	mov	r6, r0
 80186b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d069      	beq.n	801878c <_dtoa_r+0x924>
 80186b8:	4631      	mov	r1, r6
 80186ba:	4658      	mov	r0, fp
 80186bc:	f001 fa34 	bl	8019b28 <__mcmp>
 80186c0:	2800      	cmp	r0, #0
 80186c2:	da63      	bge.n	801878c <_dtoa_r+0x924>
 80186c4:	2300      	movs	r3, #0
 80186c6:	4659      	mov	r1, fp
 80186c8:	220a      	movs	r2, #10
 80186ca:	4620      	mov	r0, r4
 80186cc:	f000 ffc6 	bl	801965c <__multadd>
 80186d0:	9b08      	ldr	r3, [sp, #32]
 80186d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80186d6:	4683      	mov	fp, r0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	f000 818f 	beq.w	80189fc <_dtoa_r+0xb94>
 80186de:	4639      	mov	r1, r7
 80186e0:	2300      	movs	r3, #0
 80186e2:	220a      	movs	r2, #10
 80186e4:	4620      	mov	r0, r4
 80186e6:	f000 ffb9 	bl	801965c <__multadd>
 80186ea:	f1b9 0f00 	cmp.w	r9, #0
 80186ee:	4607      	mov	r7, r0
 80186f0:	f300 808e 	bgt.w	8018810 <_dtoa_r+0x9a8>
 80186f4:	9b05      	ldr	r3, [sp, #20]
 80186f6:	2b02      	cmp	r3, #2
 80186f8:	dc50      	bgt.n	801879c <_dtoa_r+0x934>
 80186fa:	e089      	b.n	8018810 <_dtoa_r+0x9a8>
 80186fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80186fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018702:	e75d      	b.n	80185c0 <_dtoa_r+0x758>
 8018704:	9b01      	ldr	r3, [sp, #4]
 8018706:	1e5e      	subs	r6, r3, #1
 8018708:	9b06      	ldr	r3, [sp, #24]
 801870a:	42b3      	cmp	r3, r6
 801870c:	bfbf      	itttt	lt
 801870e:	9b06      	ldrlt	r3, [sp, #24]
 8018710:	9606      	strlt	r6, [sp, #24]
 8018712:	1af2      	sublt	r2, r6, r3
 8018714:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018716:	bfb6      	itet	lt
 8018718:	189b      	addlt	r3, r3, r2
 801871a:	1b9e      	subge	r6, r3, r6
 801871c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801871e:	9b01      	ldr	r3, [sp, #4]
 8018720:	bfb8      	it	lt
 8018722:	2600      	movlt	r6, #0
 8018724:	2b00      	cmp	r3, #0
 8018726:	bfb5      	itete	lt
 8018728:	eba8 0503 	sublt.w	r5, r8, r3
 801872c:	9b01      	ldrge	r3, [sp, #4]
 801872e:	2300      	movlt	r3, #0
 8018730:	4645      	movge	r5, r8
 8018732:	e747      	b.n	80185c4 <_dtoa_r+0x75c>
 8018734:	9e06      	ldr	r6, [sp, #24]
 8018736:	9f08      	ldr	r7, [sp, #32]
 8018738:	4645      	mov	r5, r8
 801873a:	e74c      	b.n	80185d6 <_dtoa_r+0x76e>
 801873c:	9a06      	ldr	r2, [sp, #24]
 801873e:	e775      	b.n	801862c <_dtoa_r+0x7c4>
 8018740:	9b05      	ldr	r3, [sp, #20]
 8018742:	2b01      	cmp	r3, #1
 8018744:	dc18      	bgt.n	8018778 <_dtoa_r+0x910>
 8018746:	9b02      	ldr	r3, [sp, #8]
 8018748:	b9b3      	cbnz	r3, 8018778 <_dtoa_r+0x910>
 801874a:	9b03      	ldr	r3, [sp, #12]
 801874c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018750:	b9a3      	cbnz	r3, 801877c <_dtoa_r+0x914>
 8018752:	9b03      	ldr	r3, [sp, #12]
 8018754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018758:	0d1b      	lsrs	r3, r3, #20
 801875a:	051b      	lsls	r3, r3, #20
 801875c:	b12b      	cbz	r3, 801876a <_dtoa_r+0x902>
 801875e:	9b04      	ldr	r3, [sp, #16]
 8018760:	3301      	adds	r3, #1
 8018762:	9304      	str	r3, [sp, #16]
 8018764:	f108 0801 	add.w	r8, r8, #1
 8018768:	2301      	movs	r3, #1
 801876a:	9306      	str	r3, [sp, #24]
 801876c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801876e:	2b00      	cmp	r3, #0
 8018770:	f47f af74 	bne.w	801865c <_dtoa_r+0x7f4>
 8018774:	2001      	movs	r0, #1
 8018776:	e779      	b.n	801866c <_dtoa_r+0x804>
 8018778:	2300      	movs	r3, #0
 801877a:	e7f6      	b.n	801876a <_dtoa_r+0x902>
 801877c:	9b02      	ldr	r3, [sp, #8]
 801877e:	e7f4      	b.n	801876a <_dtoa_r+0x902>
 8018780:	d085      	beq.n	801868e <_dtoa_r+0x826>
 8018782:	4618      	mov	r0, r3
 8018784:	301c      	adds	r0, #28
 8018786:	e77d      	b.n	8018684 <_dtoa_r+0x81c>
 8018788:	40240000 	.word	0x40240000
 801878c:	9b01      	ldr	r3, [sp, #4]
 801878e:	2b00      	cmp	r3, #0
 8018790:	dc38      	bgt.n	8018804 <_dtoa_r+0x99c>
 8018792:	9b05      	ldr	r3, [sp, #20]
 8018794:	2b02      	cmp	r3, #2
 8018796:	dd35      	ble.n	8018804 <_dtoa_r+0x99c>
 8018798:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801879c:	f1b9 0f00 	cmp.w	r9, #0
 80187a0:	d10d      	bne.n	80187be <_dtoa_r+0x956>
 80187a2:	4631      	mov	r1, r6
 80187a4:	464b      	mov	r3, r9
 80187a6:	2205      	movs	r2, #5
 80187a8:	4620      	mov	r0, r4
 80187aa:	f000 ff57 	bl	801965c <__multadd>
 80187ae:	4601      	mov	r1, r0
 80187b0:	4606      	mov	r6, r0
 80187b2:	4658      	mov	r0, fp
 80187b4:	f001 f9b8 	bl	8019b28 <__mcmp>
 80187b8:	2800      	cmp	r0, #0
 80187ba:	f73f adbd 	bgt.w	8018338 <_dtoa_r+0x4d0>
 80187be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187c0:	9d00      	ldr	r5, [sp, #0]
 80187c2:	ea6f 0a03 	mvn.w	sl, r3
 80187c6:	f04f 0800 	mov.w	r8, #0
 80187ca:	4631      	mov	r1, r6
 80187cc:	4620      	mov	r0, r4
 80187ce:	f000 ff23 	bl	8019618 <_Bfree>
 80187d2:	2f00      	cmp	r7, #0
 80187d4:	f43f aeb4 	beq.w	8018540 <_dtoa_r+0x6d8>
 80187d8:	f1b8 0f00 	cmp.w	r8, #0
 80187dc:	d005      	beq.n	80187ea <_dtoa_r+0x982>
 80187de:	45b8      	cmp	r8, r7
 80187e0:	d003      	beq.n	80187ea <_dtoa_r+0x982>
 80187e2:	4641      	mov	r1, r8
 80187e4:	4620      	mov	r0, r4
 80187e6:	f000 ff17 	bl	8019618 <_Bfree>
 80187ea:	4639      	mov	r1, r7
 80187ec:	4620      	mov	r0, r4
 80187ee:	f000 ff13 	bl	8019618 <_Bfree>
 80187f2:	e6a5      	b.n	8018540 <_dtoa_r+0x6d8>
 80187f4:	2600      	movs	r6, #0
 80187f6:	4637      	mov	r7, r6
 80187f8:	e7e1      	b.n	80187be <_dtoa_r+0x956>
 80187fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80187fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018800:	4637      	mov	r7, r6
 8018802:	e599      	b.n	8018338 <_dtoa_r+0x4d0>
 8018804:	9b08      	ldr	r3, [sp, #32]
 8018806:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801880a:	2b00      	cmp	r3, #0
 801880c:	f000 80fd 	beq.w	8018a0a <_dtoa_r+0xba2>
 8018810:	2d00      	cmp	r5, #0
 8018812:	dd05      	ble.n	8018820 <_dtoa_r+0x9b8>
 8018814:	4639      	mov	r1, r7
 8018816:	462a      	mov	r2, r5
 8018818:	4620      	mov	r0, r4
 801881a:	f001 f919 	bl	8019a50 <__lshift>
 801881e:	4607      	mov	r7, r0
 8018820:	9b06      	ldr	r3, [sp, #24]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d05c      	beq.n	80188e0 <_dtoa_r+0xa78>
 8018826:	6879      	ldr	r1, [r7, #4]
 8018828:	4620      	mov	r0, r4
 801882a:	f000 feb5 	bl	8019598 <_Balloc>
 801882e:	4605      	mov	r5, r0
 8018830:	b928      	cbnz	r0, 801883e <_dtoa_r+0x9d6>
 8018832:	4b80      	ldr	r3, [pc, #512]	; (8018a34 <_dtoa_r+0xbcc>)
 8018834:	4602      	mov	r2, r0
 8018836:	f240 21ea 	movw	r1, #746	; 0x2ea
 801883a:	f7ff bb2e 	b.w	8017e9a <_dtoa_r+0x32>
 801883e:	693a      	ldr	r2, [r7, #16]
 8018840:	3202      	adds	r2, #2
 8018842:	0092      	lsls	r2, r2, #2
 8018844:	f107 010c 	add.w	r1, r7, #12
 8018848:	300c      	adds	r0, #12
 801884a:	f7fd f8ab 	bl	80159a4 <memcpy>
 801884e:	2201      	movs	r2, #1
 8018850:	4629      	mov	r1, r5
 8018852:	4620      	mov	r0, r4
 8018854:	f001 f8fc 	bl	8019a50 <__lshift>
 8018858:	9b00      	ldr	r3, [sp, #0]
 801885a:	3301      	adds	r3, #1
 801885c:	9301      	str	r3, [sp, #4]
 801885e:	9b00      	ldr	r3, [sp, #0]
 8018860:	444b      	add	r3, r9
 8018862:	9307      	str	r3, [sp, #28]
 8018864:	9b02      	ldr	r3, [sp, #8]
 8018866:	f003 0301 	and.w	r3, r3, #1
 801886a:	46b8      	mov	r8, r7
 801886c:	9306      	str	r3, [sp, #24]
 801886e:	4607      	mov	r7, r0
 8018870:	9b01      	ldr	r3, [sp, #4]
 8018872:	4631      	mov	r1, r6
 8018874:	3b01      	subs	r3, #1
 8018876:	4658      	mov	r0, fp
 8018878:	9302      	str	r3, [sp, #8]
 801887a:	f7ff fa69 	bl	8017d50 <quorem>
 801887e:	4603      	mov	r3, r0
 8018880:	3330      	adds	r3, #48	; 0x30
 8018882:	9004      	str	r0, [sp, #16]
 8018884:	4641      	mov	r1, r8
 8018886:	4658      	mov	r0, fp
 8018888:	9308      	str	r3, [sp, #32]
 801888a:	f001 f94d 	bl	8019b28 <__mcmp>
 801888e:	463a      	mov	r2, r7
 8018890:	4681      	mov	r9, r0
 8018892:	4631      	mov	r1, r6
 8018894:	4620      	mov	r0, r4
 8018896:	f001 f963 	bl	8019b60 <__mdiff>
 801889a:	68c2      	ldr	r2, [r0, #12]
 801889c:	9b08      	ldr	r3, [sp, #32]
 801889e:	4605      	mov	r5, r0
 80188a0:	bb02      	cbnz	r2, 80188e4 <_dtoa_r+0xa7c>
 80188a2:	4601      	mov	r1, r0
 80188a4:	4658      	mov	r0, fp
 80188a6:	f001 f93f 	bl	8019b28 <__mcmp>
 80188aa:	9b08      	ldr	r3, [sp, #32]
 80188ac:	4602      	mov	r2, r0
 80188ae:	4629      	mov	r1, r5
 80188b0:	4620      	mov	r0, r4
 80188b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80188b6:	f000 feaf 	bl	8019618 <_Bfree>
 80188ba:	9b05      	ldr	r3, [sp, #20]
 80188bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188be:	9d01      	ldr	r5, [sp, #4]
 80188c0:	ea43 0102 	orr.w	r1, r3, r2
 80188c4:	9b06      	ldr	r3, [sp, #24]
 80188c6:	430b      	orrs	r3, r1
 80188c8:	9b08      	ldr	r3, [sp, #32]
 80188ca:	d10d      	bne.n	80188e8 <_dtoa_r+0xa80>
 80188cc:	2b39      	cmp	r3, #57	; 0x39
 80188ce:	d029      	beq.n	8018924 <_dtoa_r+0xabc>
 80188d0:	f1b9 0f00 	cmp.w	r9, #0
 80188d4:	dd01      	ble.n	80188da <_dtoa_r+0xa72>
 80188d6:	9b04      	ldr	r3, [sp, #16]
 80188d8:	3331      	adds	r3, #49	; 0x31
 80188da:	9a02      	ldr	r2, [sp, #8]
 80188dc:	7013      	strb	r3, [r2, #0]
 80188de:	e774      	b.n	80187ca <_dtoa_r+0x962>
 80188e0:	4638      	mov	r0, r7
 80188e2:	e7b9      	b.n	8018858 <_dtoa_r+0x9f0>
 80188e4:	2201      	movs	r2, #1
 80188e6:	e7e2      	b.n	80188ae <_dtoa_r+0xa46>
 80188e8:	f1b9 0f00 	cmp.w	r9, #0
 80188ec:	db06      	blt.n	80188fc <_dtoa_r+0xa94>
 80188ee:	9905      	ldr	r1, [sp, #20]
 80188f0:	ea41 0909 	orr.w	r9, r1, r9
 80188f4:	9906      	ldr	r1, [sp, #24]
 80188f6:	ea59 0101 	orrs.w	r1, r9, r1
 80188fa:	d120      	bne.n	801893e <_dtoa_r+0xad6>
 80188fc:	2a00      	cmp	r2, #0
 80188fe:	ddec      	ble.n	80188da <_dtoa_r+0xa72>
 8018900:	4659      	mov	r1, fp
 8018902:	2201      	movs	r2, #1
 8018904:	4620      	mov	r0, r4
 8018906:	9301      	str	r3, [sp, #4]
 8018908:	f001 f8a2 	bl	8019a50 <__lshift>
 801890c:	4631      	mov	r1, r6
 801890e:	4683      	mov	fp, r0
 8018910:	f001 f90a 	bl	8019b28 <__mcmp>
 8018914:	2800      	cmp	r0, #0
 8018916:	9b01      	ldr	r3, [sp, #4]
 8018918:	dc02      	bgt.n	8018920 <_dtoa_r+0xab8>
 801891a:	d1de      	bne.n	80188da <_dtoa_r+0xa72>
 801891c:	07da      	lsls	r2, r3, #31
 801891e:	d5dc      	bpl.n	80188da <_dtoa_r+0xa72>
 8018920:	2b39      	cmp	r3, #57	; 0x39
 8018922:	d1d8      	bne.n	80188d6 <_dtoa_r+0xa6e>
 8018924:	9a02      	ldr	r2, [sp, #8]
 8018926:	2339      	movs	r3, #57	; 0x39
 8018928:	7013      	strb	r3, [r2, #0]
 801892a:	462b      	mov	r3, r5
 801892c:	461d      	mov	r5, r3
 801892e:	3b01      	subs	r3, #1
 8018930:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018934:	2a39      	cmp	r2, #57	; 0x39
 8018936:	d050      	beq.n	80189da <_dtoa_r+0xb72>
 8018938:	3201      	adds	r2, #1
 801893a:	701a      	strb	r2, [r3, #0]
 801893c:	e745      	b.n	80187ca <_dtoa_r+0x962>
 801893e:	2a00      	cmp	r2, #0
 8018940:	dd03      	ble.n	801894a <_dtoa_r+0xae2>
 8018942:	2b39      	cmp	r3, #57	; 0x39
 8018944:	d0ee      	beq.n	8018924 <_dtoa_r+0xabc>
 8018946:	3301      	adds	r3, #1
 8018948:	e7c7      	b.n	80188da <_dtoa_r+0xa72>
 801894a:	9a01      	ldr	r2, [sp, #4]
 801894c:	9907      	ldr	r1, [sp, #28]
 801894e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018952:	428a      	cmp	r2, r1
 8018954:	d02a      	beq.n	80189ac <_dtoa_r+0xb44>
 8018956:	4659      	mov	r1, fp
 8018958:	2300      	movs	r3, #0
 801895a:	220a      	movs	r2, #10
 801895c:	4620      	mov	r0, r4
 801895e:	f000 fe7d 	bl	801965c <__multadd>
 8018962:	45b8      	cmp	r8, r7
 8018964:	4683      	mov	fp, r0
 8018966:	f04f 0300 	mov.w	r3, #0
 801896a:	f04f 020a 	mov.w	r2, #10
 801896e:	4641      	mov	r1, r8
 8018970:	4620      	mov	r0, r4
 8018972:	d107      	bne.n	8018984 <_dtoa_r+0xb1c>
 8018974:	f000 fe72 	bl	801965c <__multadd>
 8018978:	4680      	mov	r8, r0
 801897a:	4607      	mov	r7, r0
 801897c:	9b01      	ldr	r3, [sp, #4]
 801897e:	3301      	adds	r3, #1
 8018980:	9301      	str	r3, [sp, #4]
 8018982:	e775      	b.n	8018870 <_dtoa_r+0xa08>
 8018984:	f000 fe6a 	bl	801965c <__multadd>
 8018988:	4639      	mov	r1, r7
 801898a:	4680      	mov	r8, r0
 801898c:	2300      	movs	r3, #0
 801898e:	220a      	movs	r2, #10
 8018990:	4620      	mov	r0, r4
 8018992:	f000 fe63 	bl	801965c <__multadd>
 8018996:	4607      	mov	r7, r0
 8018998:	e7f0      	b.n	801897c <_dtoa_r+0xb14>
 801899a:	f1b9 0f00 	cmp.w	r9, #0
 801899e:	9a00      	ldr	r2, [sp, #0]
 80189a0:	bfcc      	ite	gt
 80189a2:	464d      	movgt	r5, r9
 80189a4:	2501      	movle	r5, #1
 80189a6:	4415      	add	r5, r2
 80189a8:	f04f 0800 	mov.w	r8, #0
 80189ac:	4659      	mov	r1, fp
 80189ae:	2201      	movs	r2, #1
 80189b0:	4620      	mov	r0, r4
 80189b2:	9301      	str	r3, [sp, #4]
 80189b4:	f001 f84c 	bl	8019a50 <__lshift>
 80189b8:	4631      	mov	r1, r6
 80189ba:	4683      	mov	fp, r0
 80189bc:	f001 f8b4 	bl	8019b28 <__mcmp>
 80189c0:	2800      	cmp	r0, #0
 80189c2:	dcb2      	bgt.n	801892a <_dtoa_r+0xac2>
 80189c4:	d102      	bne.n	80189cc <_dtoa_r+0xb64>
 80189c6:	9b01      	ldr	r3, [sp, #4]
 80189c8:	07db      	lsls	r3, r3, #31
 80189ca:	d4ae      	bmi.n	801892a <_dtoa_r+0xac2>
 80189cc:	462b      	mov	r3, r5
 80189ce:	461d      	mov	r5, r3
 80189d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80189d4:	2a30      	cmp	r2, #48	; 0x30
 80189d6:	d0fa      	beq.n	80189ce <_dtoa_r+0xb66>
 80189d8:	e6f7      	b.n	80187ca <_dtoa_r+0x962>
 80189da:	9a00      	ldr	r2, [sp, #0]
 80189dc:	429a      	cmp	r2, r3
 80189de:	d1a5      	bne.n	801892c <_dtoa_r+0xac4>
 80189e0:	f10a 0a01 	add.w	sl, sl, #1
 80189e4:	2331      	movs	r3, #49	; 0x31
 80189e6:	e779      	b.n	80188dc <_dtoa_r+0xa74>
 80189e8:	4b13      	ldr	r3, [pc, #76]	; (8018a38 <_dtoa_r+0xbd0>)
 80189ea:	f7ff baaf 	b.w	8017f4c <_dtoa_r+0xe4>
 80189ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	f47f aa86 	bne.w	8017f02 <_dtoa_r+0x9a>
 80189f6:	4b11      	ldr	r3, [pc, #68]	; (8018a3c <_dtoa_r+0xbd4>)
 80189f8:	f7ff baa8 	b.w	8017f4c <_dtoa_r+0xe4>
 80189fc:	f1b9 0f00 	cmp.w	r9, #0
 8018a00:	dc03      	bgt.n	8018a0a <_dtoa_r+0xba2>
 8018a02:	9b05      	ldr	r3, [sp, #20]
 8018a04:	2b02      	cmp	r3, #2
 8018a06:	f73f aec9 	bgt.w	801879c <_dtoa_r+0x934>
 8018a0a:	9d00      	ldr	r5, [sp, #0]
 8018a0c:	4631      	mov	r1, r6
 8018a0e:	4658      	mov	r0, fp
 8018a10:	f7ff f99e 	bl	8017d50 <quorem>
 8018a14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018a18:	f805 3b01 	strb.w	r3, [r5], #1
 8018a1c:	9a00      	ldr	r2, [sp, #0]
 8018a1e:	1aaa      	subs	r2, r5, r2
 8018a20:	4591      	cmp	r9, r2
 8018a22:	ddba      	ble.n	801899a <_dtoa_r+0xb32>
 8018a24:	4659      	mov	r1, fp
 8018a26:	2300      	movs	r3, #0
 8018a28:	220a      	movs	r2, #10
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	f000 fe16 	bl	801965c <__multadd>
 8018a30:	4683      	mov	fp, r0
 8018a32:	e7eb      	b.n	8018a0c <_dtoa_r+0xba4>
 8018a34:	0803a1ec 	.word	0x0803a1ec
 8018a38:	08039fe9 	.word	0x08039fe9
 8018a3c:	0803a169 	.word	0x0803a169

08018a40 <__sflush_r>:
 8018a40:	898a      	ldrh	r2, [r1, #12]
 8018a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a46:	4605      	mov	r5, r0
 8018a48:	0710      	lsls	r0, r2, #28
 8018a4a:	460c      	mov	r4, r1
 8018a4c:	d458      	bmi.n	8018b00 <__sflush_r+0xc0>
 8018a4e:	684b      	ldr	r3, [r1, #4]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	dc05      	bgt.n	8018a60 <__sflush_r+0x20>
 8018a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	dc02      	bgt.n	8018a60 <__sflush_r+0x20>
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a62:	2e00      	cmp	r6, #0
 8018a64:	d0f9      	beq.n	8018a5a <__sflush_r+0x1a>
 8018a66:	2300      	movs	r3, #0
 8018a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018a6c:	682f      	ldr	r7, [r5, #0]
 8018a6e:	602b      	str	r3, [r5, #0]
 8018a70:	d032      	beq.n	8018ad8 <__sflush_r+0x98>
 8018a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018a74:	89a3      	ldrh	r3, [r4, #12]
 8018a76:	075a      	lsls	r2, r3, #29
 8018a78:	d505      	bpl.n	8018a86 <__sflush_r+0x46>
 8018a7a:	6863      	ldr	r3, [r4, #4]
 8018a7c:	1ac0      	subs	r0, r0, r3
 8018a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a80:	b10b      	cbz	r3, 8018a86 <__sflush_r+0x46>
 8018a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018a84:	1ac0      	subs	r0, r0, r3
 8018a86:	2300      	movs	r3, #0
 8018a88:	4602      	mov	r2, r0
 8018a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a8c:	6a21      	ldr	r1, [r4, #32]
 8018a8e:	4628      	mov	r0, r5
 8018a90:	47b0      	blx	r6
 8018a92:	1c43      	adds	r3, r0, #1
 8018a94:	89a3      	ldrh	r3, [r4, #12]
 8018a96:	d106      	bne.n	8018aa6 <__sflush_r+0x66>
 8018a98:	6829      	ldr	r1, [r5, #0]
 8018a9a:	291d      	cmp	r1, #29
 8018a9c:	d82c      	bhi.n	8018af8 <__sflush_r+0xb8>
 8018a9e:	4a2a      	ldr	r2, [pc, #168]	; (8018b48 <__sflush_r+0x108>)
 8018aa0:	40ca      	lsrs	r2, r1
 8018aa2:	07d6      	lsls	r6, r2, #31
 8018aa4:	d528      	bpl.n	8018af8 <__sflush_r+0xb8>
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	6062      	str	r2, [r4, #4]
 8018aaa:	04d9      	lsls	r1, r3, #19
 8018aac:	6922      	ldr	r2, [r4, #16]
 8018aae:	6022      	str	r2, [r4, #0]
 8018ab0:	d504      	bpl.n	8018abc <__sflush_r+0x7c>
 8018ab2:	1c42      	adds	r2, r0, #1
 8018ab4:	d101      	bne.n	8018aba <__sflush_r+0x7a>
 8018ab6:	682b      	ldr	r3, [r5, #0]
 8018ab8:	b903      	cbnz	r3, 8018abc <__sflush_r+0x7c>
 8018aba:	6560      	str	r0, [r4, #84]	; 0x54
 8018abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018abe:	602f      	str	r7, [r5, #0]
 8018ac0:	2900      	cmp	r1, #0
 8018ac2:	d0ca      	beq.n	8018a5a <__sflush_r+0x1a>
 8018ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ac8:	4299      	cmp	r1, r3
 8018aca:	d002      	beq.n	8018ad2 <__sflush_r+0x92>
 8018acc:	4628      	mov	r0, r5
 8018ace:	f7fc ffa9 	bl	8015a24 <_free_r>
 8018ad2:	2000      	movs	r0, #0
 8018ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8018ad6:	e7c1      	b.n	8018a5c <__sflush_r+0x1c>
 8018ad8:	6a21      	ldr	r1, [r4, #32]
 8018ada:	2301      	movs	r3, #1
 8018adc:	4628      	mov	r0, r5
 8018ade:	47b0      	blx	r6
 8018ae0:	1c41      	adds	r1, r0, #1
 8018ae2:	d1c7      	bne.n	8018a74 <__sflush_r+0x34>
 8018ae4:	682b      	ldr	r3, [r5, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d0c4      	beq.n	8018a74 <__sflush_r+0x34>
 8018aea:	2b1d      	cmp	r3, #29
 8018aec:	d001      	beq.n	8018af2 <__sflush_r+0xb2>
 8018aee:	2b16      	cmp	r3, #22
 8018af0:	d101      	bne.n	8018af6 <__sflush_r+0xb6>
 8018af2:	602f      	str	r7, [r5, #0]
 8018af4:	e7b1      	b.n	8018a5a <__sflush_r+0x1a>
 8018af6:	89a3      	ldrh	r3, [r4, #12]
 8018af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018afc:	81a3      	strh	r3, [r4, #12]
 8018afe:	e7ad      	b.n	8018a5c <__sflush_r+0x1c>
 8018b00:	690f      	ldr	r7, [r1, #16]
 8018b02:	2f00      	cmp	r7, #0
 8018b04:	d0a9      	beq.n	8018a5a <__sflush_r+0x1a>
 8018b06:	0793      	lsls	r3, r2, #30
 8018b08:	680e      	ldr	r6, [r1, #0]
 8018b0a:	bf08      	it	eq
 8018b0c:	694b      	ldreq	r3, [r1, #20]
 8018b0e:	600f      	str	r7, [r1, #0]
 8018b10:	bf18      	it	ne
 8018b12:	2300      	movne	r3, #0
 8018b14:	eba6 0807 	sub.w	r8, r6, r7
 8018b18:	608b      	str	r3, [r1, #8]
 8018b1a:	f1b8 0f00 	cmp.w	r8, #0
 8018b1e:	dd9c      	ble.n	8018a5a <__sflush_r+0x1a>
 8018b20:	6a21      	ldr	r1, [r4, #32]
 8018b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b24:	4643      	mov	r3, r8
 8018b26:	463a      	mov	r2, r7
 8018b28:	4628      	mov	r0, r5
 8018b2a:	47b0      	blx	r6
 8018b2c:	2800      	cmp	r0, #0
 8018b2e:	dc06      	bgt.n	8018b3e <__sflush_r+0xfe>
 8018b30:	89a3      	ldrh	r3, [r4, #12]
 8018b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b36:	81a3      	strh	r3, [r4, #12]
 8018b38:	f04f 30ff 	mov.w	r0, #4294967295
 8018b3c:	e78e      	b.n	8018a5c <__sflush_r+0x1c>
 8018b3e:	4407      	add	r7, r0
 8018b40:	eba8 0800 	sub.w	r8, r8, r0
 8018b44:	e7e9      	b.n	8018b1a <__sflush_r+0xda>
 8018b46:	bf00      	nop
 8018b48:	20400001 	.word	0x20400001

08018b4c <_fflush_r>:
 8018b4c:	b538      	push	{r3, r4, r5, lr}
 8018b4e:	690b      	ldr	r3, [r1, #16]
 8018b50:	4605      	mov	r5, r0
 8018b52:	460c      	mov	r4, r1
 8018b54:	b913      	cbnz	r3, 8018b5c <_fflush_r+0x10>
 8018b56:	2500      	movs	r5, #0
 8018b58:	4628      	mov	r0, r5
 8018b5a:	bd38      	pop	{r3, r4, r5, pc}
 8018b5c:	b118      	cbz	r0, 8018b66 <_fflush_r+0x1a>
 8018b5e:	6983      	ldr	r3, [r0, #24]
 8018b60:	b90b      	cbnz	r3, 8018b66 <_fflush_r+0x1a>
 8018b62:	f000 f887 	bl	8018c74 <__sinit>
 8018b66:	4b14      	ldr	r3, [pc, #80]	; (8018bb8 <_fflush_r+0x6c>)
 8018b68:	429c      	cmp	r4, r3
 8018b6a:	d11b      	bne.n	8018ba4 <_fflush_r+0x58>
 8018b6c:	686c      	ldr	r4, [r5, #4]
 8018b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d0ef      	beq.n	8018b56 <_fflush_r+0xa>
 8018b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018b78:	07d0      	lsls	r0, r2, #31
 8018b7a:	d404      	bmi.n	8018b86 <_fflush_r+0x3a>
 8018b7c:	0599      	lsls	r1, r3, #22
 8018b7e:	d402      	bmi.n	8018b86 <_fflush_r+0x3a>
 8018b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b82:	f7fc fefc 	bl	801597e <__retarget_lock_acquire_recursive>
 8018b86:	4628      	mov	r0, r5
 8018b88:	4621      	mov	r1, r4
 8018b8a:	f7ff ff59 	bl	8018a40 <__sflush_r>
 8018b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b90:	07da      	lsls	r2, r3, #31
 8018b92:	4605      	mov	r5, r0
 8018b94:	d4e0      	bmi.n	8018b58 <_fflush_r+0xc>
 8018b96:	89a3      	ldrh	r3, [r4, #12]
 8018b98:	059b      	lsls	r3, r3, #22
 8018b9a:	d4dd      	bmi.n	8018b58 <_fflush_r+0xc>
 8018b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b9e:	f7fc feef 	bl	8015980 <__retarget_lock_release_recursive>
 8018ba2:	e7d9      	b.n	8018b58 <_fflush_r+0xc>
 8018ba4:	4b05      	ldr	r3, [pc, #20]	; (8018bbc <_fflush_r+0x70>)
 8018ba6:	429c      	cmp	r4, r3
 8018ba8:	d101      	bne.n	8018bae <_fflush_r+0x62>
 8018baa:	68ac      	ldr	r4, [r5, #8]
 8018bac:	e7df      	b.n	8018b6e <_fflush_r+0x22>
 8018bae:	4b04      	ldr	r3, [pc, #16]	; (8018bc0 <_fflush_r+0x74>)
 8018bb0:	429c      	cmp	r4, r3
 8018bb2:	bf08      	it	eq
 8018bb4:	68ec      	ldreq	r4, [r5, #12]
 8018bb6:	e7da      	b.n	8018b6e <_fflush_r+0x22>
 8018bb8:	0803a220 	.word	0x0803a220
 8018bbc:	0803a240 	.word	0x0803a240
 8018bc0:	0803a200 	.word	0x0803a200

08018bc4 <std>:
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	b510      	push	{r4, lr}
 8018bc8:	4604      	mov	r4, r0
 8018bca:	e9c0 3300 	strd	r3, r3, [r0]
 8018bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018bd2:	6083      	str	r3, [r0, #8]
 8018bd4:	8181      	strh	r1, [r0, #12]
 8018bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8018bd8:	81c2      	strh	r2, [r0, #14]
 8018bda:	6183      	str	r3, [r0, #24]
 8018bdc:	4619      	mov	r1, r3
 8018bde:	2208      	movs	r2, #8
 8018be0:	305c      	adds	r0, #92	; 0x5c
 8018be2:	f7fc ff07 	bl	80159f4 <memset>
 8018be6:	4b05      	ldr	r3, [pc, #20]	; (8018bfc <std+0x38>)
 8018be8:	6263      	str	r3, [r4, #36]	; 0x24
 8018bea:	4b05      	ldr	r3, [pc, #20]	; (8018c00 <std+0x3c>)
 8018bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8018bee:	4b05      	ldr	r3, [pc, #20]	; (8018c04 <std+0x40>)
 8018bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018bf2:	4b05      	ldr	r3, [pc, #20]	; (8018c08 <std+0x44>)
 8018bf4:	6224      	str	r4, [r4, #32]
 8018bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8018bf8:	bd10      	pop	{r4, pc}
 8018bfa:	bf00      	nop
 8018bfc:	0801a211 	.word	0x0801a211
 8018c00:	0801a233 	.word	0x0801a233
 8018c04:	0801a26b 	.word	0x0801a26b
 8018c08:	0801a28f 	.word	0x0801a28f

08018c0c <_cleanup_r>:
 8018c0c:	4901      	ldr	r1, [pc, #4]	; (8018c14 <_cleanup_r+0x8>)
 8018c0e:	f000 b8af 	b.w	8018d70 <_fwalk_reent>
 8018c12:	bf00      	nop
 8018c14:	08018b4d 	.word	0x08018b4d

08018c18 <__sfmoreglue>:
 8018c18:	b570      	push	{r4, r5, r6, lr}
 8018c1a:	1e4a      	subs	r2, r1, #1
 8018c1c:	2568      	movs	r5, #104	; 0x68
 8018c1e:	4355      	muls	r5, r2
 8018c20:	460e      	mov	r6, r1
 8018c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018c26:	f7fc ff4d 	bl	8015ac4 <_malloc_r>
 8018c2a:	4604      	mov	r4, r0
 8018c2c:	b140      	cbz	r0, 8018c40 <__sfmoreglue+0x28>
 8018c2e:	2100      	movs	r1, #0
 8018c30:	e9c0 1600 	strd	r1, r6, [r0]
 8018c34:	300c      	adds	r0, #12
 8018c36:	60a0      	str	r0, [r4, #8]
 8018c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018c3c:	f7fc feda 	bl	80159f4 <memset>
 8018c40:	4620      	mov	r0, r4
 8018c42:	bd70      	pop	{r4, r5, r6, pc}

08018c44 <__sfp_lock_acquire>:
 8018c44:	4801      	ldr	r0, [pc, #4]	; (8018c4c <__sfp_lock_acquire+0x8>)
 8018c46:	f7fc be9a 	b.w	801597e <__retarget_lock_acquire_recursive>
 8018c4a:	bf00      	nop
 8018c4c:	2000092c 	.word	0x2000092c

08018c50 <__sfp_lock_release>:
 8018c50:	4801      	ldr	r0, [pc, #4]	; (8018c58 <__sfp_lock_release+0x8>)
 8018c52:	f7fc be95 	b.w	8015980 <__retarget_lock_release_recursive>
 8018c56:	bf00      	nop
 8018c58:	2000092c 	.word	0x2000092c

08018c5c <__sinit_lock_acquire>:
 8018c5c:	4801      	ldr	r0, [pc, #4]	; (8018c64 <__sinit_lock_acquire+0x8>)
 8018c5e:	f7fc be8e 	b.w	801597e <__retarget_lock_acquire_recursive>
 8018c62:	bf00      	nop
 8018c64:	2000092b 	.word	0x2000092b

08018c68 <__sinit_lock_release>:
 8018c68:	4801      	ldr	r0, [pc, #4]	; (8018c70 <__sinit_lock_release+0x8>)
 8018c6a:	f7fc be89 	b.w	8015980 <__retarget_lock_release_recursive>
 8018c6e:	bf00      	nop
 8018c70:	2000092b 	.word	0x2000092b

08018c74 <__sinit>:
 8018c74:	b510      	push	{r4, lr}
 8018c76:	4604      	mov	r4, r0
 8018c78:	f7ff fff0 	bl	8018c5c <__sinit_lock_acquire>
 8018c7c:	69a3      	ldr	r3, [r4, #24]
 8018c7e:	b11b      	cbz	r3, 8018c88 <__sinit+0x14>
 8018c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c84:	f7ff bff0 	b.w	8018c68 <__sinit_lock_release>
 8018c88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018c8c:	6523      	str	r3, [r4, #80]	; 0x50
 8018c8e:	4b13      	ldr	r3, [pc, #76]	; (8018cdc <__sinit+0x68>)
 8018c90:	4a13      	ldr	r2, [pc, #76]	; (8018ce0 <__sinit+0x6c>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	62a2      	str	r2, [r4, #40]	; 0x28
 8018c96:	42a3      	cmp	r3, r4
 8018c98:	bf04      	itt	eq
 8018c9a:	2301      	moveq	r3, #1
 8018c9c:	61a3      	streq	r3, [r4, #24]
 8018c9e:	4620      	mov	r0, r4
 8018ca0:	f000 f820 	bl	8018ce4 <__sfp>
 8018ca4:	6060      	str	r0, [r4, #4]
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	f000 f81c 	bl	8018ce4 <__sfp>
 8018cac:	60a0      	str	r0, [r4, #8]
 8018cae:	4620      	mov	r0, r4
 8018cb0:	f000 f818 	bl	8018ce4 <__sfp>
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	60e0      	str	r0, [r4, #12]
 8018cb8:	2104      	movs	r1, #4
 8018cba:	6860      	ldr	r0, [r4, #4]
 8018cbc:	f7ff ff82 	bl	8018bc4 <std>
 8018cc0:	68a0      	ldr	r0, [r4, #8]
 8018cc2:	2201      	movs	r2, #1
 8018cc4:	2109      	movs	r1, #9
 8018cc6:	f7ff ff7d 	bl	8018bc4 <std>
 8018cca:	68e0      	ldr	r0, [r4, #12]
 8018ccc:	2202      	movs	r2, #2
 8018cce:	2112      	movs	r1, #18
 8018cd0:	f7ff ff78 	bl	8018bc4 <std>
 8018cd4:	2301      	movs	r3, #1
 8018cd6:	61a3      	str	r3, [r4, #24]
 8018cd8:	e7d2      	b.n	8018c80 <__sinit+0xc>
 8018cda:	bf00      	nop
 8018cdc:	08039fc4 	.word	0x08039fc4
 8018ce0:	08018c0d 	.word	0x08018c0d

08018ce4 <__sfp>:
 8018ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ce6:	4607      	mov	r7, r0
 8018ce8:	f7ff ffac 	bl	8018c44 <__sfp_lock_acquire>
 8018cec:	4b1e      	ldr	r3, [pc, #120]	; (8018d68 <__sfp+0x84>)
 8018cee:	681e      	ldr	r6, [r3, #0]
 8018cf0:	69b3      	ldr	r3, [r6, #24]
 8018cf2:	b913      	cbnz	r3, 8018cfa <__sfp+0x16>
 8018cf4:	4630      	mov	r0, r6
 8018cf6:	f7ff ffbd 	bl	8018c74 <__sinit>
 8018cfa:	3648      	adds	r6, #72	; 0x48
 8018cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018d00:	3b01      	subs	r3, #1
 8018d02:	d503      	bpl.n	8018d0c <__sfp+0x28>
 8018d04:	6833      	ldr	r3, [r6, #0]
 8018d06:	b30b      	cbz	r3, 8018d4c <__sfp+0x68>
 8018d08:	6836      	ldr	r6, [r6, #0]
 8018d0a:	e7f7      	b.n	8018cfc <__sfp+0x18>
 8018d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018d10:	b9d5      	cbnz	r5, 8018d48 <__sfp+0x64>
 8018d12:	4b16      	ldr	r3, [pc, #88]	; (8018d6c <__sfp+0x88>)
 8018d14:	60e3      	str	r3, [r4, #12]
 8018d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018d1a:	6665      	str	r5, [r4, #100]	; 0x64
 8018d1c:	f7fc fe2e 	bl	801597c <__retarget_lock_init_recursive>
 8018d20:	f7ff ff96 	bl	8018c50 <__sfp_lock_release>
 8018d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018d2c:	6025      	str	r5, [r4, #0]
 8018d2e:	61a5      	str	r5, [r4, #24]
 8018d30:	2208      	movs	r2, #8
 8018d32:	4629      	mov	r1, r5
 8018d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018d38:	f7fc fe5c 	bl	80159f4 <memset>
 8018d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018d44:	4620      	mov	r0, r4
 8018d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d48:	3468      	adds	r4, #104	; 0x68
 8018d4a:	e7d9      	b.n	8018d00 <__sfp+0x1c>
 8018d4c:	2104      	movs	r1, #4
 8018d4e:	4638      	mov	r0, r7
 8018d50:	f7ff ff62 	bl	8018c18 <__sfmoreglue>
 8018d54:	4604      	mov	r4, r0
 8018d56:	6030      	str	r0, [r6, #0]
 8018d58:	2800      	cmp	r0, #0
 8018d5a:	d1d5      	bne.n	8018d08 <__sfp+0x24>
 8018d5c:	f7ff ff78 	bl	8018c50 <__sfp_lock_release>
 8018d60:	230c      	movs	r3, #12
 8018d62:	603b      	str	r3, [r7, #0]
 8018d64:	e7ee      	b.n	8018d44 <__sfp+0x60>
 8018d66:	bf00      	nop
 8018d68:	08039fc4 	.word	0x08039fc4
 8018d6c:	ffff0001 	.word	0xffff0001

08018d70 <_fwalk_reent>:
 8018d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d74:	4606      	mov	r6, r0
 8018d76:	4688      	mov	r8, r1
 8018d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018d7c:	2700      	movs	r7, #0
 8018d7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018d82:	f1b9 0901 	subs.w	r9, r9, #1
 8018d86:	d505      	bpl.n	8018d94 <_fwalk_reent+0x24>
 8018d88:	6824      	ldr	r4, [r4, #0]
 8018d8a:	2c00      	cmp	r4, #0
 8018d8c:	d1f7      	bne.n	8018d7e <_fwalk_reent+0xe>
 8018d8e:	4638      	mov	r0, r7
 8018d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d94:	89ab      	ldrh	r3, [r5, #12]
 8018d96:	2b01      	cmp	r3, #1
 8018d98:	d907      	bls.n	8018daa <_fwalk_reent+0x3a>
 8018d9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d9e:	3301      	adds	r3, #1
 8018da0:	d003      	beq.n	8018daa <_fwalk_reent+0x3a>
 8018da2:	4629      	mov	r1, r5
 8018da4:	4630      	mov	r0, r6
 8018da6:	47c0      	blx	r8
 8018da8:	4307      	orrs	r7, r0
 8018daa:	3568      	adds	r5, #104	; 0x68
 8018dac:	e7e9      	b.n	8018d82 <_fwalk_reent+0x12>

08018dae <rshift>:
 8018dae:	6903      	ldr	r3, [r0, #16]
 8018db0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018db8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018dbc:	f100 0414 	add.w	r4, r0, #20
 8018dc0:	dd45      	ble.n	8018e4e <rshift+0xa0>
 8018dc2:	f011 011f 	ands.w	r1, r1, #31
 8018dc6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018dca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018dce:	d10c      	bne.n	8018dea <rshift+0x3c>
 8018dd0:	f100 0710 	add.w	r7, r0, #16
 8018dd4:	4629      	mov	r1, r5
 8018dd6:	42b1      	cmp	r1, r6
 8018dd8:	d334      	bcc.n	8018e44 <rshift+0x96>
 8018dda:	1a9b      	subs	r3, r3, r2
 8018ddc:	009b      	lsls	r3, r3, #2
 8018dde:	1eea      	subs	r2, r5, #3
 8018de0:	4296      	cmp	r6, r2
 8018de2:	bf38      	it	cc
 8018de4:	2300      	movcc	r3, #0
 8018de6:	4423      	add	r3, r4
 8018de8:	e015      	b.n	8018e16 <rshift+0x68>
 8018dea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018dee:	f1c1 0820 	rsb	r8, r1, #32
 8018df2:	40cf      	lsrs	r7, r1
 8018df4:	f105 0e04 	add.w	lr, r5, #4
 8018df8:	46a1      	mov	r9, r4
 8018dfa:	4576      	cmp	r6, lr
 8018dfc:	46f4      	mov	ip, lr
 8018dfe:	d815      	bhi.n	8018e2c <rshift+0x7e>
 8018e00:	1a9b      	subs	r3, r3, r2
 8018e02:	009a      	lsls	r2, r3, #2
 8018e04:	3a04      	subs	r2, #4
 8018e06:	3501      	adds	r5, #1
 8018e08:	42ae      	cmp	r6, r5
 8018e0a:	bf38      	it	cc
 8018e0c:	2200      	movcc	r2, #0
 8018e0e:	18a3      	adds	r3, r4, r2
 8018e10:	50a7      	str	r7, [r4, r2]
 8018e12:	b107      	cbz	r7, 8018e16 <rshift+0x68>
 8018e14:	3304      	adds	r3, #4
 8018e16:	1b1a      	subs	r2, r3, r4
 8018e18:	42a3      	cmp	r3, r4
 8018e1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018e1e:	bf08      	it	eq
 8018e20:	2300      	moveq	r3, #0
 8018e22:	6102      	str	r2, [r0, #16]
 8018e24:	bf08      	it	eq
 8018e26:	6143      	streq	r3, [r0, #20]
 8018e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e2c:	f8dc c000 	ldr.w	ip, [ip]
 8018e30:	fa0c fc08 	lsl.w	ip, ip, r8
 8018e34:	ea4c 0707 	orr.w	r7, ip, r7
 8018e38:	f849 7b04 	str.w	r7, [r9], #4
 8018e3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018e40:	40cf      	lsrs	r7, r1
 8018e42:	e7da      	b.n	8018dfa <rshift+0x4c>
 8018e44:	f851 cb04 	ldr.w	ip, [r1], #4
 8018e48:	f847 cf04 	str.w	ip, [r7, #4]!
 8018e4c:	e7c3      	b.n	8018dd6 <rshift+0x28>
 8018e4e:	4623      	mov	r3, r4
 8018e50:	e7e1      	b.n	8018e16 <rshift+0x68>

08018e52 <__hexdig_fun>:
 8018e52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018e56:	2b09      	cmp	r3, #9
 8018e58:	d802      	bhi.n	8018e60 <__hexdig_fun+0xe>
 8018e5a:	3820      	subs	r0, #32
 8018e5c:	b2c0      	uxtb	r0, r0
 8018e5e:	4770      	bx	lr
 8018e60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018e64:	2b05      	cmp	r3, #5
 8018e66:	d801      	bhi.n	8018e6c <__hexdig_fun+0x1a>
 8018e68:	3847      	subs	r0, #71	; 0x47
 8018e6a:	e7f7      	b.n	8018e5c <__hexdig_fun+0xa>
 8018e6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018e70:	2b05      	cmp	r3, #5
 8018e72:	d801      	bhi.n	8018e78 <__hexdig_fun+0x26>
 8018e74:	3827      	subs	r0, #39	; 0x27
 8018e76:	e7f1      	b.n	8018e5c <__hexdig_fun+0xa>
 8018e78:	2000      	movs	r0, #0
 8018e7a:	4770      	bx	lr

08018e7c <__gethex>:
 8018e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e80:	ed2d 8b02 	vpush	{d8}
 8018e84:	b089      	sub	sp, #36	; 0x24
 8018e86:	ee08 0a10 	vmov	s16, r0
 8018e8a:	9304      	str	r3, [sp, #16]
 8018e8c:	4bbc      	ldr	r3, [pc, #752]	; (8019180 <__gethex+0x304>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	9301      	str	r3, [sp, #4]
 8018e92:	4618      	mov	r0, r3
 8018e94:	468b      	mov	fp, r1
 8018e96:	4690      	mov	r8, r2
 8018e98:	f7e7 f9c4 	bl	8000224 <strlen>
 8018e9c:	9b01      	ldr	r3, [sp, #4]
 8018e9e:	f8db 2000 	ldr.w	r2, [fp]
 8018ea2:	4403      	add	r3, r0
 8018ea4:	4682      	mov	sl, r0
 8018ea6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018eaa:	9305      	str	r3, [sp, #20]
 8018eac:	1c93      	adds	r3, r2, #2
 8018eae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018eb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018eb6:	32fe      	adds	r2, #254	; 0xfe
 8018eb8:	18d1      	adds	r1, r2, r3
 8018eba:	461f      	mov	r7, r3
 8018ebc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018ec0:	9100      	str	r1, [sp, #0]
 8018ec2:	2830      	cmp	r0, #48	; 0x30
 8018ec4:	d0f8      	beq.n	8018eb8 <__gethex+0x3c>
 8018ec6:	f7ff ffc4 	bl	8018e52 <__hexdig_fun>
 8018eca:	4604      	mov	r4, r0
 8018ecc:	2800      	cmp	r0, #0
 8018ece:	d13a      	bne.n	8018f46 <__gethex+0xca>
 8018ed0:	9901      	ldr	r1, [sp, #4]
 8018ed2:	4652      	mov	r2, sl
 8018ed4:	4638      	mov	r0, r7
 8018ed6:	f7fd ff2d 	bl	8016d34 <strncmp>
 8018eda:	4605      	mov	r5, r0
 8018edc:	2800      	cmp	r0, #0
 8018ede:	d168      	bne.n	8018fb2 <__gethex+0x136>
 8018ee0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018ee4:	eb07 060a 	add.w	r6, r7, sl
 8018ee8:	f7ff ffb3 	bl	8018e52 <__hexdig_fun>
 8018eec:	2800      	cmp	r0, #0
 8018eee:	d062      	beq.n	8018fb6 <__gethex+0x13a>
 8018ef0:	4633      	mov	r3, r6
 8018ef2:	7818      	ldrb	r0, [r3, #0]
 8018ef4:	2830      	cmp	r0, #48	; 0x30
 8018ef6:	461f      	mov	r7, r3
 8018ef8:	f103 0301 	add.w	r3, r3, #1
 8018efc:	d0f9      	beq.n	8018ef2 <__gethex+0x76>
 8018efe:	f7ff ffa8 	bl	8018e52 <__hexdig_fun>
 8018f02:	2301      	movs	r3, #1
 8018f04:	fab0 f480 	clz	r4, r0
 8018f08:	0964      	lsrs	r4, r4, #5
 8018f0a:	4635      	mov	r5, r6
 8018f0c:	9300      	str	r3, [sp, #0]
 8018f0e:	463a      	mov	r2, r7
 8018f10:	4616      	mov	r6, r2
 8018f12:	3201      	adds	r2, #1
 8018f14:	7830      	ldrb	r0, [r6, #0]
 8018f16:	f7ff ff9c 	bl	8018e52 <__hexdig_fun>
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	d1f8      	bne.n	8018f10 <__gethex+0x94>
 8018f1e:	9901      	ldr	r1, [sp, #4]
 8018f20:	4652      	mov	r2, sl
 8018f22:	4630      	mov	r0, r6
 8018f24:	f7fd ff06 	bl	8016d34 <strncmp>
 8018f28:	b980      	cbnz	r0, 8018f4c <__gethex+0xd0>
 8018f2a:	b94d      	cbnz	r5, 8018f40 <__gethex+0xc4>
 8018f2c:	eb06 050a 	add.w	r5, r6, sl
 8018f30:	462a      	mov	r2, r5
 8018f32:	4616      	mov	r6, r2
 8018f34:	3201      	adds	r2, #1
 8018f36:	7830      	ldrb	r0, [r6, #0]
 8018f38:	f7ff ff8b 	bl	8018e52 <__hexdig_fun>
 8018f3c:	2800      	cmp	r0, #0
 8018f3e:	d1f8      	bne.n	8018f32 <__gethex+0xb6>
 8018f40:	1bad      	subs	r5, r5, r6
 8018f42:	00ad      	lsls	r5, r5, #2
 8018f44:	e004      	b.n	8018f50 <__gethex+0xd4>
 8018f46:	2400      	movs	r4, #0
 8018f48:	4625      	mov	r5, r4
 8018f4a:	e7e0      	b.n	8018f0e <__gethex+0x92>
 8018f4c:	2d00      	cmp	r5, #0
 8018f4e:	d1f7      	bne.n	8018f40 <__gethex+0xc4>
 8018f50:	7833      	ldrb	r3, [r6, #0]
 8018f52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018f56:	2b50      	cmp	r3, #80	; 0x50
 8018f58:	d13b      	bne.n	8018fd2 <__gethex+0x156>
 8018f5a:	7873      	ldrb	r3, [r6, #1]
 8018f5c:	2b2b      	cmp	r3, #43	; 0x2b
 8018f5e:	d02c      	beq.n	8018fba <__gethex+0x13e>
 8018f60:	2b2d      	cmp	r3, #45	; 0x2d
 8018f62:	d02e      	beq.n	8018fc2 <__gethex+0x146>
 8018f64:	1c71      	adds	r1, r6, #1
 8018f66:	f04f 0900 	mov.w	r9, #0
 8018f6a:	7808      	ldrb	r0, [r1, #0]
 8018f6c:	f7ff ff71 	bl	8018e52 <__hexdig_fun>
 8018f70:	1e43      	subs	r3, r0, #1
 8018f72:	b2db      	uxtb	r3, r3
 8018f74:	2b18      	cmp	r3, #24
 8018f76:	d82c      	bhi.n	8018fd2 <__gethex+0x156>
 8018f78:	f1a0 0210 	sub.w	r2, r0, #16
 8018f7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018f80:	f7ff ff67 	bl	8018e52 <__hexdig_fun>
 8018f84:	1e43      	subs	r3, r0, #1
 8018f86:	b2db      	uxtb	r3, r3
 8018f88:	2b18      	cmp	r3, #24
 8018f8a:	d91d      	bls.n	8018fc8 <__gethex+0x14c>
 8018f8c:	f1b9 0f00 	cmp.w	r9, #0
 8018f90:	d000      	beq.n	8018f94 <__gethex+0x118>
 8018f92:	4252      	negs	r2, r2
 8018f94:	4415      	add	r5, r2
 8018f96:	f8cb 1000 	str.w	r1, [fp]
 8018f9a:	b1e4      	cbz	r4, 8018fd6 <__gethex+0x15a>
 8018f9c:	9b00      	ldr	r3, [sp, #0]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	bf14      	ite	ne
 8018fa2:	2700      	movne	r7, #0
 8018fa4:	2706      	moveq	r7, #6
 8018fa6:	4638      	mov	r0, r7
 8018fa8:	b009      	add	sp, #36	; 0x24
 8018faa:	ecbd 8b02 	vpop	{d8}
 8018fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb2:	463e      	mov	r6, r7
 8018fb4:	4625      	mov	r5, r4
 8018fb6:	2401      	movs	r4, #1
 8018fb8:	e7ca      	b.n	8018f50 <__gethex+0xd4>
 8018fba:	f04f 0900 	mov.w	r9, #0
 8018fbe:	1cb1      	adds	r1, r6, #2
 8018fc0:	e7d3      	b.n	8018f6a <__gethex+0xee>
 8018fc2:	f04f 0901 	mov.w	r9, #1
 8018fc6:	e7fa      	b.n	8018fbe <__gethex+0x142>
 8018fc8:	230a      	movs	r3, #10
 8018fca:	fb03 0202 	mla	r2, r3, r2, r0
 8018fce:	3a10      	subs	r2, #16
 8018fd0:	e7d4      	b.n	8018f7c <__gethex+0x100>
 8018fd2:	4631      	mov	r1, r6
 8018fd4:	e7df      	b.n	8018f96 <__gethex+0x11a>
 8018fd6:	1bf3      	subs	r3, r6, r7
 8018fd8:	3b01      	subs	r3, #1
 8018fda:	4621      	mov	r1, r4
 8018fdc:	2b07      	cmp	r3, #7
 8018fde:	dc0b      	bgt.n	8018ff8 <__gethex+0x17c>
 8018fe0:	ee18 0a10 	vmov	r0, s16
 8018fe4:	f000 fad8 	bl	8019598 <_Balloc>
 8018fe8:	4604      	mov	r4, r0
 8018fea:	b940      	cbnz	r0, 8018ffe <__gethex+0x182>
 8018fec:	4b65      	ldr	r3, [pc, #404]	; (8019184 <__gethex+0x308>)
 8018fee:	4602      	mov	r2, r0
 8018ff0:	21de      	movs	r1, #222	; 0xde
 8018ff2:	4865      	ldr	r0, [pc, #404]	; (8019188 <__gethex+0x30c>)
 8018ff4:	f7fc fbda 	bl	80157ac <__assert_func>
 8018ff8:	3101      	adds	r1, #1
 8018ffa:	105b      	asrs	r3, r3, #1
 8018ffc:	e7ee      	b.n	8018fdc <__gethex+0x160>
 8018ffe:	f100 0914 	add.w	r9, r0, #20
 8019002:	f04f 0b00 	mov.w	fp, #0
 8019006:	f1ca 0301 	rsb	r3, sl, #1
 801900a:	f8cd 9008 	str.w	r9, [sp, #8]
 801900e:	f8cd b000 	str.w	fp, [sp]
 8019012:	9306      	str	r3, [sp, #24]
 8019014:	42b7      	cmp	r7, r6
 8019016:	d340      	bcc.n	801909a <__gethex+0x21e>
 8019018:	9802      	ldr	r0, [sp, #8]
 801901a:	9b00      	ldr	r3, [sp, #0]
 801901c:	f840 3b04 	str.w	r3, [r0], #4
 8019020:	eba0 0009 	sub.w	r0, r0, r9
 8019024:	1080      	asrs	r0, r0, #2
 8019026:	0146      	lsls	r6, r0, #5
 8019028:	6120      	str	r0, [r4, #16]
 801902a:	4618      	mov	r0, r3
 801902c:	f000 fbaa 	bl	8019784 <__hi0bits>
 8019030:	1a30      	subs	r0, r6, r0
 8019032:	f8d8 6000 	ldr.w	r6, [r8]
 8019036:	42b0      	cmp	r0, r6
 8019038:	dd63      	ble.n	8019102 <__gethex+0x286>
 801903a:	1b87      	subs	r7, r0, r6
 801903c:	4639      	mov	r1, r7
 801903e:	4620      	mov	r0, r4
 8019040:	f000 ff44 	bl	8019ecc <__any_on>
 8019044:	4682      	mov	sl, r0
 8019046:	b1a8      	cbz	r0, 8019074 <__gethex+0x1f8>
 8019048:	1e7b      	subs	r3, r7, #1
 801904a:	1159      	asrs	r1, r3, #5
 801904c:	f003 021f 	and.w	r2, r3, #31
 8019050:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019054:	f04f 0a01 	mov.w	sl, #1
 8019058:	fa0a f202 	lsl.w	r2, sl, r2
 801905c:	420a      	tst	r2, r1
 801905e:	d009      	beq.n	8019074 <__gethex+0x1f8>
 8019060:	4553      	cmp	r3, sl
 8019062:	dd05      	ble.n	8019070 <__gethex+0x1f4>
 8019064:	1eb9      	subs	r1, r7, #2
 8019066:	4620      	mov	r0, r4
 8019068:	f000 ff30 	bl	8019ecc <__any_on>
 801906c:	2800      	cmp	r0, #0
 801906e:	d145      	bne.n	80190fc <__gethex+0x280>
 8019070:	f04f 0a02 	mov.w	sl, #2
 8019074:	4639      	mov	r1, r7
 8019076:	4620      	mov	r0, r4
 8019078:	f7ff fe99 	bl	8018dae <rshift>
 801907c:	443d      	add	r5, r7
 801907e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019082:	42ab      	cmp	r3, r5
 8019084:	da4c      	bge.n	8019120 <__gethex+0x2a4>
 8019086:	ee18 0a10 	vmov	r0, s16
 801908a:	4621      	mov	r1, r4
 801908c:	f000 fac4 	bl	8019618 <_Bfree>
 8019090:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019092:	2300      	movs	r3, #0
 8019094:	6013      	str	r3, [r2, #0]
 8019096:	27a3      	movs	r7, #163	; 0xa3
 8019098:	e785      	b.n	8018fa6 <__gethex+0x12a>
 801909a:	1e73      	subs	r3, r6, #1
 801909c:	9a05      	ldr	r2, [sp, #20]
 801909e:	9303      	str	r3, [sp, #12]
 80190a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80190a4:	4293      	cmp	r3, r2
 80190a6:	d019      	beq.n	80190dc <__gethex+0x260>
 80190a8:	f1bb 0f20 	cmp.w	fp, #32
 80190ac:	d107      	bne.n	80190be <__gethex+0x242>
 80190ae:	9b02      	ldr	r3, [sp, #8]
 80190b0:	9a00      	ldr	r2, [sp, #0]
 80190b2:	f843 2b04 	str.w	r2, [r3], #4
 80190b6:	9302      	str	r3, [sp, #8]
 80190b8:	2300      	movs	r3, #0
 80190ba:	9300      	str	r3, [sp, #0]
 80190bc:	469b      	mov	fp, r3
 80190be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80190c2:	f7ff fec6 	bl	8018e52 <__hexdig_fun>
 80190c6:	9b00      	ldr	r3, [sp, #0]
 80190c8:	f000 000f 	and.w	r0, r0, #15
 80190cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80190d0:	4303      	orrs	r3, r0
 80190d2:	9300      	str	r3, [sp, #0]
 80190d4:	f10b 0b04 	add.w	fp, fp, #4
 80190d8:	9b03      	ldr	r3, [sp, #12]
 80190da:	e00d      	b.n	80190f8 <__gethex+0x27c>
 80190dc:	9b03      	ldr	r3, [sp, #12]
 80190de:	9a06      	ldr	r2, [sp, #24]
 80190e0:	4413      	add	r3, r2
 80190e2:	42bb      	cmp	r3, r7
 80190e4:	d3e0      	bcc.n	80190a8 <__gethex+0x22c>
 80190e6:	4618      	mov	r0, r3
 80190e8:	9901      	ldr	r1, [sp, #4]
 80190ea:	9307      	str	r3, [sp, #28]
 80190ec:	4652      	mov	r2, sl
 80190ee:	f7fd fe21 	bl	8016d34 <strncmp>
 80190f2:	9b07      	ldr	r3, [sp, #28]
 80190f4:	2800      	cmp	r0, #0
 80190f6:	d1d7      	bne.n	80190a8 <__gethex+0x22c>
 80190f8:	461e      	mov	r6, r3
 80190fa:	e78b      	b.n	8019014 <__gethex+0x198>
 80190fc:	f04f 0a03 	mov.w	sl, #3
 8019100:	e7b8      	b.n	8019074 <__gethex+0x1f8>
 8019102:	da0a      	bge.n	801911a <__gethex+0x29e>
 8019104:	1a37      	subs	r7, r6, r0
 8019106:	4621      	mov	r1, r4
 8019108:	ee18 0a10 	vmov	r0, s16
 801910c:	463a      	mov	r2, r7
 801910e:	f000 fc9f 	bl	8019a50 <__lshift>
 8019112:	1bed      	subs	r5, r5, r7
 8019114:	4604      	mov	r4, r0
 8019116:	f100 0914 	add.w	r9, r0, #20
 801911a:	f04f 0a00 	mov.w	sl, #0
 801911e:	e7ae      	b.n	801907e <__gethex+0x202>
 8019120:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019124:	42a8      	cmp	r0, r5
 8019126:	dd72      	ble.n	801920e <__gethex+0x392>
 8019128:	1b45      	subs	r5, r0, r5
 801912a:	42ae      	cmp	r6, r5
 801912c:	dc36      	bgt.n	801919c <__gethex+0x320>
 801912e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019132:	2b02      	cmp	r3, #2
 8019134:	d02a      	beq.n	801918c <__gethex+0x310>
 8019136:	2b03      	cmp	r3, #3
 8019138:	d02c      	beq.n	8019194 <__gethex+0x318>
 801913a:	2b01      	cmp	r3, #1
 801913c:	d115      	bne.n	801916a <__gethex+0x2ee>
 801913e:	42ae      	cmp	r6, r5
 8019140:	d113      	bne.n	801916a <__gethex+0x2ee>
 8019142:	2e01      	cmp	r6, #1
 8019144:	d10b      	bne.n	801915e <__gethex+0x2e2>
 8019146:	9a04      	ldr	r2, [sp, #16]
 8019148:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801914c:	6013      	str	r3, [r2, #0]
 801914e:	2301      	movs	r3, #1
 8019150:	6123      	str	r3, [r4, #16]
 8019152:	f8c9 3000 	str.w	r3, [r9]
 8019156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019158:	2762      	movs	r7, #98	; 0x62
 801915a:	601c      	str	r4, [r3, #0]
 801915c:	e723      	b.n	8018fa6 <__gethex+0x12a>
 801915e:	1e71      	subs	r1, r6, #1
 8019160:	4620      	mov	r0, r4
 8019162:	f000 feb3 	bl	8019ecc <__any_on>
 8019166:	2800      	cmp	r0, #0
 8019168:	d1ed      	bne.n	8019146 <__gethex+0x2ca>
 801916a:	ee18 0a10 	vmov	r0, s16
 801916e:	4621      	mov	r1, r4
 8019170:	f000 fa52 	bl	8019618 <_Bfree>
 8019174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019176:	2300      	movs	r3, #0
 8019178:	6013      	str	r3, [r2, #0]
 801917a:	2750      	movs	r7, #80	; 0x50
 801917c:	e713      	b.n	8018fa6 <__gethex+0x12a>
 801917e:	bf00      	nop
 8019180:	0803a2cc 	.word	0x0803a2cc
 8019184:	0803a1ec 	.word	0x0803a1ec
 8019188:	0803a260 	.word	0x0803a260
 801918c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801918e:	2b00      	cmp	r3, #0
 8019190:	d1eb      	bne.n	801916a <__gethex+0x2ee>
 8019192:	e7d8      	b.n	8019146 <__gethex+0x2ca>
 8019194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019196:	2b00      	cmp	r3, #0
 8019198:	d1d5      	bne.n	8019146 <__gethex+0x2ca>
 801919a:	e7e6      	b.n	801916a <__gethex+0x2ee>
 801919c:	1e6f      	subs	r7, r5, #1
 801919e:	f1ba 0f00 	cmp.w	sl, #0
 80191a2:	d131      	bne.n	8019208 <__gethex+0x38c>
 80191a4:	b127      	cbz	r7, 80191b0 <__gethex+0x334>
 80191a6:	4639      	mov	r1, r7
 80191a8:	4620      	mov	r0, r4
 80191aa:	f000 fe8f 	bl	8019ecc <__any_on>
 80191ae:	4682      	mov	sl, r0
 80191b0:	117b      	asrs	r3, r7, #5
 80191b2:	2101      	movs	r1, #1
 80191b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80191b8:	f007 071f 	and.w	r7, r7, #31
 80191bc:	fa01 f707 	lsl.w	r7, r1, r7
 80191c0:	421f      	tst	r7, r3
 80191c2:	4629      	mov	r1, r5
 80191c4:	4620      	mov	r0, r4
 80191c6:	bf18      	it	ne
 80191c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80191cc:	1b76      	subs	r6, r6, r5
 80191ce:	f7ff fdee 	bl	8018dae <rshift>
 80191d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80191d6:	2702      	movs	r7, #2
 80191d8:	f1ba 0f00 	cmp.w	sl, #0
 80191dc:	d048      	beq.n	8019270 <__gethex+0x3f4>
 80191de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80191e2:	2b02      	cmp	r3, #2
 80191e4:	d015      	beq.n	8019212 <__gethex+0x396>
 80191e6:	2b03      	cmp	r3, #3
 80191e8:	d017      	beq.n	801921a <__gethex+0x39e>
 80191ea:	2b01      	cmp	r3, #1
 80191ec:	d109      	bne.n	8019202 <__gethex+0x386>
 80191ee:	f01a 0f02 	tst.w	sl, #2
 80191f2:	d006      	beq.n	8019202 <__gethex+0x386>
 80191f4:	f8d9 0000 	ldr.w	r0, [r9]
 80191f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80191fc:	f01a 0f01 	tst.w	sl, #1
 8019200:	d10e      	bne.n	8019220 <__gethex+0x3a4>
 8019202:	f047 0710 	orr.w	r7, r7, #16
 8019206:	e033      	b.n	8019270 <__gethex+0x3f4>
 8019208:	f04f 0a01 	mov.w	sl, #1
 801920c:	e7d0      	b.n	80191b0 <__gethex+0x334>
 801920e:	2701      	movs	r7, #1
 8019210:	e7e2      	b.n	80191d8 <__gethex+0x35c>
 8019212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019214:	f1c3 0301 	rsb	r3, r3, #1
 8019218:	9315      	str	r3, [sp, #84]	; 0x54
 801921a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801921c:	2b00      	cmp	r3, #0
 801921e:	d0f0      	beq.n	8019202 <__gethex+0x386>
 8019220:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019224:	f104 0314 	add.w	r3, r4, #20
 8019228:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801922c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019230:	f04f 0c00 	mov.w	ip, #0
 8019234:	4618      	mov	r0, r3
 8019236:	f853 2b04 	ldr.w	r2, [r3], #4
 801923a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801923e:	d01c      	beq.n	801927a <__gethex+0x3fe>
 8019240:	3201      	adds	r2, #1
 8019242:	6002      	str	r2, [r0, #0]
 8019244:	2f02      	cmp	r7, #2
 8019246:	f104 0314 	add.w	r3, r4, #20
 801924a:	d13f      	bne.n	80192cc <__gethex+0x450>
 801924c:	f8d8 2000 	ldr.w	r2, [r8]
 8019250:	3a01      	subs	r2, #1
 8019252:	42b2      	cmp	r2, r6
 8019254:	d10a      	bne.n	801926c <__gethex+0x3f0>
 8019256:	1171      	asrs	r1, r6, #5
 8019258:	2201      	movs	r2, #1
 801925a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801925e:	f006 061f 	and.w	r6, r6, #31
 8019262:	fa02 f606 	lsl.w	r6, r2, r6
 8019266:	421e      	tst	r6, r3
 8019268:	bf18      	it	ne
 801926a:	4617      	movne	r7, r2
 801926c:	f047 0720 	orr.w	r7, r7, #32
 8019270:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019272:	601c      	str	r4, [r3, #0]
 8019274:	9b04      	ldr	r3, [sp, #16]
 8019276:	601d      	str	r5, [r3, #0]
 8019278:	e695      	b.n	8018fa6 <__gethex+0x12a>
 801927a:	4299      	cmp	r1, r3
 801927c:	f843 cc04 	str.w	ip, [r3, #-4]
 8019280:	d8d8      	bhi.n	8019234 <__gethex+0x3b8>
 8019282:	68a3      	ldr	r3, [r4, #8]
 8019284:	459b      	cmp	fp, r3
 8019286:	db19      	blt.n	80192bc <__gethex+0x440>
 8019288:	6861      	ldr	r1, [r4, #4]
 801928a:	ee18 0a10 	vmov	r0, s16
 801928e:	3101      	adds	r1, #1
 8019290:	f000 f982 	bl	8019598 <_Balloc>
 8019294:	4681      	mov	r9, r0
 8019296:	b918      	cbnz	r0, 80192a0 <__gethex+0x424>
 8019298:	4b1a      	ldr	r3, [pc, #104]	; (8019304 <__gethex+0x488>)
 801929a:	4602      	mov	r2, r0
 801929c:	2184      	movs	r1, #132	; 0x84
 801929e:	e6a8      	b.n	8018ff2 <__gethex+0x176>
 80192a0:	6922      	ldr	r2, [r4, #16]
 80192a2:	3202      	adds	r2, #2
 80192a4:	f104 010c 	add.w	r1, r4, #12
 80192a8:	0092      	lsls	r2, r2, #2
 80192aa:	300c      	adds	r0, #12
 80192ac:	f7fc fb7a 	bl	80159a4 <memcpy>
 80192b0:	4621      	mov	r1, r4
 80192b2:	ee18 0a10 	vmov	r0, s16
 80192b6:	f000 f9af 	bl	8019618 <_Bfree>
 80192ba:	464c      	mov	r4, r9
 80192bc:	6923      	ldr	r3, [r4, #16]
 80192be:	1c5a      	adds	r2, r3, #1
 80192c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80192c4:	6122      	str	r2, [r4, #16]
 80192c6:	2201      	movs	r2, #1
 80192c8:	615a      	str	r2, [r3, #20]
 80192ca:	e7bb      	b.n	8019244 <__gethex+0x3c8>
 80192cc:	6922      	ldr	r2, [r4, #16]
 80192ce:	455a      	cmp	r2, fp
 80192d0:	dd0b      	ble.n	80192ea <__gethex+0x46e>
 80192d2:	2101      	movs	r1, #1
 80192d4:	4620      	mov	r0, r4
 80192d6:	f7ff fd6a 	bl	8018dae <rshift>
 80192da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80192de:	3501      	adds	r5, #1
 80192e0:	42ab      	cmp	r3, r5
 80192e2:	f6ff aed0 	blt.w	8019086 <__gethex+0x20a>
 80192e6:	2701      	movs	r7, #1
 80192e8:	e7c0      	b.n	801926c <__gethex+0x3f0>
 80192ea:	f016 061f 	ands.w	r6, r6, #31
 80192ee:	d0fa      	beq.n	80192e6 <__gethex+0x46a>
 80192f0:	449a      	add	sl, r3
 80192f2:	f1c6 0620 	rsb	r6, r6, #32
 80192f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80192fa:	f000 fa43 	bl	8019784 <__hi0bits>
 80192fe:	42b0      	cmp	r0, r6
 8019300:	dbe7      	blt.n	80192d2 <__gethex+0x456>
 8019302:	e7f0      	b.n	80192e6 <__gethex+0x46a>
 8019304:	0803a1ec 	.word	0x0803a1ec

08019308 <L_shift>:
 8019308:	f1c2 0208 	rsb	r2, r2, #8
 801930c:	0092      	lsls	r2, r2, #2
 801930e:	b570      	push	{r4, r5, r6, lr}
 8019310:	f1c2 0620 	rsb	r6, r2, #32
 8019314:	6843      	ldr	r3, [r0, #4]
 8019316:	6804      	ldr	r4, [r0, #0]
 8019318:	fa03 f506 	lsl.w	r5, r3, r6
 801931c:	432c      	orrs	r4, r5
 801931e:	40d3      	lsrs	r3, r2
 8019320:	6004      	str	r4, [r0, #0]
 8019322:	f840 3f04 	str.w	r3, [r0, #4]!
 8019326:	4288      	cmp	r0, r1
 8019328:	d3f4      	bcc.n	8019314 <L_shift+0xc>
 801932a:	bd70      	pop	{r4, r5, r6, pc}

0801932c <__match>:
 801932c:	b530      	push	{r4, r5, lr}
 801932e:	6803      	ldr	r3, [r0, #0]
 8019330:	3301      	adds	r3, #1
 8019332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019336:	b914      	cbnz	r4, 801933e <__match+0x12>
 8019338:	6003      	str	r3, [r0, #0]
 801933a:	2001      	movs	r0, #1
 801933c:	bd30      	pop	{r4, r5, pc}
 801933e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019342:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019346:	2d19      	cmp	r5, #25
 8019348:	bf98      	it	ls
 801934a:	3220      	addls	r2, #32
 801934c:	42a2      	cmp	r2, r4
 801934e:	d0f0      	beq.n	8019332 <__match+0x6>
 8019350:	2000      	movs	r0, #0
 8019352:	e7f3      	b.n	801933c <__match+0x10>

08019354 <__hexnan>:
 8019354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019358:	680b      	ldr	r3, [r1, #0]
 801935a:	6801      	ldr	r1, [r0, #0]
 801935c:	115e      	asrs	r6, r3, #5
 801935e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019362:	f013 031f 	ands.w	r3, r3, #31
 8019366:	b087      	sub	sp, #28
 8019368:	bf18      	it	ne
 801936a:	3604      	addne	r6, #4
 801936c:	2500      	movs	r5, #0
 801936e:	1f37      	subs	r7, r6, #4
 8019370:	4682      	mov	sl, r0
 8019372:	4690      	mov	r8, r2
 8019374:	9301      	str	r3, [sp, #4]
 8019376:	f846 5c04 	str.w	r5, [r6, #-4]
 801937a:	46b9      	mov	r9, r7
 801937c:	463c      	mov	r4, r7
 801937e:	9502      	str	r5, [sp, #8]
 8019380:	46ab      	mov	fp, r5
 8019382:	784a      	ldrb	r2, [r1, #1]
 8019384:	1c4b      	adds	r3, r1, #1
 8019386:	9303      	str	r3, [sp, #12]
 8019388:	b342      	cbz	r2, 80193dc <__hexnan+0x88>
 801938a:	4610      	mov	r0, r2
 801938c:	9105      	str	r1, [sp, #20]
 801938e:	9204      	str	r2, [sp, #16]
 8019390:	f7ff fd5f 	bl	8018e52 <__hexdig_fun>
 8019394:	2800      	cmp	r0, #0
 8019396:	d14f      	bne.n	8019438 <__hexnan+0xe4>
 8019398:	9a04      	ldr	r2, [sp, #16]
 801939a:	9905      	ldr	r1, [sp, #20]
 801939c:	2a20      	cmp	r2, #32
 801939e:	d818      	bhi.n	80193d2 <__hexnan+0x7e>
 80193a0:	9b02      	ldr	r3, [sp, #8]
 80193a2:	459b      	cmp	fp, r3
 80193a4:	dd13      	ble.n	80193ce <__hexnan+0x7a>
 80193a6:	454c      	cmp	r4, r9
 80193a8:	d206      	bcs.n	80193b8 <__hexnan+0x64>
 80193aa:	2d07      	cmp	r5, #7
 80193ac:	dc04      	bgt.n	80193b8 <__hexnan+0x64>
 80193ae:	462a      	mov	r2, r5
 80193b0:	4649      	mov	r1, r9
 80193b2:	4620      	mov	r0, r4
 80193b4:	f7ff ffa8 	bl	8019308 <L_shift>
 80193b8:	4544      	cmp	r4, r8
 80193ba:	d950      	bls.n	801945e <__hexnan+0x10a>
 80193bc:	2300      	movs	r3, #0
 80193be:	f1a4 0904 	sub.w	r9, r4, #4
 80193c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80193c6:	f8cd b008 	str.w	fp, [sp, #8]
 80193ca:	464c      	mov	r4, r9
 80193cc:	461d      	mov	r5, r3
 80193ce:	9903      	ldr	r1, [sp, #12]
 80193d0:	e7d7      	b.n	8019382 <__hexnan+0x2e>
 80193d2:	2a29      	cmp	r2, #41	; 0x29
 80193d4:	d156      	bne.n	8019484 <__hexnan+0x130>
 80193d6:	3102      	adds	r1, #2
 80193d8:	f8ca 1000 	str.w	r1, [sl]
 80193dc:	f1bb 0f00 	cmp.w	fp, #0
 80193e0:	d050      	beq.n	8019484 <__hexnan+0x130>
 80193e2:	454c      	cmp	r4, r9
 80193e4:	d206      	bcs.n	80193f4 <__hexnan+0xa0>
 80193e6:	2d07      	cmp	r5, #7
 80193e8:	dc04      	bgt.n	80193f4 <__hexnan+0xa0>
 80193ea:	462a      	mov	r2, r5
 80193ec:	4649      	mov	r1, r9
 80193ee:	4620      	mov	r0, r4
 80193f0:	f7ff ff8a 	bl	8019308 <L_shift>
 80193f4:	4544      	cmp	r4, r8
 80193f6:	d934      	bls.n	8019462 <__hexnan+0x10e>
 80193f8:	f1a8 0204 	sub.w	r2, r8, #4
 80193fc:	4623      	mov	r3, r4
 80193fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8019402:	f842 1f04 	str.w	r1, [r2, #4]!
 8019406:	429f      	cmp	r7, r3
 8019408:	d2f9      	bcs.n	80193fe <__hexnan+0xaa>
 801940a:	1b3b      	subs	r3, r7, r4
 801940c:	f023 0303 	bic.w	r3, r3, #3
 8019410:	3304      	adds	r3, #4
 8019412:	3401      	adds	r4, #1
 8019414:	3e03      	subs	r6, #3
 8019416:	42b4      	cmp	r4, r6
 8019418:	bf88      	it	hi
 801941a:	2304      	movhi	r3, #4
 801941c:	4443      	add	r3, r8
 801941e:	2200      	movs	r2, #0
 8019420:	f843 2b04 	str.w	r2, [r3], #4
 8019424:	429f      	cmp	r7, r3
 8019426:	d2fb      	bcs.n	8019420 <__hexnan+0xcc>
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	b91b      	cbnz	r3, 8019434 <__hexnan+0xe0>
 801942c:	4547      	cmp	r7, r8
 801942e:	d127      	bne.n	8019480 <__hexnan+0x12c>
 8019430:	2301      	movs	r3, #1
 8019432:	603b      	str	r3, [r7, #0]
 8019434:	2005      	movs	r0, #5
 8019436:	e026      	b.n	8019486 <__hexnan+0x132>
 8019438:	3501      	adds	r5, #1
 801943a:	2d08      	cmp	r5, #8
 801943c:	f10b 0b01 	add.w	fp, fp, #1
 8019440:	dd06      	ble.n	8019450 <__hexnan+0xfc>
 8019442:	4544      	cmp	r4, r8
 8019444:	d9c3      	bls.n	80193ce <__hexnan+0x7a>
 8019446:	2300      	movs	r3, #0
 8019448:	f844 3c04 	str.w	r3, [r4, #-4]
 801944c:	2501      	movs	r5, #1
 801944e:	3c04      	subs	r4, #4
 8019450:	6822      	ldr	r2, [r4, #0]
 8019452:	f000 000f 	and.w	r0, r0, #15
 8019456:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801945a:	6022      	str	r2, [r4, #0]
 801945c:	e7b7      	b.n	80193ce <__hexnan+0x7a>
 801945e:	2508      	movs	r5, #8
 8019460:	e7b5      	b.n	80193ce <__hexnan+0x7a>
 8019462:	9b01      	ldr	r3, [sp, #4]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d0df      	beq.n	8019428 <__hexnan+0xd4>
 8019468:	f04f 32ff 	mov.w	r2, #4294967295
 801946c:	f1c3 0320 	rsb	r3, r3, #32
 8019470:	fa22 f303 	lsr.w	r3, r2, r3
 8019474:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019478:	401a      	ands	r2, r3
 801947a:	f846 2c04 	str.w	r2, [r6, #-4]
 801947e:	e7d3      	b.n	8019428 <__hexnan+0xd4>
 8019480:	3f04      	subs	r7, #4
 8019482:	e7d1      	b.n	8019428 <__hexnan+0xd4>
 8019484:	2004      	movs	r0, #4
 8019486:	b007      	add	sp, #28
 8019488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801948c <_localeconv_r>:
 801948c:	4800      	ldr	r0, [pc, #0]	; (8019490 <_localeconv_r+0x4>)
 801948e:	4770      	bx	lr
 8019490:	200002cc 	.word	0x200002cc

08019494 <__swhatbuf_r>:
 8019494:	b570      	push	{r4, r5, r6, lr}
 8019496:	460e      	mov	r6, r1
 8019498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801949c:	2900      	cmp	r1, #0
 801949e:	b096      	sub	sp, #88	; 0x58
 80194a0:	4614      	mov	r4, r2
 80194a2:	461d      	mov	r5, r3
 80194a4:	da07      	bge.n	80194b6 <__swhatbuf_r+0x22>
 80194a6:	2300      	movs	r3, #0
 80194a8:	602b      	str	r3, [r5, #0]
 80194aa:	89b3      	ldrh	r3, [r6, #12]
 80194ac:	061a      	lsls	r2, r3, #24
 80194ae:	d410      	bmi.n	80194d2 <__swhatbuf_r+0x3e>
 80194b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80194b4:	e00e      	b.n	80194d4 <__swhatbuf_r+0x40>
 80194b6:	466a      	mov	r2, sp
 80194b8:	f000 ff1c 	bl	801a2f4 <_fstat_r>
 80194bc:	2800      	cmp	r0, #0
 80194be:	dbf2      	blt.n	80194a6 <__swhatbuf_r+0x12>
 80194c0:	9a01      	ldr	r2, [sp, #4]
 80194c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80194c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80194ca:	425a      	negs	r2, r3
 80194cc:	415a      	adcs	r2, r3
 80194ce:	602a      	str	r2, [r5, #0]
 80194d0:	e7ee      	b.n	80194b0 <__swhatbuf_r+0x1c>
 80194d2:	2340      	movs	r3, #64	; 0x40
 80194d4:	2000      	movs	r0, #0
 80194d6:	6023      	str	r3, [r4, #0]
 80194d8:	b016      	add	sp, #88	; 0x58
 80194da:	bd70      	pop	{r4, r5, r6, pc}

080194dc <__smakebuf_r>:
 80194dc:	898b      	ldrh	r3, [r1, #12]
 80194de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80194e0:	079d      	lsls	r5, r3, #30
 80194e2:	4606      	mov	r6, r0
 80194e4:	460c      	mov	r4, r1
 80194e6:	d507      	bpl.n	80194f8 <__smakebuf_r+0x1c>
 80194e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80194ec:	6023      	str	r3, [r4, #0]
 80194ee:	6123      	str	r3, [r4, #16]
 80194f0:	2301      	movs	r3, #1
 80194f2:	6163      	str	r3, [r4, #20]
 80194f4:	b002      	add	sp, #8
 80194f6:	bd70      	pop	{r4, r5, r6, pc}
 80194f8:	ab01      	add	r3, sp, #4
 80194fa:	466a      	mov	r2, sp
 80194fc:	f7ff ffca 	bl	8019494 <__swhatbuf_r>
 8019500:	9900      	ldr	r1, [sp, #0]
 8019502:	4605      	mov	r5, r0
 8019504:	4630      	mov	r0, r6
 8019506:	f7fc fadd 	bl	8015ac4 <_malloc_r>
 801950a:	b948      	cbnz	r0, 8019520 <__smakebuf_r+0x44>
 801950c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019510:	059a      	lsls	r2, r3, #22
 8019512:	d4ef      	bmi.n	80194f4 <__smakebuf_r+0x18>
 8019514:	f023 0303 	bic.w	r3, r3, #3
 8019518:	f043 0302 	orr.w	r3, r3, #2
 801951c:	81a3      	strh	r3, [r4, #12]
 801951e:	e7e3      	b.n	80194e8 <__smakebuf_r+0xc>
 8019520:	4b0d      	ldr	r3, [pc, #52]	; (8019558 <__smakebuf_r+0x7c>)
 8019522:	62b3      	str	r3, [r6, #40]	; 0x28
 8019524:	89a3      	ldrh	r3, [r4, #12]
 8019526:	6020      	str	r0, [r4, #0]
 8019528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801952c:	81a3      	strh	r3, [r4, #12]
 801952e:	9b00      	ldr	r3, [sp, #0]
 8019530:	6163      	str	r3, [r4, #20]
 8019532:	9b01      	ldr	r3, [sp, #4]
 8019534:	6120      	str	r0, [r4, #16]
 8019536:	b15b      	cbz	r3, 8019550 <__smakebuf_r+0x74>
 8019538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801953c:	4630      	mov	r0, r6
 801953e:	f000 feeb 	bl	801a318 <_isatty_r>
 8019542:	b128      	cbz	r0, 8019550 <__smakebuf_r+0x74>
 8019544:	89a3      	ldrh	r3, [r4, #12]
 8019546:	f023 0303 	bic.w	r3, r3, #3
 801954a:	f043 0301 	orr.w	r3, r3, #1
 801954e:	81a3      	strh	r3, [r4, #12]
 8019550:	89a0      	ldrh	r0, [r4, #12]
 8019552:	4305      	orrs	r5, r0
 8019554:	81a5      	strh	r5, [r4, #12]
 8019556:	e7cd      	b.n	80194f4 <__smakebuf_r+0x18>
 8019558:	08018c0d 	.word	0x08018c0d

0801955c <__ascii_mbtowc>:
 801955c:	b082      	sub	sp, #8
 801955e:	b901      	cbnz	r1, 8019562 <__ascii_mbtowc+0x6>
 8019560:	a901      	add	r1, sp, #4
 8019562:	b142      	cbz	r2, 8019576 <__ascii_mbtowc+0x1a>
 8019564:	b14b      	cbz	r3, 801957a <__ascii_mbtowc+0x1e>
 8019566:	7813      	ldrb	r3, [r2, #0]
 8019568:	600b      	str	r3, [r1, #0]
 801956a:	7812      	ldrb	r2, [r2, #0]
 801956c:	1e10      	subs	r0, r2, #0
 801956e:	bf18      	it	ne
 8019570:	2001      	movne	r0, #1
 8019572:	b002      	add	sp, #8
 8019574:	4770      	bx	lr
 8019576:	4610      	mov	r0, r2
 8019578:	e7fb      	b.n	8019572 <__ascii_mbtowc+0x16>
 801957a:	f06f 0001 	mvn.w	r0, #1
 801957e:	e7f8      	b.n	8019572 <__ascii_mbtowc+0x16>

08019580 <__malloc_lock>:
 8019580:	4801      	ldr	r0, [pc, #4]	; (8019588 <__malloc_lock+0x8>)
 8019582:	f7fc b9fc 	b.w	801597e <__retarget_lock_acquire_recursive>
 8019586:	bf00      	nop
 8019588:	20000928 	.word	0x20000928

0801958c <__malloc_unlock>:
 801958c:	4801      	ldr	r0, [pc, #4]	; (8019594 <__malloc_unlock+0x8>)
 801958e:	f7fc b9f7 	b.w	8015980 <__retarget_lock_release_recursive>
 8019592:	bf00      	nop
 8019594:	20000928 	.word	0x20000928

08019598 <_Balloc>:
 8019598:	b570      	push	{r4, r5, r6, lr}
 801959a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801959c:	4604      	mov	r4, r0
 801959e:	460d      	mov	r5, r1
 80195a0:	b976      	cbnz	r6, 80195c0 <_Balloc+0x28>
 80195a2:	2010      	movs	r0, #16
 80195a4:	f7fc f9ee 	bl	8015984 <malloc>
 80195a8:	4602      	mov	r2, r0
 80195aa:	6260      	str	r0, [r4, #36]	; 0x24
 80195ac:	b920      	cbnz	r0, 80195b8 <_Balloc+0x20>
 80195ae:	4b18      	ldr	r3, [pc, #96]	; (8019610 <_Balloc+0x78>)
 80195b0:	4818      	ldr	r0, [pc, #96]	; (8019614 <_Balloc+0x7c>)
 80195b2:	2166      	movs	r1, #102	; 0x66
 80195b4:	f7fc f8fa 	bl	80157ac <__assert_func>
 80195b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80195bc:	6006      	str	r6, [r0, #0]
 80195be:	60c6      	str	r6, [r0, #12]
 80195c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80195c2:	68f3      	ldr	r3, [r6, #12]
 80195c4:	b183      	cbz	r3, 80195e8 <_Balloc+0x50>
 80195c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195c8:	68db      	ldr	r3, [r3, #12]
 80195ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80195ce:	b9b8      	cbnz	r0, 8019600 <_Balloc+0x68>
 80195d0:	2101      	movs	r1, #1
 80195d2:	fa01 f605 	lsl.w	r6, r1, r5
 80195d6:	1d72      	adds	r2, r6, #5
 80195d8:	0092      	lsls	r2, r2, #2
 80195da:	4620      	mov	r0, r4
 80195dc:	f7fc fa12 	bl	8015a04 <_calloc_r>
 80195e0:	b160      	cbz	r0, 80195fc <_Balloc+0x64>
 80195e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80195e6:	e00e      	b.n	8019606 <_Balloc+0x6e>
 80195e8:	2221      	movs	r2, #33	; 0x21
 80195ea:	2104      	movs	r1, #4
 80195ec:	4620      	mov	r0, r4
 80195ee:	f7fc fa09 	bl	8015a04 <_calloc_r>
 80195f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195f4:	60f0      	str	r0, [r6, #12]
 80195f6:	68db      	ldr	r3, [r3, #12]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d1e4      	bne.n	80195c6 <_Balloc+0x2e>
 80195fc:	2000      	movs	r0, #0
 80195fe:	bd70      	pop	{r4, r5, r6, pc}
 8019600:	6802      	ldr	r2, [r0, #0]
 8019602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019606:	2300      	movs	r3, #0
 8019608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801960c:	e7f7      	b.n	80195fe <_Balloc+0x66>
 801960e:	bf00      	nop
 8019610:	0803a176 	.word	0x0803a176
 8019614:	0803a2e0 	.word	0x0803a2e0

08019618 <_Bfree>:
 8019618:	b570      	push	{r4, r5, r6, lr}
 801961a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801961c:	4605      	mov	r5, r0
 801961e:	460c      	mov	r4, r1
 8019620:	b976      	cbnz	r6, 8019640 <_Bfree+0x28>
 8019622:	2010      	movs	r0, #16
 8019624:	f7fc f9ae 	bl	8015984 <malloc>
 8019628:	4602      	mov	r2, r0
 801962a:	6268      	str	r0, [r5, #36]	; 0x24
 801962c:	b920      	cbnz	r0, 8019638 <_Bfree+0x20>
 801962e:	4b09      	ldr	r3, [pc, #36]	; (8019654 <_Bfree+0x3c>)
 8019630:	4809      	ldr	r0, [pc, #36]	; (8019658 <_Bfree+0x40>)
 8019632:	218a      	movs	r1, #138	; 0x8a
 8019634:	f7fc f8ba 	bl	80157ac <__assert_func>
 8019638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801963c:	6006      	str	r6, [r0, #0]
 801963e:	60c6      	str	r6, [r0, #12]
 8019640:	b13c      	cbz	r4, 8019652 <_Bfree+0x3a>
 8019642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019644:	6862      	ldr	r2, [r4, #4]
 8019646:	68db      	ldr	r3, [r3, #12]
 8019648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801964c:	6021      	str	r1, [r4, #0]
 801964e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019652:	bd70      	pop	{r4, r5, r6, pc}
 8019654:	0803a176 	.word	0x0803a176
 8019658:	0803a2e0 	.word	0x0803a2e0

0801965c <__multadd>:
 801965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019660:	690e      	ldr	r6, [r1, #16]
 8019662:	4607      	mov	r7, r0
 8019664:	4698      	mov	r8, r3
 8019666:	460c      	mov	r4, r1
 8019668:	f101 0014 	add.w	r0, r1, #20
 801966c:	2300      	movs	r3, #0
 801966e:	6805      	ldr	r5, [r0, #0]
 8019670:	b2a9      	uxth	r1, r5
 8019672:	fb02 8101 	mla	r1, r2, r1, r8
 8019676:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801967a:	0c2d      	lsrs	r5, r5, #16
 801967c:	fb02 c505 	mla	r5, r2, r5, ip
 8019680:	b289      	uxth	r1, r1
 8019682:	3301      	adds	r3, #1
 8019684:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019688:	429e      	cmp	r6, r3
 801968a:	f840 1b04 	str.w	r1, [r0], #4
 801968e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019692:	dcec      	bgt.n	801966e <__multadd+0x12>
 8019694:	f1b8 0f00 	cmp.w	r8, #0
 8019698:	d022      	beq.n	80196e0 <__multadd+0x84>
 801969a:	68a3      	ldr	r3, [r4, #8]
 801969c:	42b3      	cmp	r3, r6
 801969e:	dc19      	bgt.n	80196d4 <__multadd+0x78>
 80196a0:	6861      	ldr	r1, [r4, #4]
 80196a2:	4638      	mov	r0, r7
 80196a4:	3101      	adds	r1, #1
 80196a6:	f7ff ff77 	bl	8019598 <_Balloc>
 80196aa:	4605      	mov	r5, r0
 80196ac:	b928      	cbnz	r0, 80196ba <__multadd+0x5e>
 80196ae:	4602      	mov	r2, r0
 80196b0:	4b0d      	ldr	r3, [pc, #52]	; (80196e8 <__multadd+0x8c>)
 80196b2:	480e      	ldr	r0, [pc, #56]	; (80196ec <__multadd+0x90>)
 80196b4:	21b5      	movs	r1, #181	; 0xb5
 80196b6:	f7fc f879 	bl	80157ac <__assert_func>
 80196ba:	6922      	ldr	r2, [r4, #16]
 80196bc:	3202      	adds	r2, #2
 80196be:	f104 010c 	add.w	r1, r4, #12
 80196c2:	0092      	lsls	r2, r2, #2
 80196c4:	300c      	adds	r0, #12
 80196c6:	f7fc f96d 	bl	80159a4 <memcpy>
 80196ca:	4621      	mov	r1, r4
 80196cc:	4638      	mov	r0, r7
 80196ce:	f7ff ffa3 	bl	8019618 <_Bfree>
 80196d2:	462c      	mov	r4, r5
 80196d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80196d8:	3601      	adds	r6, #1
 80196da:	f8c3 8014 	str.w	r8, [r3, #20]
 80196de:	6126      	str	r6, [r4, #16]
 80196e0:	4620      	mov	r0, r4
 80196e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196e6:	bf00      	nop
 80196e8:	0803a1ec 	.word	0x0803a1ec
 80196ec:	0803a2e0 	.word	0x0803a2e0

080196f0 <__s2b>:
 80196f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196f4:	460c      	mov	r4, r1
 80196f6:	4615      	mov	r5, r2
 80196f8:	461f      	mov	r7, r3
 80196fa:	2209      	movs	r2, #9
 80196fc:	3308      	adds	r3, #8
 80196fe:	4606      	mov	r6, r0
 8019700:	fb93 f3f2 	sdiv	r3, r3, r2
 8019704:	2100      	movs	r1, #0
 8019706:	2201      	movs	r2, #1
 8019708:	429a      	cmp	r2, r3
 801970a:	db09      	blt.n	8019720 <__s2b+0x30>
 801970c:	4630      	mov	r0, r6
 801970e:	f7ff ff43 	bl	8019598 <_Balloc>
 8019712:	b940      	cbnz	r0, 8019726 <__s2b+0x36>
 8019714:	4602      	mov	r2, r0
 8019716:	4b19      	ldr	r3, [pc, #100]	; (801977c <__s2b+0x8c>)
 8019718:	4819      	ldr	r0, [pc, #100]	; (8019780 <__s2b+0x90>)
 801971a:	21ce      	movs	r1, #206	; 0xce
 801971c:	f7fc f846 	bl	80157ac <__assert_func>
 8019720:	0052      	lsls	r2, r2, #1
 8019722:	3101      	adds	r1, #1
 8019724:	e7f0      	b.n	8019708 <__s2b+0x18>
 8019726:	9b08      	ldr	r3, [sp, #32]
 8019728:	6143      	str	r3, [r0, #20]
 801972a:	2d09      	cmp	r5, #9
 801972c:	f04f 0301 	mov.w	r3, #1
 8019730:	6103      	str	r3, [r0, #16]
 8019732:	dd16      	ble.n	8019762 <__s2b+0x72>
 8019734:	f104 0909 	add.w	r9, r4, #9
 8019738:	46c8      	mov	r8, r9
 801973a:	442c      	add	r4, r5
 801973c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019740:	4601      	mov	r1, r0
 8019742:	3b30      	subs	r3, #48	; 0x30
 8019744:	220a      	movs	r2, #10
 8019746:	4630      	mov	r0, r6
 8019748:	f7ff ff88 	bl	801965c <__multadd>
 801974c:	45a0      	cmp	r8, r4
 801974e:	d1f5      	bne.n	801973c <__s2b+0x4c>
 8019750:	f1a5 0408 	sub.w	r4, r5, #8
 8019754:	444c      	add	r4, r9
 8019756:	1b2d      	subs	r5, r5, r4
 8019758:	1963      	adds	r3, r4, r5
 801975a:	42bb      	cmp	r3, r7
 801975c:	db04      	blt.n	8019768 <__s2b+0x78>
 801975e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019762:	340a      	adds	r4, #10
 8019764:	2509      	movs	r5, #9
 8019766:	e7f6      	b.n	8019756 <__s2b+0x66>
 8019768:	f814 3b01 	ldrb.w	r3, [r4], #1
 801976c:	4601      	mov	r1, r0
 801976e:	3b30      	subs	r3, #48	; 0x30
 8019770:	220a      	movs	r2, #10
 8019772:	4630      	mov	r0, r6
 8019774:	f7ff ff72 	bl	801965c <__multadd>
 8019778:	e7ee      	b.n	8019758 <__s2b+0x68>
 801977a:	bf00      	nop
 801977c:	0803a1ec 	.word	0x0803a1ec
 8019780:	0803a2e0 	.word	0x0803a2e0

08019784 <__hi0bits>:
 8019784:	0c03      	lsrs	r3, r0, #16
 8019786:	041b      	lsls	r3, r3, #16
 8019788:	b9d3      	cbnz	r3, 80197c0 <__hi0bits+0x3c>
 801978a:	0400      	lsls	r0, r0, #16
 801978c:	2310      	movs	r3, #16
 801978e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019792:	bf04      	itt	eq
 8019794:	0200      	lsleq	r0, r0, #8
 8019796:	3308      	addeq	r3, #8
 8019798:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801979c:	bf04      	itt	eq
 801979e:	0100      	lsleq	r0, r0, #4
 80197a0:	3304      	addeq	r3, #4
 80197a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80197a6:	bf04      	itt	eq
 80197a8:	0080      	lsleq	r0, r0, #2
 80197aa:	3302      	addeq	r3, #2
 80197ac:	2800      	cmp	r0, #0
 80197ae:	db05      	blt.n	80197bc <__hi0bits+0x38>
 80197b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80197b4:	f103 0301 	add.w	r3, r3, #1
 80197b8:	bf08      	it	eq
 80197ba:	2320      	moveq	r3, #32
 80197bc:	4618      	mov	r0, r3
 80197be:	4770      	bx	lr
 80197c0:	2300      	movs	r3, #0
 80197c2:	e7e4      	b.n	801978e <__hi0bits+0xa>

080197c4 <__lo0bits>:
 80197c4:	6803      	ldr	r3, [r0, #0]
 80197c6:	f013 0207 	ands.w	r2, r3, #7
 80197ca:	4601      	mov	r1, r0
 80197cc:	d00b      	beq.n	80197e6 <__lo0bits+0x22>
 80197ce:	07da      	lsls	r2, r3, #31
 80197d0:	d424      	bmi.n	801981c <__lo0bits+0x58>
 80197d2:	0798      	lsls	r0, r3, #30
 80197d4:	bf49      	itett	mi
 80197d6:	085b      	lsrmi	r3, r3, #1
 80197d8:	089b      	lsrpl	r3, r3, #2
 80197da:	2001      	movmi	r0, #1
 80197dc:	600b      	strmi	r3, [r1, #0]
 80197de:	bf5c      	itt	pl
 80197e0:	600b      	strpl	r3, [r1, #0]
 80197e2:	2002      	movpl	r0, #2
 80197e4:	4770      	bx	lr
 80197e6:	b298      	uxth	r0, r3
 80197e8:	b9b0      	cbnz	r0, 8019818 <__lo0bits+0x54>
 80197ea:	0c1b      	lsrs	r3, r3, #16
 80197ec:	2010      	movs	r0, #16
 80197ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80197f2:	bf04      	itt	eq
 80197f4:	0a1b      	lsreq	r3, r3, #8
 80197f6:	3008      	addeq	r0, #8
 80197f8:	071a      	lsls	r2, r3, #28
 80197fa:	bf04      	itt	eq
 80197fc:	091b      	lsreq	r3, r3, #4
 80197fe:	3004      	addeq	r0, #4
 8019800:	079a      	lsls	r2, r3, #30
 8019802:	bf04      	itt	eq
 8019804:	089b      	lsreq	r3, r3, #2
 8019806:	3002      	addeq	r0, #2
 8019808:	07da      	lsls	r2, r3, #31
 801980a:	d403      	bmi.n	8019814 <__lo0bits+0x50>
 801980c:	085b      	lsrs	r3, r3, #1
 801980e:	f100 0001 	add.w	r0, r0, #1
 8019812:	d005      	beq.n	8019820 <__lo0bits+0x5c>
 8019814:	600b      	str	r3, [r1, #0]
 8019816:	4770      	bx	lr
 8019818:	4610      	mov	r0, r2
 801981a:	e7e8      	b.n	80197ee <__lo0bits+0x2a>
 801981c:	2000      	movs	r0, #0
 801981e:	4770      	bx	lr
 8019820:	2020      	movs	r0, #32
 8019822:	4770      	bx	lr

08019824 <__i2b>:
 8019824:	b510      	push	{r4, lr}
 8019826:	460c      	mov	r4, r1
 8019828:	2101      	movs	r1, #1
 801982a:	f7ff feb5 	bl	8019598 <_Balloc>
 801982e:	4602      	mov	r2, r0
 8019830:	b928      	cbnz	r0, 801983e <__i2b+0x1a>
 8019832:	4b05      	ldr	r3, [pc, #20]	; (8019848 <__i2b+0x24>)
 8019834:	4805      	ldr	r0, [pc, #20]	; (801984c <__i2b+0x28>)
 8019836:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801983a:	f7fb ffb7 	bl	80157ac <__assert_func>
 801983e:	2301      	movs	r3, #1
 8019840:	6144      	str	r4, [r0, #20]
 8019842:	6103      	str	r3, [r0, #16]
 8019844:	bd10      	pop	{r4, pc}
 8019846:	bf00      	nop
 8019848:	0803a1ec 	.word	0x0803a1ec
 801984c:	0803a2e0 	.word	0x0803a2e0

08019850 <__multiply>:
 8019850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019854:	4614      	mov	r4, r2
 8019856:	690a      	ldr	r2, [r1, #16]
 8019858:	6923      	ldr	r3, [r4, #16]
 801985a:	429a      	cmp	r2, r3
 801985c:	bfb8      	it	lt
 801985e:	460b      	movlt	r3, r1
 8019860:	460d      	mov	r5, r1
 8019862:	bfbc      	itt	lt
 8019864:	4625      	movlt	r5, r4
 8019866:	461c      	movlt	r4, r3
 8019868:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801986c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019870:	68ab      	ldr	r3, [r5, #8]
 8019872:	6869      	ldr	r1, [r5, #4]
 8019874:	eb0a 0709 	add.w	r7, sl, r9
 8019878:	42bb      	cmp	r3, r7
 801987a:	b085      	sub	sp, #20
 801987c:	bfb8      	it	lt
 801987e:	3101      	addlt	r1, #1
 8019880:	f7ff fe8a 	bl	8019598 <_Balloc>
 8019884:	b930      	cbnz	r0, 8019894 <__multiply+0x44>
 8019886:	4602      	mov	r2, r0
 8019888:	4b42      	ldr	r3, [pc, #264]	; (8019994 <__multiply+0x144>)
 801988a:	4843      	ldr	r0, [pc, #268]	; (8019998 <__multiply+0x148>)
 801988c:	f240 115d 	movw	r1, #349	; 0x15d
 8019890:	f7fb ff8c 	bl	80157ac <__assert_func>
 8019894:	f100 0614 	add.w	r6, r0, #20
 8019898:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801989c:	4633      	mov	r3, r6
 801989e:	2200      	movs	r2, #0
 80198a0:	4543      	cmp	r3, r8
 80198a2:	d31e      	bcc.n	80198e2 <__multiply+0x92>
 80198a4:	f105 0c14 	add.w	ip, r5, #20
 80198a8:	f104 0314 	add.w	r3, r4, #20
 80198ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80198b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80198b4:	9202      	str	r2, [sp, #8]
 80198b6:	ebac 0205 	sub.w	r2, ip, r5
 80198ba:	3a15      	subs	r2, #21
 80198bc:	f022 0203 	bic.w	r2, r2, #3
 80198c0:	3204      	adds	r2, #4
 80198c2:	f105 0115 	add.w	r1, r5, #21
 80198c6:	458c      	cmp	ip, r1
 80198c8:	bf38      	it	cc
 80198ca:	2204      	movcc	r2, #4
 80198cc:	9201      	str	r2, [sp, #4]
 80198ce:	9a02      	ldr	r2, [sp, #8]
 80198d0:	9303      	str	r3, [sp, #12]
 80198d2:	429a      	cmp	r2, r3
 80198d4:	d808      	bhi.n	80198e8 <__multiply+0x98>
 80198d6:	2f00      	cmp	r7, #0
 80198d8:	dc55      	bgt.n	8019986 <__multiply+0x136>
 80198da:	6107      	str	r7, [r0, #16]
 80198dc:	b005      	add	sp, #20
 80198de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198e2:	f843 2b04 	str.w	r2, [r3], #4
 80198e6:	e7db      	b.n	80198a0 <__multiply+0x50>
 80198e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80198ec:	f1ba 0f00 	cmp.w	sl, #0
 80198f0:	d020      	beq.n	8019934 <__multiply+0xe4>
 80198f2:	f105 0e14 	add.w	lr, r5, #20
 80198f6:	46b1      	mov	r9, r6
 80198f8:	2200      	movs	r2, #0
 80198fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80198fe:	f8d9 b000 	ldr.w	fp, [r9]
 8019902:	b2a1      	uxth	r1, r4
 8019904:	fa1f fb8b 	uxth.w	fp, fp
 8019908:	fb0a b101 	mla	r1, sl, r1, fp
 801990c:	4411      	add	r1, r2
 801990e:	f8d9 2000 	ldr.w	r2, [r9]
 8019912:	0c24      	lsrs	r4, r4, #16
 8019914:	0c12      	lsrs	r2, r2, #16
 8019916:	fb0a 2404 	mla	r4, sl, r4, r2
 801991a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801991e:	b289      	uxth	r1, r1
 8019920:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019924:	45f4      	cmp	ip, lr
 8019926:	f849 1b04 	str.w	r1, [r9], #4
 801992a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801992e:	d8e4      	bhi.n	80198fa <__multiply+0xaa>
 8019930:	9901      	ldr	r1, [sp, #4]
 8019932:	5072      	str	r2, [r6, r1]
 8019934:	9a03      	ldr	r2, [sp, #12]
 8019936:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801993a:	3304      	adds	r3, #4
 801993c:	f1b9 0f00 	cmp.w	r9, #0
 8019940:	d01f      	beq.n	8019982 <__multiply+0x132>
 8019942:	6834      	ldr	r4, [r6, #0]
 8019944:	f105 0114 	add.w	r1, r5, #20
 8019948:	46b6      	mov	lr, r6
 801994a:	f04f 0a00 	mov.w	sl, #0
 801994e:	880a      	ldrh	r2, [r1, #0]
 8019950:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019954:	fb09 b202 	mla	r2, r9, r2, fp
 8019958:	4492      	add	sl, r2
 801995a:	b2a4      	uxth	r4, r4
 801995c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019960:	f84e 4b04 	str.w	r4, [lr], #4
 8019964:	f851 4b04 	ldr.w	r4, [r1], #4
 8019968:	f8be 2000 	ldrh.w	r2, [lr]
 801996c:	0c24      	lsrs	r4, r4, #16
 801996e:	fb09 2404 	mla	r4, r9, r4, r2
 8019972:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019976:	458c      	cmp	ip, r1
 8019978:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801997c:	d8e7      	bhi.n	801994e <__multiply+0xfe>
 801997e:	9a01      	ldr	r2, [sp, #4]
 8019980:	50b4      	str	r4, [r6, r2]
 8019982:	3604      	adds	r6, #4
 8019984:	e7a3      	b.n	80198ce <__multiply+0x7e>
 8019986:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801998a:	2b00      	cmp	r3, #0
 801998c:	d1a5      	bne.n	80198da <__multiply+0x8a>
 801998e:	3f01      	subs	r7, #1
 8019990:	e7a1      	b.n	80198d6 <__multiply+0x86>
 8019992:	bf00      	nop
 8019994:	0803a1ec 	.word	0x0803a1ec
 8019998:	0803a2e0 	.word	0x0803a2e0

0801999c <__pow5mult>:
 801999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199a0:	4615      	mov	r5, r2
 80199a2:	f012 0203 	ands.w	r2, r2, #3
 80199a6:	4606      	mov	r6, r0
 80199a8:	460f      	mov	r7, r1
 80199aa:	d007      	beq.n	80199bc <__pow5mult+0x20>
 80199ac:	4c25      	ldr	r4, [pc, #148]	; (8019a44 <__pow5mult+0xa8>)
 80199ae:	3a01      	subs	r2, #1
 80199b0:	2300      	movs	r3, #0
 80199b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80199b6:	f7ff fe51 	bl	801965c <__multadd>
 80199ba:	4607      	mov	r7, r0
 80199bc:	10ad      	asrs	r5, r5, #2
 80199be:	d03d      	beq.n	8019a3c <__pow5mult+0xa0>
 80199c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80199c2:	b97c      	cbnz	r4, 80199e4 <__pow5mult+0x48>
 80199c4:	2010      	movs	r0, #16
 80199c6:	f7fb ffdd 	bl	8015984 <malloc>
 80199ca:	4602      	mov	r2, r0
 80199cc:	6270      	str	r0, [r6, #36]	; 0x24
 80199ce:	b928      	cbnz	r0, 80199dc <__pow5mult+0x40>
 80199d0:	4b1d      	ldr	r3, [pc, #116]	; (8019a48 <__pow5mult+0xac>)
 80199d2:	481e      	ldr	r0, [pc, #120]	; (8019a4c <__pow5mult+0xb0>)
 80199d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80199d8:	f7fb fee8 	bl	80157ac <__assert_func>
 80199dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80199e0:	6004      	str	r4, [r0, #0]
 80199e2:	60c4      	str	r4, [r0, #12]
 80199e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80199e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80199ec:	b94c      	cbnz	r4, 8019a02 <__pow5mult+0x66>
 80199ee:	f240 2171 	movw	r1, #625	; 0x271
 80199f2:	4630      	mov	r0, r6
 80199f4:	f7ff ff16 	bl	8019824 <__i2b>
 80199f8:	2300      	movs	r3, #0
 80199fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80199fe:	4604      	mov	r4, r0
 8019a00:	6003      	str	r3, [r0, #0]
 8019a02:	f04f 0900 	mov.w	r9, #0
 8019a06:	07eb      	lsls	r3, r5, #31
 8019a08:	d50a      	bpl.n	8019a20 <__pow5mult+0x84>
 8019a0a:	4639      	mov	r1, r7
 8019a0c:	4622      	mov	r2, r4
 8019a0e:	4630      	mov	r0, r6
 8019a10:	f7ff ff1e 	bl	8019850 <__multiply>
 8019a14:	4639      	mov	r1, r7
 8019a16:	4680      	mov	r8, r0
 8019a18:	4630      	mov	r0, r6
 8019a1a:	f7ff fdfd 	bl	8019618 <_Bfree>
 8019a1e:	4647      	mov	r7, r8
 8019a20:	106d      	asrs	r5, r5, #1
 8019a22:	d00b      	beq.n	8019a3c <__pow5mult+0xa0>
 8019a24:	6820      	ldr	r0, [r4, #0]
 8019a26:	b938      	cbnz	r0, 8019a38 <__pow5mult+0x9c>
 8019a28:	4622      	mov	r2, r4
 8019a2a:	4621      	mov	r1, r4
 8019a2c:	4630      	mov	r0, r6
 8019a2e:	f7ff ff0f 	bl	8019850 <__multiply>
 8019a32:	6020      	str	r0, [r4, #0]
 8019a34:	f8c0 9000 	str.w	r9, [r0]
 8019a38:	4604      	mov	r4, r0
 8019a3a:	e7e4      	b.n	8019a06 <__pow5mult+0x6a>
 8019a3c:	4638      	mov	r0, r7
 8019a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a42:	bf00      	nop
 8019a44:	0803a430 	.word	0x0803a430
 8019a48:	0803a176 	.word	0x0803a176
 8019a4c:	0803a2e0 	.word	0x0803a2e0

08019a50 <__lshift>:
 8019a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a54:	460c      	mov	r4, r1
 8019a56:	6849      	ldr	r1, [r1, #4]
 8019a58:	6923      	ldr	r3, [r4, #16]
 8019a5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019a5e:	68a3      	ldr	r3, [r4, #8]
 8019a60:	4607      	mov	r7, r0
 8019a62:	4691      	mov	r9, r2
 8019a64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019a68:	f108 0601 	add.w	r6, r8, #1
 8019a6c:	42b3      	cmp	r3, r6
 8019a6e:	db0b      	blt.n	8019a88 <__lshift+0x38>
 8019a70:	4638      	mov	r0, r7
 8019a72:	f7ff fd91 	bl	8019598 <_Balloc>
 8019a76:	4605      	mov	r5, r0
 8019a78:	b948      	cbnz	r0, 8019a8e <__lshift+0x3e>
 8019a7a:	4602      	mov	r2, r0
 8019a7c:	4b28      	ldr	r3, [pc, #160]	; (8019b20 <__lshift+0xd0>)
 8019a7e:	4829      	ldr	r0, [pc, #164]	; (8019b24 <__lshift+0xd4>)
 8019a80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019a84:	f7fb fe92 	bl	80157ac <__assert_func>
 8019a88:	3101      	adds	r1, #1
 8019a8a:	005b      	lsls	r3, r3, #1
 8019a8c:	e7ee      	b.n	8019a6c <__lshift+0x1c>
 8019a8e:	2300      	movs	r3, #0
 8019a90:	f100 0114 	add.w	r1, r0, #20
 8019a94:	f100 0210 	add.w	r2, r0, #16
 8019a98:	4618      	mov	r0, r3
 8019a9a:	4553      	cmp	r3, sl
 8019a9c:	db33      	blt.n	8019b06 <__lshift+0xb6>
 8019a9e:	6920      	ldr	r0, [r4, #16]
 8019aa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019aa4:	f104 0314 	add.w	r3, r4, #20
 8019aa8:	f019 091f 	ands.w	r9, r9, #31
 8019aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ab0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019ab4:	d02b      	beq.n	8019b0e <__lshift+0xbe>
 8019ab6:	f1c9 0e20 	rsb	lr, r9, #32
 8019aba:	468a      	mov	sl, r1
 8019abc:	2200      	movs	r2, #0
 8019abe:	6818      	ldr	r0, [r3, #0]
 8019ac0:	fa00 f009 	lsl.w	r0, r0, r9
 8019ac4:	4302      	orrs	r2, r0
 8019ac6:	f84a 2b04 	str.w	r2, [sl], #4
 8019aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ace:	459c      	cmp	ip, r3
 8019ad0:	fa22 f20e 	lsr.w	r2, r2, lr
 8019ad4:	d8f3      	bhi.n	8019abe <__lshift+0x6e>
 8019ad6:	ebac 0304 	sub.w	r3, ip, r4
 8019ada:	3b15      	subs	r3, #21
 8019adc:	f023 0303 	bic.w	r3, r3, #3
 8019ae0:	3304      	adds	r3, #4
 8019ae2:	f104 0015 	add.w	r0, r4, #21
 8019ae6:	4584      	cmp	ip, r0
 8019ae8:	bf38      	it	cc
 8019aea:	2304      	movcc	r3, #4
 8019aec:	50ca      	str	r2, [r1, r3]
 8019aee:	b10a      	cbz	r2, 8019af4 <__lshift+0xa4>
 8019af0:	f108 0602 	add.w	r6, r8, #2
 8019af4:	3e01      	subs	r6, #1
 8019af6:	4638      	mov	r0, r7
 8019af8:	612e      	str	r6, [r5, #16]
 8019afa:	4621      	mov	r1, r4
 8019afc:	f7ff fd8c 	bl	8019618 <_Bfree>
 8019b00:	4628      	mov	r0, r5
 8019b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b06:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	e7c5      	b.n	8019a9a <__lshift+0x4a>
 8019b0e:	3904      	subs	r1, #4
 8019b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b14:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b18:	459c      	cmp	ip, r3
 8019b1a:	d8f9      	bhi.n	8019b10 <__lshift+0xc0>
 8019b1c:	e7ea      	b.n	8019af4 <__lshift+0xa4>
 8019b1e:	bf00      	nop
 8019b20:	0803a1ec 	.word	0x0803a1ec
 8019b24:	0803a2e0 	.word	0x0803a2e0

08019b28 <__mcmp>:
 8019b28:	b530      	push	{r4, r5, lr}
 8019b2a:	6902      	ldr	r2, [r0, #16]
 8019b2c:	690c      	ldr	r4, [r1, #16]
 8019b2e:	1b12      	subs	r2, r2, r4
 8019b30:	d10e      	bne.n	8019b50 <__mcmp+0x28>
 8019b32:	f100 0314 	add.w	r3, r0, #20
 8019b36:	3114      	adds	r1, #20
 8019b38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019b3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019b40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019b44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019b48:	42a5      	cmp	r5, r4
 8019b4a:	d003      	beq.n	8019b54 <__mcmp+0x2c>
 8019b4c:	d305      	bcc.n	8019b5a <__mcmp+0x32>
 8019b4e:	2201      	movs	r2, #1
 8019b50:	4610      	mov	r0, r2
 8019b52:	bd30      	pop	{r4, r5, pc}
 8019b54:	4283      	cmp	r3, r0
 8019b56:	d3f3      	bcc.n	8019b40 <__mcmp+0x18>
 8019b58:	e7fa      	b.n	8019b50 <__mcmp+0x28>
 8019b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8019b5e:	e7f7      	b.n	8019b50 <__mcmp+0x28>

08019b60 <__mdiff>:
 8019b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b64:	460c      	mov	r4, r1
 8019b66:	4606      	mov	r6, r0
 8019b68:	4611      	mov	r1, r2
 8019b6a:	4620      	mov	r0, r4
 8019b6c:	4617      	mov	r7, r2
 8019b6e:	f7ff ffdb 	bl	8019b28 <__mcmp>
 8019b72:	1e05      	subs	r5, r0, #0
 8019b74:	d110      	bne.n	8019b98 <__mdiff+0x38>
 8019b76:	4629      	mov	r1, r5
 8019b78:	4630      	mov	r0, r6
 8019b7a:	f7ff fd0d 	bl	8019598 <_Balloc>
 8019b7e:	b930      	cbnz	r0, 8019b8e <__mdiff+0x2e>
 8019b80:	4b39      	ldr	r3, [pc, #228]	; (8019c68 <__mdiff+0x108>)
 8019b82:	4602      	mov	r2, r0
 8019b84:	f240 2132 	movw	r1, #562	; 0x232
 8019b88:	4838      	ldr	r0, [pc, #224]	; (8019c6c <__mdiff+0x10c>)
 8019b8a:	f7fb fe0f 	bl	80157ac <__assert_func>
 8019b8e:	2301      	movs	r3, #1
 8019b90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b98:	bfa4      	itt	ge
 8019b9a:	463b      	movge	r3, r7
 8019b9c:	4627      	movge	r7, r4
 8019b9e:	4630      	mov	r0, r6
 8019ba0:	6879      	ldr	r1, [r7, #4]
 8019ba2:	bfa6      	itte	ge
 8019ba4:	461c      	movge	r4, r3
 8019ba6:	2500      	movge	r5, #0
 8019ba8:	2501      	movlt	r5, #1
 8019baa:	f7ff fcf5 	bl	8019598 <_Balloc>
 8019bae:	b920      	cbnz	r0, 8019bba <__mdiff+0x5a>
 8019bb0:	4b2d      	ldr	r3, [pc, #180]	; (8019c68 <__mdiff+0x108>)
 8019bb2:	4602      	mov	r2, r0
 8019bb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019bb8:	e7e6      	b.n	8019b88 <__mdiff+0x28>
 8019bba:	693e      	ldr	r6, [r7, #16]
 8019bbc:	60c5      	str	r5, [r0, #12]
 8019bbe:	6925      	ldr	r5, [r4, #16]
 8019bc0:	f107 0114 	add.w	r1, r7, #20
 8019bc4:	f104 0914 	add.w	r9, r4, #20
 8019bc8:	f100 0e14 	add.w	lr, r0, #20
 8019bcc:	f107 0210 	add.w	r2, r7, #16
 8019bd0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019bd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019bd8:	46f2      	mov	sl, lr
 8019bda:	2700      	movs	r7, #0
 8019bdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8019be0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019be4:	fa1f f883 	uxth.w	r8, r3
 8019be8:	fa17 f78b 	uxtah	r7, r7, fp
 8019bec:	0c1b      	lsrs	r3, r3, #16
 8019bee:	eba7 0808 	sub.w	r8, r7, r8
 8019bf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019bf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019bfa:	fa1f f888 	uxth.w	r8, r8
 8019bfe:	141f      	asrs	r7, r3, #16
 8019c00:	454d      	cmp	r5, r9
 8019c02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019c06:	f84a 3b04 	str.w	r3, [sl], #4
 8019c0a:	d8e7      	bhi.n	8019bdc <__mdiff+0x7c>
 8019c0c:	1b2b      	subs	r3, r5, r4
 8019c0e:	3b15      	subs	r3, #21
 8019c10:	f023 0303 	bic.w	r3, r3, #3
 8019c14:	3304      	adds	r3, #4
 8019c16:	3415      	adds	r4, #21
 8019c18:	42a5      	cmp	r5, r4
 8019c1a:	bf38      	it	cc
 8019c1c:	2304      	movcc	r3, #4
 8019c1e:	4419      	add	r1, r3
 8019c20:	4473      	add	r3, lr
 8019c22:	469e      	mov	lr, r3
 8019c24:	460d      	mov	r5, r1
 8019c26:	4565      	cmp	r5, ip
 8019c28:	d30e      	bcc.n	8019c48 <__mdiff+0xe8>
 8019c2a:	f10c 0203 	add.w	r2, ip, #3
 8019c2e:	1a52      	subs	r2, r2, r1
 8019c30:	f022 0203 	bic.w	r2, r2, #3
 8019c34:	3903      	subs	r1, #3
 8019c36:	458c      	cmp	ip, r1
 8019c38:	bf38      	it	cc
 8019c3a:	2200      	movcc	r2, #0
 8019c3c:	441a      	add	r2, r3
 8019c3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019c42:	b17b      	cbz	r3, 8019c64 <__mdiff+0x104>
 8019c44:	6106      	str	r6, [r0, #16]
 8019c46:	e7a5      	b.n	8019b94 <__mdiff+0x34>
 8019c48:	f855 8b04 	ldr.w	r8, [r5], #4
 8019c4c:	fa17 f488 	uxtah	r4, r7, r8
 8019c50:	1422      	asrs	r2, r4, #16
 8019c52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019c56:	b2a4      	uxth	r4, r4
 8019c58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019c5c:	f84e 4b04 	str.w	r4, [lr], #4
 8019c60:	1417      	asrs	r7, r2, #16
 8019c62:	e7e0      	b.n	8019c26 <__mdiff+0xc6>
 8019c64:	3e01      	subs	r6, #1
 8019c66:	e7ea      	b.n	8019c3e <__mdiff+0xde>
 8019c68:	0803a1ec 	.word	0x0803a1ec
 8019c6c:	0803a2e0 	.word	0x0803a2e0

08019c70 <__ulp>:
 8019c70:	b082      	sub	sp, #8
 8019c72:	ed8d 0b00 	vstr	d0, [sp]
 8019c76:	9b01      	ldr	r3, [sp, #4]
 8019c78:	4912      	ldr	r1, [pc, #72]	; (8019cc4 <__ulp+0x54>)
 8019c7a:	4019      	ands	r1, r3
 8019c7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019c80:	2900      	cmp	r1, #0
 8019c82:	dd05      	ble.n	8019c90 <__ulp+0x20>
 8019c84:	2200      	movs	r2, #0
 8019c86:	460b      	mov	r3, r1
 8019c88:	ec43 2b10 	vmov	d0, r2, r3
 8019c8c:	b002      	add	sp, #8
 8019c8e:	4770      	bx	lr
 8019c90:	4249      	negs	r1, r1
 8019c92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019c96:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019c9a:	f04f 0200 	mov.w	r2, #0
 8019c9e:	f04f 0300 	mov.w	r3, #0
 8019ca2:	da04      	bge.n	8019cae <__ulp+0x3e>
 8019ca4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019ca8:	fa41 f300 	asr.w	r3, r1, r0
 8019cac:	e7ec      	b.n	8019c88 <__ulp+0x18>
 8019cae:	f1a0 0114 	sub.w	r1, r0, #20
 8019cb2:	291e      	cmp	r1, #30
 8019cb4:	bfda      	itte	le
 8019cb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019cba:	fa20 f101 	lsrle.w	r1, r0, r1
 8019cbe:	2101      	movgt	r1, #1
 8019cc0:	460a      	mov	r2, r1
 8019cc2:	e7e1      	b.n	8019c88 <__ulp+0x18>
 8019cc4:	7ff00000 	.word	0x7ff00000

08019cc8 <__b2d>:
 8019cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cca:	6905      	ldr	r5, [r0, #16]
 8019ccc:	f100 0714 	add.w	r7, r0, #20
 8019cd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019cd4:	1f2e      	subs	r6, r5, #4
 8019cd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019cda:	4620      	mov	r0, r4
 8019cdc:	f7ff fd52 	bl	8019784 <__hi0bits>
 8019ce0:	f1c0 0320 	rsb	r3, r0, #32
 8019ce4:	280a      	cmp	r0, #10
 8019ce6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019d64 <__b2d+0x9c>
 8019cea:	600b      	str	r3, [r1, #0]
 8019cec:	dc14      	bgt.n	8019d18 <__b2d+0x50>
 8019cee:	f1c0 0e0b 	rsb	lr, r0, #11
 8019cf2:	fa24 f10e 	lsr.w	r1, r4, lr
 8019cf6:	42b7      	cmp	r7, r6
 8019cf8:	ea41 030c 	orr.w	r3, r1, ip
 8019cfc:	bf34      	ite	cc
 8019cfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d02:	2100      	movcs	r1, #0
 8019d04:	3015      	adds	r0, #21
 8019d06:	fa04 f000 	lsl.w	r0, r4, r0
 8019d0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8019d0e:	ea40 0201 	orr.w	r2, r0, r1
 8019d12:	ec43 2b10 	vmov	d0, r2, r3
 8019d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d18:	42b7      	cmp	r7, r6
 8019d1a:	bf3a      	itte	cc
 8019d1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d20:	f1a5 0608 	subcc.w	r6, r5, #8
 8019d24:	2100      	movcs	r1, #0
 8019d26:	380b      	subs	r0, #11
 8019d28:	d017      	beq.n	8019d5a <__b2d+0x92>
 8019d2a:	f1c0 0c20 	rsb	ip, r0, #32
 8019d2e:	fa04 f500 	lsl.w	r5, r4, r0
 8019d32:	42be      	cmp	r6, r7
 8019d34:	fa21 f40c 	lsr.w	r4, r1, ip
 8019d38:	ea45 0504 	orr.w	r5, r5, r4
 8019d3c:	bf8c      	ite	hi
 8019d3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019d42:	2400      	movls	r4, #0
 8019d44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019d48:	fa01 f000 	lsl.w	r0, r1, r0
 8019d4c:	fa24 f40c 	lsr.w	r4, r4, ip
 8019d50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019d54:	ea40 0204 	orr.w	r2, r0, r4
 8019d58:	e7db      	b.n	8019d12 <__b2d+0x4a>
 8019d5a:	ea44 030c 	orr.w	r3, r4, ip
 8019d5e:	460a      	mov	r2, r1
 8019d60:	e7d7      	b.n	8019d12 <__b2d+0x4a>
 8019d62:	bf00      	nop
 8019d64:	3ff00000 	.word	0x3ff00000

08019d68 <__d2b>:
 8019d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019d6c:	4689      	mov	r9, r1
 8019d6e:	2101      	movs	r1, #1
 8019d70:	ec57 6b10 	vmov	r6, r7, d0
 8019d74:	4690      	mov	r8, r2
 8019d76:	f7ff fc0f 	bl	8019598 <_Balloc>
 8019d7a:	4604      	mov	r4, r0
 8019d7c:	b930      	cbnz	r0, 8019d8c <__d2b+0x24>
 8019d7e:	4602      	mov	r2, r0
 8019d80:	4b25      	ldr	r3, [pc, #148]	; (8019e18 <__d2b+0xb0>)
 8019d82:	4826      	ldr	r0, [pc, #152]	; (8019e1c <__d2b+0xb4>)
 8019d84:	f240 310a 	movw	r1, #778	; 0x30a
 8019d88:	f7fb fd10 	bl	80157ac <__assert_func>
 8019d8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019d90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019d94:	bb35      	cbnz	r5, 8019de4 <__d2b+0x7c>
 8019d96:	2e00      	cmp	r6, #0
 8019d98:	9301      	str	r3, [sp, #4]
 8019d9a:	d028      	beq.n	8019dee <__d2b+0x86>
 8019d9c:	4668      	mov	r0, sp
 8019d9e:	9600      	str	r6, [sp, #0]
 8019da0:	f7ff fd10 	bl	80197c4 <__lo0bits>
 8019da4:	9900      	ldr	r1, [sp, #0]
 8019da6:	b300      	cbz	r0, 8019dea <__d2b+0x82>
 8019da8:	9a01      	ldr	r2, [sp, #4]
 8019daa:	f1c0 0320 	rsb	r3, r0, #32
 8019dae:	fa02 f303 	lsl.w	r3, r2, r3
 8019db2:	430b      	orrs	r3, r1
 8019db4:	40c2      	lsrs	r2, r0
 8019db6:	6163      	str	r3, [r4, #20]
 8019db8:	9201      	str	r2, [sp, #4]
 8019dba:	9b01      	ldr	r3, [sp, #4]
 8019dbc:	61a3      	str	r3, [r4, #24]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	bf14      	ite	ne
 8019dc2:	2202      	movne	r2, #2
 8019dc4:	2201      	moveq	r2, #1
 8019dc6:	6122      	str	r2, [r4, #16]
 8019dc8:	b1d5      	cbz	r5, 8019e00 <__d2b+0x98>
 8019dca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019dce:	4405      	add	r5, r0
 8019dd0:	f8c9 5000 	str.w	r5, [r9]
 8019dd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019dd8:	f8c8 0000 	str.w	r0, [r8]
 8019ddc:	4620      	mov	r0, r4
 8019dde:	b003      	add	sp, #12
 8019de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019de8:	e7d5      	b.n	8019d96 <__d2b+0x2e>
 8019dea:	6161      	str	r1, [r4, #20]
 8019dec:	e7e5      	b.n	8019dba <__d2b+0x52>
 8019dee:	a801      	add	r0, sp, #4
 8019df0:	f7ff fce8 	bl	80197c4 <__lo0bits>
 8019df4:	9b01      	ldr	r3, [sp, #4]
 8019df6:	6163      	str	r3, [r4, #20]
 8019df8:	2201      	movs	r2, #1
 8019dfa:	6122      	str	r2, [r4, #16]
 8019dfc:	3020      	adds	r0, #32
 8019dfe:	e7e3      	b.n	8019dc8 <__d2b+0x60>
 8019e00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019e04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019e08:	f8c9 0000 	str.w	r0, [r9]
 8019e0c:	6918      	ldr	r0, [r3, #16]
 8019e0e:	f7ff fcb9 	bl	8019784 <__hi0bits>
 8019e12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019e16:	e7df      	b.n	8019dd8 <__d2b+0x70>
 8019e18:	0803a1ec 	.word	0x0803a1ec
 8019e1c:	0803a2e0 	.word	0x0803a2e0

08019e20 <__ratio>:
 8019e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e24:	4688      	mov	r8, r1
 8019e26:	4669      	mov	r1, sp
 8019e28:	4681      	mov	r9, r0
 8019e2a:	f7ff ff4d 	bl	8019cc8 <__b2d>
 8019e2e:	a901      	add	r1, sp, #4
 8019e30:	4640      	mov	r0, r8
 8019e32:	ec55 4b10 	vmov	r4, r5, d0
 8019e36:	f7ff ff47 	bl	8019cc8 <__b2d>
 8019e3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019e3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019e42:	eba3 0c02 	sub.w	ip, r3, r2
 8019e46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019e4a:	1a9b      	subs	r3, r3, r2
 8019e4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019e50:	ec51 0b10 	vmov	r0, r1, d0
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	bfd6      	itet	le
 8019e58:	460a      	movle	r2, r1
 8019e5a:	462a      	movgt	r2, r5
 8019e5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019e60:	468b      	mov	fp, r1
 8019e62:	462f      	mov	r7, r5
 8019e64:	bfd4      	ite	le
 8019e66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019e6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019e6e:	4620      	mov	r0, r4
 8019e70:	ee10 2a10 	vmov	r2, s0
 8019e74:	465b      	mov	r3, fp
 8019e76:	4639      	mov	r1, r7
 8019e78:	f7e6 fd18 	bl	80008ac <__aeabi_ddiv>
 8019e7c:	ec41 0b10 	vmov	d0, r0, r1
 8019e80:	b003      	add	sp, #12
 8019e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e86 <__copybits>:
 8019e86:	3901      	subs	r1, #1
 8019e88:	b570      	push	{r4, r5, r6, lr}
 8019e8a:	1149      	asrs	r1, r1, #5
 8019e8c:	6914      	ldr	r4, [r2, #16]
 8019e8e:	3101      	adds	r1, #1
 8019e90:	f102 0314 	add.w	r3, r2, #20
 8019e94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019e98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019e9c:	1f05      	subs	r5, r0, #4
 8019e9e:	42a3      	cmp	r3, r4
 8019ea0:	d30c      	bcc.n	8019ebc <__copybits+0x36>
 8019ea2:	1aa3      	subs	r3, r4, r2
 8019ea4:	3b11      	subs	r3, #17
 8019ea6:	f023 0303 	bic.w	r3, r3, #3
 8019eaa:	3211      	adds	r2, #17
 8019eac:	42a2      	cmp	r2, r4
 8019eae:	bf88      	it	hi
 8019eb0:	2300      	movhi	r3, #0
 8019eb2:	4418      	add	r0, r3
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	4288      	cmp	r0, r1
 8019eb8:	d305      	bcc.n	8019ec6 <__copybits+0x40>
 8019eba:	bd70      	pop	{r4, r5, r6, pc}
 8019ebc:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ec0:	f845 6f04 	str.w	r6, [r5, #4]!
 8019ec4:	e7eb      	b.n	8019e9e <__copybits+0x18>
 8019ec6:	f840 3b04 	str.w	r3, [r0], #4
 8019eca:	e7f4      	b.n	8019eb6 <__copybits+0x30>

08019ecc <__any_on>:
 8019ecc:	f100 0214 	add.w	r2, r0, #20
 8019ed0:	6900      	ldr	r0, [r0, #16]
 8019ed2:	114b      	asrs	r3, r1, #5
 8019ed4:	4298      	cmp	r0, r3
 8019ed6:	b510      	push	{r4, lr}
 8019ed8:	db11      	blt.n	8019efe <__any_on+0x32>
 8019eda:	dd0a      	ble.n	8019ef2 <__any_on+0x26>
 8019edc:	f011 011f 	ands.w	r1, r1, #31
 8019ee0:	d007      	beq.n	8019ef2 <__any_on+0x26>
 8019ee2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019ee6:	fa24 f001 	lsr.w	r0, r4, r1
 8019eea:	fa00 f101 	lsl.w	r1, r0, r1
 8019eee:	428c      	cmp	r4, r1
 8019ef0:	d10b      	bne.n	8019f0a <__any_on+0x3e>
 8019ef2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019ef6:	4293      	cmp	r3, r2
 8019ef8:	d803      	bhi.n	8019f02 <__any_on+0x36>
 8019efa:	2000      	movs	r0, #0
 8019efc:	bd10      	pop	{r4, pc}
 8019efe:	4603      	mov	r3, r0
 8019f00:	e7f7      	b.n	8019ef2 <__any_on+0x26>
 8019f02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019f06:	2900      	cmp	r1, #0
 8019f08:	d0f5      	beq.n	8019ef6 <__any_on+0x2a>
 8019f0a:	2001      	movs	r0, #1
 8019f0c:	e7f6      	b.n	8019efc <__any_on+0x30>

08019f0e <_realloc_r>:
 8019f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f10:	4607      	mov	r7, r0
 8019f12:	4614      	mov	r4, r2
 8019f14:	460e      	mov	r6, r1
 8019f16:	b921      	cbnz	r1, 8019f22 <_realloc_r+0x14>
 8019f18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f1c:	4611      	mov	r1, r2
 8019f1e:	f7fb bdd1 	b.w	8015ac4 <_malloc_r>
 8019f22:	b922      	cbnz	r2, 8019f2e <_realloc_r+0x20>
 8019f24:	f7fb fd7e 	bl	8015a24 <_free_r>
 8019f28:	4625      	mov	r5, r4
 8019f2a:	4628      	mov	r0, r5
 8019f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f2e:	f000 fa15 	bl	801a35c <_malloc_usable_size_r>
 8019f32:	42a0      	cmp	r0, r4
 8019f34:	d20f      	bcs.n	8019f56 <_realloc_r+0x48>
 8019f36:	4621      	mov	r1, r4
 8019f38:	4638      	mov	r0, r7
 8019f3a:	f7fb fdc3 	bl	8015ac4 <_malloc_r>
 8019f3e:	4605      	mov	r5, r0
 8019f40:	2800      	cmp	r0, #0
 8019f42:	d0f2      	beq.n	8019f2a <_realloc_r+0x1c>
 8019f44:	4631      	mov	r1, r6
 8019f46:	4622      	mov	r2, r4
 8019f48:	f7fb fd2c 	bl	80159a4 <memcpy>
 8019f4c:	4631      	mov	r1, r6
 8019f4e:	4638      	mov	r0, r7
 8019f50:	f7fb fd68 	bl	8015a24 <_free_r>
 8019f54:	e7e9      	b.n	8019f2a <_realloc_r+0x1c>
 8019f56:	4635      	mov	r5, r6
 8019f58:	e7e7      	b.n	8019f2a <_realloc_r+0x1c>

08019f5a <__ssputs_r>:
 8019f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f5e:	688e      	ldr	r6, [r1, #8]
 8019f60:	429e      	cmp	r6, r3
 8019f62:	4682      	mov	sl, r0
 8019f64:	460c      	mov	r4, r1
 8019f66:	4690      	mov	r8, r2
 8019f68:	461f      	mov	r7, r3
 8019f6a:	d838      	bhi.n	8019fde <__ssputs_r+0x84>
 8019f6c:	898a      	ldrh	r2, [r1, #12]
 8019f6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019f72:	d032      	beq.n	8019fda <__ssputs_r+0x80>
 8019f74:	6825      	ldr	r5, [r4, #0]
 8019f76:	6909      	ldr	r1, [r1, #16]
 8019f78:	eba5 0901 	sub.w	r9, r5, r1
 8019f7c:	6965      	ldr	r5, [r4, #20]
 8019f7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f86:	3301      	adds	r3, #1
 8019f88:	444b      	add	r3, r9
 8019f8a:	106d      	asrs	r5, r5, #1
 8019f8c:	429d      	cmp	r5, r3
 8019f8e:	bf38      	it	cc
 8019f90:	461d      	movcc	r5, r3
 8019f92:	0553      	lsls	r3, r2, #21
 8019f94:	d531      	bpl.n	8019ffa <__ssputs_r+0xa0>
 8019f96:	4629      	mov	r1, r5
 8019f98:	f7fb fd94 	bl	8015ac4 <_malloc_r>
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	b950      	cbnz	r0, 8019fb6 <__ssputs_r+0x5c>
 8019fa0:	230c      	movs	r3, #12
 8019fa2:	f8ca 3000 	str.w	r3, [sl]
 8019fa6:	89a3      	ldrh	r3, [r4, #12]
 8019fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fac:	81a3      	strh	r3, [r4, #12]
 8019fae:	f04f 30ff 	mov.w	r0, #4294967295
 8019fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fb6:	6921      	ldr	r1, [r4, #16]
 8019fb8:	464a      	mov	r2, r9
 8019fba:	f7fb fcf3 	bl	80159a4 <memcpy>
 8019fbe:	89a3      	ldrh	r3, [r4, #12]
 8019fc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fc8:	81a3      	strh	r3, [r4, #12]
 8019fca:	6126      	str	r6, [r4, #16]
 8019fcc:	6165      	str	r5, [r4, #20]
 8019fce:	444e      	add	r6, r9
 8019fd0:	eba5 0509 	sub.w	r5, r5, r9
 8019fd4:	6026      	str	r6, [r4, #0]
 8019fd6:	60a5      	str	r5, [r4, #8]
 8019fd8:	463e      	mov	r6, r7
 8019fda:	42be      	cmp	r6, r7
 8019fdc:	d900      	bls.n	8019fe0 <__ssputs_r+0x86>
 8019fde:	463e      	mov	r6, r7
 8019fe0:	4632      	mov	r2, r6
 8019fe2:	6820      	ldr	r0, [r4, #0]
 8019fe4:	4641      	mov	r1, r8
 8019fe6:	f7fb fceb 	bl	80159c0 <memmove>
 8019fea:	68a3      	ldr	r3, [r4, #8]
 8019fec:	6822      	ldr	r2, [r4, #0]
 8019fee:	1b9b      	subs	r3, r3, r6
 8019ff0:	4432      	add	r2, r6
 8019ff2:	60a3      	str	r3, [r4, #8]
 8019ff4:	6022      	str	r2, [r4, #0]
 8019ff6:	2000      	movs	r0, #0
 8019ff8:	e7db      	b.n	8019fb2 <__ssputs_r+0x58>
 8019ffa:	462a      	mov	r2, r5
 8019ffc:	f7ff ff87 	bl	8019f0e <_realloc_r>
 801a000:	4606      	mov	r6, r0
 801a002:	2800      	cmp	r0, #0
 801a004:	d1e1      	bne.n	8019fca <__ssputs_r+0x70>
 801a006:	6921      	ldr	r1, [r4, #16]
 801a008:	4650      	mov	r0, sl
 801a00a:	f7fb fd0b 	bl	8015a24 <_free_r>
 801a00e:	e7c7      	b.n	8019fa0 <__ssputs_r+0x46>

0801a010 <_svfiprintf_r>:
 801a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a014:	4698      	mov	r8, r3
 801a016:	898b      	ldrh	r3, [r1, #12]
 801a018:	061b      	lsls	r3, r3, #24
 801a01a:	b09d      	sub	sp, #116	; 0x74
 801a01c:	4607      	mov	r7, r0
 801a01e:	460d      	mov	r5, r1
 801a020:	4614      	mov	r4, r2
 801a022:	d50e      	bpl.n	801a042 <_svfiprintf_r+0x32>
 801a024:	690b      	ldr	r3, [r1, #16]
 801a026:	b963      	cbnz	r3, 801a042 <_svfiprintf_r+0x32>
 801a028:	2140      	movs	r1, #64	; 0x40
 801a02a:	f7fb fd4b 	bl	8015ac4 <_malloc_r>
 801a02e:	6028      	str	r0, [r5, #0]
 801a030:	6128      	str	r0, [r5, #16]
 801a032:	b920      	cbnz	r0, 801a03e <_svfiprintf_r+0x2e>
 801a034:	230c      	movs	r3, #12
 801a036:	603b      	str	r3, [r7, #0]
 801a038:	f04f 30ff 	mov.w	r0, #4294967295
 801a03c:	e0d1      	b.n	801a1e2 <_svfiprintf_r+0x1d2>
 801a03e:	2340      	movs	r3, #64	; 0x40
 801a040:	616b      	str	r3, [r5, #20]
 801a042:	2300      	movs	r3, #0
 801a044:	9309      	str	r3, [sp, #36]	; 0x24
 801a046:	2320      	movs	r3, #32
 801a048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a04c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a050:	2330      	movs	r3, #48	; 0x30
 801a052:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a1fc <_svfiprintf_r+0x1ec>
 801a056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a05a:	f04f 0901 	mov.w	r9, #1
 801a05e:	4623      	mov	r3, r4
 801a060:	469a      	mov	sl, r3
 801a062:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a066:	b10a      	cbz	r2, 801a06c <_svfiprintf_r+0x5c>
 801a068:	2a25      	cmp	r2, #37	; 0x25
 801a06a:	d1f9      	bne.n	801a060 <_svfiprintf_r+0x50>
 801a06c:	ebba 0b04 	subs.w	fp, sl, r4
 801a070:	d00b      	beq.n	801a08a <_svfiprintf_r+0x7a>
 801a072:	465b      	mov	r3, fp
 801a074:	4622      	mov	r2, r4
 801a076:	4629      	mov	r1, r5
 801a078:	4638      	mov	r0, r7
 801a07a:	f7ff ff6e 	bl	8019f5a <__ssputs_r>
 801a07e:	3001      	adds	r0, #1
 801a080:	f000 80aa 	beq.w	801a1d8 <_svfiprintf_r+0x1c8>
 801a084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a086:	445a      	add	r2, fp
 801a088:	9209      	str	r2, [sp, #36]	; 0x24
 801a08a:	f89a 3000 	ldrb.w	r3, [sl]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	f000 80a2 	beq.w	801a1d8 <_svfiprintf_r+0x1c8>
 801a094:	2300      	movs	r3, #0
 801a096:	f04f 32ff 	mov.w	r2, #4294967295
 801a09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a09e:	f10a 0a01 	add.w	sl, sl, #1
 801a0a2:	9304      	str	r3, [sp, #16]
 801a0a4:	9307      	str	r3, [sp, #28]
 801a0a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0aa:	931a      	str	r3, [sp, #104]	; 0x68
 801a0ac:	4654      	mov	r4, sl
 801a0ae:	2205      	movs	r2, #5
 801a0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0b4:	4851      	ldr	r0, [pc, #324]	; (801a1fc <_svfiprintf_r+0x1ec>)
 801a0b6:	f7e6 f8c3 	bl	8000240 <memchr>
 801a0ba:	9a04      	ldr	r2, [sp, #16]
 801a0bc:	b9d8      	cbnz	r0, 801a0f6 <_svfiprintf_r+0xe6>
 801a0be:	06d0      	lsls	r0, r2, #27
 801a0c0:	bf44      	itt	mi
 801a0c2:	2320      	movmi	r3, #32
 801a0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0c8:	0711      	lsls	r1, r2, #28
 801a0ca:	bf44      	itt	mi
 801a0cc:	232b      	movmi	r3, #43	; 0x2b
 801a0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0d2:	f89a 3000 	ldrb.w	r3, [sl]
 801a0d6:	2b2a      	cmp	r3, #42	; 0x2a
 801a0d8:	d015      	beq.n	801a106 <_svfiprintf_r+0xf6>
 801a0da:	9a07      	ldr	r2, [sp, #28]
 801a0dc:	4654      	mov	r4, sl
 801a0de:	2000      	movs	r0, #0
 801a0e0:	f04f 0c0a 	mov.w	ip, #10
 801a0e4:	4621      	mov	r1, r4
 801a0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0ea:	3b30      	subs	r3, #48	; 0x30
 801a0ec:	2b09      	cmp	r3, #9
 801a0ee:	d94e      	bls.n	801a18e <_svfiprintf_r+0x17e>
 801a0f0:	b1b0      	cbz	r0, 801a120 <_svfiprintf_r+0x110>
 801a0f2:	9207      	str	r2, [sp, #28]
 801a0f4:	e014      	b.n	801a120 <_svfiprintf_r+0x110>
 801a0f6:	eba0 0308 	sub.w	r3, r0, r8
 801a0fa:	fa09 f303 	lsl.w	r3, r9, r3
 801a0fe:	4313      	orrs	r3, r2
 801a100:	9304      	str	r3, [sp, #16]
 801a102:	46a2      	mov	sl, r4
 801a104:	e7d2      	b.n	801a0ac <_svfiprintf_r+0x9c>
 801a106:	9b03      	ldr	r3, [sp, #12]
 801a108:	1d19      	adds	r1, r3, #4
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	9103      	str	r1, [sp, #12]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	bfbb      	ittet	lt
 801a112:	425b      	neglt	r3, r3
 801a114:	f042 0202 	orrlt.w	r2, r2, #2
 801a118:	9307      	strge	r3, [sp, #28]
 801a11a:	9307      	strlt	r3, [sp, #28]
 801a11c:	bfb8      	it	lt
 801a11e:	9204      	strlt	r2, [sp, #16]
 801a120:	7823      	ldrb	r3, [r4, #0]
 801a122:	2b2e      	cmp	r3, #46	; 0x2e
 801a124:	d10c      	bne.n	801a140 <_svfiprintf_r+0x130>
 801a126:	7863      	ldrb	r3, [r4, #1]
 801a128:	2b2a      	cmp	r3, #42	; 0x2a
 801a12a:	d135      	bne.n	801a198 <_svfiprintf_r+0x188>
 801a12c:	9b03      	ldr	r3, [sp, #12]
 801a12e:	1d1a      	adds	r2, r3, #4
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	9203      	str	r2, [sp, #12]
 801a134:	2b00      	cmp	r3, #0
 801a136:	bfb8      	it	lt
 801a138:	f04f 33ff 	movlt.w	r3, #4294967295
 801a13c:	3402      	adds	r4, #2
 801a13e:	9305      	str	r3, [sp, #20]
 801a140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a20c <_svfiprintf_r+0x1fc>
 801a144:	7821      	ldrb	r1, [r4, #0]
 801a146:	2203      	movs	r2, #3
 801a148:	4650      	mov	r0, sl
 801a14a:	f7e6 f879 	bl	8000240 <memchr>
 801a14e:	b140      	cbz	r0, 801a162 <_svfiprintf_r+0x152>
 801a150:	2340      	movs	r3, #64	; 0x40
 801a152:	eba0 000a 	sub.w	r0, r0, sl
 801a156:	fa03 f000 	lsl.w	r0, r3, r0
 801a15a:	9b04      	ldr	r3, [sp, #16]
 801a15c:	4303      	orrs	r3, r0
 801a15e:	3401      	adds	r4, #1
 801a160:	9304      	str	r3, [sp, #16]
 801a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a166:	4826      	ldr	r0, [pc, #152]	; (801a200 <_svfiprintf_r+0x1f0>)
 801a168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a16c:	2206      	movs	r2, #6
 801a16e:	f7e6 f867 	bl	8000240 <memchr>
 801a172:	2800      	cmp	r0, #0
 801a174:	d038      	beq.n	801a1e8 <_svfiprintf_r+0x1d8>
 801a176:	4b23      	ldr	r3, [pc, #140]	; (801a204 <_svfiprintf_r+0x1f4>)
 801a178:	bb1b      	cbnz	r3, 801a1c2 <_svfiprintf_r+0x1b2>
 801a17a:	9b03      	ldr	r3, [sp, #12]
 801a17c:	3307      	adds	r3, #7
 801a17e:	f023 0307 	bic.w	r3, r3, #7
 801a182:	3308      	adds	r3, #8
 801a184:	9303      	str	r3, [sp, #12]
 801a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a188:	4433      	add	r3, r6
 801a18a:	9309      	str	r3, [sp, #36]	; 0x24
 801a18c:	e767      	b.n	801a05e <_svfiprintf_r+0x4e>
 801a18e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a192:	460c      	mov	r4, r1
 801a194:	2001      	movs	r0, #1
 801a196:	e7a5      	b.n	801a0e4 <_svfiprintf_r+0xd4>
 801a198:	2300      	movs	r3, #0
 801a19a:	3401      	adds	r4, #1
 801a19c:	9305      	str	r3, [sp, #20]
 801a19e:	4619      	mov	r1, r3
 801a1a0:	f04f 0c0a 	mov.w	ip, #10
 801a1a4:	4620      	mov	r0, r4
 801a1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1aa:	3a30      	subs	r2, #48	; 0x30
 801a1ac:	2a09      	cmp	r2, #9
 801a1ae:	d903      	bls.n	801a1b8 <_svfiprintf_r+0x1a8>
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d0c5      	beq.n	801a140 <_svfiprintf_r+0x130>
 801a1b4:	9105      	str	r1, [sp, #20]
 801a1b6:	e7c3      	b.n	801a140 <_svfiprintf_r+0x130>
 801a1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1bc:	4604      	mov	r4, r0
 801a1be:	2301      	movs	r3, #1
 801a1c0:	e7f0      	b.n	801a1a4 <_svfiprintf_r+0x194>
 801a1c2:	ab03      	add	r3, sp, #12
 801a1c4:	9300      	str	r3, [sp, #0]
 801a1c6:	462a      	mov	r2, r5
 801a1c8:	4b0f      	ldr	r3, [pc, #60]	; (801a208 <_svfiprintf_r+0x1f8>)
 801a1ca:	a904      	add	r1, sp, #16
 801a1cc:	4638      	mov	r0, r7
 801a1ce:	f7fb fecd 	bl	8015f6c <_printf_float>
 801a1d2:	1c42      	adds	r2, r0, #1
 801a1d4:	4606      	mov	r6, r0
 801a1d6:	d1d6      	bne.n	801a186 <_svfiprintf_r+0x176>
 801a1d8:	89ab      	ldrh	r3, [r5, #12]
 801a1da:	065b      	lsls	r3, r3, #25
 801a1dc:	f53f af2c 	bmi.w	801a038 <_svfiprintf_r+0x28>
 801a1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1e2:	b01d      	add	sp, #116	; 0x74
 801a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1e8:	ab03      	add	r3, sp, #12
 801a1ea:	9300      	str	r3, [sp, #0]
 801a1ec:	462a      	mov	r2, r5
 801a1ee:	4b06      	ldr	r3, [pc, #24]	; (801a208 <_svfiprintf_r+0x1f8>)
 801a1f0:	a904      	add	r1, sp, #16
 801a1f2:	4638      	mov	r0, r7
 801a1f4:	f7fc f95e 	bl	80164b4 <_printf_i>
 801a1f8:	e7eb      	b.n	801a1d2 <_svfiprintf_r+0x1c2>
 801a1fa:	bf00      	nop
 801a1fc:	08039fc8 	.word	0x08039fc8
 801a200:	08039fd2 	.word	0x08039fd2
 801a204:	08015f6d 	.word	0x08015f6d
 801a208:	08019f5b 	.word	0x08019f5b
 801a20c:	08039fce 	.word	0x08039fce

0801a210 <__sread>:
 801a210:	b510      	push	{r4, lr}
 801a212:	460c      	mov	r4, r1
 801a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a218:	f000 f8a8 	bl	801a36c <_read_r>
 801a21c:	2800      	cmp	r0, #0
 801a21e:	bfab      	itete	ge
 801a220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a222:	89a3      	ldrhlt	r3, [r4, #12]
 801a224:	181b      	addge	r3, r3, r0
 801a226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a22a:	bfac      	ite	ge
 801a22c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a22e:	81a3      	strhlt	r3, [r4, #12]
 801a230:	bd10      	pop	{r4, pc}

0801a232 <__swrite>:
 801a232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a236:	461f      	mov	r7, r3
 801a238:	898b      	ldrh	r3, [r1, #12]
 801a23a:	05db      	lsls	r3, r3, #23
 801a23c:	4605      	mov	r5, r0
 801a23e:	460c      	mov	r4, r1
 801a240:	4616      	mov	r6, r2
 801a242:	d505      	bpl.n	801a250 <__swrite+0x1e>
 801a244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a248:	2302      	movs	r3, #2
 801a24a:	2200      	movs	r2, #0
 801a24c:	f000 f874 	bl	801a338 <_lseek_r>
 801a250:	89a3      	ldrh	r3, [r4, #12]
 801a252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a25a:	81a3      	strh	r3, [r4, #12]
 801a25c:	4632      	mov	r2, r6
 801a25e:	463b      	mov	r3, r7
 801a260:	4628      	mov	r0, r5
 801a262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a266:	f000 b823 	b.w	801a2b0 <_write_r>

0801a26a <__sseek>:
 801a26a:	b510      	push	{r4, lr}
 801a26c:	460c      	mov	r4, r1
 801a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a272:	f000 f861 	bl	801a338 <_lseek_r>
 801a276:	1c43      	adds	r3, r0, #1
 801a278:	89a3      	ldrh	r3, [r4, #12]
 801a27a:	bf15      	itete	ne
 801a27c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a27e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a286:	81a3      	strheq	r3, [r4, #12]
 801a288:	bf18      	it	ne
 801a28a:	81a3      	strhne	r3, [r4, #12]
 801a28c:	bd10      	pop	{r4, pc}

0801a28e <__sclose>:
 801a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a292:	f000 b81f 	b.w	801a2d4 <_close_r>

0801a296 <__ascii_wctomb>:
 801a296:	b149      	cbz	r1, 801a2ac <__ascii_wctomb+0x16>
 801a298:	2aff      	cmp	r2, #255	; 0xff
 801a29a:	bf85      	ittet	hi
 801a29c:	238a      	movhi	r3, #138	; 0x8a
 801a29e:	6003      	strhi	r3, [r0, #0]
 801a2a0:	700a      	strbls	r2, [r1, #0]
 801a2a2:	f04f 30ff 	movhi.w	r0, #4294967295
 801a2a6:	bf98      	it	ls
 801a2a8:	2001      	movls	r0, #1
 801a2aa:	4770      	bx	lr
 801a2ac:	4608      	mov	r0, r1
 801a2ae:	4770      	bx	lr

0801a2b0 <_write_r>:
 801a2b0:	b538      	push	{r3, r4, r5, lr}
 801a2b2:	4d07      	ldr	r5, [pc, #28]	; (801a2d0 <_write_r+0x20>)
 801a2b4:	4604      	mov	r4, r0
 801a2b6:	4608      	mov	r0, r1
 801a2b8:	4611      	mov	r1, r2
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	602a      	str	r2, [r5, #0]
 801a2be:	461a      	mov	r2, r3
 801a2c0:	f7ec fc5d 	bl	8006b7e <_write>
 801a2c4:	1c43      	adds	r3, r0, #1
 801a2c6:	d102      	bne.n	801a2ce <_write_r+0x1e>
 801a2c8:	682b      	ldr	r3, [r5, #0]
 801a2ca:	b103      	cbz	r3, 801a2ce <_write_r+0x1e>
 801a2cc:	6023      	str	r3, [r4, #0]
 801a2ce:	bd38      	pop	{r3, r4, r5, pc}
 801a2d0:	20000934 	.word	0x20000934

0801a2d4 <_close_r>:
 801a2d4:	b538      	push	{r3, r4, r5, lr}
 801a2d6:	4d06      	ldr	r5, [pc, #24]	; (801a2f0 <_close_r+0x1c>)
 801a2d8:	2300      	movs	r3, #0
 801a2da:	4604      	mov	r4, r0
 801a2dc:	4608      	mov	r0, r1
 801a2de:	602b      	str	r3, [r5, #0]
 801a2e0:	f7ec fc69 	bl	8006bb6 <_close>
 801a2e4:	1c43      	adds	r3, r0, #1
 801a2e6:	d102      	bne.n	801a2ee <_close_r+0x1a>
 801a2e8:	682b      	ldr	r3, [r5, #0]
 801a2ea:	b103      	cbz	r3, 801a2ee <_close_r+0x1a>
 801a2ec:	6023      	str	r3, [r4, #0]
 801a2ee:	bd38      	pop	{r3, r4, r5, pc}
 801a2f0:	20000934 	.word	0x20000934

0801a2f4 <_fstat_r>:
 801a2f4:	b538      	push	{r3, r4, r5, lr}
 801a2f6:	4d07      	ldr	r5, [pc, #28]	; (801a314 <_fstat_r+0x20>)
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	4604      	mov	r4, r0
 801a2fc:	4608      	mov	r0, r1
 801a2fe:	4611      	mov	r1, r2
 801a300:	602b      	str	r3, [r5, #0]
 801a302:	f7ec fc64 	bl	8006bce <_fstat>
 801a306:	1c43      	adds	r3, r0, #1
 801a308:	d102      	bne.n	801a310 <_fstat_r+0x1c>
 801a30a:	682b      	ldr	r3, [r5, #0]
 801a30c:	b103      	cbz	r3, 801a310 <_fstat_r+0x1c>
 801a30e:	6023      	str	r3, [r4, #0]
 801a310:	bd38      	pop	{r3, r4, r5, pc}
 801a312:	bf00      	nop
 801a314:	20000934 	.word	0x20000934

0801a318 <_isatty_r>:
 801a318:	b538      	push	{r3, r4, r5, lr}
 801a31a:	4d06      	ldr	r5, [pc, #24]	; (801a334 <_isatty_r+0x1c>)
 801a31c:	2300      	movs	r3, #0
 801a31e:	4604      	mov	r4, r0
 801a320:	4608      	mov	r0, r1
 801a322:	602b      	str	r3, [r5, #0]
 801a324:	f7ec fc63 	bl	8006bee <_isatty>
 801a328:	1c43      	adds	r3, r0, #1
 801a32a:	d102      	bne.n	801a332 <_isatty_r+0x1a>
 801a32c:	682b      	ldr	r3, [r5, #0]
 801a32e:	b103      	cbz	r3, 801a332 <_isatty_r+0x1a>
 801a330:	6023      	str	r3, [r4, #0]
 801a332:	bd38      	pop	{r3, r4, r5, pc}
 801a334:	20000934 	.word	0x20000934

0801a338 <_lseek_r>:
 801a338:	b538      	push	{r3, r4, r5, lr}
 801a33a:	4d07      	ldr	r5, [pc, #28]	; (801a358 <_lseek_r+0x20>)
 801a33c:	4604      	mov	r4, r0
 801a33e:	4608      	mov	r0, r1
 801a340:	4611      	mov	r1, r2
 801a342:	2200      	movs	r2, #0
 801a344:	602a      	str	r2, [r5, #0]
 801a346:	461a      	mov	r2, r3
 801a348:	f7ec fc5c 	bl	8006c04 <_lseek>
 801a34c:	1c43      	adds	r3, r0, #1
 801a34e:	d102      	bne.n	801a356 <_lseek_r+0x1e>
 801a350:	682b      	ldr	r3, [r5, #0]
 801a352:	b103      	cbz	r3, 801a356 <_lseek_r+0x1e>
 801a354:	6023      	str	r3, [r4, #0]
 801a356:	bd38      	pop	{r3, r4, r5, pc}
 801a358:	20000934 	.word	0x20000934

0801a35c <_malloc_usable_size_r>:
 801a35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a360:	1f18      	subs	r0, r3, #4
 801a362:	2b00      	cmp	r3, #0
 801a364:	bfbc      	itt	lt
 801a366:	580b      	ldrlt	r3, [r1, r0]
 801a368:	18c0      	addlt	r0, r0, r3
 801a36a:	4770      	bx	lr

0801a36c <_read_r>:
 801a36c:	b538      	push	{r3, r4, r5, lr}
 801a36e:	4d07      	ldr	r5, [pc, #28]	; (801a38c <_read_r+0x20>)
 801a370:	4604      	mov	r4, r0
 801a372:	4608      	mov	r0, r1
 801a374:	4611      	mov	r1, r2
 801a376:	2200      	movs	r2, #0
 801a378:	602a      	str	r2, [r5, #0]
 801a37a:	461a      	mov	r2, r3
 801a37c:	f7ec fbe2 	bl	8006b44 <_read>
 801a380:	1c43      	adds	r3, r0, #1
 801a382:	d102      	bne.n	801a38a <_read_r+0x1e>
 801a384:	682b      	ldr	r3, [r5, #0]
 801a386:	b103      	cbz	r3, 801a38a <_read_r+0x1e>
 801a388:	6023      	str	r3, [r4, #0]
 801a38a:	bd38      	pop	{r3, r4, r5, pc}
 801a38c:	20000934 	.word	0x20000934

0801a390 <_init>:
 801a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a392:	bf00      	nop
 801a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a396:	bc08      	pop	{r3}
 801a398:	469e      	mov	lr, r3
 801a39a:	4770      	bx	lr

0801a39c <_fini>:
 801a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a39e:	bf00      	nop
 801a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3a2:	bc08      	pop	{r3}
 801a3a4:	469e      	mov	lr, r3
 801a3a6:	4770      	bx	lr
